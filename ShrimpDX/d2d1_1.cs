// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public static partial class Constants {
        // unknown type: D2D1_INVALID_PROPERTY_INDEX UINT_MAX
    }
    public class ID2D1Device: ID2D1Resource
    {
        static Guid s_uuid = new Guid("47dd575d-ac05-4cdd-8049-9b02cd16f44c");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int CreateDeviceContext(
            D2D1_DEVICE_CONTEXT_OPTIONS options,
            out ID2D1DeviceContext deviceContext
        ){
            var fp = GetFunctionPointer(4);
            var callback = (CreateDeviceContextFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateDeviceContextFunc));
            deviceContext = new ID2D1DeviceContext();
            return callback(m_ptr, options, out deviceContext.PtrForNew);
        }
        delegate int CreateDeviceContextFunc(IntPtr self, D2D1_DEVICE_CONTEXT_OPTIONS options, out IntPtr deviceContext);

        public virtual int CreatePrintControl(
            IWICImagingFactory wicFactory,
            IPrintDocumentPackageTarget documentTarget,
            ref D2D1_PRINT_CONTROL_PROPERTIES printControlProperties,
            out ID2D1PrintControl printControl
        ){
            var fp = GetFunctionPointer(5);
            var callback = (CreatePrintControlFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreatePrintControlFunc));
            printControl = new ID2D1PrintControl();
            return callback(m_ptr, wicFactory!=null ? wicFactory.Ptr : IntPtr.Zero, documentTarget!=null ? documentTarget.Ptr : IntPtr.Zero, ref printControlProperties, out printControl.PtrForNew);
        }
        delegate int CreatePrintControlFunc(IntPtr self, IntPtr wicFactory, IntPtr documentTarget, ref D2D1_PRINT_CONTROL_PROPERTIES printControlProperties, out IntPtr printControl);

        public virtual void SetMaximumTextureMemory(
            ulong maximumInBytes
        ){
            var fp = GetFunctionPointer(6);
            var callback = (SetMaximumTextureMemoryFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetMaximumTextureMemoryFunc));
            
            callback(m_ptr, maximumInBytes);
        }
        delegate void SetMaximumTextureMemoryFunc(IntPtr self, ulong maximumInBytes);

        public virtual ulong GetMaximumTextureMemory(
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetMaximumTextureMemoryFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMaximumTextureMemoryFunc));
            
            return callback(m_ptr);
        }
        delegate ulong GetMaximumTextureMemoryFunc(IntPtr self);

        public virtual void ClearResources(
            uint millisecondsSinceUse
        ){
            var fp = GetFunctionPointer(8);
            var callback = (ClearResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ClearResourcesFunc));
            
            callback(m_ptr, millisecondsSinceUse);
        }
        delegate void ClearResourcesFunc(IntPtr self, uint millisecondsSinceUse);

    }
    public enum D2D1_DEVICE_CONTEXT_OPTIONS // 1
    {
        _NONE = 0x0,
        _ENABLE_MULTITHREADED_OPTIMIZATIONS = 0x1,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public class ID2D1DeviceContext: ID2D1RenderTarget
    {
        static Guid s_uuid = new Guid("e8f7fe7a-191c-466d-ad95-975678bda998");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int CreateBitmap(
            D2D_SIZE_U size,
            IntPtr sourceData,
            uint pitch,
            ref D2D1_BITMAP_PROPERTIES1 bitmapProperties,
            out ID2D1Bitmap1 bitmap
        ){
            var fp = GetFunctionPointer(57);
            var callback = (CreateBitmapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateBitmapFunc));
            bitmap = new ID2D1Bitmap1();
            return callback(m_ptr, size, sourceData, pitch, ref bitmapProperties, out bitmap.PtrForNew);
        }
        delegate int CreateBitmapFunc(IntPtr self, D2D_SIZE_U size, IntPtr sourceData, uint pitch, ref D2D1_BITMAP_PROPERTIES1 bitmapProperties, out IntPtr bitmap);

        public virtual int CreateBitmapFromWicBitmap(
            IWICBitmapSource wicBitmapSource,
            ref D2D1_BITMAP_PROPERTIES1 bitmapProperties,
            out ID2D1Bitmap1 bitmap
        ){
            var fp = GetFunctionPointer(58);
            var callback = (CreateBitmapFromWicBitmapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateBitmapFromWicBitmapFunc));
            bitmap = new ID2D1Bitmap1();
            return callback(m_ptr, wicBitmapSource!=null ? wicBitmapSource.Ptr : IntPtr.Zero, ref bitmapProperties, out bitmap.PtrForNew);
        }
        delegate int CreateBitmapFromWicBitmapFunc(IntPtr self, IntPtr wicBitmapSource, ref D2D1_BITMAP_PROPERTIES1 bitmapProperties, out IntPtr bitmap);

        public virtual int CreateColorContext(
            D2D1_COLOR_SPACE space,
            ref byte profile,
            uint profileSize,
            out ID2D1ColorContext colorContext
        ){
            var fp = GetFunctionPointer(59);
            var callback = (CreateColorContextFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateColorContextFunc));
            colorContext = new ID2D1ColorContext();
            return callback(m_ptr, space, ref profile, profileSize, out colorContext.PtrForNew);
        }
        delegate int CreateColorContextFunc(IntPtr self, D2D1_COLOR_SPACE space, ref byte profile, uint profileSize, out IntPtr colorContext);

        public virtual int CreateColorContextFromFilename(
            ref ushort filename,
            out ID2D1ColorContext colorContext
        ){
            var fp = GetFunctionPointer(60);
            var callback = (CreateColorContextFromFilenameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateColorContextFromFilenameFunc));
            colorContext = new ID2D1ColorContext();
            return callback(m_ptr, ref filename, out colorContext.PtrForNew);
        }
        delegate int CreateColorContextFromFilenameFunc(IntPtr self, ref ushort filename, out IntPtr colorContext);

        public virtual int CreateColorContextFromWicColorContext(
            IWICColorContext wicColorContext,
            out ID2D1ColorContext colorContext
        ){
            var fp = GetFunctionPointer(61);
            var callback = (CreateColorContextFromWicColorContextFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateColorContextFromWicColorContextFunc));
            colorContext = new ID2D1ColorContext();
            return callback(m_ptr, wicColorContext!=null ? wicColorContext.Ptr : IntPtr.Zero, out colorContext.PtrForNew);
        }
        delegate int CreateColorContextFromWicColorContextFunc(IntPtr self, IntPtr wicColorContext, out IntPtr colorContext);

        public virtual int CreateBitmapFromDxgiSurface(
            IDXGISurface surface,
            ref D2D1_BITMAP_PROPERTIES1 bitmapProperties,
            out ID2D1Bitmap1 bitmap
        ){
            var fp = GetFunctionPointer(62);
            var callback = (CreateBitmapFromDxgiSurfaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateBitmapFromDxgiSurfaceFunc));
            bitmap = new ID2D1Bitmap1();
            return callback(m_ptr, surface!=null ? surface.Ptr : IntPtr.Zero, ref bitmapProperties, out bitmap.PtrForNew);
        }
        delegate int CreateBitmapFromDxgiSurfaceFunc(IntPtr self, IntPtr surface, ref D2D1_BITMAP_PROPERTIES1 bitmapProperties, out IntPtr bitmap);

        public virtual int CreateEffect(
            ref Guid effectId,
            out ID2D1Effect effect
        ){
            var fp = GetFunctionPointer(63);
            var callback = (CreateEffectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateEffectFunc));
            effect = new ID2D1Effect();
            return callback(m_ptr, ref effectId, out effect.PtrForNew);
        }
        delegate int CreateEffectFunc(IntPtr self, ref Guid effectId, out IntPtr effect);

        public virtual int CreateGradientStopCollection(
            ref D2D1_GRADIENT_STOP straightAlphaGradientStops,
            uint straightAlphaGradientStopsCount,
            D2D1_COLOR_SPACE preInterpolationSpace,
            D2D1_COLOR_SPACE postInterpolationSpace,
            D2D1_BUFFER_PRECISION bufferPrecision,
            D2D1_EXTEND_MODE extendMode,
            D2D1_COLOR_INTERPOLATION_MODE colorInterpolationMode,
            out ID2D1GradientStopCollection1 gradientStopCollection1
        ){
            var fp = GetFunctionPointer(64);
            var callback = (CreateGradientStopCollectionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateGradientStopCollectionFunc));
            gradientStopCollection1 = new ID2D1GradientStopCollection1();
            return callback(m_ptr, ref straightAlphaGradientStops, straightAlphaGradientStopsCount, preInterpolationSpace, postInterpolationSpace, bufferPrecision, extendMode, colorInterpolationMode, out gradientStopCollection1.PtrForNew);
        }
        delegate int CreateGradientStopCollectionFunc(IntPtr self, ref D2D1_GRADIENT_STOP straightAlphaGradientStops, uint straightAlphaGradientStopsCount, D2D1_COLOR_SPACE preInterpolationSpace, D2D1_COLOR_SPACE postInterpolationSpace, D2D1_BUFFER_PRECISION bufferPrecision, D2D1_EXTEND_MODE extendMode, D2D1_COLOR_INTERPOLATION_MODE colorInterpolationMode, out IntPtr gradientStopCollection1);

        public virtual int CreateImageBrush(
            ID2D1Image image,
            ref D2D1_IMAGE_BRUSH_PROPERTIES imageBrushProperties,
            ref D2D1_BRUSH_PROPERTIES brushProperties,
            out ID2D1ImageBrush imageBrush
        ){
            var fp = GetFunctionPointer(65);
            var callback = (CreateImageBrushFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateImageBrushFunc));
            imageBrush = new ID2D1ImageBrush();
            return callback(m_ptr, image!=null ? image.Ptr : IntPtr.Zero, ref imageBrushProperties, ref brushProperties, out imageBrush.PtrForNew);
        }
        delegate int CreateImageBrushFunc(IntPtr self, IntPtr image, ref D2D1_IMAGE_BRUSH_PROPERTIES imageBrushProperties, ref D2D1_BRUSH_PROPERTIES brushProperties, out IntPtr imageBrush);

        public virtual int CreateBitmapBrush(
            ID2D1Bitmap bitmap,
            ref D2D1_BITMAP_BRUSH_PROPERTIES1 bitmapBrushProperties,
            ref D2D1_BRUSH_PROPERTIES brushProperties,
            out ID2D1BitmapBrush1 bitmapBrush
        ){
            var fp = GetFunctionPointer(66);
            var callback = (CreateBitmapBrushFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateBitmapBrushFunc));
            bitmapBrush = new ID2D1BitmapBrush1();
            return callback(m_ptr, bitmap!=null ? bitmap.Ptr : IntPtr.Zero, ref bitmapBrushProperties, ref brushProperties, out bitmapBrush.PtrForNew);
        }
        delegate int CreateBitmapBrushFunc(IntPtr self, IntPtr bitmap, ref D2D1_BITMAP_BRUSH_PROPERTIES1 bitmapBrushProperties, ref D2D1_BRUSH_PROPERTIES brushProperties, out IntPtr bitmapBrush);

        public virtual int CreateCommandList(
            out ID2D1CommandList commandList
        ){
            var fp = GetFunctionPointer(67);
            var callback = (CreateCommandListFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateCommandListFunc));
            commandList = new ID2D1CommandList();
            return callback(m_ptr, out commandList.PtrForNew);
        }
        delegate int CreateCommandListFunc(IntPtr self, out IntPtr commandList);

        public virtual int IsDxgiFormatSupported(
            DXGI_FORMAT format
        ){
            var fp = GetFunctionPointer(68);
            var callback = (IsDxgiFormatSupportedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsDxgiFormatSupportedFunc));
            
            return callback(m_ptr, format);
        }
        delegate int IsDxgiFormatSupportedFunc(IntPtr self, DXGI_FORMAT format);

        public virtual int IsBufferPrecisionSupported(
            D2D1_BUFFER_PRECISION bufferPrecision
        ){
            var fp = GetFunctionPointer(69);
            var callback = (IsBufferPrecisionSupportedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsBufferPrecisionSupportedFunc));
            
            return callback(m_ptr, bufferPrecision);
        }
        delegate int IsBufferPrecisionSupportedFunc(IntPtr self, D2D1_BUFFER_PRECISION bufferPrecision);

        public virtual int GetImageLocalBounds(
            ID2D1Image image,
            out System.Numerics.Vector4 localBounds
        ){
            var fp = GetFunctionPointer(70);
            var callback = (GetImageLocalBoundsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetImageLocalBoundsFunc));
            
            return callback(m_ptr, image!=null ? image.Ptr : IntPtr.Zero, out localBounds);
        }
        delegate int GetImageLocalBoundsFunc(IntPtr self, IntPtr image, out System.Numerics.Vector4 localBounds);

        public virtual int GetImageWorldBounds(
            ID2D1Image image,
            out System.Numerics.Vector4 worldBounds
        ){
            var fp = GetFunctionPointer(71);
            var callback = (GetImageWorldBoundsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetImageWorldBoundsFunc));
            
            return callback(m_ptr, image!=null ? image.Ptr : IntPtr.Zero, out worldBounds);
        }
        delegate int GetImageWorldBoundsFunc(IntPtr self, IntPtr image, out System.Numerics.Vector4 worldBounds);

        public virtual int GetGlyphRunWorldBounds(
            System.Numerics.Vector2 baselineOrigin,
            ref DWRITE_GLYPH_RUN glyphRun,
            DWRITE_MEASURING_MODE measuringMode,
            out System.Numerics.Vector4 bounds
        ){
            var fp = GetFunctionPointer(72);
            var callback = (GetGlyphRunWorldBoundsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetGlyphRunWorldBoundsFunc));
            
            return callback(m_ptr, baselineOrigin, ref glyphRun, measuringMode, out bounds);
        }
        delegate int GetGlyphRunWorldBoundsFunc(IntPtr self, System.Numerics.Vector2 baselineOrigin, ref DWRITE_GLYPH_RUN glyphRun, DWRITE_MEASURING_MODE measuringMode, out System.Numerics.Vector4 bounds);

        public virtual void GetDevice(
            out ID2D1Device device
        ){
            var fp = GetFunctionPointer(73);
            var callback = (GetDeviceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDeviceFunc));
            device = new ID2D1Device();
            callback(m_ptr, out device.PtrForNew);
        }
        delegate void GetDeviceFunc(IntPtr self, out IntPtr device);

        public virtual void SetTarget(
            ID2D1Image image
        ){
            var fp = GetFunctionPointer(74);
            var callback = (SetTargetFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetTargetFunc));
            
            callback(m_ptr, image!=null ? image.Ptr : IntPtr.Zero);
        }
        delegate void SetTargetFunc(IntPtr self, IntPtr image);

        public virtual void GetTarget(
            out ID2D1Image image
        ){
            var fp = GetFunctionPointer(75);
            var callback = (GetTargetFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTargetFunc));
            image = new ID2D1Image();
            callback(m_ptr, out image.PtrForNew);
        }
        delegate void GetTargetFunc(IntPtr self, out IntPtr image);

        public virtual void SetRenderingControls(
            ref D2D1_RENDERING_CONTROLS renderingControls
        ){
            var fp = GetFunctionPointer(76);
            var callback = (SetRenderingControlsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetRenderingControlsFunc));
            
            callback(m_ptr, ref renderingControls);
        }
        delegate void SetRenderingControlsFunc(IntPtr self, ref D2D1_RENDERING_CONTROLS renderingControls);

        public virtual void GetRenderingControls(
            out D2D1_RENDERING_CONTROLS renderingControls
        ){
            var fp = GetFunctionPointer(77);
            var callback = (GetRenderingControlsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetRenderingControlsFunc));
            
            callback(m_ptr, out renderingControls);
        }
        delegate void GetRenderingControlsFunc(IntPtr self, out D2D1_RENDERING_CONTROLS renderingControls);

        public virtual void SetPrimitiveBlend(
            D2D1_PRIMITIVE_BLEND primitiveBlend
        ){
            var fp = GetFunctionPointer(78);
            var callback = (SetPrimitiveBlendFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetPrimitiveBlendFunc));
            
            callback(m_ptr, primitiveBlend);
        }
        delegate void SetPrimitiveBlendFunc(IntPtr self, D2D1_PRIMITIVE_BLEND primitiveBlend);

        public virtual D2D1_PRIMITIVE_BLEND GetPrimitiveBlend(
        ){
            var fp = GetFunctionPointer(79);
            var callback = (GetPrimitiveBlendFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPrimitiveBlendFunc));
            
            return callback(m_ptr);
        }
        delegate D2D1_PRIMITIVE_BLEND GetPrimitiveBlendFunc(IntPtr self);

        public virtual void SetUnitMode(
            D2D1_UNIT_MODE unitMode
        ){
            var fp = GetFunctionPointer(80);
            var callback = (SetUnitModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetUnitModeFunc));
            
            callback(m_ptr, unitMode);
        }
        delegate void SetUnitModeFunc(IntPtr self, D2D1_UNIT_MODE unitMode);

        public virtual D2D1_UNIT_MODE GetUnitMode(
        ){
            var fp = GetFunctionPointer(81);
            var callback = (GetUnitModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetUnitModeFunc));
            
            return callback(m_ptr);
        }
        delegate D2D1_UNIT_MODE GetUnitModeFunc(IntPtr self);

        public virtual void DrawGlyphRun(
            System.Numerics.Vector2 baselineOrigin,
            ref DWRITE_GLYPH_RUN glyphRun,
            ref DWRITE_GLYPH_RUN_DESCRIPTION glyphRunDescription,
            ID2D1Brush foregroundBrush,
            DWRITE_MEASURING_MODE measuringMode
        ){
            var fp = GetFunctionPointer(82);
            var callback = (DrawGlyphRunFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawGlyphRunFunc));
            
            callback(m_ptr, baselineOrigin, ref glyphRun, ref glyphRunDescription, foregroundBrush!=null ? foregroundBrush.Ptr : IntPtr.Zero, measuringMode);
        }
        delegate void DrawGlyphRunFunc(IntPtr self, System.Numerics.Vector2 baselineOrigin, ref DWRITE_GLYPH_RUN glyphRun, ref DWRITE_GLYPH_RUN_DESCRIPTION glyphRunDescription, IntPtr foregroundBrush, DWRITE_MEASURING_MODE measuringMode);

        public virtual void DrawImage(
            ID2D1Image image,
            ref System.Numerics.Vector2 targetOffset,
            ref System.Numerics.Vector4 imageRectangle,
            D2D1_INTERPOLATION_MODE interpolationMode,
            D2D1_COMPOSITE_MODE compositeMode
        ){
            var fp = GetFunctionPointer(83);
            var callback = (DrawImageFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawImageFunc));
            
            callback(m_ptr, image!=null ? image.Ptr : IntPtr.Zero, ref targetOffset, ref imageRectangle, interpolationMode, compositeMode);
        }
        delegate void DrawImageFunc(IntPtr self, IntPtr image, ref System.Numerics.Vector2 targetOffset, ref System.Numerics.Vector4 imageRectangle, D2D1_INTERPOLATION_MODE interpolationMode, D2D1_COMPOSITE_MODE compositeMode);

        public virtual void DrawGdiMetafile(
            ID2D1GdiMetafile gdiMetafile,
            ref System.Numerics.Vector2 targetOffset
        ){
            var fp = GetFunctionPointer(84);
            var callback = (DrawGdiMetafileFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawGdiMetafileFunc));
            
            callback(m_ptr, gdiMetafile!=null ? gdiMetafile.Ptr : IntPtr.Zero, ref targetOffset);
        }
        delegate void DrawGdiMetafileFunc(IntPtr self, IntPtr gdiMetafile, ref System.Numerics.Vector2 targetOffset);

        public virtual void DrawBitmap(
            ID2D1Bitmap bitmap,
            ref System.Numerics.Vector4 destinationRectangle,
            float opacity,
            D2D1_INTERPOLATION_MODE interpolationMode,
            ref System.Numerics.Vector4 sourceRectangle,
            ref D2D_MATRIX_4X4_F perspectiveTransform
        ){
            var fp = GetFunctionPointer(85);
            var callback = (DrawBitmapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawBitmapFunc));
            
            callback(m_ptr, bitmap!=null ? bitmap.Ptr : IntPtr.Zero, ref destinationRectangle, opacity, interpolationMode, ref sourceRectangle, ref perspectiveTransform);
        }
        delegate void DrawBitmapFunc(IntPtr self, IntPtr bitmap, ref System.Numerics.Vector4 destinationRectangle, float opacity, D2D1_INTERPOLATION_MODE interpolationMode, ref System.Numerics.Vector4 sourceRectangle, ref D2D_MATRIX_4X4_F perspectiveTransform);

        public virtual void PushLayer(
            ref D2D1_LAYER_PARAMETERS1 layerParameters,
            ID2D1Layer layer
        ){
            var fp = GetFunctionPointer(86);
            var callback = (PushLayerFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PushLayerFunc));
            
            callback(m_ptr, ref layerParameters, layer!=null ? layer.Ptr : IntPtr.Zero);
        }
        delegate void PushLayerFunc(IntPtr self, ref D2D1_LAYER_PARAMETERS1 layerParameters, IntPtr layer);

        public virtual int InvalidateEffectInputRectangle(
            ID2D1Effect effect,
            uint input,
            ref System.Numerics.Vector4 inputRectangle
        ){
            var fp = GetFunctionPointer(87);
            var callback = (InvalidateEffectInputRectangleFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(InvalidateEffectInputRectangleFunc));
            
            return callback(m_ptr, effect!=null ? effect.Ptr : IntPtr.Zero, input, ref inputRectangle);
        }
        delegate int InvalidateEffectInputRectangleFunc(IntPtr self, IntPtr effect, uint input, ref System.Numerics.Vector4 inputRectangle);

        public virtual int GetEffectInvalidRectangleCount(
            ID2D1Effect effect,
            out uint rectangleCount
        ){
            var fp = GetFunctionPointer(88);
            var callback = (GetEffectInvalidRectangleCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetEffectInvalidRectangleCountFunc));
            
            return callback(m_ptr, effect!=null ? effect.Ptr : IntPtr.Zero, out rectangleCount);
        }
        delegate int GetEffectInvalidRectangleCountFunc(IntPtr self, IntPtr effect, out uint rectangleCount);

        public virtual int GetEffectInvalidRectangles(
            ID2D1Effect effect,
            out System.Numerics.Vector4 rectangles,
            uint rectanglesCount
        ){
            var fp = GetFunctionPointer(89);
            var callback = (GetEffectInvalidRectanglesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetEffectInvalidRectanglesFunc));
            
            return callback(m_ptr, effect!=null ? effect.Ptr : IntPtr.Zero, out rectangles, rectanglesCount);
        }
        delegate int GetEffectInvalidRectanglesFunc(IntPtr self, IntPtr effect, out System.Numerics.Vector4 rectangles, uint rectanglesCount);

        public virtual int GetEffectRequiredInputRectangles(
            ID2D1Effect renderEffect,
            ref System.Numerics.Vector4 renderImageRectangle,
            ref D2D1_EFFECT_INPUT_DESCRIPTION inputDescriptions,
            out System.Numerics.Vector4 requiredInputRects,
            uint inputCount
        ){
            var fp = GetFunctionPointer(90);
            var callback = (GetEffectRequiredInputRectanglesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetEffectRequiredInputRectanglesFunc));
            
            return callback(m_ptr, renderEffect!=null ? renderEffect.Ptr : IntPtr.Zero, ref renderImageRectangle, ref inputDescriptions, out requiredInputRects, inputCount);
        }
        delegate int GetEffectRequiredInputRectanglesFunc(IntPtr self, IntPtr renderEffect, ref System.Numerics.Vector4 renderImageRectangle, ref D2D1_EFFECT_INPUT_DESCRIPTION inputDescriptions, out System.Numerics.Vector4 requiredInputRects, uint inputCount);

        public virtual void FillOpacityMask(
            ID2D1Bitmap opacityMask,
            ID2D1Brush brush,
            ref System.Numerics.Vector4 destinationRectangle,
            ref System.Numerics.Vector4 sourceRectangle
        ){
            var fp = GetFunctionPointer(91);
            var callback = (FillOpacityMaskFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FillOpacityMaskFunc));
            
            callback(m_ptr, opacityMask!=null ? opacityMask.Ptr : IntPtr.Zero, brush!=null ? brush.Ptr : IntPtr.Zero, ref destinationRectangle, ref sourceRectangle);
        }
        delegate void FillOpacityMaskFunc(IntPtr self, IntPtr opacityMask, IntPtr brush, ref System.Numerics.Vector4 destinationRectangle, ref System.Numerics.Vector4 sourceRectangle);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_BITMAP_PROPERTIES1 // 1
    {
        public D2D1_PIXEL_FORMAT pixelFormat;
        public float dpiX;
        public float dpiY;
        public D2D1_BITMAP_OPTIONS bitmapOptions;
        public ID2D1ColorContext colorContext;
    }
    public enum D2D1_BITMAP_OPTIONS // 1
    {
        _NONE = 0x0,
        _TARGET = 0x1,
        _CANNOT_DRAW = 0x2,
        _CPU_READ = 0x4,
        _GDI_COMPATIBLE = 0x8,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public class ID2D1ColorContext: ID2D1Resource
    {
        static Guid s_uuid = new Guid("1c4820bb-5771-4518-a581-2fe4dd0ec657");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual D2D1_COLOR_SPACE GetColorSpace(
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetColorSpaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetColorSpaceFunc));
            
            return callback(m_ptr);
        }
        delegate D2D1_COLOR_SPACE GetColorSpaceFunc(IntPtr self);

        public virtual uint GetProfileSize(
        ){
            var fp = GetFunctionPointer(5);
            var callback = (GetProfileSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetProfileSizeFunc));
            
            return callback(m_ptr);
        }
        delegate uint GetProfileSizeFunc(IntPtr self);

        public virtual int GetProfile(
            out byte profile,
            uint profileSize
        ){
            var fp = GetFunctionPointer(6);
            var callback = (GetProfileFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetProfileFunc));
            
            return callback(m_ptr, out profile, profileSize);
        }
        delegate int GetProfileFunc(IntPtr self, out byte profile, uint profileSize);

    }
    public enum D2D1_COLOR_SPACE // 1
    {
        _CUSTOM = 0x0,
        _SRGB = 0x1,
        _SCRGB = 0x2,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public class ID2D1Bitmap1: ID2D1Bitmap
    {
        static Guid s_uuid = new Guid("a898a84c-3873-4588-b08b-ebbf978df041");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual void GetColorContext(
            out ID2D1ColorContext colorContext
        ){
            var fp = GetFunctionPointer(11);
            var callback = (GetColorContextFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetColorContextFunc));
            colorContext = new ID2D1ColorContext();
            callback(m_ptr, out colorContext.PtrForNew);
        }
        delegate void GetColorContextFunc(IntPtr self, out IntPtr colorContext);

        public virtual D2D1_BITMAP_OPTIONS GetOptions(
        ){
            var fp = GetFunctionPointer(12);
            var callback = (GetOptionsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetOptionsFunc));
            
            return callback(m_ptr);
        }
        delegate D2D1_BITMAP_OPTIONS GetOptionsFunc(IntPtr self);

        public virtual int GetSurface(
            out IDXGISurface dxgiSurface
        ){
            var fp = GetFunctionPointer(13);
            var callback = (GetSurfaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetSurfaceFunc));
            dxgiSurface = new IDXGISurface();
            return callback(m_ptr, out dxgiSurface.PtrForNew);
        }
        delegate int GetSurfaceFunc(IntPtr self, out IntPtr dxgiSurface);

        public virtual int Map(
            D2D1_MAP_OPTIONS options,
            out D2D1_MAPPED_RECT mappedRect
        ){
            var fp = GetFunctionPointer(14);
            var callback = (MapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(MapFunc));
            
            return callback(m_ptr, options, out mappedRect);
        }
        delegate int MapFunc(IntPtr self, D2D1_MAP_OPTIONS options, out D2D1_MAPPED_RECT mappedRect);

        public virtual int Unmap(
        ){
            var fp = GetFunctionPointer(15);
            var callback = (UnmapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(UnmapFunc));
            
            return callback(m_ptr);
        }
        delegate int UnmapFunc(IntPtr self);

    }
    public enum D2D1_MAP_OPTIONS // 1
    {
        _NONE = 0x0,
        _READ = 0x1,
        _WRITE = 0x2,
        _DISCARD = 0x4,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_MAPPED_RECT // 1
    {
        public uint pitch;
        public IntPtr bits;
    }
    public class ID2D1Effect: ID2D1Properties
    {
        static Guid s_uuid = new Guid("28211a43-7d89-476f-8181-2d6159b220ad");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual void SetInput(
            uint index,
            ID2D1Image input,
            int invalidate
        ){
            var fp = GetFunctionPointer(14);
            var callback = (SetInputFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetInputFunc));
            
            callback(m_ptr, index, input!=null ? input.Ptr : IntPtr.Zero, invalidate);
        }
        delegate void SetInputFunc(IntPtr self, uint index, IntPtr input, int invalidate);

        public virtual int SetInputCount(
            uint inputCount
        ){
            var fp = GetFunctionPointer(15);
            var callback = (SetInputCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetInputCountFunc));
            
            return callback(m_ptr, inputCount);
        }
        delegate int SetInputCountFunc(IntPtr self, uint inputCount);

        public virtual void GetInput(
            uint index,
            out ID2D1Image input
        ){
            var fp = GetFunctionPointer(16);
            var callback = (GetInputFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetInputFunc));
            input = new ID2D1Image();
            callback(m_ptr, index, out input.PtrForNew);
        }
        delegate void GetInputFunc(IntPtr self, uint index, out IntPtr input);

        public virtual uint GetInputCount(
        ){
            var fp = GetFunctionPointer(17);
            var callback = (GetInputCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetInputCountFunc));
            
            return callback(m_ptr);
        }
        delegate uint GetInputCountFunc(IntPtr self);

        public virtual void GetOutput(
            out ID2D1Image outputImage
        ){
            var fp = GetFunctionPointer(18);
            var callback = (GetOutputFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetOutputFunc));
            outputImage = new ID2D1Image();
            callback(m_ptr, out outputImage.PtrForNew);
        }
        delegate void GetOutputFunc(IntPtr self, out IntPtr outputImage);

    }
    public class ID2D1Properties: IUnknown
    {
        static Guid s_uuid = new Guid("483473d7-cd46-4f9d-9d3a-3112aa80159d");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual uint GetPropertyCount(
        ){
            var fp = GetFunctionPointer(3);
            var callback = (GetPropertyCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPropertyCountFunc));
            
            return callback(m_ptr);
        }
        delegate uint GetPropertyCountFunc(IntPtr self);

        public virtual int GetPropertyName(
            uint index,
            out ushort name,
            uint nameCount
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetPropertyNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPropertyNameFunc));
            
            return callback(m_ptr, index, out name, nameCount);
        }
        delegate int GetPropertyNameFunc(IntPtr self, uint index, out ushort name, uint nameCount);

        public virtual uint GetPropertyNameLength(
            uint index
        ){
            var fp = GetFunctionPointer(5);
            var callback = (GetPropertyNameLengthFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPropertyNameLengthFunc));
            
            return callback(m_ptr, index);
        }
        delegate uint GetPropertyNameLengthFunc(IntPtr self, uint index);

        public virtual D2D1_PROPERTY_TYPE GetComType(
            uint index
        ){
            var fp = GetFunctionPointer(6);
            var callback = (GetTypeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypeFunc));
            
            return callback(m_ptr, index);
        }
        delegate D2D1_PROPERTY_TYPE GetTypeFunc(IntPtr self, uint index);

        public virtual uint GetPropertyIndex(
            ref ushort name
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetPropertyIndexFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPropertyIndexFunc));
            
            return callback(m_ptr, ref name);
        }
        delegate uint GetPropertyIndexFunc(IntPtr self, ref ushort name);

        public virtual int SetValueByName(
            ref ushort name,
            D2D1_PROPERTY_TYPE type,
            ref byte data,
            uint dataSize
        ){
            var fp = GetFunctionPointer(8);
            var callback = (SetValueByNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetValueByNameFunc));
            
            return callback(m_ptr, ref name, type, ref data, dataSize);
        }
        delegate int SetValueByNameFunc(IntPtr self, ref ushort name, D2D1_PROPERTY_TYPE type, ref byte data, uint dataSize);

        public virtual int SetValue(
            uint index,
            D2D1_PROPERTY_TYPE type,
            ref byte data,
            uint dataSize
        ){
            var fp = GetFunctionPointer(9);
            var callback = (SetValueFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetValueFunc));
            
            return callback(m_ptr, index, type, ref data, dataSize);
        }
        delegate int SetValueFunc(IntPtr self, uint index, D2D1_PROPERTY_TYPE type, ref byte data, uint dataSize);

        public virtual int GetValueByName(
            ref ushort name,
            D2D1_PROPERTY_TYPE type,
            out byte data,
            uint dataSize
        ){
            var fp = GetFunctionPointer(10);
            var callback = (GetValueByNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetValueByNameFunc));
            
            return callback(m_ptr, ref name, type, out data, dataSize);
        }
        delegate int GetValueByNameFunc(IntPtr self, ref ushort name, D2D1_PROPERTY_TYPE type, out byte data, uint dataSize);

        public virtual int GetValue(
            uint index,
            D2D1_PROPERTY_TYPE type,
            out byte data,
            uint dataSize
        ){
            var fp = GetFunctionPointer(11);
            var callback = (GetValueFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetValueFunc));
            
            return callback(m_ptr, index, type, out data, dataSize);
        }
        delegate int GetValueFunc(IntPtr self, uint index, D2D1_PROPERTY_TYPE type, out byte data, uint dataSize);

        public virtual uint GetValueSize(
            uint index
        ){
            var fp = GetFunctionPointer(12);
            var callback = (GetValueSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetValueSizeFunc));
            
            return callback(m_ptr, index);
        }
        delegate uint GetValueSizeFunc(IntPtr self, uint index);

        public virtual int GetSubProperties(
            uint index,
            out ID2D1Properties subProperties
        ){
            var fp = GetFunctionPointer(13);
            var callback = (GetSubPropertiesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetSubPropertiesFunc));
            subProperties = new ID2D1Properties();
            return callback(m_ptr, index, out subProperties.PtrForNew);
        }
        delegate int GetSubPropertiesFunc(IntPtr self, uint index, out IntPtr subProperties);

    }
    public enum D2D1_PROPERTY_TYPE // 1
    {
        _UNKNOWN = 0x0,
        _STRING = 0x1,
        _BOOL = 0x2,
        _UINT32 = 0x3,
        _INT32 = 0x4,
        _FLOAT = 0x5,
        _VECTOR2 = 0x6,
        _VECTOR3 = 0x7,
        _VECTOR4 = 0x8,
        _BLOB = 0x9,
        _IUNKNOWN = 0xa,
        _ENUM = 0xb,
        _ARRAY = 0xc,
        _CLSID = 0xd,
        _MATRIX_3X2 = 0xe,
        _MATRIX_4X3 = 0xf,
        _MATRIX_4X4 = 0x10,
        _MATRIX_5X4 = 0x11,
        _COLOR_CONTEXT = 0x12,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public enum D2D1_BUFFER_PRECISION // 1
    {
        _UNKNOWN = 0x0,
        _8BPC_UNORM = 0x1,
        _8BPC_UNORM_SRGB = 0x2,
        _16BPC_UNORM = 0x3,
        _16BPC_FLOAT = 0x4,
        _32BPC_FLOAT = 0x5,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public enum D2D1_COLOR_INTERPOLATION_MODE // 1
    {
        _STRAIGHT = 0x0,
        _PREMULTIPLIED = 0x1,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public class ID2D1GradientStopCollection1: ID2D1GradientStopCollection
    {
        static Guid s_uuid = new Guid("ae1572f4-5dd0-4777-998b-9279472ae63b");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual void GetGradientStops1(
            out D2D1_GRADIENT_STOP gradientStops,
            uint gradientStopsCount
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetGradientStops1Func)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetGradientStops1Func));
            
            callback(m_ptr, out gradientStops, gradientStopsCount);
        }
        delegate void GetGradientStops1Func(IntPtr self, out D2D1_GRADIENT_STOP gradientStops, uint gradientStopsCount);

        public virtual D2D1_COLOR_SPACE GetPreInterpolationSpace(
        ){
            var fp = GetFunctionPointer(9);
            var callback = (GetPreInterpolationSpaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPreInterpolationSpaceFunc));
            
            return callback(m_ptr);
        }
        delegate D2D1_COLOR_SPACE GetPreInterpolationSpaceFunc(IntPtr self);

        public virtual D2D1_COLOR_SPACE GetPostInterpolationSpace(
        ){
            var fp = GetFunctionPointer(10);
            var callback = (GetPostInterpolationSpaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPostInterpolationSpaceFunc));
            
            return callback(m_ptr);
        }
        delegate D2D1_COLOR_SPACE GetPostInterpolationSpaceFunc(IntPtr self);

        public virtual D2D1_BUFFER_PRECISION GetBufferPrecision(
        ){
            var fp = GetFunctionPointer(11);
            var callback = (GetBufferPrecisionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetBufferPrecisionFunc));
            
            return callback(m_ptr);
        }
        delegate D2D1_BUFFER_PRECISION GetBufferPrecisionFunc(IntPtr self);

        public virtual D2D1_COLOR_INTERPOLATION_MODE GetColorInterpolationMode(
        ){
            var fp = GetFunctionPointer(12);
            var callback = (GetColorInterpolationModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetColorInterpolationModeFunc));
            
            return callback(m_ptr);
        }
        delegate D2D1_COLOR_INTERPOLATION_MODE GetColorInterpolationModeFunc(IntPtr self);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_IMAGE_BRUSH_PROPERTIES // 1
    {
        public System.Numerics.Vector4 sourceRectangle;
        public D2D1_EXTEND_MODE extendModeX;
        public D2D1_EXTEND_MODE extendModeY;
        public D2D1_INTERPOLATION_MODE interpolationMode;
    }
    public enum D2D1_INTERPOLATION_MODE // 1
    {
        _NEAREST_NEIGHBOR = 0x0,
        _LINEAR = 0x1,
        _CUBIC = 0x2,
        _MULTI_SAMPLE_LINEAR = 0x3,
        _ANISOTROPIC = 0x4,
        _HIGH_QUALITY_CUBIC = 0x5,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public class ID2D1ImageBrush: ID2D1Brush
    {
        static Guid s_uuid = new Guid("fe9e984d-3f95-407c-b5db-cb94d4e8f87c");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual void SetImage(
            ID2D1Image image
        ){
            var fp = GetFunctionPointer(8);
            var callback = (SetImageFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetImageFunc));
            
            callback(m_ptr, image!=null ? image.Ptr : IntPtr.Zero);
        }
        delegate void SetImageFunc(IntPtr self, IntPtr image);

        public virtual void SetExtendModeX(
            D2D1_EXTEND_MODE extendModeX
        ){
            var fp = GetFunctionPointer(9);
            var callback = (SetExtendModeXFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetExtendModeXFunc));
            
            callback(m_ptr, extendModeX);
        }
        delegate void SetExtendModeXFunc(IntPtr self, D2D1_EXTEND_MODE extendModeX);

        public virtual void SetExtendModeY(
            D2D1_EXTEND_MODE extendModeY
        ){
            var fp = GetFunctionPointer(10);
            var callback = (SetExtendModeYFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetExtendModeYFunc));
            
            callback(m_ptr, extendModeY);
        }
        delegate void SetExtendModeYFunc(IntPtr self, D2D1_EXTEND_MODE extendModeY);

        public virtual void SetInterpolationMode(
            D2D1_INTERPOLATION_MODE interpolationMode
        ){
            var fp = GetFunctionPointer(11);
            var callback = (SetInterpolationModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetInterpolationModeFunc));
            
            callback(m_ptr, interpolationMode);
        }
        delegate void SetInterpolationModeFunc(IntPtr self, D2D1_INTERPOLATION_MODE interpolationMode);

        public virtual void SetSourceRectangle(
            ref System.Numerics.Vector4 sourceRectangle
        ){
            var fp = GetFunctionPointer(12);
            var callback = (SetSourceRectangleFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetSourceRectangleFunc));
            
            callback(m_ptr, ref sourceRectangle);
        }
        delegate void SetSourceRectangleFunc(IntPtr self, ref System.Numerics.Vector4 sourceRectangle);

        public virtual void GetImage(
            out ID2D1Image image
        ){
            var fp = GetFunctionPointer(13);
            var callback = (GetImageFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetImageFunc));
            image = new ID2D1Image();
            callback(m_ptr, out image.PtrForNew);
        }
        delegate void GetImageFunc(IntPtr self, out IntPtr image);

        public virtual D2D1_EXTEND_MODE GetExtendModeX(
        ){
            var fp = GetFunctionPointer(14);
            var callback = (GetExtendModeXFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetExtendModeXFunc));
            
            return callback(m_ptr);
        }
        delegate D2D1_EXTEND_MODE GetExtendModeXFunc(IntPtr self);

        public virtual D2D1_EXTEND_MODE GetExtendModeY(
        ){
            var fp = GetFunctionPointer(15);
            var callback = (GetExtendModeYFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetExtendModeYFunc));
            
            return callback(m_ptr);
        }
        delegate D2D1_EXTEND_MODE GetExtendModeYFunc(IntPtr self);

        public virtual D2D1_INTERPOLATION_MODE GetInterpolationMode(
        ){
            var fp = GetFunctionPointer(16);
            var callback = (GetInterpolationModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetInterpolationModeFunc));
            
            return callback(m_ptr);
        }
        delegate D2D1_INTERPOLATION_MODE GetInterpolationModeFunc(IntPtr self);

        public virtual void GetSourceRectangle(
            out System.Numerics.Vector4 sourceRectangle
        ){
            var fp = GetFunctionPointer(17);
            var callback = (GetSourceRectangleFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetSourceRectangleFunc));
            
            callback(m_ptr, out sourceRectangle);
        }
        delegate void GetSourceRectangleFunc(IntPtr self, out System.Numerics.Vector4 sourceRectangle);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_BITMAP_BRUSH_PROPERTIES1 // 1
    {
        public D2D1_EXTEND_MODE extendModeX;
        public D2D1_EXTEND_MODE extendModeY;
        public D2D1_INTERPOLATION_MODE interpolationMode;
    }
    public class ID2D1BitmapBrush1: ID2D1BitmapBrush
    {
        static Guid s_uuid = new Guid("41343a53-e41a-49a2-91cd-21793bbb62e5");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual void SetInterpolationMode1(
            D2D1_INTERPOLATION_MODE interpolationMode
        ){
            var fp = GetFunctionPointer(16);
            var callback = (SetInterpolationMode1Func)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetInterpolationMode1Func));
            
            callback(m_ptr, interpolationMode);
        }
        delegate void SetInterpolationMode1Func(IntPtr self, D2D1_INTERPOLATION_MODE interpolationMode);

        public virtual D2D1_INTERPOLATION_MODE GetInterpolationMode1(
        ){
            var fp = GetFunctionPointer(17);
            var callback = (GetInterpolationMode1Func)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetInterpolationMode1Func));
            
            return callback(m_ptr);
        }
        delegate D2D1_INTERPOLATION_MODE GetInterpolationMode1Func(IntPtr self);

    }
    public class ID2D1CommandList: ID2D1Image
    {
        static Guid s_uuid = new Guid("b4f34a19-2383-4d76-94f6-ec343657c3dc");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int Stream(
            ID2D1CommandSink sink
        ){
            var fp = GetFunctionPointer(4);
            var callback = (StreamFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(StreamFunc));
            
            return callback(m_ptr, sink!=null ? sink.Ptr : IntPtr.Zero);
        }
        delegate int StreamFunc(IntPtr self, IntPtr sink);

        public virtual int Close(
        ){
            var fp = GetFunctionPointer(5);
            var callback = (CloseFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CloseFunc));
            
            return callback(m_ptr);
        }
        delegate int CloseFunc(IntPtr self);

    }
    public class ID2D1CommandSink: IUnknown
    {
        static Guid s_uuid = new Guid("54d7898a-a061-40a7-bec7-e465bcba2c4f");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int BeginDraw(
        ){
            var fp = GetFunctionPointer(3);
            var callback = (BeginDrawFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(BeginDrawFunc));
            
            return callback(m_ptr);
        }
        delegate int BeginDrawFunc(IntPtr self);

        public virtual int EndDraw(
        ){
            var fp = GetFunctionPointer(4);
            var callback = (EndDrawFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(EndDrawFunc));
            
            return callback(m_ptr);
        }
        delegate int EndDrawFunc(IntPtr self);

        public virtual int SetAntialiasMode(
            D2D1_ANTIALIAS_MODE antialiasMode
        ){
            var fp = GetFunctionPointer(5);
            var callback = (SetAntialiasModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetAntialiasModeFunc));
            
            return callback(m_ptr, antialiasMode);
        }
        delegate int SetAntialiasModeFunc(IntPtr self, D2D1_ANTIALIAS_MODE antialiasMode);

        public virtual int SetTags(
            ulong tag1,
            ulong tag2
        ){
            var fp = GetFunctionPointer(6);
            var callback = (SetTagsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetTagsFunc));
            
            return callback(m_ptr, tag1, tag2);
        }
        delegate int SetTagsFunc(IntPtr self, ulong tag1, ulong tag2);

        public virtual int SetTextAntialiasMode(
            D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode
        ){
            var fp = GetFunctionPointer(7);
            var callback = (SetTextAntialiasModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetTextAntialiasModeFunc));
            
            return callback(m_ptr, textAntialiasMode);
        }
        delegate int SetTextAntialiasModeFunc(IntPtr self, D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode);

        public virtual int SetTextRenderingParams(
            IDWriteRenderingParams textRenderingParams
        ){
            var fp = GetFunctionPointer(8);
            var callback = (SetTextRenderingParamsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetTextRenderingParamsFunc));
            
            return callback(m_ptr, textRenderingParams!=null ? textRenderingParams.Ptr : IntPtr.Zero);
        }
        delegate int SetTextRenderingParamsFunc(IntPtr self, IntPtr textRenderingParams);

        public virtual int SetTransform(
            ref System.Numerics.Matrix3x2 transform
        ){
            var fp = GetFunctionPointer(9);
            var callback = (SetTransformFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetTransformFunc));
            
            return callback(m_ptr, ref transform);
        }
        delegate int SetTransformFunc(IntPtr self, ref System.Numerics.Matrix3x2 transform);

        public virtual int SetPrimitiveBlend(
            D2D1_PRIMITIVE_BLEND primitiveBlend
        ){
            var fp = GetFunctionPointer(10);
            var callback = (SetPrimitiveBlendFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetPrimitiveBlendFunc));
            
            return callback(m_ptr, primitiveBlend);
        }
        delegate int SetPrimitiveBlendFunc(IntPtr self, D2D1_PRIMITIVE_BLEND primitiveBlend);

        public virtual int SetUnitMode(
            D2D1_UNIT_MODE unitMode
        ){
            var fp = GetFunctionPointer(11);
            var callback = (SetUnitModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetUnitModeFunc));
            
            return callback(m_ptr, unitMode);
        }
        delegate int SetUnitModeFunc(IntPtr self, D2D1_UNIT_MODE unitMode);

        public virtual int Clear(
            ref System.Numerics.Vector4 color
        ){
            var fp = GetFunctionPointer(12);
            var callback = (ClearFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ClearFunc));
            
            return callback(m_ptr, ref color);
        }
        delegate int ClearFunc(IntPtr self, ref System.Numerics.Vector4 color);

        public virtual int DrawGlyphRun(
            System.Numerics.Vector2 baselineOrigin,
            ref DWRITE_GLYPH_RUN glyphRun,
            ref DWRITE_GLYPH_RUN_DESCRIPTION glyphRunDescription,
            ID2D1Brush foregroundBrush,
            DWRITE_MEASURING_MODE measuringMode
        ){
            var fp = GetFunctionPointer(13);
            var callback = (DrawGlyphRunFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawGlyphRunFunc));
            
            return callback(m_ptr, baselineOrigin, ref glyphRun, ref glyphRunDescription, foregroundBrush!=null ? foregroundBrush.Ptr : IntPtr.Zero, measuringMode);
        }
        delegate int DrawGlyphRunFunc(IntPtr self, System.Numerics.Vector2 baselineOrigin, ref DWRITE_GLYPH_RUN glyphRun, ref DWRITE_GLYPH_RUN_DESCRIPTION glyphRunDescription, IntPtr foregroundBrush, DWRITE_MEASURING_MODE measuringMode);

        public virtual int DrawLine(
            System.Numerics.Vector2 point0,
            System.Numerics.Vector2 point1,
            ID2D1Brush brush,
            float strokeWidth,
            ID2D1StrokeStyle strokeStyle
        ){
            var fp = GetFunctionPointer(14);
            var callback = (DrawLineFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawLineFunc));
            
            return callback(m_ptr, point0, point1, brush!=null ? brush.Ptr : IntPtr.Zero, strokeWidth, strokeStyle!=null ? strokeStyle.Ptr : IntPtr.Zero);
        }
        delegate int DrawLineFunc(IntPtr self, System.Numerics.Vector2 point0, System.Numerics.Vector2 point1, IntPtr brush, float strokeWidth, IntPtr strokeStyle);

        public virtual int DrawGeometry(
            ID2D1Geometry geometry,
            ID2D1Brush brush,
            float strokeWidth,
            ID2D1StrokeStyle strokeStyle
        ){
            var fp = GetFunctionPointer(15);
            var callback = (DrawGeometryFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawGeometryFunc));
            
            return callback(m_ptr, geometry!=null ? geometry.Ptr : IntPtr.Zero, brush!=null ? brush.Ptr : IntPtr.Zero, strokeWidth, strokeStyle!=null ? strokeStyle.Ptr : IntPtr.Zero);
        }
        delegate int DrawGeometryFunc(IntPtr self, IntPtr geometry, IntPtr brush, float strokeWidth, IntPtr strokeStyle);

        public virtual int DrawRectangle(
            ref System.Numerics.Vector4 rect,
            ID2D1Brush brush,
            float strokeWidth,
            ID2D1StrokeStyle strokeStyle
        ){
            var fp = GetFunctionPointer(16);
            var callback = (DrawRectangleFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawRectangleFunc));
            
            return callback(m_ptr, ref rect, brush!=null ? brush.Ptr : IntPtr.Zero, strokeWidth, strokeStyle!=null ? strokeStyle.Ptr : IntPtr.Zero);
        }
        delegate int DrawRectangleFunc(IntPtr self, ref System.Numerics.Vector4 rect, IntPtr brush, float strokeWidth, IntPtr strokeStyle);

        public virtual int DrawBitmap(
            ID2D1Bitmap bitmap,
            ref System.Numerics.Vector4 destinationRectangle,
            float opacity,
            D2D1_INTERPOLATION_MODE interpolationMode,
            ref System.Numerics.Vector4 sourceRectangle,
            ref D2D_MATRIX_4X4_F perspectiveTransform
        ){
            var fp = GetFunctionPointer(17);
            var callback = (DrawBitmapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawBitmapFunc));
            
            return callback(m_ptr, bitmap!=null ? bitmap.Ptr : IntPtr.Zero, ref destinationRectangle, opacity, interpolationMode, ref sourceRectangle, ref perspectiveTransform);
        }
        delegate int DrawBitmapFunc(IntPtr self, IntPtr bitmap, ref System.Numerics.Vector4 destinationRectangle, float opacity, D2D1_INTERPOLATION_MODE interpolationMode, ref System.Numerics.Vector4 sourceRectangle, ref D2D_MATRIX_4X4_F perspectiveTransform);

        public virtual int DrawImage(
            ID2D1Image image,
            ref System.Numerics.Vector2 targetOffset,
            ref System.Numerics.Vector4 imageRectangle,
            D2D1_INTERPOLATION_MODE interpolationMode,
            D2D1_COMPOSITE_MODE compositeMode
        ){
            var fp = GetFunctionPointer(18);
            var callback = (DrawImageFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawImageFunc));
            
            return callback(m_ptr, image!=null ? image.Ptr : IntPtr.Zero, ref targetOffset, ref imageRectangle, interpolationMode, compositeMode);
        }
        delegate int DrawImageFunc(IntPtr self, IntPtr image, ref System.Numerics.Vector2 targetOffset, ref System.Numerics.Vector4 imageRectangle, D2D1_INTERPOLATION_MODE interpolationMode, D2D1_COMPOSITE_MODE compositeMode);

        public virtual int DrawGdiMetafile(
            ID2D1GdiMetafile gdiMetafile,
            ref System.Numerics.Vector2 targetOffset
        ){
            var fp = GetFunctionPointer(19);
            var callback = (DrawGdiMetafileFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawGdiMetafileFunc));
            
            return callback(m_ptr, gdiMetafile!=null ? gdiMetafile.Ptr : IntPtr.Zero, ref targetOffset);
        }
        delegate int DrawGdiMetafileFunc(IntPtr self, IntPtr gdiMetafile, ref System.Numerics.Vector2 targetOffset);

        public virtual int FillMesh(
            ID2D1Mesh mesh,
            ID2D1Brush brush
        ){
            var fp = GetFunctionPointer(20);
            var callback = (FillMeshFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FillMeshFunc));
            
            return callback(m_ptr, mesh!=null ? mesh.Ptr : IntPtr.Zero, brush!=null ? brush.Ptr : IntPtr.Zero);
        }
        delegate int FillMeshFunc(IntPtr self, IntPtr mesh, IntPtr brush);

        public virtual int FillOpacityMask(
            ID2D1Bitmap opacityMask,
            ID2D1Brush brush,
            ref System.Numerics.Vector4 destinationRectangle,
            ref System.Numerics.Vector4 sourceRectangle
        ){
            var fp = GetFunctionPointer(21);
            var callback = (FillOpacityMaskFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FillOpacityMaskFunc));
            
            return callback(m_ptr, opacityMask!=null ? opacityMask.Ptr : IntPtr.Zero, brush!=null ? brush.Ptr : IntPtr.Zero, ref destinationRectangle, ref sourceRectangle);
        }
        delegate int FillOpacityMaskFunc(IntPtr self, IntPtr opacityMask, IntPtr brush, ref System.Numerics.Vector4 destinationRectangle, ref System.Numerics.Vector4 sourceRectangle);

        public virtual int FillGeometry(
            ID2D1Geometry geometry,
            ID2D1Brush brush,
            ID2D1Brush opacityBrush
        ){
            var fp = GetFunctionPointer(22);
            var callback = (FillGeometryFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FillGeometryFunc));
            
            return callback(m_ptr, geometry!=null ? geometry.Ptr : IntPtr.Zero, brush!=null ? brush.Ptr : IntPtr.Zero, opacityBrush!=null ? opacityBrush.Ptr : IntPtr.Zero);
        }
        delegate int FillGeometryFunc(IntPtr self, IntPtr geometry, IntPtr brush, IntPtr opacityBrush);

        public virtual int FillRectangle(
            ref System.Numerics.Vector4 rect,
            ID2D1Brush brush
        ){
            var fp = GetFunctionPointer(23);
            var callback = (FillRectangleFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FillRectangleFunc));
            
            return callback(m_ptr, ref rect, brush!=null ? brush.Ptr : IntPtr.Zero);
        }
        delegate int FillRectangleFunc(IntPtr self, ref System.Numerics.Vector4 rect, IntPtr brush);

        public virtual int PushAxisAlignedClip(
            ref System.Numerics.Vector4 clipRect,
            D2D1_ANTIALIAS_MODE antialiasMode
        ){
            var fp = GetFunctionPointer(24);
            var callback = (PushAxisAlignedClipFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PushAxisAlignedClipFunc));
            
            return callback(m_ptr, ref clipRect, antialiasMode);
        }
        delegate int PushAxisAlignedClipFunc(IntPtr self, ref System.Numerics.Vector4 clipRect, D2D1_ANTIALIAS_MODE antialiasMode);

        public virtual int PushLayer(
            ref D2D1_LAYER_PARAMETERS1 layerParameters1,
            ID2D1Layer layer
        ){
            var fp = GetFunctionPointer(25);
            var callback = (PushLayerFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PushLayerFunc));
            
            return callback(m_ptr, ref layerParameters1, layer!=null ? layer.Ptr : IntPtr.Zero);
        }
        delegate int PushLayerFunc(IntPtr self, ref D2D1_LAYER_PARAMETERS1 layerParameters1, IntPtr layer);

        public virtual int PopAxisAlignedClip(
        ){
            var fp = GetFunctionPointer(26);
            var callback = (PopAxisAlignedClipFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PopAxisAlignedClipFunc));
            
            return callback(m_ptr);
        }
        delegate int PopAxisAlignedClipFunc(IntPtr self);

        public virtual int PopLayer(
        ){
            var fp = GetFunctionPointer(27);
            var callback = (PopLayerFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PopLayerFunc));
            
            return callback(m_ptr);
        }
        delegate int PopLayerFunc(IntPtr self);

    }
    public enum D2D1_PRIMITIVE_BLEND // 1
    {
        _SOURCE_OVER = 0x0,
        _COPY = 0x1,
        _MIN = 0x2,
        _ADD = 0x3,
        _MAX = 0x4,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public enum D2D1_UNIT_MODE // 1
    {
        _DIPS = 0x0,
        _PIXELS = 0x1,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public enum D2D1_COMPOSITE_MODE // 1
    {
        _SOURCE_OVER = 0x0,
        _DESTINATION_OVER = 0x1,
        _SOURCE_IN = 0x2,
        _DESTINATION_IN = 0x3,
        _SOURCE_OUT = 0x4,
        _DESTINATION_OUT = 0x5,
        _SOURCE_ATOP = 0x6,
        _DESTINATION_ATOP = 0x7,
        _XOR = 0x8,
        _PLUS = 0x9,
        _SOURCE_COPY = 0xa,
        _BOUNDED_SOURCE_COPY = 0xb,
        _MASK_INVERT = 0xc,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public class ID2D1GdiMetafile: ID2D1Resource
    {
        static Guid s_uuid = new Guid("2f543dc3-cfc1-4211-864f-cfd91c6f3395");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int Stream(
            ID2D1GdiMetafileSink sink
        ){
            var fp = GetFunctionPointer(4);
            var callback = (StreamFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(StreamFunc));
            
            return callback(m_ptr, sink!=null ? sink.Ptr : IntPtr.Zero);
        }
        delegate int StreamFunc(IntPtr self, IntPtr sink);

        public virtual int GetBounds(
            out System.Numerics.Vector4 bounds
        ){
            var fp = GetFunctionPointer(5);
            var callback = (GetBoundsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetBoundsFunc));
            
            return callback(m_ptr, out bounds);
        }
        delegate int GetBoundsFunc(IntPtr self, out System.Numerics.Vector4 bounds);

    }
    public class ID2D1GdiMetafileSink: IUnknown
    {
        static Guid s_uuid = new Guid("82237326-8111-4f7c-bcf4-b5c1175564fe");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int ProcessRecord(
            uint recordType,
            IntPtr recordData,
            uint recordDataSize
        ){
            var fp = GetFunctionPointer(3);
            var callback = (ProcessRecordFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ProcessRecordFunc));
            
            return callback(m_ptr, recordType, recordData, recordDataSize);
        }
        delegate int ProcessRecordFunc(IntPtr self, uint recordType, IntPtr recordData, uint recordDataSize);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_LAYER_PARAMETERS1 // 1
    {
        public System.Numerics.Vector4 contentBounds;
        public ID2D1Geometry geometricMask;
        public D2D1_ANTIALIAS_MODE maskAntialiasMode;
        public System.Numerics.Matrix3x2 maskTransform;
        public float opacity;
        public ID2D1Brush opacityBrush;
        public D2D1_LAYER_OPTIONS1 layerOptions;
    }
    public enum D2D1_LAYER_OPTIONS1 // 1
    {
        _NONE = 0x0,
        _INITIALIZE_FROM_BACKGROUND = 0x1,
        _IGNORE_ALPHA = 0x2,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_RENDERING_CONTROLS // 1
    {
        public D2D1_BUFFER_PRECISION bufferPrecision;
        public D2D_SIZE_U tileSize;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_EFFECT_INPUT_DESCRIPTION // 1
    {
        public ID2D1Effect effect;
        public uint inputIndex;
        public System.Numerics.Vector4 inputRectangle;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_PRINT_CONTROL_PROPERTIES // 1
    {
        public D2D1_PRINT_FONT_SUBSET_MODE fontSubset;
        public float rasterDPI;
        public D2D1_COLOR_SPACE colorSpace;
    }
    public enum D2D1_PRINT_FONT_SUBSET_MODE // 1
    {
        _DEFAULT = 0x0,
        _EACHPAGE = 0x1,
        _NONE = 0x2,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public class ID2D1PrintControl: IUnknown
    {
        static Guid s_uuid = new Guid("2c1d867d-c290-41c8-ae7e-34a98702e9a5");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int AddPage(
            ID2D1CommandList commandList,
            D2D_SIZE_F pageSize,
            IStream pagePrintTicketStream,
            out ulong tag1,
            out ulong tag2
        ){
            var fp = GetFunctionPointer(3);
            var callback = (AddPageFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AddPageFunc));
            
            return callback(m_ptr, commandList!=null ? commandList.Ptr : IntPtr.Zero, pageSize, pagePrintTicketStream!=null ? pagePrintTicketStream.Ptr : IntPtr.Zero, out tag1, out tag2);
        }
        delegate int AddPageFunc(IntPtr self, IntPtr commandList, D2D_SIZE_F pageSize, IntPtr pagePrintTicketStream, out ulong tag1, out ulong tag2);

        public virtual int Close(
        ){
            var fp = GetFunctionPointer(4);
            var callback = (CloseFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CloseFunc));
            
            return callback(m_ptr);
        }
        delegate int CloseFunc(IntPtr self);

    }
    public delegate int PD2D1_EFFECT_FACTORY(out IntPtr effectImpl);
    // forward declaration ID2D1Device;
    public enum D2D1_PROPERTY // 1
    {
        _CLSID = unchecked((int)0x80000000),
        _DISPLAYNAME = unchecked((int)0x80000001),
        _AUTHOR = unchecked((int)0x80000002),
        _CATEGORY = unchecked((int)0x80000003),
        _DESCRIPTION = unchecked((int)0x80000004),
        _INPUTS = unchecked((int)0x80000005),
        _CACHED = unchecked((int)0x80000006),
        _PRECISION = unchecked((int)0x80000007),
        _MIN_INPUTS = unchecked((int)0x80000008),
        _MAX_INPUTS = unchecked((int)0x80000009),
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public enum D2D1_SUBPROPERTY // 1
    {
        _DISPLAYNAME = unchecked((int)0x80000000),
        _ISREADONLY = unchecked((int)0x80000001),
        _MIN = unchecked((int)0x80000002),
        _MAX = unchecked((int)0x80000003),
        _DEFAULT = unchecked((int)0x80000004),
        _FIELDS = unchecked((int)0x80000005),
        _INDEX = unchecked((int)0x80000006),
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public enum D2D1_STROKE_TRANSFORM_TYPE // 1
    {
        _NORMAL = 0x0,
        _FIXED = 0x1,
        _HAIRLINE = 0x2,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public enum D2D1_THREADING_MODE // 1
    {
        _SINGLE_THREADED = 0x0,
        _MULTI_THREADED = 0x1,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_POINT_DESCRIPTION // 1
    {
        public System.Numerics.Vector2 point;
        public System.Numerics.Vector2 unitTangentVector;
        public uint endSegment;
        public uint endFigure;
        public float lengthToEndSegment;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_STROKE_STYLE_PROPERTIES1 // 1
    {
        public D2D1_CAP_STYLE startCap;
        public D2D1_CAP_STYLE endCap;
        public D2D1_CAP_STYLE dashCap;
        public D2D1_LINE_JOIN lineJoin;
        public float miterLimit;
        public D2D1_DASH_STYLE dashStyle;
        public float dashOffset;
        public D2D1_STROKE_TRANSFORM_TYPE transformType;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_DRAWING_STATE_DESCRIPTION1 // 1
    {
        public D2D1_ANTIALIAS_MODE antialiasMode;
        public D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode;
        public ulong tag1;
        public ulong tag2;
        public System.Numerics.Matrix3x2 transform;
        public D2D1_PRIMITIVE_BLEND primitiveBlend;
        public D2D1_UNIT_MODE unitMode;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_CREATION_PROPERTIES // 1
    {
        public D2D1_THREADING_MODE threadingMode;
        public D2D1_DEBUG_LEVEL debugLevel;
        public D2D1_DEVICE_CONTEXT_OPTIONS options;
    }
    public class ID2D1StrokeStyle1: ID2D1StrokeStyle
    {
        static Guid s_uuid = new Guid("10a72a66-e91c-43f4-993f-ddf4b82b0b4a");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual D2D1_STROKE_TRANSFORM_TYPE GetStrokeTransformType(
        ){
            var fp = GetFunctionPointer(13);
            var callback = (GetStrokeTransformTypeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetStrokeTransformTypeFunc));
            
            return callback(m_ptr);
        }
        delegate D2D1_STROKE_TRANSFORM_TYPE GetStrokeTransformTypeFunc(IntPtr self);

    }
    public class ID2D1PathGeometry1: ID2D1PathGeometry
    {
        static Guid s_uuid = new Guid("62baa2d2-ab54-41b7-b872-787e0106a421");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int ComputePointAndSegmentAtLength(
            float length,
            uint startSegment,
            ref System.Numerics.Matrix3x2 worldTransform,
            float flatteningTolerance,
            out D2D1_POINT_DESCRIPTION pointDescription
        ){
            var fp = GetFunctionPointer(21);
            var callback = (ComputePointAndSegmentAtLengthFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ComputePointAndSegmentAtLengthFunc));
            
            return callback(m_ptr, length, startSegment, ref worldTransform, flatteningTolerance, out pointDescription);
        }
        delegate int ComputePointAndSegmentAtLengthFunc(IntPtr self, float length, uint startSegment, ref System.Numerics.Matrix3x2 worldTransform, float flatteningTolerance, out D2D1_POINT_DESCRIPTION pointDescription);

    }
    public class ID2D1DrawingStateBlock1: ID2D1DrawingStateBlock
    {
        static Guid s_uuid = new Guid("689f1f85-c72e-4e33-8f19-85754efd5ace");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual void GetDescription(
            out D2D1_DRAWING_STATE_DESCRIPTION1 stateDescription
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetDescriptionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescriptionFunc));
            
            callback(m_ptr, out stateDescription);
        }
        delegate void GetDescriptionFunc(IntPtr self, out D2D1_DRAWING_STATE_DESCRIPTION1 stateDescription);

        public virtual void SetDescription(
            ref D2D1_DRAWING_STATE_DESCRIPTION1 stateDescription
        ){
            var fp = GetFunctionPointer(9);
            var callback = (SetDescriptionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetDescriptionFunc));
            
            callback(m_ptr, ref stateDescription);
        }
        delegate void SetDescriptionFunc(IntPtr self, ref D2D1_DRAWING_STATE_DESCRIPTION1 stateDescription);

    }
    public class ID2D1Factory1: ID2D1Factory
    {
        static Guid s_uuid = new Guid("bb12d362-daee-4b9a-aa1d-14ba401cfa1f");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int CreateDevice(
            IDXGIDevice dxgiDevice,
            out ID2D1Device d2dDevice
        ){
            var fp = GetFunctionPointer(17);
            var callback = (CreateDeviceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateDeviceFunc));
            d2dDevice = new ID2D1Device();
            return callback(m_ptr, dxgiDevice!=null ? dxgiDevice.Ptr : IntPtr.Zero, out d2dDevice.PtrForNew);
        }
        delegate int CreateDeviceFunc(IntPtr self, IntPtr dxgiDevice, out IntPtr d2dDevice);

        public virtual int CreateStrokeStyle(
            ref D2D1_STROKE_STYLE_PROPERTIES1 strokeStyleProperties,
            ref float dashes,
            uint dashesCount,
            out ID2D1StrokeStyle1 strokeStyle
        ){
            var fp = GetFunctionPointer(18);
            var callback = (CreateStrokeStyleFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateStrokeStyleFunc));
            strokeStyle = new ID2D1StrokeStyle1();
            return callback(m_ptr, ref strokeStyleProperties, ref dashes, dashesCount, out strokeStyle.PtrForNew);
        }
        delegate int CreateStrokeStyleFunc(IntPtr self, ref D2D1_STROKE_STYLE_PROPERTIES1 strokeStyleProperties, ref float dashes, uint dashesCount, out IntPtr strokeStyle);

        public virtual int CreatePathGeometry(
            out ID2D1PathGeometry1 pathGeometry
        ){
            var fp = GetFunctionPointer(19);
            var callback = (CreatePathGeometryFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreatePathGeometryFunc));
            pathGeometry = new ID2D1PathGeometry1();
            return callback(m_ptr, out pathGeometry.PtrForNew);
        }
        delegate int CreatePathGeometryFunc(IntPtr self, out IntPtr pathGeometry);

        public virtual int CreateDrawingStateBlock(
            ref D2D1_DRAWING_STATE_DESCRIPTION1 drawingStateDescription,
            IDWriteRenderingParams textRenderingParams,
            out ID2D1DrawingStateBlock1 drawingStateBlock
        ){
            var fp = GetFunctionPointer(20);
            var callback = (CreateDrawingStateBlockFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateDrawingStateBlockFunc));
            drawingStateBlock = new ID2D1DrawingStateBlock1();
            return callback(m_ptr, ref drawingStateDescription, textRenderingParams!=null ? textRenderingParams.Ptr : IntPtr.Zero, out drawingStateBlock.PtrForNew);
        }
        delegate int CreateDrawingStateBlockFunc(IntPtr self, ref D2D1_DRAWING_STATE_DESCRIPTION1 drawingStateDescription, IntPtr textRenderingParams, out IntPtr drawingStateBlock);

        public virtual int CreateGdiMetafile(
            IStream metafileStream,
            out ID2D1GdiMetafile metafile
        ){
            var fp = GetFunctionPointer(21);
            var callback = (CreateGdiMetafileFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateGdiMetafileFunc));
            metafile = new ID2D1GdiMetafile();
            return callback(m_ptr, metafileStream!=null ? metafileStream.Ptr : IntPtr.Zero, out metafile.PtrForNew);
        }
        delegate int CreateGdiMetafileFunc(IntPtr self, IntPtr metafileStream, out IntPtr metafile);

        public virtual int RegisterEffectFromStream(
            ref Guid classId,
            IStream propertyXml,
            ref D2D1_PROPERTY_BINDING bindings,
            uint bindingsCount,
            PD2D1_EFFECT_FACTORY effectFactory
        ){
            var fp = GetFunctionPointer(22);
            var callback = (RegisterEffectFromStreamFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RegisterEffectFromStreamFunc));
            
            return callback(m_ptr, ref classId, propertyXml!=null ? propertyXml.Ptr : IntPtr.Zero, ref bindings, bindingsCount, effectFactory);
        }
        delegate int RegisterEffectFromStreamFunc(IntPtr self, ref Guid classId, IntPtr propertyXml, ref D2D1_PROPERTY_BINDING bindings, uint bindingsCount, PD2D1_EFFECT_FACTORY effectFactory);

        public virtual int RegisterEffectFromString(
            ref Guid classId,
            ref ushort propertyXml,
            ref D2D1_PROPERTY_BINDING bindings,
            uint bindingsCount,
            PD2D1_EFFECT_FACTORY effectFactory
        ){
            var fp = GetFunctionPointer(23);
            var callback = (RegisterEffectFromStringFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RegisterEffectFromStringFunc));
            
            return callback(m_ptr, ref classId, ref propertyXml, ref bindings, bindingsCount, effectFactory);
        }
        delegate int RegisterEffectFromStringFunc(IntPtr self, ref Guid classId, ref ushort propertyXml, ref D2D1_PROPERTY_BINDING bindings, uint bindingsCount, PD2D1_EFFECT_FACTORY effectFactory);

        public virtual int UnregisterEffect(
            ref Guid classId
        ){
            var fp = GetFunctionPointer(24);
            var callback = (UnregisterEffectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(UnregisterEffectFunc));
            
            return callback(m_ptr, ref classId);
        }
        delegate int UnregisterEffectFunc(IntPtr self, ref Guid classId);

        public virtual int GetRegisteredEffects(
            out Guid effects,
            uint effectsCount,
            out uint effectsReturned,
            out uint effectsRegistered
        ){
            var fp = GetFunctionPointer(25);
            var callback = (GetRegisteredEffectsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetRegisteredEffectsFunc));
            
            return callback(m_ptr, out effects, effectsCount, out effectsReturned, out effectsRegistered);
        }
        delegate int GetRegisteredEffectsFunc(IntPtr self, out Guid effects, uint effectsCount, out uint effectsReturned, out uint effectsRegistered);

        public virtual int GetEffectProperties(
            ref Guid effectId,
            out ID2D1Properties properties
        ){
            var fp = GetFunctionPointer(26);
            var callback = (GetEffectPropertiesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetEffectPropertiesFunc));
            properties = new ID2D1Properties();
            return callback(m_ptr, ref effectId, out properties.PtrForNew);
        }
        delegate int GetEffectPropertiesFunc(IntPtr self, ref Guid effectId, out IntPtr properties);

    }
    public class ID2D1Multithread: IUnknown
    {
        static Guid s_uuid = new Guid("31e6e7bc-e0ff-4d46-8c64-a0a8c41c15d3");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int GetMultithreadProtected(
        ){
            var fp = GetFunctionPointer(3);
            var callback = (GetMultithreadProtectedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMultithreadProtectedFunc));
            
            return callback(m_ptr);
        }
        delegate int GetMultithreadProtectedFunc(IntPtr self);

        public virtual void Enter(
        ){
            var fp = GetFunctionPointer(4);
            var callback = (EnterFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(EnterFunc));
            
            callback(m_ptr);
        }
        delegate void EnterFunc(IntPtr self);

        public virtual void Leave(
        ){
            var fp = GetFunctionPointer(5);
            var callback = (LeaveFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(LeaveFunc));
            
            callback(m_ptr);
        }
        delegate void LeaveFunc(IntPtr self);

    }
    public static class d2d1_1 {
        [DllImport("d2d1_1.dll")]
        public static extern int D2D1CreateDevice(
            IDXGIDevice dxgiDevice,
            ref D2D1_CREATION_PROPERTIES creationProperties,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<ID2D1Device>))]out ID2D1Device d2dDevice
        );
        [DllImport("d2d1_1.dll")]
        public static extern int D2D1CreateDeviceContext(
            IDXGISurface dxgiSurface,
            ref D2D1_CREATION_PROPERTIES creationProperties,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<ID2D1DeviceContext>))]out ID2D1DeviceContext d2dDeviceContext
        );
        [DllImport("d2d1_1.dll")]
        public static extern System.Numerics.Vector4 D2D1ConvertColorSpace(
            D2D1_COLOR_SPACE sourceColorSpace,
            D2D1_COLOR_SPACE destinationColorSpace,
            ref System.Numerics.Vector4 color
        );
        [DllImport("d2d1_1.dll")]
        public static extern void D2D1SinCos(
            float angle,
            out float s,
            out float c
        );
        [DllImport("d2d1_1.dll")]
        public static extern float D2D1Tan(
            float angle
        );
        [DllImport("d2d1_1.dll")]
        public static extern float D2D1Vec3Length(
            float x,
            float y,
            float z
        );
    }
}
