// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public static partial class Constants {
        // unknown type: D2D1_INVALID_PROPERTY_INDEX UINT_MAX
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_BITMAP_PROPERTIES1 // 1
    {
        public D2D1_PIXEL_FORMAT pixelFormat;
        public float dpiX;
        public float dpiY;
        public D2D1_BITMAP_OPTIONS bitmapOptions;
        public ID2D1ColorContext colorContext;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_MAPPED_RECT // 1
    {
        public uint pitch;
        public IntPtr bits;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_IMAGE_BRUSH_PROPERTIES // 1
    {
        public System.Numerics.Vector4 sourceRectangle;
        public D2D1_EXTEND_MODE extendModeX;
        public D2D1_EXTEND_MODE extendModeY;
        public D2D1_INTERPOLATION_MODE interpolationMode;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_BITMAP_BRUSH_PROPERTIES1 // 1
    {
        public D2D1_EXTEND_MODE extendModeX;
        public D2D1_EXTEND_MODE extendModeY;
        public D2D1_INTERPOLATION_MODE interpolationMode;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_LAYER_PARAMETERS1 // 1
    {
        public System.Numerics.Vector4 contentBounds;
        public ID2D1Geometry geometricMask;
        public D2D1_ANTIALIAS_MODE maskAntialiasMode;
        public System.Numerics.Matrix3x2 maskTransform;
        public float opacity;
        public ID2D1Brush opacityBrush;
        public D2D1_LAYER_OPTIONS1 layerOptions;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_RENDERING_CONTROLS // 1
    {
        public D2D1_BUFFER_PRECISION bufferPrecision;
        public D2D_SIZE_U tileSize;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_EFFECT_INPUT_DESCRIPTION // 1
    {
        public ID2D1Effect effect;
        public uint inputIndex;
        public System.Numerics.Vector4 inputRectangle;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_PRINT_CONTROL_PROPERTIES // 1
    {
        public D2D1_PRINT_FONT_SUBSET_MODE fontSubset;
        public float rasterDPI;
        public D2D1_COLOR_SPACE colorSpace;
    }
    public delegate int PD2D1_EFFECT_FACTORY(out IntPtr effectImpl);
    // forward declaration ID2D1Device;
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_POINT_DESCRIPTION // 1
    {
        public System.Numerics.Vector2 point;
        public System.Numerics.Vector2 unitTangentVector;
        public uint endSegment;
        public uint endFigure;
        public float lengthToEndSegment;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_STROKE_STYLE_PROPERTIES1 // 1
    {
        public D2D1_CAP_STYLE startCap;
        public D2D1_CAP_STYLE endCap;
        public D2D1_CAP_STYLE dashCap;
        public D2D1_LINE_JOIN lineJoin;
        public float miterLimit;
        public D2D1_DASH_STYLE dashStyle;
        public float dashOffset;
        public D2D1_STROKE_TRANSFORM_TYPE transformType;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_DRAWING_STATE_DESCRIPTION1 // 1
    {
        public D2D1_ANTIALIAS_MODE antialiasMode;
        public D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode;
        public ulong tag1;
        public ulong tag2;
        public System.Numerics.Matrix3x2 transform;
        public D2D1_PRIMITIVE_BLEND primitiveBlend;
        public D2D1_UNIT_MODE unitMode;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_CREATION_PROPERTIES // 1
    {
        public D2D1_THREADING_MODE threadingMode;
        public D2D1_DEBUG_LEVEL debugLevel;
        public D2D1_DEVICE_CONTEXT_OPTIONS options;
    }
    public static class d2d1_1 {
        [DllImport("d2d1_1.dll")]
        public static extern int D2D1CreateDevice(
            IDXGIDevice dxgiDevice,
            ref D2D1_CREATION_PROPERTIES creationProperties,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<ID2D1Device>))]out ID2D1Device d2dDevice
        );
        [DllImport("d2d1_1.dll")]
        public static extern int D2D1CreateDeviceContext(
            IDXGISurface dxgiSurface,
            ref D2D1_CREATION_PROPERTIES creationProperties,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<ID2D1DeviceContext>))]out ID2D1DeviceContext d2dDeviceContext
        );
        [DllImport("d2d1_1.dll")]
        public static extern System.Numerics.Vector4 D2D1ConvertColorSpace(
            D2D1_COLOR_SPACE sourceColorSpace,
            D2D1_COLOR_SPACE destinationColorSpace,
            ref System.Numerics.Vector4 color
        );
        [DllImport("d2d1_1.dll")]
        public static extern void D2D1SinCos(
            float angle,
            out float s,
            out float c
        );
        [DllImport("d2d1_1.dll")]
        public static extern float D2D1Tan(
            float angle
        );
        [DllImport("d2d1_1.dll")]
        public static extern float D2D1Vec3Length(
            float x,
            float y,
            float z
        );
    }
}
