// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public static partial class Constants {
        // macro function: DWRITE_DECLARE_INTERFACE ( iid ) DECLSPEC_UUID ( iid ) DECLSPEC_NOVTABLE
        // public const int DWRITE_EXPORT = __declspec ( dllimport ) WINAPI;
        // macro function: DWRITE_MAKE_OPENTYPE_TAG ( a , b , c , d ) ( ( static_cast < UINT32 > ( static_cast < UINT8 > ( d ) ) << 24 ) | ( static_cast < UINT32 > ( static_cast < UINT8 > ( c ) ) << 16 ) | ( static_cast < UINT32 > ( static_cast < UINT8 > ( b ) ) << 8 ) | static_cast < UINT32 > ( static_cast < UINT8 > ( a ) ) )
        // macro function: DWRITE_MAKE_FONT_FEATURE_TAG ( a , b , c , d ) ( static_cast < DWRITE_FONT_FEATURE_TAG > ( DWRITE_MAKE_OPENTYPE_TAG ( a , b , c , d ) ) )
        public const int DWRITE_ALPHA_MAX = 255;
        public const int FACILITY_DWRITE = unchecked((int)0x898);
        public const int DWRITE_ERR_BASE = unchecked((int)0x5000);
        // macro function: MAKE_DWRITE_HR ( severity , code ) MAKE_HRESULT ( severity , FACILITY_DWRITE , ( DWRITE_ERR_BASE + code ) )
        // macro function: MAKE_DWRITE_HR_ERR ( code ) MAKE_DWRITE_HR ( SEVERITY_ERROR , code )
    }
    public class IDWriteRenderingParams: IUnknown
    {
        static Guid s_uuid = new Guid("2f0da53a-2add-47cd-82ee-d9ec34688e75");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual float GetGamma(
        ){
            var fp = GetFunctionPointer(3);
            var callback = (GetGammaFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetGammaFunc));
            
            return callback(m_ptr);
        }
        delegate float GetGammaFunc(IntPtr self);

        public virtual float GetEnhancedContrast(
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetEnhancedContrastFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetEnhancedContrastFunc));
            
            return callback(m_ptr);
        }
        delegate float GetEnhancedContrastFunc(IntPtr self);

        public virtual float GetClearTypeLevel(
        ){
            var fp = GetFunctionPointer(5);
            var callback = (GetClearTypeLevelFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetClearTypeLevelFunc));
            
            return callback(m_ptr);
        }
        delegate float GetClearTypeLevelFunc(IntPtr self);

        public virtual DWRITE_PIXEL_GEOMETRY GetPixelGeometry(
        ){
            var fp = GetFunctionPointer(6);
            var callback = (GetPixelGeometryFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPixelGeometryFunc));
            
            return callback(m_ptr);
        }
        delegate DWRITE_PIXEL_GEOMETRY GetPixelGeometryFunc(IntPtr self);

        public virtual DWRITE_RENDERING_MODE GetRenderingMode(
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetRenderingModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetRenderingModeFunc));
            
            return callback(m_ptr);
        }
        delegate DWRITE_RENDERING_MODE GetRenderingModeFunc(IntPtr self);

    }
    public enum DWRITE_PIXEL_GEOMETRY // 2
    {
        _FLAT = 0x0,
        _RGB = 0x1,
        _BGR = 0x2,
    }
    public enum DWRITE_RENDERING_MODE // 4
    {
        _DEFAULT = 0x0,
        _ALIASED = 0x1,
        _GDI_CLASSIC = 0x2,
        _GDI_NATURAL = 0x3,
        _NATURAL = 0x4,
        _NATURAL_SYMMETRIC = 0x5,
        _OUTLINE = 0x6,
        _CLEARTYPE_GDI_CLASSIC = 0x2,
        _CLEARTYPE_GDI_NATURAL = 0x3,
        _CLEARTYPE_NATURAL = 0x4,
        _CLEARTYPE_NATURAL_SYMMETRIC = 0x5,
    }
    public class IDWriteTextFormat: IUnknown
    {
        static Guid s_uuid = new Guid("9c906818-31d7-4fd3-a151-7c5e225db55a");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int SetTextAlignment(
            DWRITE_TEXT_ALIGNMENT textAlignment
        ){
            var fp = GetFunctionPointer(3);
            var callback = (SetTextAlignmentFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetTextAlignmentFunc));
            
            return callback(m_ptr, textAlignment);
        }
        delegate int SetTextAlignmentFunc(IntPtr self, DWRITE_TEXT_ALIGNMENT textAlignment);

        public virtual int SetParagraphAlignment(
            DWRITE_PARAGRAPH_ALIGNMENT paragraphAlignment
        ){
            var fp = GetFunctionPointer(4);
            var callback = (SetParagraphAlignmentFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetParagraphAlignmentFunc));
            
            return callback(m_ptr, paragraphAlignment);
        }
        delegate int SetParagraphAlignmentFunc(IntPtr self, DWRITE_PARAGRAPH_ALIGNMENT paragraphAlignment);

        public virtual int SetWordWrapping(
            DWRITE_WORD_WRAPPING wordWrapping
        ){
            var fp = GetFunctionPointer(5);
            var callback = (SetWordWrappingFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetWordWrappingFunc));
            
            return callback(m_ptr, wordWrapping);
        }
        delegate int SetWordWrappingFunc(IntPtr self, DWRITE_WORD_WRAPPING wordWrapping);

        public virtual int SetReadingDirection(
            DWRITE_READING_DIRECTION readingDirection
        ){
            var fp = GetFunctionPointer(6);
            var callback = (SetReadingDirectionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetReadingDirectionFunc));
            
            return callback(m_ptr, readingDirection);
        }
        delegate int SetReadingDirectionFunc(IntPtr self, DWRITE_READING_DIRECTION readingDirection);

        public virtual int SetFlowDirection(
            DWRITE_FLOW_DIRECTION flowDirection
        ){
            var fp = GetFunctionPointer(7);
            var callback = (SetFlowDirectionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetFlowDirectionFunc));
            
            return callback(m_ptr, flowDirection);
        }
        delegate int SetFlowDirectionFunc(IntPtr self, DWRITE_FLOW_DIRECTION flowDirection);

        public virtual int SetIncrementalTabStop(
            float incrementalTabStop
        ){
            var fp = GetFunctionPointer(8);
            var callback = (SetIncrementalTabStopFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetIncrementalTabStopFunc));
            
            return callback(m_ptr, incrementalTabStop);
        }
        delegate int SetIncrementalTabStopFunc(IntPtr self, float incrementalTabStop);

        public virtual int SetTrimming(
            ref DWRITE_TRIMMING trimmingOptions,
            IDWriteInlineObject trimmingSign
        ){
            var fp = GetFunctionPointer(9);
            var callback = (SetTrimmingFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetTrimmingFunc));
            
            return callback(m_ptr, ref trimmingOptions, trimmingSign!=null ? trimmingSign.Ptr : IntPtr.Zero);
        }
        delegate int SetTrimmingFunc(IntPtr self, ref DWRITE_TRIMMING trimmingOptions, IntPtr trimmingSign);

        public virtual int SetLineSpacing(
            DWRITE_LINE_SPACING_METHOD lineSpacingMethod,
            float lineSpacing,
            float baseline
        ){
            var fp = GetFunctionPointer(10);
            var callback = (SetLineSpacingFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetLineSpacingFunc));
            
            return callback(m_ptr, lineSpacingMethod, lineSpacing, baseline);
        }
        delegate int SetLineSpacingFunc(IntPtr self, DWRITE_LINE_SPACING_METHOD lineSpacingMethod, float lineSpacing, float baseline);

        public virtual DWRITE_TEXT_ALIGNMENT GetTextAlignment(
        ){
            var fp = GetFunctionPointer(11);
            var callback = (GetTextAlignmentFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTextAlignmentFunc));
            
            return callback(m_ptr);
        }
        delegate DWRITE_TEXT_ALIGNMENT GetTextAlignmentFunc(IntPtr self);

        public virtual DWRITE_PARAGRAPH_ALIGNMENT GetParagraphAlignment(
        ){
            var fp = GetFunctionPointer(12);
            var callback = (GetParagraphAlignmentFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetParagraphAlignmentFunc));
            
            return callback(m_ptr);
        }
        delegate DWRITE_PARAGRAPH_ALIGNMENT GetParagraphAlignmentFunc(IntPtr self);

        public virtual DWRITE_WORD_WRAPPING GetWordWrapping(
        ){
            var fp = GetFunctionPointer(13);
            var callback = (GetWordWrappingFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetWordWrappingFunc));
            
            return callback(m_ptr);
        }
        delegate DWRITE_WORD_WRAPPING GetWordWrappingFunc(IntPtr self);

        public virtual DWRITE_READING_DIRECTION GetReadingDirection(
        ){
            var fp = GetFunctionPointer(14);
            var callback = (GetReadingDirectionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetReadingDirectionFunc));
            
            return callback(m_ptr);
        }
        delegate DWRITE_READING_DIRECTION GetReadingDirectionFunc(IntPtr self);

        public virtual DWRITE_FLOW_DIRECTION GetFlowDirection(
        ){
            var fp = GetFunctionPointer(15);
            var callback = (GetFlowDirectionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFlowDirectionFunc));
            
            return callback(m_ptr);
        }
        delegate DWRITE_FLOW_DIRECTION GetFlowDirectionFunc(IntPtr self);

        public virtual float GetIncrementalTabStop(
        ){
            var fp = GetFunctionPointer(16);
            var callback = (GetIncrementalTabStopFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetIncrementalTabStopFunc));
            
            return callback(m_ptr);
        }
        delegate float GetIncrementalTabStopFunc(IntPtr self);

        public virtual int GetTrimming(
            out DWRITE_TRIMMING trimmingOptions,
            out IDWriteInlineObject trimmingSign
        ){
            var fp = GetFunctionPointer(17);
            var callback = (GetTrimmingFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTrimmingFunc));
            trimmingSign = new IDWriteInlineObject();
            return callback(m_ptr, out trimmingOptions, out trimmingSign.PtrForNew);
        }
        delegate int GetTrimmingFunc(IntPtr self, out DWRITE_TRIMMING trimmingOptions, out IntPtr trimmingSign);

        public virtual int GetLineSpacing(
            out DWRITE_LINE_SPACING_METHOD lineSpacingMethod,
            out float lineSpacing,
            out float baseline
        ){
            var fp = GetFunctionPointer(18);
            var callback = (GetLineSpacingFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetLineSpacingFunc));
            
            return callback(m_ptr, out lineSpacingMethod, out lineSpacing, out baseline);
        }
        delegate int GetLineSpacingFunc(IntPtr self, out DWRITE_LINE_SPACING_METHOD lineSpacingMethod, out float lineSpacing, out float baseline);

        public virtual int GetFontCollection(
            out IDWriteFontCollection fontCollection
        ){
            var fp = GetFunctionPointer(19);
            var callback = (GetFontCollectionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFontCollectionFunc));
            fontCollection = new IDWriteFontCollection();
            return callback(m_ptr, out fontCollection.PtrForNew);
        }
        delegate int GetFontCollectionFunc(IntPtr self, out IntPtr fontCollection);

        public virtual uint GetFontFamilyNameLength(
        ){
            var fp = GetFunctionPointer(20);
            var callback = (GetFontFamilyNameLengthFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFontFamilyNameLengthFunc));
            
            return callback(m_ptr);
        }
        delegate uint GetFontFamilyNameLengthFunc(IntPtr self);

        public virtual int GetFontFamilyName(
            out ushort fontFamilyName,
            uint nameSize
        ){
            var fp = GetFunctionPointer(21);
            var callback = (GetFontFamilyNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFontFamilyNameFunc));
            
            return callback(m_ptr, out fontFamilyName, nameSize);
        }
        delegate int GetFontFamilyNameFunc(IntPtr self, out ushort fontFamilyName, uint nameSize);

        public virtual DWRITE_FONT_WEIGHT GetFontWeight(
        ){
            var fp = GetFunctionPointer(22);
            var callback = (GetFontWeightFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFontWeightFunc));
            
            return callback(m_ptr);
        }
        delegate DWRITE_FONT_WEIGHT GetFontWeightFunc(IntPtr self);

        public virtual DWRITE_FONT_STYLE GetFontStyle(
        ){
            var fp = GetFunctionPointer(23);
            var callback = (GetFontStyleFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFontStyleFunc));
            
            return callback(m_ptr);
        }
        delegate DWRITE_FONT_STYLE GetFontStyleFunc(IntPtr self);

        public virtual DWRITE_FONT_STRETCH GetFontStretch(
        ){
            var fp = GetFunctionPointer(24);
            var callback = (GetFontStretchFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFontStretchFunc));
            
            return callback(m_ptr);
        }
        delegate DWRITE_FONT_STRETCH GetFontStretchFunc(IntPtr self);

        public virtual float GetFontSize(
        ){
            var fp = GetFunctionPointer(25);
            var callback = (GetFontSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFontSizeFunc));
            
            return callback(m_ptr);
        }
        delegate float GetFontSizeFunc(IntPtr self);

        public virtual uint GetLocaleNameLength(
        ){
            var fp = GetFunctionPointer(26);
            var callback = (GetLocaleNameLengthFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetLocaleNameLengthFunc));
            
            return callback(m_ptr);
        }
        delegate uint GetLocaleNameLengthFunc(IntPtr self);

        public virtual int GetLocaleName(
            out ushort localeName,
            uint nameSize
        ){
            var fp = GetFunctionPointer(27);
            var callback = (GetLocaleNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetLocaleNameFunc));
            
            return callback(m_ptr, out localeName, nameSize);
        }
        delegate int GetLocaleNameFunc(IntPtr self, out ushort localeName, uint nameSize);

    }
    public enum DWRITE_TEXT_ALIGNMENT // 2
    {
        _LEADING = 0x0,
        _TRAILING = 0x1,
        _CENTER = 0x2,
        _JUSTIFIED = 0x3,
    }
    public enum DWRITE_PARAGRAPH_ALIGNMENT // 2
    {
        _NEAR = 0x0,
        _FAR = 0x1,
        _CENTER = 0x2,
    }
    public enum DWRITE_WORD_WRAPPING // 2
    {
        _WRAP = 0x0,
        _NO_WRAP = 0x1,
        _EMERGENCY_BREAK = 0x2,
        _WHOLE_WORD = 0x3,
        _CHARACTER = 0x4,
    }
    public enum DWRITE_READING_DIRECTION // 5
    {
        _LEFT_TO_RIGHT = 0x0,
        _RIGHT_TO_LEFT = 0x1,
        _TOP_TO_BOTTOM = 0x2,
        _BOTTOM_TO_TOP = 0x3,
    }
    public enum DWRITE_FLOW_DIRECTION // 4
    {
        _TOP_TO_BOTTOM = 0x0,
        _BOTTOM_TO_TOP = 0x1,
        _LEFT_TO_RIGHT = 0x2,
        _RIGHT_TO_LEFT = 0x3,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DWRITE_TRIMMING // 2
    {
        public DWRITE_TRIMMING_GRANULARITY granularity;
        public uint delimiter;
        public uint delimiterCount;
    }
    public enum DWRITE_TRIMMING_GRANULARITY // 1
    {
        _NONE = 0x0,
        _CHARACTER = 0x1,
        _WORD = 0x2,
    }
    public class IDWriteInlineObject: IUnknown
    {
        static Guid s_uuid = new Guid("8339fde3-106f-47ab-8373-1c6295eb10b3");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int Draw(
            IntPtr clientDrawingContext,
            IDWriteTextRenderer renderer,
            float originX,
            float originY,
            int isSideways,
            int isRightToLeft,
            IUnknown clientDrawingEffect
        ){
            var fp = GetFunctionPointer(3);
            var callback = (DrawFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawFunc));
            
            return callback(m_ptr, clientDrawingContext, renderer!=null ? renderer.Ptr : IntPtr.Zero, originX, originY, isSideways, isRightToLeft, clientDrawingEffect!=null ? clientDrawingEffect.Ptr : IntPtr.Zero);
        }
        delegate int DrawFunc(IntPtr self, IntPtr clientDrawingContext, IntPtr renderer, float originX, float originY, int isSideways, int isRightToLeft, IntPtr clientDrawingEffect);

        public virtual int GetMetrics(
            out DWRITE_INLINE_OBJECT_METRICS metrics
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetMetricsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMetricsFunc));
            
            return callback(m_ptr, out metrics);
        }
        delegate int GetMetricsFunc(IntPtr self, out DWRITE_INLINE_OBJECT_METRICS metrics);

        public virtual int GetOverhangMetrics(
            out DWRITE_OVERHANG_METRICS overhangs
        ){
            var fp = GetFunctionPointer(5);
            var callback = (GetOverhangMetricsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetOverhangMetricsFunc));
            
            return callback(m_ptr, out overhangs);
        }
        delegate int GetOverhangMetricsFunc(IntPtr self, out DWRITE_OVERHANG_METRICS overhangs);

        public virtual int GetBreakConditions(
            out DWRITE_BREAK_CONDITION breakConditionBefore,
            out DWRITE_BREAK_CONDITION breakConditionAfter
        ){
            var fp = GetFunctionPointer(6);
            var callback = (GetBreakConditionsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetBreakConditionsFunc));
            
            return callback(m_ptr, out breakConditionBefore, out breakConditionAfter);
        }
        delegate int GetBreakConditionsFunc(IntPtr self, out DWRITE_BREAK_CONDITION breakConditionBefore, out DWRITE_BREAK_CONDITION breakConditionAfter);

    }
    public class IDWriteTextRenderer: IDWritePixelSnapping
    {
        static Guid s_uuid = new Guid("ef8a8135-5cc6-45fe-8825-c5a0724eb819");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int DrawGlyphRun(
            IntPtr clientDrawingContext,
            float baselineOriginX,
            float baselineOriginY,
            DWRITE_MEASURING_MODE measuringMode,
            ref DWRITE_GLYPH_RUN glyphRun,
            ref DWRITE_GLYPH_RUN_DESCRIPTION glyphRunDescription,
            IUnknown clientDrawingEffect
        ){
            var fp = GetFunctionPointer(6);
            var callback = (DrawGlyphRunFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawGlyphRunFunc));
            
            return callback(m_ptr, clientDrawingContext, baselineOriginX, baselineOriginY, measuringMode, ref glyphRun, ref glyphRunDescription, clientDrawingEffect!=null ? clientDrawingEffect.Ptr : IntPtr.Zero);
        }
        delegate int DrawGlyphRunFunc(IntPtr self, IntPtr clientDrawingContext, float baselineOriginX, float baselineOriginY, DWRITE_MEASURING_MODE measuringMode, ref DWRITE_GLYPH_RUN glyphRun, ref DWRITE_GLYPH_RUN_DESCRIPTION glyphRunDescription, IntPtr clientDrawingEffect);

        public virtual int DrawUnderline(
            IntPtr clientDrawingContext,
            float baselineOriginX,
            float baselineOriginY,
            ref DWRITE_UNDERLINE underline,
            IUnknown clientDrawingEffect
        ){
            var fp = GetFunctionPointer(7);
            var callback = (DrawUnderlineFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawUnderlineFunc));
            
            return callback(m_ptr, clientDrawingContext, baselineOriginX, baselineOriginY, ref underline, clientDrawingEffect!=null ? clientDrawingEffect.Ptr : IntPtr.Zero);
        }
        delegate int DrawUnderlineFunc(IntPtr self, IntPtr clientDrawingContext, float baselineOriginX, float baselineOriginY, ref DWRITE_UNDERLINE underline, IntPtr clientDrawingEffect);

        public virtual int DrawStrikethrough(
            IntPtr clientDrawingContext,
            float baselineOriginX,
            float baselineOriginY,
            ref DWRITE_STRIKETHROUGH strikethrough,
            IUnknown clientDrawingEffect
        ){
            var fp = GetFunctionPointer(8);
            var callback = (DrawStrikethroughFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawStrikethroughFunc));
            
            return callback(m_ptr, clientDrawingContext, baselineOriginX, baselineOriginY, ref strikethrough, clientDrawingEffect!=null ? clientDrawingEffect.Ptr : IntPtr.Zero);
        }
        delegate int DrawStrikethroughFunc(IntPtr self, IntPtr clientDrawingContext, float baselineOriginX, float baselineOriginY, ref DWRITE_STRIKETHROUGH strikethrough, IntPtr clientDrawingEffect);

        public virtual int DrawInlineObject(
            IntPtr clientDrawingContext,
            float originX,
            float originY,
            IDWriteInlineObject inlineObject,
            int isSideways,
            int isRightToLeft,
            IUnknown clientDrawingEffect
        ){
            var fp = GetFunctionPointer(9);
            var callback = (DrawInlineObjectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawInlineObjectFunc));
            
            return callback(m_ptr, clientDrawingContext, originX, originY, inlineObject!=null ? inlineObject.Ptr : IntPtr.Zero, isSideways, isRightToLeft, clientDrawingEffect!=null ? clientDrawingEffect.Ptr : IntPtr.Zero);
        }
        delegate int DrawInlineObjectFunc(IntPtr self, IntPtr clientDrawingContext, float originX, float originY, IntPtr inlineObject, int isSideways, int isRightToLeft, IntPtr clientDrawingEffect);

    }
    public class IDWritePixelSnapping: IUnknown
    {
        static Guid s_uuid = new Guid("eaf3a2da-ecf4-4d24-b644-b34f6842024b");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int IsPixelSnappingDisabled(
            IntPtr clientDrawingContext,
            out int isDisabled
        ){
            var fp = GetFunctionPointer(3);
            var callback = (IsPixelSnappingDisabledFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsPixelSnappingDisabledFunc));
            
            return callback(m_ptr, clientDrawingContext, out isDisabled);
        }
        delegate int IsPixelSnappingDisabledFunc(IntPtr self, IntPtr clientDrawingContext, out int isDisabled);

        public virtual int GetCurrentTransform(
            IntPtr clientDrawingContext,
            out DWRITE_MATRIX transform
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetCurrentTransformFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetCurrentTransformFunc));
            
            return callback(m_ptr, clientDrawingContext, out transform);
        }
        delegate int GetCurrentTransformFunc(IntPtr self, IntPtr clientDrawingContext, out DWRITE_MATRIX transform);

        public virtual int GetPixelsPerDip(
            IntPtr clientDrawingContext,
            out float pixelsPerDip
        ){
            var fp = GetFunctionPointer(5);
            var callback = (GetPixelsPerDipFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPixelsPerDipFunc));
            
            return callback(m_ptr, clientDrawingContext, out pixelsPerDip);
        }
        delegate int GetPixelsPerDipFunc(IntPtr self, IntPtr clientDrawingContext, out float pixelsPerDip);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DWRITE_MATRIX // 8
    {
        public float m11;
        public float m12;
        public float m21;
        public float m22;
        public float dx;
        public float dy;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DWRITE_GLYPH_RUN // 4
    {
        public IDWriteFontFace fontFace;
        public float fontEmSize;
        public uint glyphCount;
        public IntPtr glyphIndices;
        public IntPtr glyphAdvances;
        public IntPtr glyphOffsets;
        public int isSideways;
        public uint bidiLevel;
    }
    public class IDWriteFontFace: IUnknown
    {
        static Guid s_uuid = new Guid("5f49804d-7024-4d43-bfa9-d25984f53849");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual DWRITE_FONT_FACE_TYPE GetComType(
        ){
            var fp = GetFunctionPointer(3);
            var callback = (GetTypeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypeFunc));
            
            return callback(m_ptr);
        }
        delegate DWRITE_FONT_FACE_TYPE GetTypeFunc(IntPtr self);

        public virtual int GetFiles(
            out uint numberOfFiles,
            out IDWriteFontFile fontFiles
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetFilesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFilesFunc));
            fontFiles = new IDWriteFontFile();
            return callback(m_ptr, out numberOfFiles, out fontFiles.PtrForNew);
        }
        delegate int GetFilesFunc(IntPtr self, out uint numberOfFiles, out IntPtr fontFiles);

        public virtual uint GetIndex(
        ){
            var fp = GetFunctionPointer(5);
            var callback = (GetIndexFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetIndexFunc));
            
            return callback(m_ptr);
        }
        delegate uint GetIndexFunc(IntPtr self);

        public virtual DWRITE_FONT_SIMULATIONS GetSimulations(
        ){
            var fp = GetFunctionPointer(6);
            var callback = (GetSimulationsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetSimulationsFunc));
            
            return callback(m_ptr);
        }
        delegate DWRITE_FONT_SIMULATIONS GetSimulationsFunc(IntPtr self);

        public virtual int IsSymbolFont(
        ){
            var fp = GetFunctionPointer(7);
            var callback = (IsSymbolFontFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsSymbolFontFunc));
            
            return callback(m_ptr);
        }
        delegate int IsSymbolFontFunc(IntPtr self);

        public virtual void GetMetrics(
            out DWRITE_FONT_METRICS fontFaceMetrics
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetMetricsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMetricsFunc));
            
            callback(m_ptr, out fontFaceMetrics);
        }
        delegate void GetMetricsFunc(IntPtr self, out DWRITE_FONT_METRICS fontFaceMetrics);

        public virtual ushort GetGlyphCount(
        ){
            var fp = GetFunctionPointer(9);
            var callback = (GetGlyphCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetGlyphCountFunc));
            
            return callback(m_ptr);
        }
        delegate ushort GetGlyphCountFunc(IntPtr self);

        public virtual int GetDesignGlyphMetrics(
            ref ushort glyphIndices,
            uint glyphCount,
            out DWRITE_GLYPH_METRICS glyphMetrics,
            int isSideways
        ){
            var fp = GetFunctionPointer(10);
            var callback = (GetDesignGlyphMetricsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDesignGlyphMetricsFunc));
            
            return callback(m_ptr, ref glyphIndices, glyphCount, out glyphMetrics, isSideways);
        }
        delegate int GetDesignGlyphMetricsFunc(IntPtr self, ref ushort glyphIndices, uint glyphCount, out DWRITE_GLYPH_METRICS glyphMetrics, int isSideways);

        public virtual int GetGlyphIndicesW(
            ref uint codePoints,
            uint codePointCount,
            out ushort glyphIndices
        ){
            var fp = GetFunctionPointer(11);
            var callback = (GetGlyphIndicesWFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetGlyphIndicesWFunc));
            
            return callback(m_ptr, ref codePoints, codePointCount, out glyphIndices);
        }
        delegate int GetGlyphIndicesWFunc(IntPtr self, ref uint codePoints, uint codePointCount, out ushort glyphIndices);

        public virtual int TryGetFontTable(
            uint openTypeTableTag,
            ref IntPtr tableData,
            out uint tableSize,
            out IntPtr tableContext,
            out int exists
        ){
            var fp = GetFunctionPointer(12);
            var callback = (TryGetFontTableFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(TryGetFontTableFunc));
            
            return callback(m_ptr, openTypeTableTag, ref tableData, out tableSize, out tableContext, out exists);
        }
        delegate int TryGetFontTableFunc(IntPtr self, uint openTypeTableTag, ref IntPtr tableData, out uint tableSize, out IntPtr tableContext, out int exists);

        public virtual void ReleaseFontTable(
            IntPtr tableContext
        ){
            var fp = GetFunctionPointer(13);
            var callback = (ReleaseFontTableFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ReleaseFontTableFunc));
            
            callback(m_ptr, tableContext);
        }
        delegate void ReleaseFontTableFunc(IntPtr self, IntPtr tableContext);

        public virtual int GetGlyphRunOutline(
            float emSize,
            ref ushort glyphIndices,
            ref float glyphAdvances,
            ref DWRITE_GLYPH_OFFSET glyphOffsets,
            uint glyphCount,
            int isSideways,
            int isRightToLeft,
            ID2D1SimplifiedGeometrySink geometrySink
        ){
            var fp = GetFunctionPointer(14);
            var callback = (GetGlyphRunOutlineFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetGlyphRunOutlineFunc));
            
            return callback(m_ptr, emSize, ref glyphIndices, ref glyphAdvances, ref glyphOffsets, glyphCount, isSideways, isRightToLeft, geometrySink!=null ? geometrySink.Ptr : IntPtr.Zero);
        }
        delegate int GetGlyphRunOutlineFunc(IntPtr self, float emSize, ref ushort glyphIndices, ref float glyphAdvances, ref DWRITE_GLYPH_OFFSET glyphOffsets, uint glyphCount, int isSideways, int isRightToLeft, IntPtr geometrySink);

        public virtual int GetRecommendedRenderingMode(
            float emSize,
            float pixelsPerDip,
            DWRITE_MEASURING_MODE measuringMode,
            IDWriteRenderingParams renderingParams,
            out DWRITE_RENDERING_MODE renderingMode
        ){
            var fp = GetFunctionPointer(15);
            var callback = (GetRecommendedRenderingModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetRecommendedRenderingModeFunc));
            
            return callback(m_ptr, emSize, pixelsPerDip, measuringMode, renderingParams!=null ? renderingParams.Ptr : IntPtr.Zero, out renderingMode);
        }
        delegate int GetRecommendedRenderingModeFunc(IntPtr self, float emSize, float pixelsPerDip, DWRITE_MEASURING_MODE measuringMode, IntPtr renderingParams, out DWRITE_RENDERING_MODE renderingMode);

        public virtual int GetGdiCompatibleMetrics(
            float emSize,
            float pixelsPerDip,
            ref DWRITE_MATRIX transform,
            out DWRITE_FONT_METRICS fontFaceMetrics
        ){
            var fp = GetFunctionPointer(16);
            var callback = (GetGdiCompatibleMetricsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetGdiCompatibleMetricsFunc));
            
            return callback(m_ptr, emSize, pixelsPerDip, ref transform, out fontFaceMetrics);
        }
        delegate int GetGdiCompatibleMetricsFunc(IntPtr self, float emSize, float pixelsPerDip, ref DWRITE_MATRIX transform, out DWRITE_FONT_METRICS fontFaceMetrics);

        public virtual int GetGdiCompatibleGlyphMetrics(
            float emSize,
            float pixelsPerDip,
            ref DWRITE_MATRIX transform,
            int useGdiNatural,
            ref ushort glyphIndices,
            uint glyphCount,
            out DWRITE_GLYPH_METRICS glyphMetrics,
            int isSideways
        ){
            var fp = GetFunctionPointer(17);
            var callback = (GetGdiCompatibleGlyphMetricsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetGdiCompatibleGlyphMetricsFunc));
            
            return callback(m_ptr, emSize, pixelsPerDip, ref transform, useGdiNatural, ref glyphIndices, glyphCount, out glyphMetrics, isSideways);
        }
        delegate int GetGdiCompatibleGlyphMetricsFunc(IntPtr self, float emSize, float pixelsPerDip, ref DWRITE_MATRIX transform, int useGdiNatural, ref ushort glyphIndices, uint glyphCount, out DWRITE_GLYPH_METRICS glyphMetrics, int isSideways);

    }
    public enum DWRITE_FONT_FACE_TYPE // 3
    {
        _CFF = 0x0,
        _TRUETYPE = 0x1,
        _OPENTYPE_COLLECTION = 0x2,
        _TYPE1 = 0x3,
        _VECTOR = 0x4,
        _BITMAP = 0x5,
        _UNKNOWN = 0x6,
        _RAW_CFF = 0x7,
        _TRUETYPE_COLLECTION = 0x2,
    }
    public class IDWriteFontFile: IUnknown
    {
        static Guid s_uuid = new Guid("739d886a-cef5-47dc-8769-1a8b41bebbb0");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int GetReferenceKey(
            ref IntPtr fontFileReferenceKey,
            out uint fontFileReferenceKeySize
        ){
            var fp = GetFunctionPointer(3);
            var callback = (GetReferenceKeyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetReferenceKeyFunc));
            
            return callback(m_ptr, ref fontFileReferenceKey, out fontFileReferenceKeySize);
        }
        delegate int GetReferenceKeyFunc(IntPtr self, ref IntPtr fontFileReferenceKey, out uint fontFileReferenceKeySize);

        public virtual int GetLoader(
            out IDWriteFontFileLoader fontFileLoader
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetLoaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetLoaderFunc));
            fontFileLoader = new IDWriteFontFileLoader();
            return callback(m_ptr, out fontFileLoader.PtrForNew);
        }
        delegate int GetLoaderFunc(IntPtr self, out IntPtr fontFileLoader);

        public virtual int Analyze(
            out int isSupportedFontType,
            out DWRITE_FONT_FILE_TYPE fontFileType,
            out DWRITE_FONT_FACE_TYPE fontFaceType,
            out uint numberOfFaces
        ){
            var fp = GetFunctionPointer(5);
            var callback = (AnalyzeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AnalyzeFunc));
            
            return callback(m_ptr, out isSupportedFontType, out fontFileType, out fontFaceType, out numberOfFaces);
        }
        delegate int AnalyzeFunc(IntPtr self, out int isSupportedFontType, out DWRITE_FONT_FILE_TYPE fontFileType, out DWRITE_FONT_FACE_TYPE fontFaceType, out uint numberOfFaces);

    }
    public class IDWriteFontFileLoader: IUnknown
    {
        static Guid s_uuid = new Guid("727cad4e-d6af-4c9e-8a08-d695b11caa49");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int CreateStreamFromKey(
            IntPtr fontFileReferenceKey,
            uint fontFileReferenceKeySize,
            out IDWriteFontFileStream fontFileStream
        ){
            var fp = GetFunctionPointer(3);
            var callback = (CreateStreamFromKeyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateStreamFromKeyFunc));
            fontFileStream = new IDWriteFontFileStream();
            return callback(m_ptr, fontFileReferenceKey, fontFileReferenceKeySize, out fontFileStream.PtrForNew);
        }
        delegate int CreateStreamFromKeyFunc(IntPtr self, IntPtr fontFileReferenceKey, uint fontFileReferenceKeySize, out IntPtr fontFileStream);

    }
    public class IDWriteFontFileStream: IUnknown
    {
        static Guid s_uuid = new Guid("6d4865fe-0ab8-4d91-8f62-5dd6be34a3e0");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int ReadFileFragment(
            ref IntPtr fragmentStart,
            ulong fileOffset,
            ulong fragmentSize,
            out IntPtr fragmentContext
        ){
            var fp = GetFunctionPointer(3);
            var callback = (ReadFileFragmentFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ReadFileFragmentFunc));
            
            return callback(m_ptr, ref fragmentStart, fileOffset, fragmentSize, out fragmentContext);
        }
        delegate int ReadFileFragmentFunc(IntPtr self, ref IntPtr fragmentStart, ulong fileOffset, ulong fragmentSize, out IntPtr fragmentContext);

        public virtual void ReleaseFileFragment(
            IntPtr fragmentContext
        ){
            var fp = GetFunctionPointer(4);
            var callback = (ReleaseFileFragmentFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ReleaseFileFragmentFunc));
            
            callback(m_ptr, fragmentContext);
        }
        delegate void ReleaseFileFragmentFunc(IntPtr self, IntPtr fragmentContext);

        public virtual int GetFileSize(
            out ulong fileSize
        ){
            var fp = GetFunctionPointer(5);
            var callback = (GetFileSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFileSizeFunc));
            
            return callback(m_ptr, out fileSize);
        }
        delegate int GetFileSizeFunc(IntPtr self, out ulong fileSize);

        public virtual int GetLastWriteTime(
            out ulong lastWriteTime
        ){
            var fp = GetFunctionPointer(6);
            var callback = (GetLastWriteTimeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetLastWriteTimeFunc));
            
            return callback(m_ptr, out lastWriteTime);
        }
        delegate int GetLastWriteTimeFunc(IntPtr self, out ulong lastWriteTime);

    }
    public enum DWRITE_FONT_FILE_TYPE // 1
    {
        _UNKNOWN = 0x0,
        _CFF = 0x1,
        _TRUETYPE = 0x2,
        _OPENTYPE_COLLECTION = 0x3,
        _TYPE1_PFM = 0x4,
        _TYPE1_PFB = 0x5,
        _VECTOR = 0x6,
        _BITMAP = 0x7,
        _TRUETYPE_COLLECTION = 0x3,
    }
    public enum DWRITE_FONT_SIMULATIONS // 23
    {
        _NONE = 0x0,
        _BOLD = 0x1,
        _OBLIQUE = 0x2,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DWRITE_FONT_METRICS // 3
    {
        public ushort designUnitsPerEm;
        public ushort ascent;
        public ushort descent;
        public short lineGap;
        public ushort capHeight;
        public ushort xHeight;
        public short underlinePosition;
        public ushort underlineThickness;
        public short strikethroughPosition;
        public ushort strikethroughThickness;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DWRITE_GLYPH_METRICS // 2
    {
        public int leftSideBearing;
        public uint advanceWidth;
        public int rightSideBearing;
        public int topSideBearing;
        public uint advanceHeight;
        public int bottomSideBearing;
        public int verticalOriginY;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DWRITE_GLYPH_OFFSET // 4
    {
        public float advanceOffset;
        public float ascenderOffset;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DWRITE_GLYPH_RUN_DESCRIPTION // 2
    {
        public IntPtr localeName;
        public IntPtr _string;
        public uint stringLength;
        public IntPtr clusterMap;
        public uint textPosition;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DWRITE_UNDERLINE // 1
    {
        public float width;
        public float thickness;
        public float offset;
        public float runHeight;
        public DWRITE_READING_DIRECTION readingDirection;
        public DWRITE_FLOW_DIRECTION flowDirection;
        public IntPtr localeName;
        public DWRITE_MEASURING_MODE measuringMode;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DWRITE_STRIKETHROUGH // 1
    {
        public float width;
        public float thickness;
        public float offset;
        public DWRITE_READING_DIRECTION readingDirection;
        public DWRITE_FLOW_DIRECTION flowDirection;
        public IntPtr localeName;
        public DWRITE_MEASURING_MODE measuringMode;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DWRITE_INLINE_OBJECT_METRICS // 1
    {
        public float width;
        public float height;
        public float baseline;
        public int supportsSideways;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DWRITE_OVERHANG_METRICS // 2
    {
        public float left;
        public float top;
        public float right;
        public float bottom;
    }
    public enum DWRITE_BREAK_CONDITION // 2
    {
        _NEUTRAL = 0x0,
        _CAN_BREAK = 0x1,
        _MAY_NOT_BREAK = 0x2,
        _MUST_BREAK = 0x3,
    }
    public enum DWRITE_LINE_SPACING_METHOD // 2
    {
        _DEFAULT = 0x0,
        _UNIFORM = 0x1,
        _PROPORTIONAL = 0x2,
    }
    public class IDWriteFontCollection: IUnknown
    {
        static Guid s_uuid = new Guid("a84cee02-3eea-4eee-a827-87c1a02a0fcc");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual uint GetFontFamilyCount(
        ){
            var fp = GetFunctionPointer(3);
            var callback = (GetFontFamilyCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFontFamilyCountFunc));
            
            return callback(m_ptr);
        }
        delegate uint GetFontFamilyCountFunc(IntPtr self);

        public virtual int GetFontFamily(
            uint index,
            out IDWriteFontFamily fontFamily
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetFontFamilyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFontFamilyFunc));
            fontFamily = new IDWriteFontFamily();
            return callback(m_ptr, index, out fontFamily.PtrForNew);
        }
        delegate int GetFontFamilyFunc(IntPtr self, uint index, out IntPtr fontFamily);

        public virtual int FindFamilyName(
            ref ushort familyName,
            out uint index,
            out int exists
        ){
            var fp = GetFunctionPointer(5);
            var callback = (FindFamilyNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FindFamilyNameFunc));
            
            return callback(m_ptr, ref familyName, out index, out exists);
        }
        delegate int FindFamilyNameFunc(IntPtr self, ref ushort familyName, out uint index, out int exists);

        public virtual int GetFontFromFontFace(
            IDWriteFontFace fontFace,
            out IDWriteFont font
        ){
            var fp = GetFunctionPointer(6);
            var callback = (GetFontFromFontFaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFontFromFontFaceFunc));
            font = new IDWriteFont();
            return callback(m_ptr, fontFace!=null ? fontFace.Ptr : IntPtr.Zero, out font.PtrForNew);
        }
        delegate int GetFontFromFontFaceFunc(IntPtr self, IntPtr fontFace, out IntPtr font);

    }
    public class IDWriteFontFamily: IDWriteFontList
    {
        static Guid s_uuid = new Guid("da20d8ef-812a-4c43-9802-62ec4abd7add");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int GetFamilyNames(
            out IDWriteLocalizedStrings names
        ){
            var fp = GetFunctionPointer(6);
            var callback = (GetFamilyNamesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFamilyNamesFunc));
            names = new IDWriteLocalizedStrings();
            return callback(m_ptr, out names.PtrForNew);
        }
        delegate int GetFamilyNamesFunc(IntPtr self, out IntPtr names);

        public virtual int GetFirstMatchingFont(
            DWRITE_FONT_WEIGHT weight,
            DWRITE_FONT_STRETCH stretch,
            DWRITE_FONT_STYLE style,
            out IDWriteFont matchingFont
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetFirstMatchingFontFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFirstMatchingFontFunc));
            matchingFont = new IDWriteFont();
            return callback(m_ptr, weight, stretch, style, out matchingFont.PtrForNew);
        }
        delegate int GetFirstMatchingFontFunc(IntPtr self, DWRITE_FONT_WEIGHT weight, DWRITE_FONT_STRETCH stretch, DWRITE_FONT_STYLE style, out IntPtr matchingFont);

        public virtual int GetMatchingFonts(
            DWRITE_FONT_WEIGHT weight,
            DWRITE_FONT_STRETCH stretch,
            DWRITE_FONT_STYLE style,
            out IDWriteFontList matchingFonts
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetMatchingFontsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMatchingFontsFunc));
            matchingFonts = new IDWriteFontList();
            return callback(m_ptr, weight, stretch, style, out matchingFonts.PtrForNew);
        }
        delegate int GetMatchingFontsFunc(IntPtr self, DWRITE_FONT_WEIGHT weight, DWRITE_FONT_STRETCH stretch, DWRITE_FONT_STYLE style, out IntPtr matchingFonts);

    }
    public class IDWriteFontList: IUnknown
    {
        static Guid s_uuid = new Guid("1a0d8438-1d97-4ec1-aef9-a2fb86ed6acb");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int GetFontCollection(
            out IDWriteFontCollection fontCollection
        ){
            var fp = GetFunctionPointer(3);
            var callback = (GetFontCollectionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFontCollectionFunc));
            fontCollection = new IDWriteFontCollection();
            return callback(m_ptr, out fontCollection.PtrForNew);
        }
        delegate int GetFontCollectionFunc(IntPtr self, out IntPtr fontCollection);

        public virtual uint GetFontCount(
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetFontCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFontCountFunc));
            
            return callback(m_ptr);
        }
        delegate uint GetFontCountFunc(IntPtr self);

        public virtual int GetFont(
            uint index,
            out IDWriteFont font
        ){
            var fp = GetFunctionPointer(5);
            var callback = (GetFontFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFontFunc));
            font = new IDWriteFont();
            return callback(m_ptr, index, out font.PtrForNew);
        }
        delegate int GetFontFunc(IntPtr self, uint index, out IntPtr font);

    }
    public class IDWriteFont: IUnknown
    {
        static Guid s_uuid = new Guid("acd16696-8c14-4f5d-877e-fe3fc1d32737");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int GetFontFamily(
            out IDWriteFontFamily fontFamily
        ){
            var fp = GetFunctionPointer(3);
            var callback = (GetFontFamilyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFontFamilyFunc));
            fontFamily = new IDWriteFontFamily();
            return callback(m_ptr, out fontFamily.PtrForNew);
        }
        delegate int GetFontFamilyFunc(IntPtr self, out IntPtr fontFamily);

        public virtual DWRITE_FONT_WEIGHT GetWeight(
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetWeightFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetWeightFunc));
            
            return callback(m_ptr);
        }
        delegate DWRITE_FONT_WEIGHT GetWeightFunc(IntPtr self);

        public virtual DWRITE_FONT_STRETCH GetStretch(
        ){
            var fp = GetFunctionPointer(5);
            var callback = (GetStretchFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetStretchFunc));
            
            return callback(m_ptr);
        }
        delegate DWRITE_FONT_STRETCH GetStretchFunc(IntPtr self);

        public virtual DWRITE_FONT_STYLE GetStyle(
        ){
            var fp = GetFunctionPointer(6);
            var callback = (GetStyleFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetStyleFunc));
            
            return callback(m_ptr);
        }
        delegate DWRITE_FONT_STYLE GetStyleFunc(IntPtr self);

        public virtual int IsSymbolFont(
        ){
            var fp = GetFunctionPointer(7);
            var callback = (IsSymbolFontFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsSymbolFontFunc));
            
            return callback(m_ptr);
        }
        delegate int IsSymbolFontFunc(IntPtr self);

        public virtual int GetFaceNames(
            out IDWriteLocalizedStrings names
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetFaceNamesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFaceNamesFunc));
            names = new IDWriteLocalizedStrings();
            return callback(m_ptr, out names.PtrForNew);
        }
        delegate int GetFaceNamesFunc(IntPtr self, out IntPtr names);

        public virtual int GetInformationalStrings(
            DWRITE_INFORMATIONAL_STRING_ID informationalStringID,
            out IDWriteLocalizedStrings informationalStrings,
            out int exists
        ){
            var fp = GetFunctionPointer(9);
            var callback = (GetInformationalStringsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetInformationalStringsFunc));
            informationalStrings = new IDWriteLocalizedStrings();
            return callback(m_ptr, informationalStringID, out informationalStrings.PtrForNew, out exists);
        }
        delegate int GetInformationalStringsFunc(IntPtr self, DWRITE_INFORMATIONAL_STRING_ID informationalStringID, out IntPtr informationalStrings, out int exists);

        public virtual DWRITE_FONT_SIMULATIONS GetSimulations(
        ){
            var fp = GetFunctionPointer(10);
            var callback = (GetSimulationsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetSimulationsFunc));
            
            return callback(m_ptr);
        }
        delegate DWRITE_FONT_SIMULATIONS GetSimulationsFunc(IntPtr self);

        public virtual void GetMetrics(
            out DWRITE_FONT_METRICS fontMetrics
        ){
            var fp = GetFunctionPointer(11);
            var callback = (GetMetricsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMetricsFunc));
            
            callback(m_ptr, out fontMetrics);
        }
        delegate void GetMetricsFunc(IntPtr self, out DWRITE_FONT_METRICS fontMetrics);

        public virtual int HasCharacter(
            uint unicodeValue,
            out int exists
        ){
            var fp = GetFunctionPointer(12);
            var callback = (HasCharacterFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(HasCharacterFunc));
            
            return callback(m_ptr, unicodeValue, out exists);
        }
        delegate int HasCharacterFunc(IntPtr self, uint unicodeValue, out int exists);

        public virtual int CreateFontFace(
            out IDWriteFontFace fontFace
        ){
            var fp = GetFunctionPointer(13);
            var callback = (CreateFontFaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateFontFaceFunc));
            fontFace = new IDWriteFontFace();
            return callback(m_ptr, out fontFace.PtrForNew);
        }
        delegate int CreateFontFaceFunc(IntPtr self, out IntPtr fontFace);

    }
    public enum DWRITE_FONT_WEIGHT // 7
    {
        _THIN = 0x64,
        _EXTRA_LIGHT = 0xc8,
        _ULTRA_LIGHT = 0xc8,
        _LIGHT = 0x12c,
        _SEMI_LIGHT = 0x15e,
        _NORMAL = 0x190,
        _REGULAR = 0x190,
        _MEDIUM = 0x1f4,
        _DEMI_BOLD = 0x258,
        _SEMI_BOLD = 0x258,
        _BOLD = 0x2bc,
        _EXTRA_BOLD = 0x320,
        _ULTRA_BOLD = 0x320,
        _BLACK = 0x384,
        _HEAVY = 0x384,
        _EXTRA_BLACK = 0x3b6,
        _ULTRA_BLACK = 0x3b6,
    }
    public enum DWRITE_FONT_STRETCH // 7
    {
        _UNDEFINED = 0x0,
        _ULTRA_CONDENSED = 0x1,
        _EXTRA_CONDENSED = 0x2,
        _CONDENSED = 0x3,
        _SEMI_CONDENSED = 0x4,
        _NORMAL = 0x5,
        _MEDIUM = 0x5,
        _SEMI_EXPANDED = 0x6,
        _EXPANDED = 0x7,
        _EXTRA_EXPANDED = 0x8,
        _ULTRA_EXPANDED = 0x9,
    }
    public enum DWRITE_FONT_STYLE // 7
    {
        _NORMAL = 0x0,
        _OBLIQUE = 0x1,
        _ITALIC = 0x2,
    }
    public class IDWriteLocalizedStrings: IUnknown
    {
        static Guid s_uuid = new Guid("08256209-099a-4b34-b86d-c22b110e7771");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual uint GetCount(
        ){
            var fp = GetFunctionPointer(3);
            var callback = (GetCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetCountFunc));
            
            return callback(m_ptr);
        }
        delegate uint GetCountFunc(IntPtr self);

        public virtual int FindLocaleName(
            ref ushort localeName,
            out uint index,
            out int exists
        ){
            var fp = GetFunctionPointer(4);
            var callback = (FindLocaleNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FindLocaleNameFunc));
            
            return callback(m_ptr, ref localeName, out index, out exists);
        }
        delegate int FindLocaleNameFunc(IntPtr self, ref ushort localeName, out uint index, out int exists);

        public virtual int GetLocaleNameLength(
            uint index,
            out uint length
        ){
            var fp = GetFunctionPointer(5);
            var callback = (GetLocaleNameLengthFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetLocaleNameLengthFunc));
            
            return callback(m_ptr, index, out length);
        }
        delegate int GetLocaleNameLengthFunc(IntPtr self, uint index, out uint length);

        public virtual int GetLocaleName(
            uint index,
            out ushort localeName,
            uint size
        ){
            var fp = GetFunctionPointer(6);
            var callback = (GetLocaleNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetLocaleNameFunc));
            
            return callback(m_ptr, index, out localeName, size);
        }
        delegate int GetLocaleNameFunc(IntPtr self, uint index, out ushort localeName, uint size);

        public virtual int GetStringLength(
            uint index,
            out uint length
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetStringLengthFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetStringLengthFunc));
            
            return callback(m_ptr, index, out length);
        }
        delegate int GetStringLengthFunc(IntPtr self, uint index, out uint length);

        public virtual int GetString(
            uint index,
            out ushort stringBuffer,
            uint size
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetStringFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetStringFunc));
            
            return callback(m_ptr, index, out stringBuffer, size);
        }
        delegate int GetStringFunc(IntPtr self, uint index, out ushort stringBuffer, uint size);

    }
    public enum DWRITE_INFORMATIONAL_STRING_ID // 1
    {
        _NONE = 0x0,
        _COPYRIGHT_NOTICE = 0x1,
        _VERSION_STRINGS = 0x2,
        _TRADEMARK = 0x3,
        _MANUFACTURER = 0x4,
        _DESIGNER = 0x5,
        _DESIGNER_URL = 0x6,
        _DESCRIPTION = 0x7,
        _FONT_VENDOR_URL = 0x8,
        _LICENSE_DESCRIPTION = 0x9,
        _LICENSE_INFO_URL = 0xa,
        _WIN32_FAMILY_NAMES = 0xb,
        _WIN32_SUBFAMILY_NAMES = 0xc,
        _TYPOGRAPHIC_FAMILY_NAMES = 0xd,
        _TYPOGRAPHIC_SUBFAMILY_NAMES = 0xe,
        _SAMPLE_TEXT = 0xf,
        _FULL_NAME = 0x10,
        _POSTSCRIPT_NAME = 0x11,
        _POSTSCRIPT_CID_NAME = 0x12,
        _WEIGHT_STRETCH_STYLE_FAMILY_NAME = 0x13,
        _DESIGN_SCRIPT_LANGUAGE_TAG = 0x14,
        _SUPPORTED_SCRIPT_LANGUAGE_TAG = 0x15,
        _PREFERRED_FAMILY_NAMES = 0xd,
        _PREFERRED_SUBFAMILY_NAMES = 0xe,
        _WWS_FAMILY_NAME = 0x13,
    }
    public class IDWriteTextLayout: IDWriteTextFormat
    {
        static Guid s_uuid = new Guid("53737037-6d14-410b-9bfe-0b182bb70961");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int SetMaxWidth(
            float maxWidth
        ){
            var fp = GetFunctionPointer(28);
            var callback = (SetMaxWidthFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetMaxWidthFunc));
            
            return callback(m_ptr, maxWidth);
        }
        delegate int SetMaxWidthFunc(IntPtr self, float maxWidth);

        public virtual int SetMaxHeight(
            float maxHeight
        ){
            var fp = GetFunctionPointer(29);
            var callback = (SetMaxHeightFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetMaxHeightFunc));
            
            return callback(m_ptr, maxHeight);
        }
        delegate int SetMaxHeightFunc(IntPtr self, float maxHeight);

        public virtual int SetFontCollection(
            IDWriteFontCollection fontCollection,
            DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(30);
            var callback = (SetFontCollectionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetFontCollectionFunc));
            
            return callback(m_ptr, fontCollection!=null ? fontCollection.Ptr : IntPtr.Zero, textRange);
        }
        delegate int SetFontCollectionFunc(IntPtr self, IntPtr fontCollection, DWRITE_TEXT_RANGE textRange);

        public virtual int SetFontFamilyName(
            ref ushort fontFamilyName,
            DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(31);
            var callback = (SetFontFamilyNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetFontFamilyNameFunc));
            
            return callback(m_ptr, ref fontFamilyName, textRange);
        }
        delegate int SetFontFamilyNameFunc(IntPtr self, ref ushort fontFamilyName, DWRITE_TEXT_RANGE textRange);

        public virtual int SetFontWeight(
            DWRITE_FONT_WEIGHT fontWeight,
            DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(32);
            var callback = (SetFontWeightFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetFontWeightFunc));
            
            return callback(m_ptr, fontWeight, textRange);
        }
        delegate int SetFontWeightFunc(IntPtr self, DWRITE_FONT_WEIGHT fontWeight, DWRITE_TEXT_RANGE textRange);

        public virtual int SetFontStyle(
            DWRITE_FONT_STYLE fontStyle,
            DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(33);
            var callback = (SetFontStyleFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetFontStyleFunc));
            
            return callback(m_ptr, fontStyle, textRange);
        }
        delegate int SetFontStyleFunc(IntPtr self, DWRITE_FONT_STYLE fontStyle, DWRITE_TEXT_RANGE textRange);

        public virtual int SetFontStretch(
            DWRITE_FONT_STRETCH fontStretch,
            DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(34);
            var callback = (SetFontStretchFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetFontStretchFunc));
            
            return callback(m_ptr, fontStretch, textRange);
        }
        delegate int SetFontStretchFunc(IntPtr self, DWRITE_FONT_STRETCH fontStretch, DWRITE_TEXT_RANGE textRange);

        public virtual int SetFontSize(
            float fontSize,
            DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(35);
            var callback = (SetFontSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetFontSizeFunc));
            
            return callback(m_ptr, fontSize, textRange);
        }
        delegate int SetFontSizeFunc(IntPtr self, float fontSize, DWRITE_TEXT_RANGE textRange);

        public virtual int SetUnderline(
            int hasUnderline,
            DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(36);
            var callback = (SetUnderlineFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetUnderlineFunc));
            
            return callback(m_ptr, hasUnderline, textRange);
        }
        delegate int SetUnderlineFunc(IntPtr self, int hasUnderline, DWRITE_TEXT_RANGE textRange);

        public virtual int SetStrikethrough(
            int hasStrikethrough,
            DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(37);
            var callback = (SetStrikethroughFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetStrikethroughFunc));
            
            return callback(m_ptr, hasStrikethrough, textRange);
        }
        delegate int SetStrikethroughFunc(IntPtr self, int hasStrikethrough, DWRITE_TEXT_RANGE textRange);

        public virtual int SetDrawingEffect(
            IUnknown drawingEffect,
            DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(38);
            var callback = (SetDrawingEffectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetDrawingEffectFunc));
            
            return callback(m_ptr, drawingEffect!=null ? drawingEffect.Ptr : IntPtr.Zero, textRange);
        }
        delegate int SetDrawingEffectFunc(IntPtr self, IntPtr drawingEffect, DWRITE_TEXT_RANGE textRange);

        public virtual int SetInlineObject(
            IDWriteInlineObject inlineObject,
            DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(39);
            var callback = (SetInlineObjectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetInlineObjectFunc));
            
            return callback(m_ptr, inlineObject!=null ? inlineObject.Ptr : IntPtr.Zero, textRange);
        }
        delegate int SetInlineObjectFunc(IntPtr self, IntPtr inlineObject, DWRITE_TEXT_RANGE textRange);

        public virtual int SetTypography(
            IDWriteTypography typography,
            DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(40);
            var callback = (SetTypographyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetTypographyFunc));
            
            return callback(m_ptr, typography!=null ? typography.Ptr : IntPtr.Zero, textRange);
        }
        delegate int SetTypographyFunc(IntPtr self, IntPtr typography, DWRITE_TEXT_RANGE textRange);

        public virtual int SetLocaleName(
            ref ushort localeName,
            DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(41);
            var callback = (SetLocaleNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetLocaleNameFunc));
            
            return callback(m_ptr, ref localeName, textRange);
        }
        delegate int SetLocaleNameFunc(IntPtr self, ref ushort localeName, DWRITE_TEXT_RANGE textRange);

        public virtual float GetMaxWidth(
        ){
            var fp = GetFunctionPointer(42);
            var callback = (GetMaxWidthFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMaxWidthFunc));
            
            return callback(m_ptr);
        }
        delegate float GetMaxWidthFunc(IntPtr self);

        public virtual float GetMaxHeight(
        ){
            var fp = GetFunctionPointer(43);
            var callback = (GetMaxHeightFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMaxHeightFunc));
            
            return callback(m_ptr);
        }
        delegate float GetMaxHeightFunc(IntPtr self);

        public virtual int GetFontCollection(
            uint currentPosition,
            out IDWriteFontCollection fontCollection,
            out DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(44);
            var callback = (GetFontCollectionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFontCollectionFunc));
            fontCollection = new IDWriteFontCollection();
            return callback(m_ptr, currentPosition, out fontCollection.PtrForNew, out textRange);
        }
        delegate int GetFontCollectionFunc(IntPtr self, uint currentPosition, out IntPtr fontCollection, out DWRITE_TEXT_RANGE textRange);

        public virtual int GetFontFamilyNameLength(
            uint currentPosition,
            out uint nameLength,
            out DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(45);
            var callback = (GetFontFamilyNameLengthFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFontFamilyNameLengthFunc));
            
            return callback(m_ptr, currentPosition, out nameLength, out textRange);
        }
        delegate int GetFontFamilyNameLengthFunc(IntPtr self, uint currentPosition, out uint nameLength, out DWRITE_TEXT_RANGE textRange);

        public virtual int GetFontFamilyName(
            uint currentPosition,
            out ushort fontFamilyName,
            uint nameSize,
            out DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(46);
            var callback = (GetFontFamilyNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFontFamilyNameFunc));
            
            return callback(m_ptr, currentPosition, out fontFamilyName, nameSize, out textRange);
        }
        delegate int GetFontFamilyNameFunc(IntPtr self, uint currentPosition, out ushort fontFamilyName, uint nameSize, out DWRITE_TEXT_RANGE textRange);

        public virtual int GetFontWeight(
            uint currentPosition,
            out DWRITE_FONT_WEIGHT fontWeight,
            out DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(47);
            var callback = (GetFontWeightFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFontWeightFunc));
            
            return callback(m_ptr, currentPosition, out fontWeight, out textRange);
        }
        delegate int GetFontWeightFunc(IntPtr self, uint currentPosition, out DWRITE_FONT_WEIGHT fontWeight, out DWRITE_TEXT_RANGE textRange);

        public virtual int GetFontStyle(
            uint currentPosition,
            out DWRITE_FONT_STYLE fontStyle,
            out DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(48);
            var callback = (GetFontStyleFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFontStyleFunc));
            
            return callback(m_ptr, currentPosition, out fontStyle, out textRange);
        }
        delegate int GetFontStyleFunc(IntPtr self, uint currentPosition, out DWRITE_FONT_STYLE fontStyle, out DWRITE_TEXT_RANGE textRange);

        public virtual int GetFontStretch(
            uint currentPosition,
            out DWRITE_FONT_STRETCH fontStretch,
            out DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(49);
            var callback = (GetFontStretchFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFontStretchFunc));
            
            return callback(m_ptr, currentPosition, out fontStretch, out textRange);
        }
        delegate int GetFontStretchFunc(IntPtr self, uint currentPosition, out DWRITE_FONT_STRETCH fontStretch, out DWRITE_TEXT_RANGE textRange);

        public virtual int GetFontSize(
            uint currentPosition,
            out float fontSize,
            out DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(50);
            var callback = (GetFontSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFontSizeFunc));
            
            return callback(m_ptr, currentPosition, out fontSize, out textRange);
        }
        delegate int GetFontSizeFunc(IntPtr self, uint currentPosition, out float fontSize, out DWRITE_TEXT_RANGE textRange);

        public virtual int GetUnderline(
            uint currentPosition,
            out int hasUnderline,
            out DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(51);
            var callback = (GetUnderlineFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetUnderlineFunc));
            
            return callback(m_ptr, currentPosition, out hasUnderline, out textRange);
        }
        delegate int GetUnderlineFunc(IntPtr self, uint currentPosition, out int hasUnderline, out DWRITE_TEXT_RANGE textRange);

        public virtual int GetStrikethrough(
            uint currentPosition,
            out int hasStrikethrough,
            out DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(52);
            var callback = (GetStrikethroughFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetStrikethroughFunc));
            
            return callback(m_ptr, currentPosition, out hasStrikethrough, out textRange);
        }
        delegate int GetStrikethroughFunc(IntPtr self, uint currentPosition, out int hasStrikethrough, out DWRITE_TEXT_RANGE textRange);

        public virtual int GetDrawingEffect(
            uint currentPosition,
            out IntPtr drawingEffect,
            out DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(53);
            var callback = (GetDrawingEffectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDrawingEffectFunc));
            
            return callback(m_ptr, currentPosition, out drawingEffect, out textRange);
        }
        delegate int GetDrawingEffectFunc(IntPtr self, uint currentPosition, out IntPtr drawingEffect, out DWRITE_TEXT_RANGE textRange);

        public virtual int GetInlineObject(
            uint currentPosition,
            out IDWriteInlineObject inlineObject,
            out DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(54);
            var callback = (GetInlineObjectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetInlineObjectFunc));
            inlineObject = new IDWriteInlineObject();
            return callback(m_ptr, currentPosition, out inlineObject.PtrForNew, out textRange);
        }
        delegate int GetInlineObjectFunc(IntPtr self, uint currentPosition, out IntPtr inlineObject, out DWRITE_TEXT_RANGE textRange);

        public virtual int GetTypography(
            uint currentPosition,
            out IDWriteTypography typography,
            out DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(55);
            var callback = (GetTypographyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypographyFunc));
            typography = new IDWriteTypography();
            return callback(m_ptr, currentPosition, out typography.PtrForNew, out textRange);
        }
        delegate int GetTypographyFunc(IntPtr self, uint currentPosition, out IntPtr typography, out DWRITE_TEXT_RANGE textRange);

        public virtual int GetLocaleNameLength(
            uint currentPosition,
            out uint nameLength,
            out DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(56);
            var callback = (GetLocaleNameLengthFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetLocaleNameLengthFunc));
            
            return callback(m_ptr, currentPosition, out nameLength, out textRange);
        }
        delegate int GetLocaleNameLengthFunc(IntPtr self, uint currentPosition, out uint nameLength, out DWRITE_TEXT_RANGE textRange);

        public virtual int GetLocaleName(
            uint currentPosition,
            out ushort localeName,
            uint nameSize,
            out DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(57);
            var callback = (GetLocaleNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetLocaleNameFunc));
            
            return callback(m_ptr, currentPosition, out localeName, nameSize, out textRange);
        }
        delegate int GetLocaleNameFunc(IntPtr self, uint currentPosition, out ushort localeName, uint nameSize, out DWRITE_TEXT_RANGE textRange);

        public virtual int Draw(
            IntPtr clientDrawingContext,
            IDWriteTextRenderer renderer,
            float originX,
            float originY
        ){
            var fp = GetFunctionPointer(58);
            var callback = (DrawFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawFunc));
            
            return callback(m_ptr, clientDrawingContext, renderer!=null ? renderer.Ptr : IntPtr.Zero, originX, originY);
        }
        delegate int DrawFunc(IntPtr self, IntPtr clientDrawingContext, IntPtr renderer, float originX, float originY);

        public virtual int GetLineMetrics(
            out DWRITE_LINE_METRICS lineMetrics,
            uint maxLineCount,
            out uint actualLineCount
        ){
            var fp = GetFunctionPointer(59);
            var callback = (GetLineMetricsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetLineMetricsFunc));
            
            return callback(m_ptr, out lineMetrics, maxLineCount, out actualLineCount);
        }
        delegate int GetLineMetricsFunc(IntPtr self, out DWRITE_LINE_METRICS lineMetrics, uint maxLineCount, out uint actualLineCount);

        public virtual int GetMetrics(
            out DWRITE_TEXT_METRICS textMetrics
        ){
            var fp = GetFunctionPointer(60);
            var callback = (GetMetricsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMetricsFunc));
            
            return callback(m_ptr, out textMetrics);
        }
        delegate int GetMetricsFunc(IntPtr self, out DWRITE_TEXT_METRICS textMetrics);

        public virtual int GetOverhangMetrics(
            out DWRITE_OVERHANG_METRICS overhangs
        ){
            var fp = GetFunctionPointer(61);
            var callback = (GetOverhangMetricsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetOverhangMetricsFunc));
            
            return callback(m_ptr, out overhangs);
        }
        delegate int GetOverhangMetricsFunc(IntPtr self, out DWRITE_OVERHANG_METRICS overhangs);

        public virtual int GetClusterMetrics(
            out DWRITE_CLUSTER_METRICS clusterMetrics,
            uint maxClusterCount,
            out uint actualClusterCount
        ){
            var fp = GetFunctionPointer(62);
            var callback = (GetClusterMetricsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetClusterMetricsFunc));
            
            return callback(m_ptr, out clusterMetrics, maxClusterCount, out actualClusterCount);
        }
        delegate int GetClusterMetricsFunc(IntPtr self, out DWRITE_CLUSTER_METRICS clusterMetrics, uint maxClusterCount, out uint actualClusterCount);

        public virtual int DetermineMinWidth(
            out float minWidth
        ){
            var fp = GetFunctionPointer(63);
            var callback = (DetermineMinWidthFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DetermineMinWidthFunc));
            
            return callback(m_ptr, out minWidth);
        }
        delegate int DetermineMinWidthFunc(IntPtr self, out float minWidth);

        public virtual int HitTestPoint(
            float pointX,
            float pointY,
            out int isTrailingHit,
            out int isInside,
            out DWRITE_HIT_TEST_METRICS hitTestMetrics
        ){
            var fp = GetFunctionPointer(64);
            var callback = (HitTestPointFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(HitTestPointFunc));
            
            return callback(m_ptr, pointX, pointY, out isTrailingHit, out isInside, out hitTestMetrics);
        }
        delegate int HitTestPointFunc(IntPtr self, float pointX, float pointY, out int isTrailingHit, out int isInside, out DWRITE_HIT_TEST_METRICS hitTestMetrics);

        public virtual int HitTestTextPosition(
            uint textPosition,
            int isTrailingHit,
            out float pointX,
            out float pointY,
            out DWRITE_HIT_TEST_METRICS hitTestMetrics
        ){
            var fp = GetFunctionPointer(65);
            var callback = (HitTestTextPositionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(HitTestTextPositionFunc));
            
            return callback(m_ptr, textPosition, isTrailingHit, out pointX, out pointY, out hitTestMetrics);
        }
        delegate int HitTestTextPositionFunc(IntPtr self, uint textPosition, int isTrailingHit, out float pointX, out float pointY, out DWRITE_HIT_TEST_METRICS hitTestMetrics);

        public virtual int HitTestTextRange(
            uint textPosition,
            uint textLength,
            float originX,
            float originY,
            out DWRITE_HIT_TEST_METRICS hitTestMetrics,
            uint maxHitTestMetricsCount,
            out uint actualHitTestMetricsCount
        ){
            var fp = GetFunctionPointer(66);
            var callback = (HitTestTextRangeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(HitTestTextRangeFunc));
            
            return callback(m_ptr, textPosition, textLength, originX, originY, out hitTestMetrics, maxHitTestMetricsCount, out actualHitTestMetricsCount);
        }
        delegate int HitTestTextRangeFunc(IntPtr self, uint textPosition, uint textLength, float originX, float originY, out DWRITE_HIT_TEST_METRICS hitTestMetrics, uint maxHitTestMetricsCount, out uint actualHitTestMetricsCount);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DWRITE_TEXT_RANGE // 26
    {
        public uint startPosition;
        public uint length;
    }
    public class IDWriteTypography: IUnknown
    {
        static Guid s_uuid = new Guid("55f1112b-1dc2-4b3c-9541-f46894ed85b6");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int AddFontFeature(
            DWRITE_FONT_FEATURE fontFeature
        ){
            var fp = GetFunctionPointer(3);
            var callback = (AddFontFeatureFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AddFontFeatureFunc));
            
            return callback(m_ptr, fontFeature);
        }
        delegate int AddFontFeatureFunc(IntPtr self, DWRITE_FONT_FEATURE fontFeature);

        public virtual uint GetFontFeatureCount(
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetFontFeatureCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFontFeatureCountFunc));
            
            return callback(m_ptr);
        }
        delegate uint GetFontFeatureCountFunc(IntPtr self);

        public virtual int GetFontFeature(
            uint fontFeatureIndex,
            out DWRITE_FONT_FEATURE fontFeature
        ){
            var fp = GetFunctionPointer(5);
            var callback = (GetFontFeatureFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFontFeatureFunc));
            
            return callback(m_ptr, fontFeatureIndex, out fontFeature);
        }
        delegate int GetFontFeatureFunc(IntPtr self, uint fontFeatureIndex, out DWRITE_FONT_FEATURE fontFeature);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DWRITE_FONT_FEATURE // 3
    {
        public DWRITE_FONT_FEATURE_TAG nameTag;
        public uint parameter;
    }
    public enum DWRITE_FONT_FEATURE_TAG // 1
    {
        _ALTERNATIVE_FRACTIONS = 0x63726661,
        _PETITE_CAPITALS_FROM_CAPITALS = 0x63703263,
        _SMALL_CAPITALS_FROM_CAPITALS = 0x63733263,
        _CONTEXTUAL_ALTERNATES = 0x746c6163,
        _CASE_SENSITIVE_FORMS = 0x65736163,
        _GLYPH_COMPOSITION_DECOMPOSITION = 0x706d6363,
        _CONTEXTUAL_LIGATURES = 0x67696c63,
        _CAPITAL_SPACING = 0x70737063,
        _CONTEXTUAL_SWASH = 0x68777363,
        _CURSIVE_POSITIONING = 0x73727563,
        _DEFAULT = 0x746c6664,
        _DISCRETIONARY_LIGATURES = 0x67696c64,
        _EXPERT_FORMS = 0x74707865,
        _FRACTIONS = 0x63617266,
        _FULL_WIDTH = 0x64697766,
        _HALF_FORMS = 0x666c6168,
        _HALANT_FORMS = 0x6e6c6168,
        _ALTERNATE_HALF_WIDTH = 0x746c6168,
        _HISTORICAL_FORMS = 0x74736968,
        _HORIZONTAL_KANA_ALTERNATES = 0x616e6b68,
        _HISTORICAL_LIGATURES = 0x67696c68,
        _HALF_WIDTH = 0x64697768,
        _HOJO_KANJI_FORMS = 0x6f6a6f68,
        _JIS04_FORMS = 0x3430706a,
        _JIS78_FORMS = 0x3837706a,
        _JIS83_FORMS = 0x3338706a,
        _JIS90_FORMS = 0x3039706a,
        _KERNING = 0x6e72656b,
        _STANDARD_LIGATURES = 0x6167696c,
        _LINING_FIGURES = 0x6d756e6c,
        _LOCALIZED_FORMS = 0x6c636f6c,
        _MARK_POSITIONING = 0x6b72616d,
        _MATHEMATICAL_GREEK = 0x6b72676d,
        _MARK_TO_MARK_POSITIONING = 0x6b6d6b6d,
        _ALTERNATE_ANNOTATION_FORMS = 0x746c616e,
        _NLC_KANJI_FORMS = 0x6b636c6e,
        _OLD_STYLE_FIGURES = 0x6d756e6f,
        _ORDINALS = 0x6e64726f,
        _PROPORTIONAL_ALTERNATE_WIDTH = 0x746c6170,
        _PETITE_CAPITALS = 0x70616370,
        _PROPORTIONAL_FIGURES = 0x6d756e70,
        _PROPORTIONAL_WIDTHS = 0x64697770,
        _QUARTER_WIDTHS = 0x64697771,
        _REQUIRED_LIGATURES = 0x67696c72,
        _RUBY_NOTATION_FORMS = 0x79627572,
        _STYLISTIC_ALTERNATES = 0x746c6173,
        _SCIENTIFIC_INFERIORS = 0x666e6973,
        _SMALL_CAPITALS = 0x70636d73,
        _SIMPLIFIED_FORMS = 0x6c706d73,
        _STYLISTIC_SET_1 = 0x31307373,
        _STYLISTIC_SET_2 = 0x32307373,
        _STYLISTIC_SET_3 = 0x33307373,
        _STYLISTIC_SET_4 = 0x34307373,
        _STYLISTIC_SET_5 = 0x35307373,
        _STYLISTIC_SET_6 = 0x36307373,
        _STYLISTIC_SET_7 = 0x37307373,
        _STYLISTIC_SET_8 = 0x38307373,
        _STYLISTIC_SET_9 = 0x39307373,
        _STYLISTIC_SET_10 = 0x30317373,
        _STYLISTIC_SET_11 = 0x31317373,
        _STYLISTIC_SET_12 = 0x32317373,
        _STYLISTIC_SET_13 = 0x33317373,
        _STYLISTIC_SET_14 = 0x34317373,
        _STYLISTIC_SET_15 = 0x35317373,
        _STYLISTIC_SET_16 = 0x36317373,
        _STYLISTIC_SET_17 = 0x37317373,
        _STYLISTIC_SET_18 = 0x38317373,
        _STYLISTIC_SET_19 = 0x39317373,
        _STYLISTIC_SET_20 = 0x30327373,
        _SUBSCRIPT = 0x73627573,
        _SUPERSCRIPT = 0x73707573,
        _SWASH = 0x68737773,
        _TITLING = 0x6c746974,
        _TRADITIONAL_NAME_FORMS = 0x6d616e74,
        _TABULAR_FIGURES = 0x6d756e74,
        _TRADITIONAL_FORMS = 0x64617274,
        _THIRD_WIDTHS = 0x64697774,
        _UNICASE = 0x63696e75,
        _VERTICAL_WRITING = 0x74726576,
        _VERTICAL_ALTERNATES_AND_ROTATION = 0x32747276,
        _SLASHED_ZERO = 0x6f72657a,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DWRITE_LINE_METRICS // 1
    {
        public uint length;
        public uint trailingWhitespaceLength;
        public uint newlineLength;
        public float height;
        public float baseline;
        public int isTrimmed;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DWRITE_TEXT_METRICS // 1
    {
        public float left;
        public float top;
        public float width;
        public float widthIncludingTrailingWhitespace;
        public float height;
        public float layoutWidth;
        public float layoutHeight;
        public uint maxBidiReorderingDepth;
        public uint lineCount;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DWRITE_CLUSTER_METRICS // 1
    {
        public float width;
        public ushort length;
        public ushort canWrapLineAfter;
        public ushort isWhitespace;
        public ushort isNewline;
        public ushort isSoftHyphen;
        public ushort isRightToLeft;
        public ushort padding;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DWRITE_HIT_TEST_METRICS // 3
    {
        public uint textPosition;
        public uint length;
        public float left;
        public float top;
        public float width;
        public float height;
        public uint bidiLevel;
        public int isText;
        public int isTrimmed;
    }
    public enum DWRITE_FACTORY_TYPE // 1
    {
        _SHARED = 0x0,
        _ISOLATED = 0x1,
    }
    public class IDWriteLocalFontFileLoader: IDWriteFontFileLoader
    {
        static Guid s_uuid = new Guid("b2d9f3ec-c9fe-4a11-a2ec-d86208f7c0a2");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int GetFilePathLengthFromKey(
            IntPtr fontFileReferenceKey,
            uint fontFileReferenceKeySize,
            out uint filePathLength
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetFilePathLengthFromKeyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFilePathLengthFromKeyFunc));
            
            return callback(m_ptr, fontFileReferenceKey, fontFileReferenceKeySize, out filePathLength);
        }
        delegate int GetFilePathLengthFromKeyFunc(IntPtr self, IntPtr fontFileReferenceKey, uint fontFileReferenceKeySize, out uint filePathLength);

        public virtual int GetFilePathFromKey(
            IntPtr fontFileReferenceKey,
            uint fontFileReferenceKeySize,
            out ushort filePath,
            uint filePathSize
        ){
            var fp = GetFunctionPointer(5);
            var callback = (GetFilePathFromKeyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFilePathFromKeyFunc));
            
            return callback(m_ptr, fontFileReferenceKey, fontFileReferenceKeySize, out filePath, filePathSize);
        }
        delegate int GetFilePathFromKeyFunc(IntPtr self, IntPtr fontFileReferenceKey, uint fontFileReferenceKeySize, out ushort filePath, uint filePathSize);

        public virtual int GetLastWriteTimeFromKey(
            IntPtr fontFileReferenceKey,
            uint fontFileReferenceKeySize,
            out _FILETIME lastWriteTime
        ){
            var fp = GetFunctionPointer(6);
            var callback = (GetLastWriteTimeFromKeyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetLastWriteTimeFromKeyFunc));
            
            return callback(m_ptr, fontFileReferenceKey, fontFileReferenceKeySize, out lastWriteTime);
        }
        delegate int GetLastWriteTimeFromKeyFunc(IntPtr self, IntPtr fontFileReferenceKey, uint fontFileReferenceKeySize, out _FILETIME lastWriteTime);

    }
    public class IDWriteFactory: IUnknown
    {
        static Guid s_uuid = new Guid("b859ee5a-d838-4b5b-a2e8-1adc7d93db48");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int GetSystemFontCollection(
            out IDWriteFontCollection fontCollection,
            int checkForUpdates
        ){
            var fp = GetFunctionPointer(3);
            var callback = (GetSystemFontCollectionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetSystemFontCollectionFunc));
            fontCollection = new IDWriteFontCollection();
            return callback(m_ptr, out fontCollection.PtrForNew, checkForUpdates);
        }
        delegate int GetSystemFontCollectionFunc(IntPtr self, out IntPtr fontCollection, int checkForUpdates);

        public virtual int CreateCustomFontCollection(
            IDWriteFontCollectionLoader collectionLoader,
            IntPtr collectionKey,
            uint collectionKeySize,
            out IDWriteFontCollection fontCollection
        ){
            var fp = GetFunctionPointer(4);
            var callback = (CreateCustomFontCollectionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateCustomFontCollectionFunc));
            fontCollection = new IDWriteFontCollection();
            return callback(m_ptr, collectionLoader!=null ? collectionLoader.Ptr : IntPtr.Zero, collectionKey, collectionKeySize, out fontCollection.PtrForNew);
        }
        delegate int CreateCustomFontCollectionFunc(IntPtr self, IntPtr collectionLoader, IntPtr collectionKey, uint collectionKeySize, out IntPtr fontCollection);

        public virtual int RegisterFontCollectionLoader(
            IDWriteFontCollectionLoader fontCollectionLoader
        ){
            var fp = GetFunctionPointer(5);
            var callback = (RegisterFontCollectionLoaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RegisterFontCollectionLoaderFunc));
            
            return callback(m_ptr, fontCollectionLoader!=null ? fontCollectionLoader.Ptr : IntPtr.Zero);
        }
        delegate int RegisterFontCollectionLoaderFunc(IntPtr self, IntPtr fontCollectionLoader);

        public virtual int UnregisterFontCollectionLoader(
            IDWriteFontCollectionLoader fontCollectionLoader
        ){
            var fp = GetFunctionPointer(6);
            var callback = (UnregisterFontCollectionLoaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(UnregisterFontCollectionLoaderFunc));
            
            return callback(m_ptr, fontCollectionLoader!=null ? fontCollectionLoader.Ptr : IntPtr.Zero);
        }
        delegate int UnregisterFontCollectionLoaderFunc(IntPtr self, IntPtr fontCollectionLoader);

        public virtual int CreateFontFileReference(
            ref ushort filePath,
            ref _FILETIME lastWriteTime,
            out IDWriteFontFile fontFile
        ){
            var fp = GetFunctionPointer(7);
            var callback = (CreateFontFileReferenceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateFontFileReferenceFunc));
            fontFile = new IDWriteFontFile();
            return callback(m_ptr, ref filePath, ref lastWriteTime, out fontFile.PtrForNew);
        }
        delegate int CreateFontFileReferenceFunc(IntPtr self, ref ushort filePath, ref _FILETIME lastWriteTime, out IntPtr fontFile);

        public virtual int CreateCustomFontFileReference(
            IntPtr fontFileReferenceKey,
            uint fontFileReferenceKeySize,
            IDWriteFontFileLoader fontFileLoader,
            out IDWriteFontFile fontFile
        ){
            var fp = GetFunctionPointer(8);
            var callback = (CreateCustomFontFileReferenceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateCustomFontFileReferenceFunc));
            fontFile = new IDWriteFontFile();
            return callback(m_ptr, fontFileReferenceKey, fontFileReferenceKeySize, fontFileLoader!=null ? fontFileLoader.Ptr : IntPtr.Zero, out fontFile.PtrForNew);
        }
        delegate int CreateCustomFontFileReferenceFunc(IntPtr self, IntPtr fontFileReferenceKey, uint fontFileReferenceKeySize, IntPtr fontFileLoader, out IntPtr fontFile);

        public virtual int CreateFontFace(
            DWRITE_FONT_FACE_TYPE fontFaceType,
            uint numberOfFiles,
            ref IntPtr fontFiles,
            uint faceIndex,
            DWRITE_FONT_SIMULATIONS fontFaceSimulationFlags,
            out IDWriteFontFace fontFace
        ){
            var fp = GetFunctionPointer(9);
            var callback = (CreateFontFaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateFontFaceFunc));
            fontFace = new IDWriteFontFace();
            return callback(m_ptr, fontFaceType, numberOfFiles, ref fontFiles, faceIndex, fontFaceSimulationFlags, out fontFace.PtrForNew);
        }
        delegate int CreateFontFaceFunc(IntPtr self, DWRITE_FONT_FACE_TYPE fontFaceType, uint numberOfFiles, ref IntPtr fontFiles, uint faceIndex, DWRITE_FONT_SIMULATIONS fontFaceSimulationFlags, out IntPtr fontFace);

        public virtual int CreateRenderingParams(
            out IDWriteRenderingParams renderingParams
        ){
            var fp = GetFunctionPointer(10);
            var callback = (CreateRenderingParamsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateRenderingParamsFunc));
            renderingParams = new IDWriteRenderingParams();
            return callback(m_ptr, out renderingParams.PtrForNew);
        }
        delegate int CreateRenderingParamsFunc(IntPtr self, out IntPtr renderingParams);

        public virtual int CreateMonitorRenderingParams(
            out HMONITOR__ monitor,
            out IDWriteRenderingParams renderingParams
        ){
            var fp = GetFunctionPointer(11);
            var callback = (CreateMonitorRenderingParamsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateMonitorRenderingParamsFunc));
            renderingParams = new IDWriteRenderingParams();
            return callback(m_ptr, out monitor, out renderingParams.PtrForNew);
        }
        delegate int CreateMonitorRenderingParamsFunc(IntPtr self, out HMONITOR__ monitor, out IntPtr renderingParams);

        public virtual int CreateCustomRenderingParams(
            float gamma,
            float enhancedContrast,
            float clearTypeLevel,
            DWRITE_PIXEL_GEOMETRY pixelGeometry,
            DWRITE_RENDERING_MODE renderingMode,
            out IDWriteRenderingParams renderingParams
        ){
            var fp = GetFunctionPointer(12);
            var callback = (CreateCustomRenderingParamsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateCustomRenderingParamsFunc));
            renderingParams = new IDWriteRenderingParams();
            return callback(m_ptr, gamma, enhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, out renderingParams.PtrForNew);
        }
        delegate int CreateCustomRenderingParamsFunc(IntPtr self, float gamma, float enhancedContrast, float clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE renderingMode, out IntPtr renderingParams);

        public virtual int RegisterFontFileLoader(
            IDWriteFontFileLoader fontFileLoader
        ){
            var fp = GetFunctionPointer(13);
            var callback = (RegisterFontFileLoaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RegisterFontFileLoaderFunc));
            
            return callback(m_ptr, fontFileLoader!=null ? fontFileLoader.Ptr : IntPtr.Zero);
        }
        delegate int RegisterFontFileLoaderFunc(IntPtr self, IntPtr fontFileLoader);

        public virtual int UnregisterFontFileLoader(
            IDWriteFontFileLoader fontFileLoader
        ){
            var fp = GetFunctionPointer(14);
            var callback = (UnregisterFontFileLoaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(UnregisterFontFileLoaderFunc));
            
            return callback(m_ptr, fontFileLoader!=null ? fontFileLoader.Ptr : IntPtr.Zero);
        }
        delegate int UnregisterFontFileLoaderFunc(IntPtr self, IntPtr fontFileLoader);

        public virtual int CreateTextFormat(
            ref ushort fontFamilyName,
            IDWriteFontCollection fontCollection,
            DWRITE_FONT_WEIGHT fontWeight,
            DWRITE_FONT_STYLE fontStyle,
            DWRITE_FONT_STRETCH fontStretch,
            float fontSize,
            ref ushort localeName,
            out IDWriteTextFormat textFormat
        ){
            var fp = GetFunctionPointer(15);
            var callback = (CreateTextFormatFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateTextFormatFunc));
            textFormat = new IDWriteTextFormat();
            return callback(m_ptr, ref fontFamilyName, fontCollection!=null ? fontCollection.Ptr : IntPtr.Zero, fontWeight, fontStyle, fontStretch, fontSize, ref localeName, out textFormat.PtrForNew);
        }
        delegate int CreateTextFormatFunc(IntPtr self, ref ushort fontFamilyName, IntPtr fontCollection, DWRITE_FONT_WEIGHT fontWeight, DWRITE_FONT_STYLE fontStyle, DWRITE_FONT_STRETCH fontStretch, float fontSize, ref ushort localeName, out IntPtr textFormat);

        public virtual int CreateTypography(
            out IDWriteTypography typography
        ){
            var fp = GetFunctionPointer(16);
            var callback = (CreateTypographyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateTypographyFunc));
            typography = new IDWriteTypography();
            return callback(m_ptr, out typography.PtrForNew);
        }
        delegate int CreateTypographyFunc(IntPtr self, out IntPtr typography);

        public virtual int GetGdiInterop(
            out IDWriteGdiInterop gdiInterop
        ){
            var fp = GetFunctionPointer(17);
            var callback = (GetGdiInteropFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetGdiInteropFunc));
            gdiInterop = new IDWriteGdiInterop();
            return callback(m_ptr, out gdiInterop.PtrForNew);
        }
        delegate int GetGdiInteropFunc(IntPtr self, out IntPtr gdiInterop);

        public virtual int CreateTextLayout(
            ref ushort _string,
            uint stringLength,
            IDWriteTextFormat textFormat,
            float maxWidth,
            float maxHeight,
            out IDWriteTextLayout textLayout
        ){
            var fp = GetFunctionPointer(18);
            var callback = (CreateTextLayoutFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateTextLayoutFunc));
            textLayout = new IDWriteTextLayout();
            return callback(m_ptr, ref _string, stringLength, textFormat!=null ? textFormat.Ptr : IntPtr.Zero, maxWidth, maxHeight, out textLayout.PtrForNew);
        }
        delegate int CreateTextLayoutFunc(IntPtr self, ref ushort _string, uint stringLength, IntPtr textFormat, float maxWidth, float maxHeight, out IntPtr textLayout);

        public virtual int CreateGdiCompatibleTextLayout(
            ref ushort _string,
            uint stringLength,
            IDWriteTextFormat textFormat,
            float layoutWidth,
            float layoutHeight,
            float pixelsPerDip,
            ref DWRITE_MATRIX transform,
            int useGdiNatural,
            out IDWriteTextLayout textLayout
        ){
            var fp = GetFunctionPointer(19);
            var callback = (CreateGdiCompatibleTextLayoutFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateGdiCompatibleTextLayoutFunc));
            textLayout = new IDWriteTextLayout();
            return callback(m_ptr, ref _string, stringLength, textFormat!=null ? textFormat.Ptr : IntPtr.Zero, layoutWidth, layoutHeight, pixelsPerDip, ref transform, useGdiNatural, out textLayout.PtrForNew);
        }
        delegate int CreateGdiCompatibleTextLayoutFunc(IntPtr self, ref ushort _string, uint stringLength, IntPtr textFormat, float layoutWidth, float layoutHeight, float pixelsPerDip, ref DWRITE_MATRIX transform, int useGdiNatural, out IntPtr textLayout);

        public virtual int CreateEllipsisTrimmingSign(
            IDWriteTextFormat textFormat,
            out IDWriteInlineObject trimmingSign
        ){
            var fp = GetFunctionPointer(20);
            var callback = (CreateEllipsisTrimmingSignFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateEllipsisTrimmingSignFunc));
            trimmingSign = new IDWriteInlineObject();
            return callback(m_ptr, textFormat!=null ? textFormat.Ptr : IntPtr.Zero, out trimmingSign.PtrForNew);
        }
        delegate int CreateEllipsisTrimmingSignFunc(IntPtr self, IntPtr textFormat, out IntPtr trimmingSign);

        public virtual int CreateTextAnalyzer(
            out IDWriteTextAnalyzer textAnalyzer
        ){
            var fp = GetFunctionPointer(21);
            var callback = (CreateTextAnalyzerFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateTextAnalyzerFunc));
            textAnalyzer = new IDWriteTextAnalyzer();
            return callback(m_ptr, out textAnalyzer.PtrForNew);
        }
        delegate int CreateTextAnalyzerFunc(IntPtr self, out IntPtr textAnalyzer);

        public virtual int CreateNumberSubstitution(
            DWRITE_NUMBER_SUBSTITUTION_METHOD substitutionMethod,
            ref ushort localeName,
            int ignoreUserOverride,
            out IDWriteNumberSubstitution numberSubstitution
        ){
            var fp = GetFunctionPointer(22);
            var callback = (CreateNumberSubstitutionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateNumberSubstitutionFunc));
            numberSubstitution = new IDWriteNumberSubstitution();
            return callback(m_ptr, substitutionMethod, ref localeName, ignoreUserOverride, out numberSubstitution.PtrForNew);
        }
        delegate int CreateNumberSubstitutionFunc(IntPtr self, DWRITE_NUMBER_SUBSTITUTION_METHOD substitutionMethod, ref ushort localeName, int ignoreUserOverride, out IntPtr numberSubstitution);

        public virtual int CreateGlyphRunAnalysis(
            ref DWRITE_GLYPH_RUN glyphRun,
            float pixelsPerDip,
            ref DWRITE_MATRIX transform,
            DWRITE_RENDERING_MODE renderingMode,
            DWRITE_MEASURING_MODE measuringMode,
            float baselineOriginX,
            float baselineOriginY,
            out IDWriteGlyphRunAnalysis glyphRunAnalysis
        ){
            var fp = GetFunctionPointer(23);
            var callback = (CreateGlyphRunAnalysisFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateGlyphRunAnalysisFunc));
            glyphRunAnalysis = new IDWriteGlyphRunAnalysis();
            return callback(m_ptr, ref glyphRun, pixelsPerDip, ref transform, renderingMode, measuringMode, baselineOriginX, baselineOriginY, out glyphRunAnalysis.PtrForNew);
        }
        delegate int CreateGlyphRunAnalysisFunc(IntPtr self, ref DWRITE_GLYPH_RUN glyphRun, float pixelsPerDip, ref DWRITE_MATRIX transform, DWRITE_RENDERING_MODE renderingMode, DWRITE_MEASURING_MODE measuringMode, float baselineOriginX, float baselineOriginY, out IntPtr glyphRunAnalysis);

    }
    public class IDWriteFontCollectionLoader: IUnknown
    {
        static Guid s_uuid = new Guid("cca920e4-52f0-492b-bfa8-29c72ee0a468");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int CreateEnumeratorFromKey(
            IDWriteFactory factory,
            IntPtr collectionKey,
            uint collectionKeySize,
            out IDWriteFontFileEnumerator fontFileEnumerator
        ){
            var fp = GetFunctionPointer(3);
            var callback = (CreateEnumeratorFromKeyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateEnumeratorFromKeyFunc));
            fontFileEnumerator = new IDWriteFontFileEnumerator();
            return callback(m_ptr, factory!=null ? factory.Ptr : IntPtr.Zero, collectionKey, collectionKeySize, out fontFileEnumerator.PtrForNew);
        }
        delegate int CreateEnumeratorFromKeyFunc(IntPtr self, IntPtr factory, IntPtr collectionKey, uint collectionKeySize, out IntPtr fontFileEnumerator);

    }
    public class IDWriteFontFileEnumerator: IUnknown
    {
        static Guid s_uuid = new Guid("72755049-5ff7-435d-8348-4be97cfa6c7c");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int MoveNext(
            out int hasCurrentFile
        ){
            var fp = GetFunctionPointer(3);
            var callback = (MoveNextFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(MoveNextFunc));
            
            return callback(m_ptr, out hasCurrentFile);
        }
        delegate int MoveNextFunc(IntPtr self, out int hasCurrentFile);

        public virtual int GetCurrentFontFile(
            out IDWriteFontFile fontFile
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetCurrentFontFileFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetCurrentFontFileFunc));
            fontFile = new IDWriteFontFile();
            return callback(m_ptr, out fontFile.PtrForNew);
        }
        delegate int GetCurrentFontFileFunc(IntPtr self, out IntPtr fontFile);

    }
    public class IDWriteGdiInterop: IUnknown
    {
        static Guid s_uuid = new Guid("1edd9491-9853-4299-898f-6432983b6f3a");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int CreateFontFromLOGFONT(
            ref tagLOGFONTW logFont,
            out IDWriteFont font
        ){
            var fp = GetFunctionPointer(3);
            var callback = (CreateFontFromLOGFONTFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateFontFromLOGFONTFunc));
            font = new IDWriteFont();
            return callback(m_ptr, ref logFont, out font.PtrForNew);
        }
        delegate int CreateFontFromLOGFONTFunc(IntPtr self, ref tagLOGFONTW logFont, out IntPtr font);

        public virtual int ConvertFontToLOGFONT(
            IDWriteFont font,
            out tagLOGFONTW logFont,
            out int isSystemFont
        ){
            var fp = GetFunctionPointer(4);
            var callback = (ConvertFontToLOGFONTFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ConvertFontToLOGFONTFunc));
            
            return callback(m_ptr, font!=null ? font.Ptr : IntPtr.Zero, out logFont, out isSystemFont);
        }
        delegate int ConvertFontToLOGFONTFunc(IntPtr self, IntPtr font, out tagLOGFONTW logFont, out int isSystemFont);

        public virtual int ConvertFontFaceToLOGFONT(
            IDWriteFontFace font,
            out tagLOGFONTW logFont
        ){
            var fp = GetFunctionPointer(5);
            var callback = (ConvertFontFaceToLOGFONTFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ConvertFontFaceToLOGFONTFunc));
            
            return callback(m_ptr, font!=null ? font.Ptr : IntPtr.Zero, out logFont);
        }
        delegate int ConvertFontFaceToLOGFONTFunc(IntPtr self, IntPtr font, out tagLOGFONTW logFont);

        public virtual int CreateFontFaceFromHdc(
            IntPtr hdc,
            out IDWriteFontFace fontFace
        ){
            var fp = GetFunctionPointer(6);
            var callback = (CreateFontFaceFromHdcFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateFontFaceFromHdcFunc));
            fontFace = new IDWriteFontFace();
            return callback(m_ptr, hdc, out fontFace.PtrForNew);
        }
        delegate int CreateFontFaceFromHdcFunc(IntPtr self, IntPtr hdc, out IntPtr fontFace);

        public virtual int CreateBitmapRenderTarget(
            IntPtr hdc,
            uint width,
            uint height,
            out IDWriteBitmapRenderTarget renderTarget
        ){
            var fp = GetFunctionPointer(7);
            var callback = (CreateBitmapRenderTargetFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateBitmapRenderTargetFunc));
            renderTarget = new IDWriteBitmapRenderTarget();
            return callback(m_ptr, hdc, width, height, out renderTarget.PtrForNew);
        }
        delegate int CreateBitmapRenderTargetFunc(IntPtr self, IntPtr hdc, uint width, uint height, out IntPtr renderTarget);

    }
    public class IDWriteBitmapRenderTarget: IUnknown
    {
        static Guid s_uuid = new Guid("5e5a32a3-8dff-4773-9ff6-0696eab77267");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int DrawGlyphRun(
            float baselineOriginX,
            float baselineOriginY,
            DWRITE_MEASURING_MODE measuringMode,
            ref DWRITE_GLYPH_RUN glyphRun,
            IDWriteRenderingParams renderingParams,
            uint textColor,
            out tagRECT blackBoxRect
        ){
            var fp = GetFunctionPointer(3);
            var callback = (DrawGlyphRunFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawGlyphRunFunc));
            
            return callback(m_ptr, baselineOriginX, baselineOriginY, measuringMode, ref glyphRun, renderingParams!=null ? renderingParams.Ptr : IntPtr.Zero, textColor, out blackBoxRect);
        }
        delegate int DrawGlyphRunFunc(IntPtr self, float baselineOriginX, float baselineOriginY, DWRITE_MEASURING_MODE measuringMode, ref DWRITE_GLYPH_RUN glyphRun, IntPtr renderingParams, uint textColor, out tagRECT blackBoxRect);

        public virtual IntPtr GetMemoryDC(
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetMemoryDCFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMemoryDCFunc));
            
            return callback(m_ptr);
        }
        delegate IntPtr GetMemoryDCFunc(IntPtr self);

        public virtual float GetPixelsPerDip(
        ){
            var fp = GetFunctionPointer(5);
            var callback = (GetPixelsPerDipFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPixelsPerDipFunc));
            
            return callback(m_ptr);
        }
        delegate float GetPixelsPerDipFunc(IntPtr self);

        public virtual int SetPixelsPerDip(
            float pixelsPerDip
        ){
            var fp = GetFunctionPointer(6);
            var callback = (SetPixelsPerDipFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetPixelsPerDipFunc));
            
            return callback(m_ptr, pixelsPerDip);
        }
        delegate int SetPixelsPerDipFunc(IntPtr self, float pixelsPerDip);

        public virtual int GetCurrentTransform(
            out DWRITE_MATRIX transform
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetCurrentTransformFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetCurrentTransformFunc));
            
            return callback(m_ptr, out transform);
        }
        delegate int GetCurrentTransformFunc(IntPtr self, out DWRITE_MATRIX transform);

        public virtual int SetCurrentTransform(
            ref DWRITE_MATRIX transform
        ){
            var fp = GetFunctionPointer(8);
            var callback = (SetCurrentTransformFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetCurrentTransformFunc));
            
            return callback(m_ptr, ref transform);
        }
        delegate int SetCurrentTransformFunc(IntPtr self, ref DWRITE_MATRIX transform);

        public virtual int GetSize(
            out tagSIZE size
        ){
            var fp = GetFunctionPointer(9);
            var callback = (GetSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetSizeFunc));
            
            return callback(m_ptr, out size);
        }
        delegate int GetSizeFunc(IntPtr self, out tagSIZE size);

        public virtual int Resize(
            uint width,
            uint height
        ){
            var fp = GetFunctionPointer(10);
            var callback = (ResizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ResizeFunc));
            
            return callback(m_ptr, width, height);
        }
        delegate int ResizeFunc(IntPtr self, uint width, uint height);

    }
    public class IDWriteTextAnalyzer: IUnknown
    {
        static Guid s_uuid = new Guid("b7e6163e-7f46-43b4-84b3-e4e6249c365d");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int AnalyzeScript(
            IDWriteTextAnalysisSource analysisSource,
            uint textPosition,
            uint textLength,
            IDWriteTextAnalysisSink analysisSink
        ){
            var fp = GetFunctionPointer(3);
            var callback = (AnalyzeScriptFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AnalyzeScriptFunc));
            
            return callback(m_ptr, analysisSource!=null ? analysisSource.Ptr : IntPtr.Zero, textPosition, textLength, analysisSink!=null ? analysisSink.Ptr : IntPtr.Zero);
        }
        delegate int AnalyzeScriptFunc(IntPtr self, IntPtr analysisSource, uint textPosition, uint textLength, IntPtr analysisSink);

        public virtual int AnalyzeBidi(
            IDWriteTextAnalysisSource analysisSource,
            uint textPosition,
            uint textLength,
            IDWriteTextAnalysisSink analysisSink
        ){
            var fp = GetFunctionPointer(4);
            var callback = (AnalyzeBidiFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AnalyzeBidiFunc));
            
            return callback(m_ptr, analysisSource!=null ? analysisSource.Ptr : IntPtr.Zero, textPosition, textLength, analysisSink!=null ? analysisSink.Ptr : IntPtr.Zero);
        }
        delegate int AnalyzeBidiFunc(IntPtr self, IntPtr analysisSource, uint textPosition, uint textLength, IntPtr analysisSink);

        public virtual int AnalyzeNumberSubstitution(
            IDWriteTextAnalysisSource analysisSource,
            uint textPosition,
            uint textLength,
            IDWriteTextAnalysisSink analysisSink
        ){
            var fp = GetFunctionPointer(5);
            var callback = (AnalyzeNumberSubstitutionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AnalyzeNumberSubstitutionFunc));
            
            return callback(m_ptr, analysisSource!=null ? analysisSource.Ptr : IntPtr.Zero, textPosition, textLength, analysisSink!=null ? analysisSink.Ptr : IntPtr.Zero);
        }
        delegate int AnalyzeNumberSubstitutionFunc(IntPtr self, IntPtr analysisSource, uint textPosition, uint textLength, IntPtr analysisSink);

        public virtual int AnalyzeLineBreakpoints(
            IDWriteTextAnalysisSource analysisSource,
            uint textPosition,
            uint textLength,
            IDWriteTextAnalysisSink analysisSink
        ){
            var fp = GetFunctionPointer(6);
            var callback = (AnalyzeLineBreakpointsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AnalyzeLineBreakpointsFunc));
            
            return callback(m_ptr, analysisSource!=null ? analysisSource.Ptr : IntPtr.Zero, textPosition, textLength, analysisSink!=null ? analysisSink.Ptr : IntPtr.Zero);
        }
        delegate int AnalyzeLineBreakpointsFunc(IntPtr self, IntPtr analysisSource, uint textPosition, uint textLength, IntPtr analysisSink);

        public virtual int GetGlyphs(
            ref ushort textString,
            uint textLength,
            IDWriteFontFace fontFace,
            int isSideways,
            int isRightToLeft,
            ref DWRITE_SCRIPT_ANALYSIS scriptAnalysis,
            ref ushort localeName,
            IDWriteNumberSubstitution numberSubstitution,
            ref IntPtr features,
            ref uint featureRangeLengths,
            uint featureRanges,
            uint maxGlyphCount,
            out ushort clusterMap,
            out DWRITE_SHAPING_TEXT_PROPERTIES textProps,
            out ushort glyphIndices,
            out DWRITE_SHAPING_GLYPH_PROPERTIES glyphProps,
            out uint actualGlyphCount
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetGlyphsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetGlyphsFunc));
            
            return callback(m_ptr, ref textString, textLength, fontFace!=null ? fontFace.Ptr : IntPtr.Zero, isSideways, isRightToLeft, ref scriptAnalysis, ref localeName, numberSubstitution!=null ? numberSubstitution.Ptr : IntPtr.Zero, ref features, ref featureRangeLengths, featureRanges, maxGlyphCount, out clusterMap, out textProps, out glyphIndices, out glyphProps, out actualGlyphCount);
        }
        delegate int GetGlyphsFunc(IntPtr self, ref ushort textString, uint textLength, IntPtr fontFace, int isSideways, int isRightToLeft, ref DWRITE_SCRIPT_ANALYSIS scriptAnalysis, ref ushort localeName, IntPtr numberSubstitution, ref IntPtr features, ref uint featureRangeLengths, uint featureRanges, uint maxGlyphCount, out ushort clusterMap, out DWRITE_SHAPING_TEXT_PROPERTIES textProps, out ushort glyphIndices, out DWRITE_SHAPING_GLYPH_PROPERTIES glyphProps, out uint actualGlyphCount);

        public virtual int GetGlyphPlacements(
            ref ushort textString,
            ref ushort clusterMap,
            out DWRITE_SHAPING_TEXT_PROPERTIES textProps,
            uint textLength,
            ref ushort glyphIndices,
            ref DWRITE_SHAPING_GLYPH_PROPERTIES glyphProps,
            uint glyphCount,
            IDWriteFontFace fontFace,
            float fontEmSize,
            int isSideways,
            int isRightToLeft,
            ref DWRITE_SCRIPT_ANALYSIS scriptAnalysis,
            ref ushort localeName,
            ref IntPtr features,
            ref uint featureRangeLengths,
            uint featureRanges,
            out float glyphAdvances,
            out DWRITE_GLYPH_OFFSET glyphOffsets
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetGlyphPlacementsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetGlyphPlacementsFunc));
            
            return callback(m_ptr, ref textString, ref clusterMap, out textProps, textLength, ref glyphIndices, ref glyphProps, glyphCount, fontFace!=null ? fontFace.Ptr : IntPtr.Zero, fontEmSize, isSideways, isRightToLeft, ref scriptAnalysis, ref localeName, ref features, ref featureRangeLengths, featureRanges, out glyphAdvances, out glyphOffsets);
        }
        delegate int GetGlyphPlacementsFunc(IntPtr self, ref ushort textString, ref ushort clusterMap, out DWRITE_SHAPING_TEXT_PROPERTIES textProps, uint textLength, ref ushort glyphIndices, ref DWRITE_SHAPING_GLYPH_PROPERTIES glyphProps, uint glyphCount, IntPtr fontFace, float fontEmSize, int isSideways, int isRightToLeft, ref DWRITE_SCRIPT_ANALYSIS scriptAnalysis, ref ushort localeName, ref IntPtr features, ref uint featureRangeLengths, uint featureRanges, out float glyphAdvances, out DWRITE_GLYPH_OFFSET glyphOffsets);

        public virtual int GetGdiCompatibleGlyphPlacements(
            ref ushort textString,
            ref ushort clusterMap,
            out DWRITE_SHAPING_TEXT_PROPERTIES textProps,
            uint textLength,
            ref ushort glyphIndices,
            ref DWRITE_SHAPING_GLYPH_PROPERTIES glyphProps,
            uint glyphCount,
            IDWriteFontFace fontFace,
            float fontEmSize,
            float pixelsPerDip,
            ref DWRITE_MATRIX transform,
            int useGdiNatural,
            int isSideways,
            int isRightToLeft,
            ref DWRITE_SCRIPT_ANALYSIS scriptAnalysis,
            ref ushort localeName,
            ref IntPtr features,
            ref uint featureRangeLengths,
            uint featureRanges,
            out float glyphAdvances,
            out DWRITE_GLYPH_OFFSET glyphOffsets
        ){
            var fp = GetFunctionPointer(9);
            var callback = (GetGdiCompatibleGlyphPlacementsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetGdiCompatibleGlyphPlacementsFunc));
            
            return callback(m_ptr, ref textString, ref clusterMap, out textProps, textLength, ref glyphIndices, ref glyphProps, glyphCount, fontFace!=null ? fontFace.Ptr : IntPtr.Zero, fontEmSize, pixelsPerDip, ref transform, useGdiNatural, isSideways, isRightToLeft, ref scriptAnalysis, ref localeName, ref features, ref featureRangeLengths, featureRanges, out glyphAdvances, out glyphOffsets);
        }
        delegate int GetGdiCompatibleGlyphPlacementsFunc(IntPtr self, ref ushort textString, ref ushort clusterMap, out DWRITE_SHAPING_TEXT_PROPERTIES textProps, uint textLength, ref ushort glyphIndices, ref DWRITE_SHAPING_GLYPH_PROPERTIES glyphProps, uint glyphCount, IntPtr fontFace, float fontEmSize, float pixelsPerDip, ref DWRITE_MATRIX transform, int useGdiNatural, int isSideways, int isRightToLeft, ref DWRITE_SCRIPT_ANALYSIS scriptAnalysis, ref ushort localeName, ref IntPtr features, ref uint featureRangeLengths, uint featureRanges, out float glyphAdvances, out DWRITE_GLYPH_OFFSET glyphOffsets);

    }
    public class IDWriteTextAnalysisSource: IUnknown
    {
        static Guid s_uuid = new Guid("688e1a58-5094-47c8-adc8-fbcea60ae92b");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int GetTextAtPosition(
            uint textPosition,
            ref IntPtr textString,
            out uint textLength
        ){
            var fp = GetFunctionPointer(3);
            var callback = (GetTextAtPositionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTextAtPositionFunc));
            
            return callback(m_ptr, textPosition, ref textString, out textLength);
        }
        delegate int GetTextAtPositionFunc(IntPtr self, uint textPosition, ref IntPtr textString, out uint textLength);

        public virtual int GetTextBeforePosition(
            uint textPosition,
            ref IntPtr textString,
            out uint textLength
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetTextBeforePositionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTextBeforePositionFunc));
            
            return callback(m_ptr, textPosition, ref textString, out textLength);
        }
        delegate int GetTextBeforePositionFunc(IntPtr self, uint textPosition, ref IntPtr textString, out uint textLength);

        public virtual DWRITE_READING_DIRECTION GetParagraphReadingDirection(
        ){
            var fp = GetFunctionPointer(5);
            var callback = (GetParagraphReadingDirectionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetParagraphReadingDirectionFunc));
            
            return callback(m_ptr);
        }
        delegate DWRITE_READING_DIRECTION GetParagraphReadingDirectionFunc(IntPtr self);

        public virtual int GetLocaleName(
            uint textPosition,
            out uint textLength,
            ref IntPtr localeName
        ){
            var fp = GetFunctionPointer(6);
            var callback = (GetLocaleNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetLocaleNameFunc));
            
            return callback(m_ptr, textPosition, out textLength, ref localeName);
        }
        delegate int GetLocaleNameFunc(IntPtr self, uint textPosition, out uint textLength, ref IntPtr localeName);

        public virtual int GetNumberSubstitution(
            uint textPosition,
            out uint textLength,
            out IDWriteNumberSubstitution numberSubstitution
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetNumberSubstitutionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetNumberSubstitutionFunc));
            numberSubstitution = new IDWriteNumberSubstitution();
            return callback(m_ptr, textPosition, out textLength, out numberSubstitution.PtrForNew);
        }
        delegate int GetNumberSubstitutionFunc(IntPtr self, uint textPosition, out uint textLength, out IntPtr numberSubstitution);

    }
    public class IDWriteNumberSubstitution: IUnknown
    {
        static Guid s_uuid = new Guid("14885cc9-bab0-4f90-b6ed-5c366a2cd03d");
        public static new ref Guid IID => ref s_uuid;
                
    }
    public class IDWriteTextAnalysisSink: IUnknown
    {
        static Guid s_uuid = new Guid("5810cd44-0ca0-4701-b3fa-bec5182ae4f6");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int SetScriptAnalysis(
            uint textPosition,
            uint textLength,
            ref DWRITE_SCRIPT_ANALYSIS scriptAnalysis
        ){
            var fp = GetFunctionPointer(3);
            var callback = (SetScriptAnalysisFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetScriptAnalysisFunc));
            
            return callback(m_ptr, textPosition, textLength, ref scriptAnalysis);
        }
        delegate int SetScriptAnalysisFunc(IntPtr self, uint textPosition, uint textLength, ref DWRITE_SCRIPT_ANALYSIS scriptAnalysis);

        public virtual int SetLineBreakpoints(
            uint textPosition,
            uint textLength,
            ref DWRITE_LINE_BREAKPOINT lineBreakpoints
        ){
            var fp = GetFunctionPointer(4);
            var callback = (SetLineBreakpointsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetLineBreakpointsFunc));
            
            return callback(m_ptr, textPosition, textLength, ref lineBreakpoints);
        }
        delegate int SetLineBreakpointsFunc(IntPtr self, uint textPosition, uint textLength, ref DWRITE_LINE_BREAKPOINT lineBreakpoints);

        public virtual int SetBidiLevel(
            uint textPosition,
            uint textLength,
            byte explicitLevel,
            byte resolvedLevel
        ){
            var fp = GetFunctionPointer(5);
            var callback = (SetBidiLevelFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetBidiLevelFunc));
            
            return callback(m_ptr, textPosition, textLength, explicitLevel, resolvedLevel);
        }
        delegate int SetBidiLevelFunc(IntPtr self, uint textPosition, uint textLength, byte explicitLevel, byte resolvedLevel);

        public virtual int SetNumberSubstitution(
            uint textPosition,
            uint textLength,
            IDWriteNumberSubstitution numberSubstitution
        ){
            var fp = GetFunctionPointer(6);
            var callback = (SetNumberSubstitutionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetNumberSubstitutionFunc));
            
            return callback(m_ptr, textPosition, textLength, numberSubstitution!=null ? numberSubstitution.Ptr : IntPtr.Zero);
        }
        delegate int SetNumberSubstitutionFunc(IntPtr self, uint textPosition, uint textLength, IntPtr numberSubstitution);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DWRITE_SCRIPT_ANALYSIS // 4
    {
        public ushort script;
        public DWRITE_SCRIPT_SHAPES shapes;
    }
    public enum DWRITE_SCRIPT_SHAPES // 21
    {
        _DEFAULT = 0x0,
        _NO_VISUAL = 0x1,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DWRITE_LINE_BREAKPOINT // 1
    {
        public byte breakConditionBefore;
        public byte breakConditionAfter;
        public byte isWhitespace;
        public byte isSoftHyphen;
        public byte padding;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DWRITE_TYPOGRAPHIC_FEATURES // 3
    {
        public IntPtr features;
        public uint featureCount;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DWRITE_SHAPING_TEXT_PROPERTIES // 3
    {
        public ushort isShapedAlone;
        public ushort reserved1;
        public ushort canBreakShapingAfter;
        public ushort reserved;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DWRITE_SHAPING_GLYPH_PROPERTIES // 3
    {
        public ushort justification;
        public ushort isClusterStart;
        public ushort isDiacritic;
        public ushort isZeroWidthSpace;
        public ushort reserved;
    }
    public enum DWRITE_NUMBER_SUBSTITUTION_METHOD // 1
    {
        _FROM_CULTURE = 0x0,
        _CONTEXTUAL = 0x1,
        _NONE = 0x2,
        _NATIONAL = 0x3,
        _TRADITIONAL = 0x4,
    }
    public class IDWriteGlyphRunAnalysis: IUnknown
    {
        static Guid s_uuid = new Guid("7d97dbf7-e085-42d4-81e3-6a883bded118");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int GetAlphaTextureBounds(
            DWRITE_TEXTURE_TYPE textureType,
            out tagRECT textureBounds
        ){
            var fp = GetFunctionPointer(3);
            var callback = (GetAlphaTextureBoundsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetAlphaTextureBoundsFunc));
            
            return callback(m_ptr, textureType, out textureBounds);
        }
        delegate int GetAlphaTextureBoundsFunc(IntPtr self, DWRITE_TEXTURE_TYPE textureType, out tagRECT textureBounds);

        public virtual int CreateAlphaTexture(
            DWRITE_TEXTURE_TYPE textureType,
            ref tagRECT textureBounds,
            out byte alphaValues,
            uint bufferSize
        ){
            var fp = GetFunctionPointer(4);
            var callback = (CreateAlphaTextureFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateAlphaTextureFunc));
            
            return callback(m_ptr, textureType, ref textureBounds, out alphaValues, bufferSize);
        }
        delegate int CreateAlphaTextureFunc(IntPtr self, DWRITE_TEXTURE_TYPE textureType, ref tagRECT textureBounds, out byte alphaValues, uint bufferSize);

        public virtual int GetAlphaBlendParams(
            IDWriteRenderingParams renderingParams,
            out float blendGamma,
            out float blendEnhancedContrast,
            out float blendClearTypeLevel
        ){
            var fp = GetFunctionPointer(5);
            var callback = (GetAlphaBlendParamsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetAlphaBlendParamsFunc));
            
            return callback(m_ptr, renderingParams!=null ? renderingParams.Ptr : IntPtr.Zero, out blendGamma, out blendEnhancedContrast, out blendClearTypeLevel);
        }
        delegate int GetAlphaBlendParamsFunc(IntPtr self, IntPtr renderingParams, out float blendGamma, out float blendEnhancedContrast, out float blendClearTypeLevel);

    }
    public enum DWRITE_TEXTURE_TYPE // 2
    {
        _ALIASED_1x1 = 0x0,
        _CLEARTYPE_3x1 = 0x1,
    }
    public static class dwrite {
        [DllImport("dwrite.dll")]
        public static extern int DWriteCreateFactory(
            DWRITE_FACTORY_TYPE factoryType,
            ref Guid iid,
            out IntPtr factory
        );
    }
}
