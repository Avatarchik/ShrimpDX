// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class IDXGIDecodeSwapChain: IUnknown
    {
        static Guid s_uuid = new Guid("2633066b-4514-4c7a-8fd8-12ea98059d18");
        public static new ref Guid IID =>ref s_uuid;
        public override ref Guid GetIID(){ return ref s_uuid; }
                
        public virtual int PresentBuffer(
            uint BufferToPresent,
            uint SyncInterval,
            uint Flags
        ){
            var fp = GetFunctionPointer(3);
            if(m_PresentBufferFunc==null) m_PresentBufferFunc = (PresentBufferFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PresentBufferFunc));
            
            return m_PresentBufferFunc(m_ptr, BufferToPresent, SyncInterval, Flags);
        }
        delegate int PresentBufferFunc(IntPtr self, uint BufferToPresent, uint SyncInterval, uint Flags);
        PresentBufferFunc m_PresentBufferFunc;

        public virtual int SetSourceRect(
            ref tagRECT pRect
        ){
            var fp = GetFunctionPointer(4);
            if(m_SetSourceRectFunc==null) m_SetSourceRectFunc = (SetSourceRectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetSourceRectFunc));
            
            return m_SetSourceRectFunc(m_ptr, ref pRect);
        }
        delegate int SetSourceRectFunc(IntPtr self, ref tagRECT pRect);
        SetSourceRectFunc m_SetSourceRectFunc;

        public virtual int SetTargetRect(
            ref tagRECT pRect
        ){
            var fp = GetFunctionPointer(5);
            if(m_SetTargetRectFunc==null) m_SetTargetRectFunc = (SetTargetRectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetTargetRectFunc));
            
            return m_SetTargetRectFunc(m_ptr, ref pRect);
        }
        delegate int SetTargetRectFunc(IntPtr self, ref tagRECT pRect);
        SetTargetRectFunc m_SetTargetRectFunc;

        public virtual int SetDestSize(
            uint Width,
            uint Height
        ){
            var fp = GetFunctionPointer(6);
            if(m_SetDestSizeFunc==null) m_SetDestSizeFunc = (SetDestSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetDestSizeFunc));
            
            return m_SetDestSizeFunc(m_ptr, Width, Height);
        }
        delegate int SetDestSizeFunc(IntPtr self, uint Width, uint Height);
        SetDestSizeFunc m_SetDestSizeFunc;

        public virtual int GetSourceRect(
            out tagRECT pRect
        ){
            var fp = GetFunctionPointer(7);
            if(m_GetSourceRectFunc==null) m_GetSourceRectFunc = (GetSourceRectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetSourceRectFunc));
            
            return m_GetSourceRectFunc(m_ptr, out pRect);
        }
        delegate int GetSourceRectFunc(IntPtr self, out tagRECT pRect);
        GetSourceRectFunc m_GetSourceRectFunc;

        public virtual int GetTargetRect(
            out tagRECT pRect
        ){
            var fp = GetFunctionPointer(8);
            if(m_GetTargetRectFunc==null) m_GetTargetRectFunc = (GetTargetRectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTargetRectFunc));
            
            return m_GetTargetRectFunc(m_ptr, out pRect);
        }
        delegate int GetTargetRectFunc(IntPtr self, out tagRECT pRect);
        GetTargetRectFunc m_GetTargetRectFunc;

        public virtual int GetDestSize(
            out uint pWidth,
            out uint pHeight
        ){
            var fp = GetFunctionPointer(9);
            if(m_GetDestSizeFunc==null) m_GetDestSizeFunc = (GetDestSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDestSizeFunc));
            
            return m_GetDestSizeFunc(m_ptr, out pWidth, out pHeight);
        }
        delegate int GetDestSizeFunc(IntPtr self, out uint pWidth, out uint pHeight);
        GetDestSizeFunc m_GetDestSizeFunc;

        public virtual int SetColorSpace(
            DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS ColorSpace
        ){
            var fp = GetFunctionPointer(10);
            if(m_SetColorSpaceFunc==null) m_SetColorSpaceFunc = (SetColorSpaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetColorSpaceFunc));
            
            return m_SetColorSpaceFunc(m_ptr, ColorSpace);
        }
        delegate int SetColorSpaceFunc(IntPtr self, DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS ColorSpace);
        SetColorSpaceFunc m_SetColorSpaceFunc;

        public virtual DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS GetColorSpace(
        ){
            var fp = GetFunctionPointer(11);
            if(m_GetColorSpaceFunc==null) m_GetColorSpaceFunc = (GetColorSpaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetColorSpaceFunc));
            
            return m_GetColorSpaceFunc(m_ptr);
        }
        delegate DXGI_MULTIPLANE_OVERLAY_YCbCr_FLAGS GetColorSpaceFunc(IntPtr self);
        GetColorSpaceFunc m_GetColorSpaceFunc;

    }
}
