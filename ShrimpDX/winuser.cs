// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public static partial class Constants {
        // macro function: IS_INTRESOURCE ( _r ) ( ( ( ( ULONG_PTR ) ( _r ) ) >> 16 ) == 0 )
        // macro function: MAKEINTRESOURCEA ( i ) ( ( LPSTR ) ( ( ULONG_PTR ) ( ( WORD ) ( i ) ) ) )
        // macro function: MAKEINTRESOURCEW ( i ) ( ( LPWSTR ) ( ( ULONG_PTR ) ( ( WORD ) ( i ) ) ) )
        // unknown type: MAKEINTRESOURCE MAKEINTRESOURCEW
        // unknown type: RT_CURSOR MAKEINTRESOURCE ( 1 )
        // unknown type: RT_BITMAP MAKEINTRESOURCE ( 2 )
        // unknown type: RT_ICON MAKEINTRESOURCE ( 3 )
        // unknown type: RT_MENU MAKEINTRESOURCE ( 4 )
        // unknown type: RT_DIALOG MAKEINTRESOURCE ( 5 )
        // unknown type: RT_STRING MAKEINTRESOURCE ( 6 )
        // unknown type: RT_FONTDIR MAKEINTRESOURCE ( 7 )
        // unknown type: RT_FONT MAKEINTRESOURCE ( 8 )
        // unknown type: RT_ACCELERATOR MAKEINTRESOURCE ( 9 )
        // unknown type: RT_RCDATA MAKEINTRESOURCE ( 10 )
        // unknown type: RT_MESSAGETABLE MAKEINTRESOURCE ( 11 )
        public const int DIFFERENCE = 11;
        // unknown type: RT_GROUP_CURSOR MAKEINTRESOURCE ( ( ULONG_PTR ) ( RT_CURSOR ) + DIFFERENCE )
        // unknown type: RT_GROUP_ICON MAKEINTRESOURCE ( ( ULONG_PTR ) ( RT_ICON ) + DIFFERENCE )
        // unknown type: RT_VERSION MAKEINTRESOURCE ( 16 )
        // unknown type: RT_DLGINCLUDE MAKEINTRESOURCE ( 17 )
        // unknown type: RT_PLUGPLAY MAKEINTRESOURCE ( 19 )
        // unknown type: RT_VXD MAKEINTRESOURCE ( 20 )
        // unknown type: RT_ANICURSOR MAKEINTRESOURCE ( 21 )
        // unknown type: RT_ANIICON MAKEINTRESOURCE ( 22 )
        // unknown type: RT_HTML MAKEINTRESOURCE ( 23 )
        // unknown type: RT_MANIFEST MAKEINTRESOURCE ( 24 )
        // unknown type: CREATEPROCESS_MANIFEST_RESOURCE_ID MAKEINTRESOURCE ( 1 )
        // unknown type: ISOLATIONAWARE_MANIFEST_RESOURCE_ID MAKEINTRESOURCE ( 2 )
        // unknown type: ISOLATIONAWARE_NOSTATICIMPORT_MANIFEST_RESOURCE_ID MAKEINTRESOURCE ( 3 )
        // unknown type: ISOLATIONPOLICY_MANIFEST_RESOURCE_ID MAKEINTRESOURCE ( 4 )
        // unknown type: MINIMUM_RESERVED_MANIFEST_RESOURCE_ID MAKEINTRESOURCE ( 1 /*inclusive*/ )
        // unknown type: MAXIMUM_RESERVED_MANIFEST_RESOURCE_ID MAKEINTRESOURCE ( 16 /*inclusive*/ )
        // unknown type: wvsprintf wvsprintfW
        // unknown type: wsprintf wsprintfW
        public static readonly IntPtr SETWALLPAPER_DEFAULT = new IntPtr(- 1);
        public const int SB_HORZ = 0;
        public const int SB_VERT = 1;
        public const int SB_CTL = 2;
        public const int SB_BOTH = 3;
        public const int SB_LINEUP = 0;
        public const int SB_LINELEFT = 0;
        public const int SB_LINEDOWN = 1;
        public const int SB_LINERIGHT = 1;
        public const int SB_PAGEUP = 2;
        public const int SB_PAGELEFT = 2;
        public const int SB_PAGEDOWN = 3;
        public const int SB_PAGERIGHT = 3;
        public const int SB_THUMBPOSITION = 4;
        public const int SB_THUMBTRACK = 5;
        public const int SB_TOP = 6;
        public const int SB_LEFT = 6;
        public const int SB_BOTTOM = 7;
        public const int SB_RIGHT = 7;
        public const int SB_ENDSCROLL = 8;
        public const int SW_HIDE = 0;
        public const int SW_SHOWNORMAL = 1;
        public const int SW_NORMAL = 1;
        public const int SW_SHOWMINIMIZED = 2;
        public const int SW_SHOWMAXIMIZED = 3;
        public const int SW_MAXIMIZE = 3;
        public const int SW_SHOWNOACTIVATE = 4;
        public const int SW_SHOW = 5;
        public const int SW_MINIMIZE = 6;
        public const int SW_SHOWMINNOACTIVE = 7;
        public const int SW_SHOWNA = 8;
        public const int SW_RESTORE = 9;
        public const int SW_SHOWDEFAULT = 10;
        public const int SW_FORCEMINIMIZE = 11;
        public const int SW_MAX = 11;
        public const int HIDE_WINDOW = 0;
        public const int SHOW_OPENWINDOW = 1;
        public const int SHOW_ICONWINDOW = 2;
        public const int SHOW_FULLSCREEN = 3;
        public const int SHOW_OPENNOACTIVATE = 4;
        public const int SW_PARENTCLOSING = 1;
        public const int SW_OTHERZOOM = 2;
        public const int SW_PARENTOPENING = 3;
        public const int SW_OTHERUNZOOM = 4;
        public const int AW_HOR_POSITIVE = unchecked((int)0x00000001);
        public const int AW_HOR_NEGATIVE = unchecked((int)0x00000002);
        public const int AW_VER_POSITIVE = unchecked((int)0x00000004);
        public const int AW_VER_NEGATIVE = unchecked((int)0x00000008);
        public const int AW_CENTER = unchecked((int)0x00000010);
        public const int AW_HIDE = unchecked((int)0x00010000);
        public const int AW_ACTIVATE = unchecked((int)0x00020000);
        public const int AW_SLIDE = unchecked((int)0x00040000);
        public const int AW_BLEND = unchecked((int)0x00080000);
        public const int KF_EXTENDED = unchecked((int)0x0100);
        public const int KF_DLGMODE = unchecked((int)0x0800);
        public const int KF_MENUMODE = unchecked((int)0x1000);
        public const int KF_ALTDOWN = unchecked((int)0x2000);
        public const int KF_REPEAT = unchecked((int)0x4000);
        public const int KF_UP = unchecked((int)0x8000);
        public const int VK_LBUTTON = unchecked((int)0x01);
        public const int VK_RBUTTON = unchecked((int)0x02);
        public const int VK_CANCEL = unchecked((int)0x03);
        public const int VK_MBUTTON = unchecked((int)0x04);
        public const int VK_XBUTTON1 = unchecked((int)0x05);
        public const int VK_XBUTTON2 = unchecked((int)0x06);
        public const int VK_BACK = unchecked((int)0x08);
        public const int VK_TAB = unchecked((int)0x09);
        public const int VK_CLEAR = unchecked((int)0x0C);
        public const int VK_RETURN = unchecked((int)0x0D);
        public const int VK_SHIFT = unchecked((int)0x10);
        public const int VK_CONTROL = unchecked((int)0x11);
        public const int VK_MENU = unchecked((int)0x12);
        public const int VK_PAUSE = unchecked((int)0x13);
        public const int VK_CAPITAL = unchecked((int)0x14);
        public const int VK_KANA = unchecked((int)0x15);
        public const int VK_HANGEUL = unchecked((int)0x15);
        public const int VK_HANGUL = unchecked((int)0x15);
        public const int VK_JUNJA = unchecked((int)0x17);
        public const int VK_FINAL = unchecked((int)0x18);
        public const int VK_HANJA = unchecked((int)0x19);
        public const int VK_KANJI = unchecked((int)0x19);
        public const int VK_ESCAPE = unchecked((int)0x1B);
        public const int VK_CONVERT = unchecked((int)0x1C);
        public const int VK_NONCONVERT = unchecked((int)0x1D);
        public const int VK_ACCEPT = unchecked((int)0x1E);
        public const int VK_MODECHANGE = unchecked((int)0x1F);
        public const int VK_SPACE = unchecked((int)0x20);
        public const int VK_PRIOR = unchecked((int)0x21);
        public const int VK_NEXT = unchecked((int)0x22);
        public const int VK_END = unchecked((int)0x23);
        public const int VK_HOME = unchecked((int)0x24);
        public const int VK_LEFT = unchecked((int)0x25);
        public const int VK_UP = unchecked((int)0x26);
        public const int VK_RIGHT = unchecked((int)0x27);
        public const int VK_DOWN = unchecked((int)0x28);
        public const int VK_SELECT = unchecked((int)0x29);
        public const int VK_PRINT = unchecked((int)0x2A);
        public const int VK_EXECUTE = unchecked((int)0x2B);
        public const int VK_SNAPSHOT = unchecked((int)0x2C);
        public const int VK_INSERT = unchecked((int)0x2D);
        public const int VK_DELETE = unchecked((int)0x2E);
        public const int VK_HELP = unchecked((int)0x2F);
        public const int VK_LWIN = unchecked((int)0x5B);
        public const int VK_RWIN = unchecked((int)0x5C);
        public const int VK_APPS = unchecked((int)0x5D);
        public const int VK_SLEEP = unchecked((int)0x5F);
        public const int VK_NUMPAD0 = unchecked((int)0x60);
        public const int VK_NUMPAD1 = unchecked((int)0x61);
        public const int VK_NUMPAD2 = unchecked((int)0x62);
        public const int VK_NUMPAD3 = unchecked((int)0x63);
        public const int VK_NUMPAD4 = unchecked((int)0x64);
        public const int VK_NUMPAD5 = unchecked((int)0x65);
        public const int VK_NUMPAD6 = unchecked((int)0x66);
        public const int VK_NUMPAD7 = unchecked((int)0x67);
        public const int VK_NUMPAD8 = unchecked((int)0x68);
        public const int VK_NUMPAD9 = unchecked((int)0x69);
        public const int VK_MULTIPLY = unchecked((int)0x6A);
        public const int VK_ADD = unchecked((int)0x6B);
        public const int VK_SEPARATOR = unchecked((int)0x6C);
        public const int VK_SUBTRACT = unchecked((int)0x6D);
        public const int VK_DECIMAL = unchecked((int)0x6E);
        public const int VK_DIVIDE = unchecked((int)0x6F);
        public const int VK_F1 = unchecked((int)0x70);
        public const int VK_F2 = unchecked((int)0x71);
        public const int VK_F3 = unchecked((int)0x72);
        public const int VK_F4 = unchecked((int)0x73);
        public const int VK_F5 = unchecked((int)0x74);
        public const int VK_F6 = unchecked((int)0x75);
        public const int VK_F7 = unchecked((int)0x76);
        public const int VK_F8 = unchecked((int)0x77);
        public const int VK_F9 = unchecked((int)0x78);
        public const int VK_F10 = unchecked((int)0x79);
        public const int VK_F11 = unchecked((int)0x7A);
        public const int VK_F12 = unchecked((int)0x7B);
        public const int VK_F13 = unchecked((int)0x7C);
        public const int VK_F14 = unchecked((int)0x7D);
        public const int VK_F15 = unchecked((int)0x7E);
        public const int VK_F16 = unchecked((int)0x7F);
        public const int VK_F17 = unchecked((int)0x80);
        public const int VK_F18 = unchecked((int)0x81);
        public const int VK_F19 = unchecked((int)0x82);
        public const int VK_F20 = unchecked((int)0x83);
        public const int VK_F21 = unchecked((int)0x84);
        public const int VK_F22 = unchecked((int)0x85);
        public const int VK_F23 = unchecked((int)0x86);
        public const int VK_F24 = unchecked((int)0x87);
        public const int VK_NAVIGATION_VIEW = unchecked((int)0x88);
        public const int VK_NAVIGATION_MENU = unchecked((int)0x89);
        public const int VK_NAVIGATION_UP = unchecked((int)0x8A);
        public const int VK_NAVIGATION_DOWN = unchecked((int)0x8B);
        public const int VK_NAVIGATION_LEFT = unchecked((int)0x8C);
        public const int VK_NAVIGATION_RIGHT = unchecked((int)0x8D);
        public const int VK_NAVIGATION_ACCEPT = unchecked((int)0x8E);
        public const int VK_NAVIGATION_CANCEL = unchecked((int)0x8F);
        public const int VK_NUMLOCK = unchecked((int)0x90);
        public const int VK_SCROLL = unchecked((int)0x91);
        public const int VK_OEM_NEC_EQUAL = unchecked((int)0x92);
        public const int VK_OEM_FJ_JISHO = unchecked((int)0x92);
        public const int VK_OEM_FJ_MASSHOU = unchecked((int)0x93);
        public const int VK_OEM_FJ_TOUROKU = unchecked((int)0x94);
        public const int VK_OEM_FJ_LOYA = unchecked((int)0x95);
        public const int VK_OEM_FJ_ROYA = unchecked((int)0x96);
        public const int VK_LSHIFT = unchecked((int)0xA0);
        public const int VK_RSHIFT = unchecked((int)0xA1);
        public const int VK_LCONTROL = unchecked((int)0xA2);
        public const int VK_RCONTROL = unchecked((int)0xA3);
        public const int VK_LMENU = unchecked((int)0xA4);
        public const int VK_RMENU = unchecked((int)0xA5);
        public const int VK_BROWSER_BACK = unchecked((int)0xA6);
        public const int VK_BROWSER_FORWARD = unchecked((int)0xA7);
        public const int VK_BROWSER_REFRESH = unchecked((int)0xA8);
        public const int VK_BROWSER_STOP = unchecked((int)0xA9);
        public const int VK_BROWSER_SEARCH = unchecked((int)0xAA);
        public const int VK_BROWSER_FAVORITES = unchecked((int)0xAB);
        public const int VK_BROWSER_HOME = unchecked((int)0xAC);
        public const int VK_VOLUME_MUTE = unchecked((int)0xAD);
        public const int VK_VOLUME_DOWN = unchecked((int)0xAE);
        public const int VK_VOLUME_UP = unchecked((int)0xAF);
        public const int VK_MEDIA_NEXT_TRACK = unchecked((int)0xB0);
        public const int VK_MEDIA_PREV_TRACK = unchecked((int)0xB1);
        public const int VK_MEDIA_STOP = unchecked((int)0xB2);
        public const int VK_MEDIA_PLAY_PAUSE = unchecked((int)0xB3);
        public const int VK_LAUNCH_MAIL = unchecked((int)0xB4);
        public const int VK_LAUNCH_MEDIA_SELECT = unchecked((int)0xB5);
        public const int VK_LAUNCH_APP1 = unchecked((int)0xB6);
        public const int VK_LAUNCH_APP2 = unchecked((int)0xB7);
        public const int VK_OEM_1 = unchecked((int)0xBA);
        public const int VK_OEM_PLUS = unchecked((int)0xBB);
        public const int VK_OEM_COMMA = unchecked((int)0xBC);
        public const int VK_OEM_MINUS = unchecked((int)0xBD);
        public const int VK_OEM_PERIOD = unchecked((int)0xBE);
        public const int VK_OEM_2 = unchecked((int)0xBF);
        public const int VK_OEM_3 = unchecked((int)0xC0);
        public const int VK_GAMEPAD_A = unchecked((int)0xC3);
        public const int VK_GAMEPAD_B = unchecked((int)0xC4);
        public const int VK_GAMEPAD_X = unchecked((int)0xC5);
        public const int VK_GAMEPAD_Y = unchecked((int)0xC6);
        public const int VK_GAMEPAD_RIGHT_SHOULDER = unchecked((int)0xC7);
        public const int VK_GAMEPAD_LEFT_SHOULDER = unchecked((int)0xC8);
        public const int VK_GAMEPAD_LEFT_TRIGGER = unchecked((int)0xC9);
        public const int VK_GAMEPAD_RIGHT_TRIGGER = unchecked((int)0xCA);
        public const int VK_GAMEPAD_DPAD_UP = unchecked((int)0xCB);
        public const int VK_GAMEPAD_DPAD_DOWN = unchecked((int)0xCC);
        public const int VK_GAMEPAD_DPAD_LEFT = unchecked((int)0xCD);
        public const int VK_GAMEPAD_DPAD_RIGHT = unchecked((int)0xCE);
        public const int VK_GAMEPAD_MENU = unchecked((int)0xCF);
        public const int VK_GAMEPAD_VIEW = unchecked((int)0xD0);
        public const int VK_GAMEPAD_LEFT_THUMBSTICK_BUTTON = unchecked((int)0xD1);
        public const int VK_GAMEPAD_RIGHT_THUMBSTICK_BUTTON = unchecked((int)0xD2);
        public const int VK_GAMEPAD_LEFT_THUMBSTICK_UP = unchecked((int)0xD3);
        public const int VK_GAMEPAD_LEFT_THUMBSTICK_DOWN = unchecked((int)0xD4);
        public const int VK_GAMEPAD_LEFT_THUMBSTICK_RIGHT = unchecked((int)0xD5);
        public const int VK_GAMEPAD_LEFT_THUMBSTICK_LEFT = unchecked((int)0xD6);
        public const int VK_GAMEPAD_RIGHT_THUMBSTICK_UP = unchecked((int)0xD7);
        public const int VK_GAMEPAD_RIGHT_THUMBSTICK_DOWN = unchecked((int)0xD8);
        public const int VK_GAMEPAD_RIGHT_THUMBSTICK_RIGHT = unchecked((int)0xD9);
        public const int VK_GAMEPAD_RIGHT_THUMBSTICK_LEFT = unchecked((int)0xDA);
        public const int VK_OEM_4 = unchecked((int)0xDB);
        public const int VK_OEM_5 = unchecked((int)0xDC);
        public const int VK_OEM_6 = unchecked((int)0xDD);
        public const int VK_OEM_7 = unchecked((int)0xDE);
        public const int VK_OEM_8 = unchecked((int)0xDF);
        public const int VK_OEM_AX = unchecked((int)0xE1);
        public const int VK_OEM_102 = unchecked((int)0xE2);
        public const int VK_ICO_HELP = unchecked((int)0xE3);
        public const int VK_ICO_00 = unchecked((int)0xE4);
        public const int VK_PROCESSKEY = unchecked((int)0xE5);
        public const int VK_ICO_CLEAR = unchecked((int)0xE6);
        public const int VK_PACKET = unchecked((int)0xE7);
        public const int VK_OEM_RESET = unchecked((int)0xE9);
        public const int VK_OEM_JUMP = unchecked((int)0xEA);
        public const int VK_OEM_PA1 = unchecked((int)0xEB);
        public const int VK_OEM_PA2 = unchecked((int)0xEC);
        public const int VK_OEM_PA3 = unchecked((int)0xED);
        public const int VK_OEM_WSCTRL = unchecked((int)0xEE);
        public const int VK_OEM_CUSEL = unchecked((int)0xEF);
        public const int VK_OEM_ATTN = unchecked((int)0xF0);
        public const int VK_OEM_FINISH = unchecked((int)0xF1);
        public const int VK_OEM_COPY = unchecked((int)0xF2);
        public const int VK_OEM_AUTO = unchecked((int)0xF3);
        public const int VK_OEM_ENLW = unchecked((int)0xF4);
        public const int VK_OEM_BACKTAB = unchecked((int)0xF5);
        public const int VK_ATTN = unchecked((int)0xF6);
        public const int VK_CRSEL = unchecked((int)0xF7);
        public const int VK_EXSEL = unchecked((int)0xF8);
        public const int VK_EREOF = unchecked((int)0xF9);
        public const int VK_PLAY = unchecked((int)0xFA);
        public const int VK_ZOOM = unchecked((int)0xFB);
        public const int VK_NONAME = unchecked((int)0xFC);
        public const int VK_PA1 = unchecked((int)0xFD);
        public const int VK_OEM_CLEAR = unchecked((int)0xFE);
        public const int WH_MIN = ( - 1 );
        public const int WH_MSGFILTER = ( - 1 );
        public const int WH_JOURNALRECORD = 0;
        public const int WH_JOURNALPLAYBACK = 1;
        public const int WH_KEYBOARD = 2;
        public const int WH_GETMESSAGE = 3;
        public const int WH_CALLWNDPROC = 4;
        public const int WH_CBT = 5;
        public const int WH_SYSMSGFILTER = 6;
        public const int WH_MOUSE = 7;
        public const int WH_DEBUG = 9;
        public const int WH_SHELL = 10;
        public const int WH_FOREGROUNDIDLE = 11;
        public const int WH_CALLWNDPROCRET = 12;
        public const int WH_KEYBOARD_LL = 13;
        public const int WH_MOUSE_LL = 14;
        public const int WH_MAX = 14;
        // unknown type: WH_MINHOOK WH_MIN
        // unknown type: WH_MAXHOOK WH_MAX
        public const int HC_ACTION = 0;
        public const int HC_GETNEXT = 1;
        public const int HC_SKIP = 2;
        public const int HC_NOREMOVE = 3;
        // unknown type: HC_NOREM HC_NOREMOVE
        public const int HC_SYSMODALON = 4;
        public const int HC_SYSMODALOFF = 5;
        public const int HCBT_MOVESIZE = 0;
        public const int HCBT_MINMAX = 1;
        public const int HCBT_QS = 2;
        public const int HCBT_CREATEWND = 3;
        public const int HCBT_DESTROYWND = 4;
        public const int HCBT_ACTIVATE = 5;
        public const int HCBT_CLICKSKIPPED = 6;
        public const int HCBT_KEYSKIPPED = 7;
        public const int HCBT_SYSCOMMAND = 8;
        public const int HCBT_SETFOCUS = 9;
        public const int WTS_CONSOLE_CONNECT = unchecked((int)0x1);
        public const int WTS_CONSOLE_DISCONNECT = unchecked((int)0x2);
        public const int WTS_REMOTE_CONNECT = unchecked((int)0x3);
        public const int WTS_REMOTE_DISCONNECT = unchecked((int)0x4);
        public const int WTS_SESSION_LOGON = unchecked((int)0x5);
        public const int WTS_SESSION_LOGOFF = unchecked((int)0x6);
        public const int WTS_SESSION_LOCK = unchecked((int)0x7);
        public const int WTS_SESSION_UNLOCK = unchecked((int)0x8);
        public const int WTS_SESSION_REMOTE_CONTROL = unchecked((int)0x9);
        public const int WTS_SESSION_CREATE = unchecked((int)0xa);
        public const int WTS_SESSION_TERMINATE = unchecked((int)0xb);
        public const int MSGF_DIALOGBOX = 0;
        public const int MSGF_MESSAGEBOX = 1;
        public const int MSGF_MENU = 2;
        public const int MSGF_SCROLLBAR = 5;
        public const int MSGF_NEXTWINDOW = 6;
        public const int MSGF_MAX = 8;
        public const int MSGF_USER = 4096;
        public const int HSHELL_WINDOWCREATED = 1;
        public const int HSHELL_WINDOWDESTROYED = 2;
        public const int HSHELL_ACTIVATESHELLWINDOW = 3;
        public const int HSHELL_WINDOWACTIVATED = 4;
        public const int HSHELL_GETMINRECT = 5;
        public const int HSHELL_REDRAW = 6;
        public const int HSHELL_TASKMAN = 7;
        public const int HSHELL_LANGUAGE = 8;
        public const int HSHELL_SYSMENU = 9;
        public const int HSHELL_ENDTASK = 10;
        public const int HSHELL_ACCESSIBILITYSTATE = 11;
        public const int HSHELL_APPCOMMAND = 12;
        public const int HSHELL_WINDOWREPLACED = 13;
        public const int HSHELL_WINDOWREPLACING = 14;
        public const int HSHELL_MONITORCHANGED = 16;
        public const int HSHELL_HIGHBIT = unchecked((int)0x8000);
        public const int HSHELL_FLASH = ( HSHELL_REDRAW | HSHELL_HIGHBIT );
        public const int HSHELL_RUDEAPPACTIVATED = ( HSHELL_WINDOWACTIVATED | HSHELL_HIGHBIT );
        public const int APPCOMMAND_BROWSER_BACKWARD = 1;
        public const int APPCOMMAND_BROWSER_FORWARD = 2;
        public const int APPCOMMAND_BROWSER_REFRESH = 3;
        public const int APPCOMMAND_BROWSER_STOP = 4;
        public const int APPCOMMAND_BROWSER_SEARCH = 5;
        public const int APPCOMMAND_BROWSER_FAVORITES = 6;
        public const int APPCOMMAND_BROWSER_HOME = 7;
        public const int APPCOMMAND_VOLUME_MUTE = 8;
        public const int APPCOMMAND_VOLUME_DOWN = 9;
        public const int APPCOMMAND_VOLUME_UP = 10;
        public const int APPCOMMAND_MEDIA_NEXTTRACK = 11;
        public const int APPCOMMAND_MEDIA_PREVIOUSTRACK = 12;
        public const int APPCOMMAND_MEDIA_STOP = 13;
        public const int APPCOMMAND_MEDIA_PLAY_PAUSE = 14;
        public const int APPCOMMAND_LAUNCH_MAIL = 15;
        public const int APPCOMMAND_LAUNCH_MEDIA_SELECT = 16;
        public const int APPCOMMAND_LAUNCH_APP1 = 17;
        public const int APPCOMMAND_LAUNCH_APP2 = 18;
        public const int APPCOMMAND_BASS_DOWN = 19;
        public const int APPCOMMAND_BASS_BOOST = 20;
        public const int APPCOMMAND_BASS_UP = 21;
        public const int APPCOMMAND_TREBLE_DOWN = 22;
        public const int APPCOMMAND_TREBLE_UP = 23;
        public const int APPCOMMAND_MICROPHONE_VOLUME_MUTE = 24;
        public const int APPCOMMAND_MICROPHONE_VOLUME_DOWN = 25;
        public const int APPCOMMAND_MICROPHONE_VOLUME_UP = 26;
        public const int APPCOMMAND_HELP = 27;
        public const int APPCOMMAND_FIND = 28;
        public const int APPCOMMAND_NEW = 29;
        public const int APPCOMMAND_OPEN = 30;
        public const int APPCOMMAND_CLOSE = 31;
        public const int APPCOMMAND_SAVE = 32;
        public const int APPCOMMAND_PRINT = 33;
        public const int APPCOMMAND_UNDO = 34;
        public const int APPCOMMAND_REDO = 35;
        public const int APPCOMMAND_COPY = 36;
        public const int APPCOMMAND_CUT = 37;
        public const int APPCOMMAND_PASTE = 38;
        public const int APPCOMMAND_REPLY_TO_MAIL = 39;
        public const int APPCOMMAND_FORWARD_MAIL = 40;
        public const int APPCOMMAND_SEND_MAIL = 41;
        public const int APPCOMMAND_SPELL_CHECK = 42;
        public const int APPCOMMAND_DICTATE_OR_COMMAND_CONTROL_TOGGLE = 43;
        public const int APPCOMMAND_MIC_ON_OFF_TOGGLE = 44;
        public const int APPCOMMAND_CORRECTION_LIST = 45;
        public const int APPCOMMAND_MEDIA_PLAY = 46;
        public const int APPCOMMAND_MEDIA_PAUSE = 47;
        public const int APPCOMMAND_MEDIA_RECORD = 48;
        public const int APPCOMMAND_MEDIA_FAST_FORWARD = 49;
        public const int APPCOMMAND_MEDIA_REWIND = 50;
        public const int APPCOMMAND_MEDIA_CHANNEL_UP = 51;
        public const int APPCOMMAND_MEDIA_CHANNEL_DOWN = 52;
        public const int APPCOMMAND_DELETE = 53;
        public const int APPCOMMAND_DWM_FLIP3D = 54;
        public const int FAPPCOMMAND_MOUSE = unchecked((int)0x8000);
        public const int FAPPCOMMAND_KEY = 0;
        public const int FAPPCOMMAND_OEM = unchecked((int)0x1000);
        public const int FAPPCOMMAND_MASK = unchecked((int)0xF000);
        // macro function: GET_APPCOMMAND_LPARAM ( lParam ) ( ( short ) ( HIWORD ( lParam ) & ~ FAPPCOMMAND_MASK ) )
        // macro function: GET_DEVICE_LPARAM ( lParam ) ( ( WORD ) ( HIWORD ( lParam ) & FAPPCOMMAND_MASK ) )
        // unknown type: GET_MOUSEORKEY_LPARAM GET_DEVICE_LPARAM
        // macro function: GET_FLAGS_LPARAM ( lParam ) ( LOWORD ( lParam ) )
        // macro function: GET_KEYSTATE_LPARAM ( lParam ) GET_FLAGS_LPARAM ( lParam )
        public const int LLKHF_EXTENDED = ( KF_EXTENDED >> 8 );
        public const int LLKHF_INJECTED = unchecked((int)0x00000010);
        public const int LLKHF_ALTDOWN = ( KF_ALTDOWN >> 8 );
        public const int LLKHF_UP = ( KF_UP >> 8 );
        public const int LLKHF_LOWER_IL_INJECTED = unchecked((int)0x00000002);
        public const int LLMHF_INJECTED = unchecked((int)0x00000001);
        public const int LLMHF_LOWER_IL_INJECTED = unchecked((int)0x00000002);
        public const int HKL_PREV = 0;
        public const int HKL_NEXT = 1;
        public const int KLF_ACTIVATE = unchecked((int)0x00000001);
        public const int KLF_SUBSTITUTE_OK = unchecked((int)0x00000002);
        public const int KLF_REORDER = unchecked((int)0x00000008);
        public const int KLF_REPLACELANG = unchecked((int)0x00000010);
        public const int KLF_NOTELLSHELL = unchecked((int)0x00000080);
        public const int KLF_SETFORPROCESS = unchecked((int)0x00000100);
        public const int KLF_SHIFTLOCK = unchecked((int)0x00010000);
        public const int KLF_RESET = unchecked((int)0x40000000);
        public const int INPUTLANGCHANGE_SYSCHARSET = unchecked((int)0x0001);
        public const int INPUTLANGCHANGE_FORWARD = unchecked((int)0x0002);
        public const int INPUTLANGCHANGE_BACKWARD = unchecked((int)0x0004);
        public const int KL_NAMELENGTH = 9;
        // unknown type: LoadKeyboardLayout LoadKeyboardLayoutW
        // unknown type: GetKeyboardLayoutName GetKeyboardLayoutNameW
        public const int GMMP_USE_DISPLAY_POINTS = 1;
        public const int GMMP_USE_HIGH_RESOLUTION_POINTS = 2;
        public const int DESKTOP_READOBJECTS = unchecked((int)0x0001);
        public const int DESKTOP_CREATEWINDOW = unchecked((int)0x0002);
        public const int DESKTOP_CREATEMENU = unchecked((int)0x0004);
        public const int DESKTOP_HOOKCONTROL = unchecked((int)0x0008);
        public const int DESKTOP_JOURNALRECORD = unchecked((int)0x0010);
        public const int DESKTOP_JOURNALPLAYBACK = unchecked((int)0x0020);
        public const int DESKTOP_ENUMERATE = unchecked((int)0x0040);
        public const int DESKTOP_WRITEOBJECTS = unchecked((int)0x0080);
        public const int DESKTOP_SWITCHDESKTOP = unchecked((int)0x0100);
        public const int DF_ALLOWOTHERACCOUNTHOOK = unchecked((int)0x0001);
        // unknown type: CreateDesktop CreateDesktopW
        // unknown type: CreateDesktopEx CreateDesktopExW
        // unknown type: OpenDesktop OpenDesktopW
        // unknown type: EnumDesktops EnumDesktopsW
        public const int WINSTA_ENUMDESKTOPS = unchecked((int)0x0001);
        public const int WINSTA_READATTRIBUTES = unchecked((int)0x0002);
        public const int WINSTA_ACCESSCLIPBOARD = unchecked((int)0x0004);
        public const int WINSTA_CREATEDESKTOP = unchecked((int)0x0008);
        public const int WINSTA_WRITEATTRIBUTES = unchecked((int)0x0010);
        public const int WINSTA_ACCESSGLOBALATOMS = unchecked((int)0x0020);
        public const int WINSTA_EXITWINDOWS = unchecked((int)0x0040);
        public const int WINSTA_ENUMERATE = unchecked((int)0x0100);
        public const int WINSTA_READSCREEN = unchecked((int)0x0200);
        public const int WINSTA_ALL_ACCESS = ( WINSTA_ENUMDESKTOPS | WINSTA_READATTRIBUTES | WINSTA_ACCESSCLIPBOARD | WINSTA_CREATEDESKTOP | WINSTA_WRITEATTRIBUTES | WINSTA_ACCESSGLOBALATOMS | WINSTA_EXITWINDOWS | WINSTA_ENUMERATE | WINSTA_READSCREEN );
        public const int CWF_CREATE_ONLY = unchecked((int)0x00000001);
        public const int WSF_VISIBLE = unchecked((int)0x0001);
        // unknown type: CreateWindowStation CreateWindowStationW
        // unknown type: OpenWindowStation OpenWindowStationW
        // unknown type: EnumWindowStations EnumWindowStationsW
        public const int UOI_FLAGS = 1;
        public const int UOI_NAME = 2;
        public const int UOI_TYPE = 3;
        public const int UOI_USER_SID = 4;
        public const int UOI_HEAPSIZE = 5;
        public const int UOI_IO = 6;
        public const int UOI_TIMERPROC_EXCEPTION_SUPPRESSION = 7;
        // unknown type: GetUserObjectInformation GetUserObjectInformationW
        // unknown type: SetUserObjectInformation SetUserObjectInformationW
        // macro function: POINTSTOPOINT ( pt , pts ) { ( pt ) . x = ( LONG ) ( SHORT ) LOWORD ( * ( LONG * ) & pts ) ; ( pt ) . y = ( LONG ) ( SHORT ) HIWORD ( * ( LONG * ) & pts ) ; }
        // macro function: POINTTOPOINTS ( pt ) ( MAKELONG ( ( short ) ( ( pt ) . x ) , ( short ) ( ( pt ) . y ) ) )
        // macro function: MAKEWPARAM ( l , h ) ( ( WPARAM ) ( DWORD ) MAKELONG ( l , h ) )
        // macro function: MAKELPARAM ( l , h ) ( ( LPARAM ) ( DWORD ) MAKELONG ( l , h ) )
        // macro function: MAKELRESULT ( l , h ) ( ( LRESULT ) ( DWORD ) MAKELONG ( l , h ) )
        public const int GWL_WNDPROC = ( - 4 );
        public const int GWL_HINSTANCE = ( - 6 );
        public const int GWL_HWNDPARENT = ( - 8 );
        public const int GWL_STYLE = ( - 16 );
        public const int GWL_EXSTYLE = ( - 20 );
        public const int GWL_USERDATA = ( - 21 );
        public const int GWL_ID = ( - 12 );
        public const int GWLP_WNDPROC = ( - 4 );
        public const int GWLP_HINSTANCE = ( - 6 );
        public const int GWLP_HWNDPARENT = ( - 8 );
        public const int GWLP_USERDATA = ( - 21 );
        public const int GWLP_ID = ( - 12 );
        public const int GCL_MENUNAME = ( - 8 );
        public const int GCL_HBRBACKGROUND = ( - 10 );
        public const int GCL_HCURSOR = ( - 12 );
        public const int GCL_HICON = ( - 14 );
        public const int GCL_HMODULE = ( - 16 );
        public const int GCL_CBWNDEXTRA = ( - 18 );
        public const int GCL_CBCLSEXTRA = ( - 20 );
        public const int GCL_WNDPROC = ( - 24 );
        public const int GCL_STYLE = ( - 26 );
        public const int GCW_ATOM = ( - 32 );
        public const int GCL_HICONSM = ( - 34 );
        public const int GCLP_MENUNAME = ( - 8 );
        public const int GCLP_HBRBACKGROUND = ( - 10 );
        public const int GCLP_HCURSOR = ( - 12 );
        public const int GCLP_HICON = ( - 14 );
        public const int GCLP_HMODULE = ( - 16 );
        public const int GCLP_WNDPROC = ( - 24 );
        public const int GCLP_HICONSM = ( - 34 );
        public const int WA_INACTIVE = 0;
        public const int WA_ACTIVE = 1;
        public const int WA_CLICKACTIVE = 2;
        public const int PWR_OK = 1;
        public const int PWR_FAIL = ( - 1 );
        public const int PWR_SUSPENDREQUEST = 1;
        public const int PWR_SUSPENDRESUME = 2;
        public const int PWR_CRITICALRESUME = 3;
        public const int NFR_ANSI = 1;
        public const int NFR_UNICODE = 2;
        public const int NF_QUERY = 3;
        public const int NF_REQUERY = 4;
        public const int UNICODE_NOCHAR = unchecked((int)0xFFFF);
        public const int UIS_SET = 1;
        public const int UIS_CLEAR = 2;
        public const int UIS_INITIALIZE = 3;
        public const int UISF_HIDEFOCUS = unchecked((int)0x1);
        public const int UISF_HIDEACCEL = unchecked((int)0x2);
        public const int UISF_ACTIVE = unchecked((int)0x4);
        public const int MN_GETHMENU = unchecked((int)0x01E1);
        public const int WHEEL_DELTA = 120;
        // macro function: GET_WHEEL_DELTA_WPARAM ( wParam ) ( ( short ) HIWORD ( wParam ) )
        public const int WHEEL_PAGESCROLL = unchecked( /*UINT_MAX*/(int)0xfffffff );
        // macro function: GET_KEYSTATE_WPARAM ( wParam ) ( LOWORD ( wParam ) )
        // macro function: GET_NCHITTEST_WPARAM ( wParam ) ( ( short ) LOWORD ( wParam ) )
        // macro function: GET_XBUTTON_WPARAM ( wParam ) ( HIWORD ( wParam ) )
        public const int XBUTTON1 = unchecked((int)0x0001);
        public const int XBUTTON2 = unchecked((int)0x0002);
        public const int PBT_APMQUERYSUSPEND = unchecked((int)0x0000);
        public const int PBT_APMQUERYSTANDBY = unchecked((int)0x0001);
        public const int PBT_APMQUERYSUSPENDFAILED = unchecked((int)0x0002);
        public const int PBT_APMQUERYSTANDBYFAILED = unchecked((int)0x0003);
        public const int PBT_APMSUSPEND = unchecked((int)0x0004);
        public const int PBT_APMSTANDBY = unchecked((int)0x0005);
        public const int PBT_APMRESUMECRITICAL = unchecked((int)0x0006);
        public const int PBT_APMRESUMESUSPEND = unchecked((int)0x0007);
        public const int PBT_APMRESUMESTANDBY = unchecked((int)0x0008);
        public const int PBTF_APMRESUMEFROMFAILURE = unchecked((int)0x00000001);
        public const int PBT_APMBATTERYLOW = unchecked((int)0x0009);
        public const int PBT_APMPOWERSTATUSCHANGE = unchecked((int)0x000A);
        public const int PBT_APMOEMEVENT = unchecked((int)0x000B);
        public const int PBT_APMRESUMEAUTOMATIC = unchecked((int)0x0012);
        public const int PBT_POWERSETTINGCHANGE = unchecked((int)0x8013);
        public const int WMSZ_LEFT = 1;
        public const int WMSZ_RIGHT = 2;
        public const int WMSZ_TOP = 3;
        public const int WMSZ_TOPLEFT = 4;
        public const int WMSZ_TOPRIGHT = 5;
        public const int WMSZ_BOTTOM = 6;
        public const int WMSZ_BOTTOMLEFT = 7;
        public const int WMSZ_BOTTOMRIGHT = 8;
        public const int HTERROR = ( - 2 );
        public const int HTTRANSPARENT = ( - 1 );
        public const int HTNOWHERE = 0;
        public const int HTCLIENT = 1;
        public const int HTCAPTION = 2;
        public const int HTSYSMENU = 3;
        public const int HTGROWBOX = 4;
        // unknown type: HTSIZE HTGROWBOX
        public const int HTMENU = 5;
        public const int HTHSCROLL = 6;
        public const int HTVSCROLL = 7;
        public const int HTMINBUTTON = 8;
        public const int HTMAXBUTTON = 9;
        public const int HTLEFT = 10;
        public const int HTRIGHT = 11;
        public const int HTTOP = 12;
        public const int HTTOPLEFT = 13;
        public const int HTTOPRIGHT = 14;
        public const int HTBOTTOM = 15;
        public const int HTBOTTOMLEFT = 16;
        public const int HTBOTTOMRIGHT = 17;
        public const int HTBORDER = 18;
        // unknown type: HTREDUCE HTMINBUTTON
        // unknown type: HTZOOM HTMAXBUTTON
        // unknown type: HTSIZEFIRST HTLEFT
        // unknown type: HTSIZELAST HTBOTTOMRIGHT
        public const int HTOBJECT = 19;
        public const int HTCLOSE = 20;
        public const int HTHELP = 21;
        public const int SMTO_NORMAL = unchecked((int)0x0000);
        public const int SMTO_BLOCK = unchecked((int)0x0001);
        public const int SMTO_ABORTIFHUNG = unchecked((int)0x0002);
        public const int SMTO_NOTIMEOUTIFNOTHUNG = unchecked((int)0x0008);
        public const int SMTO_ERRORONEXIT = unchecked((int)0x0020);
        public const int MA_ACTIVATE = 1;
        public const int MA_ACTIVATEANDEAT = 2;
        public const int MA_NOACTIVATE = 3;
        public const int MA_NOACTIVATEANDEAT = 4;
        public const int ICON_SMALL = 0;
        public const int ICON_BIG = 1;
        public const int ICON_SMALL2 = 2;
        // unknown type: RegisterWindowMessage RegisterWindowMessageW
        public const int SIZE_RESTORED = 0;
        public const int SIZE_MINIMIZED = 1;
        public const int SIZE_MAXIMIZED = 2;
        public const int SIZE_MAXSHOW = 3;
        public const int SIZE_MAXHIDE = 4;
        // unknown type: SIZENORMAL SIZE_RESTORED
        // unknown type: SIZEICONIC SIZE_MINIMIZED
        // unknown type: SIZEFULLSCREEN SIZE_MAXIMIZED
        // unknown type: SIZEZOOMSHOW SIZE_MAXSHOW
        // unknown type: SIZEZOOMHIDE SIZE_MAXHIDE
        public const int WVR_ALIGNTOP = unchecked((int)0x0010);
        public const int WVR_ALIGNLEFT = unchecked((int)0x0020);
        public const int WVR_ALIGNBOTTOM = unchecked((int)0x0040);
        public const int WVR_ALIGNRIGHT = unchecked((int)0x0080);
        public const int WVR_HREDRAW = unchecked((int)0x0100);
        public const int WVR_VREDRAW = unchecked((int)0x0200);
        public const int WVR_REDRAW = ( WVR_HREDRAW | WVR_VREDRAW );
        public const int WVR_VALIDRECTS = unchecked((int)0x0400);
        public const int MK_LBUTTON = unchecked((int)0x0001);
        public const int MK_RBUTTON = unchecked((int)0x0002);
        public const int MK_SHIFT = unchecked((int)0x0004);
        public const int MK_CONTROL = unchecked((int)0x0008);
        public const int MK_MBUTTON = unchecked((int)0x0010);
        public const int MK_XBUTTON1 = unchecked((int)0x0020);
        public const int MK_XBUTTON2 = unchecked((int)0x0040);
        public const int TME_HOVER = unchecked((int)0x00000001);
        public const int TME_LEAVE = unchecked((int)0x00000002);
        public const int TME_NONCLIENT = unchecked((int)0x00000010);
        public const int TME_QUERY = unchecked((int)0x40000000);
        public const int TME_CANCEL = unchecked((int)0x80000000);
        public const int HOVER_DEFAULT = unchecked((int)0xFFFFFFFF);
        public const int CS_VREDRAW = unchecked((int)0x0001);
        public const int CS_HREDRAW = unchecked((int)0x0002);
        public const int CS_DBLCLKS = unchecked((int)0x0008);
        public const int CS_OWNDC = unchecked((int)0x0020);
        public const int CS_CLASSDC = unchecked((int)0x0040);
        public const int CS_PARENTDC = unchecked((int)0x0080);
        public const int CS_NOCLOSE = unchecked((int)0x0200);
        public const int CS_SAVEBITS = unchecked((int)0x0800);
        public const int CS_BYTEALIGNCLIENT = unchecked((int)0x1000);
        public const int CS_BYTEALIGNWINDOW = unchecked((int)0x2000);
        public const int CS_GLOBALCLASS = unchecked((int)0x4000);
        public const int CS_IME = unchecked((int)0x00010000);
        public const int CS_DROPSHADOW = unchecked((int)0x00020000);
        public const int PRF_CHECKVISIBLE = unchecked((int)0x00000001);
        public const int PRF_NONCLIENT = unchecked((int)0x00000002);
        public const int PRF_CLIENT = unchecked((int)0x00000004);
        public const int PRF_ERASEBKGND = unchecked((int)0x00000008);
        public const int PRF_CHILDREN = unchecked((int)0x00000010);
        public const int PRF_OWNED = unchecked((int)0x00000020);
        public const int BDR_RAISEDOUTER = unchecked((int)0x0001);
        public const int BDR_SUNKENOUTER = unchecked((int)0x0002);
        public const int BDR_RAISEDINNER = unchecked((int)0x0004);
        public const int BDR_SUNKENINNER = unchecked((int)0x0008);
        public const int BDR_OUTER = ( BDR_RAISEDOUTER | BDR_SUNKENOUTER );
        public const int BDR_INNER = ( BDR_RAISEDINNER | BDR_SUNKENINNER );
        public const int BDR_RAISED = ( BDR_RAISEDOUTER | BDR_RAISEDINNER );
        public const int BDR_SUNKEN = ( BDR_SUNKENOUTER | BDR_SUNKENINNER );
        public const int EDGE_RAISED = ( BDR_RAISEDOUTER | BDR_RAISEDINNER );
        public const int EDGE_SUNKEN = ( BDR_SUNKENOUTER | BDR_SUNKENINNER );
        public const int EDGE_ETCHED = ( BDR_SUNKENOUTER | BDR_RAISEDINNER );
        public const int EDGE_BUMP = ( BDR_RAISEDOUTER | BDR_SUNKENINNER );
        public const int BF_LEFT = unchecked((int)0x0001);
        public const int BF_TOP = unchecked((int)0x0002);
        public const int BF_RIGHT = unchecked((int)0x0004);
        public const int BF_BOTTOM = unchecked((int)0x0008);
        public const int BF_TOPLEFT = ( BF_TOP | BF_LEFT );
        public const int BF_TOPRIGHT = ( BF_TOP | BF_RIGHT );
        public const int BF_BOTTOMLEFT = ( BF_BOTTOM | BF_LEFT );
        public const int BF_BOTTOMRIGHT = ( BF_BOTTOM | BF_RIGHT );
        public const int BF_RECT = ( BF_LEFT | BF_TOP | BF_RIGHT | BF_BOTTOM );
        public const int BF_DIAGONAL = unchecked((int)0x0010);
        public const int BF_DIAGONAL_ENDTOPRIGHT = ( BF_DIAGONAL | BF_TOP | BF_RIGHT );
        public const int BF_DIAGONAL_ENDTOPLEFT = ( BF_DIAGONAL | BF_TOP | BF_LEFT );
        public const int BF_DIAGONAL_ENDBOTTOMLEFT = ( BF_DIAGONAL | BF_BOTTOM | BF_LEFT );
        public const int BF_DIAGONAL_ENDBOTTOMRIGHT = ( BF_DIAGONAL | BF_BOTTOM | BF_RIGHT );
        public const int BF_MIDDLE = unchecked((int)0x0800);
        public const int BF_SOFT = unchecked((int)0x1000);
        public const int BF_ADJUST = unchecked((int)0x2000);
        public const int BF_FLAT = unchecked((int)0x4000);
        public const int BF_MONO = unchecked((int)0x8000);
        public const int DFC_CAPTION = 1;
        public const int DFC_MENU = 2;
        public const int DFC_SCROLL = 3;
        public const int DFC_BUTTON = 4;
        public const int DFC_POPUPMENU = 5;
        public const int DFCS_CAPTIONCLOSE = unchecked((int)0x0000);
        public const int DFCS_CAPTIONMIN = unchecked((int)0x0001);
        public const int DFCS_CAPTIONMAX = unchecked((int)0x0002);
        public const int DFCS_CAPTIONRESTORE = unchecked((int)0x0003);
        public const int DFCS_CAPTIONHELP = unchecked((int)0x0004);
        public const int DFCS_MENUARROW = unchecked((int)0x0000);
        public const int DFCS_MENUCHECK = unchecked((int)0x0001);
        public const int DFCS_MENUBULLET = unchecked((int)0x0002);
        public const int DFCS_MENUARROWRIGHT = unchecked((int)0x0004);
        public const int DFCS_SCROLLUP = unchecked((int)0x0000);
        public const int DFCS_SCROLLDOWN = unchecked((int)0x0001);
        public const int DFCS_SCROLLLEFT = unchecked((int)0x0002);
        public const int DFCS_SCROLLRIGHT = unchecked((int)0x0003);
        public const int DFCS_SCROLLCOMBOBOX = unchecked((int)0x0005);
        public const int DFCS_SCROLLSIZEGRIP = unchecked((int)0x0008);
        public const int DFCS_SCROLLSIZEGRIPRIGHT = unchecked((int)0x0010);
        public const int DFCS_BUTTONCHECK = unchecked((int)0x0000);
        public const int DFCS_BUTTONRADIOIMAGE = unchecked((int)0x0001);
        public const int DFCS_BUTTONRADIOMASK = unchecked((int)0x0002);
        public const int DFCS_BUTTONRADIO = unchecked((int)0x0004);
        public const int DFCS_BUTTON3STATE = unchecked((int)0x0008);
        public const int DFCS_BUTTONPUSH = unchecked((int)0x0010);
        public const int DFCS_INACTIVE = unchecked((int)0x0100);
        public const int DFCS_PUSHED = unchecked((int)0x0200);
        public const int DFCS_CHECKED = unchecked((int)0x0400);
        public const int DFCS_TRANSPARENT = unchecked((int)0x0800);
        public const int DFCS_HOT = unchecked((int)0x1000);
        public const int DFCS_ADJUSTRECT = unchecked((int)0x2000);
        public const int DFCS_FLAT = unchecked((int)0x4000);
        public const int DFCS_MONO = unchecked((int)0x8000);
        public const int DC_ACTIVE = unchecked((int)0x0001);
        public const int DC_SMALLCAP = unchecked((int)0x0002);
        public const int DC_ICON = unchecked((int)0x0004);
        public const int DC_TEXT = unchecked((int)0x0008);
        public const int DC_INBUTTON = unchecked((int)0x0010);
        public const int DC_GRADIENT = unchecked((int)0x0020);
        public const int DC_BUTTONS = unchecked((int)0x1000);
        public const int IDANI_OPEN = 1;
        public const int IDANI_CAPTION = 3;
        public const int CF_TEXT = 1;
        public const int CF_BITMAP = 2;
        public const int CF_METAFILEPICT = 3;
        public const int CF_SYLK = 4;
        public const int CF_DIF = 5;
        public const int CF_TIFF = 6;
        public const int CF_OEMTEXT = 7;
        public const int CF_DIB = 8;
        public const int CF_PALETTE = 9;
        public const int CF_PENDATA = 10;
        public const int CF_RIFF = 11;
        public const int CF_WAVE = 12;
        public const int CF_UNICODETEXT = 13;
        public const int CF_ENHMETAFILE = 14;
        public const int CF_HDROP = 15;
        public const int CF_LOCALE = 16;
        public const int CF_DIBV5 = 17;
        public const int CF_MAX = 18;
        public const int CF_OWNERDISPLAY = unchecked((int)0x0080);
        public const int CF_DSPTEXT = unchecked((int)0x0081);
        public const int CF_DSPBITMAP = unchecked((int)0x0082);
        public const int CF_DSPMETAFILEPICT = unchecked((int)0x0083);
        public const int CF_DSPENHMETAFILE = unchecked((int)0x008E);
        public const int CF_PRIVATEFIRST = unchecked((int)0x0200);
        public const int CF_PRIVATELAST = unchecked((int)0x02FF);
        public const int CF_GDIOBJFIRST = unchecked((int)0x0300);
        public const int CF_GDIOBJLAST = unchecked((int)0x03FF);
        // unknown type: FVIRTKEY TRUE
        public const int FNOINVERT = unchecked((int)0x02);
        public const int FSHIFT = unchecked((int)0x04);
        public const int FCONTROL = unchecked((int)0x08);
        public const int FALT = unchecked((int)0x10);
        public const int WPF_SETMINPOSITION = unchecked((int)0x0001);
        public const int WPF_RESTORETOMAXIMIZED = unchecked((int)0x0002);
        public const int WPF_ASYNCWINDOWPLACEMENT = unchecked((int)0x0004);
        public const int ODT_MENU = 1;
        public const int ODT_LISTBOX = 2;
        public const int ODT_COMBOBOX = 3;
        public const int ODT_BUTTON = 4;
        public const int ODT_STATIC = 5;
        public const int ODA_DRAWENTIRE = unchecked((int)0x0001);
        public const int ODA_SELECT = unchecked((int)0x0002);
        public const int ODA_FOCUS = unchecked((int)0x0004);
        public const int ODS_SELECTED = unchecked((int)0x0001);
        public const int ODS_GRAYED = unchecked((int)0x0002);
        public const int ODS_DISABLED = unchecked((int)0x0004);
        public const int ODS_CHECKED = unchecked((int)0x0008);
        public const int ODS_FOCUS = unchecked((int)0x0010);
        public const int ODS_DEFAULT = unchecked((int)0x0020);
        public const int ODS_COMBOBOXEDIT = unchecked((int)0x1000);
        public const int ODS_HOTLIGHT = unchecked((int)0x0040);
        public const int ODS_INACTIVE = unchecked((int)0x0080);
        public const int ODS_NOACCEL = unchecked((int)0x0100);
        public const int ODS_NOFOCUSRECT = unchecked((int)0x0200);
        // unknown type: GetMessage GetMessageW
        // unknown type: DispatchMessage DispatchMessageW
        // unknown type: PeekMessage PeekMessageW
        public const int PM_NOREMOVE = unchecked((int)0x0000);
        public const int PM_REMOVE = unchecked((int)0x0001);
        public const int PM_NOYIELD = unchecked((int)0x0002);
        public const int PM_QS_INPUT = ( QS_INPUT << 16 );
        public const int PM_QS_POSTMESSAGE = ( ( QS_POSTMESSAGE | QS_HOTKEY | QS_TIMER ) << 16 );
        public const int PM_QS_PAINT = ( QS_PAINT << 16 );
        public const int PM_QS_SENDMESSAGE = ( QS_SENDMESSAGE << 16 );
        public const int MOD_ALT = unchecked((int)0x0001);
        public const int MOD_CONTROL = unchecked((int)0x0002);
        public const int MOD_SHIFT = unchecked((int)0x0004);
        public const int MOD_WIN = unchecked((int)0x0008);
        public const int MOD_NOREPEAT = unchecked((int)0x4000);
        public const int IDHOT_SNAPWINDOW = ( - 1 );
        public const int IDHOT_SNAPDESKTOP = ( - 2 );
        public const int ENDSESSION_CLOSEAPP = unchecked((int)0x00000001);
        public const int ENDSESSION_CRITICAL = unchecked((int)0x40000000);
        public const int ENDSESSION_LOGOFF = unchecked((int)0x80000000);
        public const int EWX_LOGOFF = unchecked((int)0x00000000);
        public const int EWX_SHUTDOWN = unchecked((int)0x00000001);
        public const int EWX_REBOOT = unchecked((int)0x00000002);
        public const int EWX_FORCE = unchecked((int)0x00000004);
        public const int EWX_POWEROFF = unchecked((int)0x00000008);
        public const int EWX_FORCEIFHUNG = unchecked((int)0x00000010);
        public const int EWX_QUICKRESOLVE = unchecked((int)0x00000020);
        public const int EWX_RESTARTAPPS = unchecked((int)0x00000040);
        public const int EWX_HYBRID_SHUTDOWN = unchecked((int)0x00400000);
        public const int EWX_BOOTOPTIONS = unchecked((int)0x01000000);
        // macro function: ExitWindows ( dwReserved , Code ) ExitWindowsEx ( EWX_LOGOFF , 0xFFFFFFFF )
        // unknown type: SendMessage SendMessageW
        // unknown type: SendMessageTimeout SendMessageTimeoutW
        // unknown type: SendNotifyMessage SendNotifyMessageW
        // unknown type: SendMessageCallback SendMessageCallbackW
        // unknown type: BroadcastSystemMessageEx BroadcastSystemMessageExW
        // unknown type: BroadcastSystemMessage BroadcastSystemMessageW
        public const int BSM_ALLCOMPONENTS = unchecked((int)0x00000000);
        public const int BSM_VXDS = unchecked((int)0x00000001);
        public const int BSM_NETDRIVER = unchecked((int)0x00000002);
        public const int BSM_INSTALLABLEDRIVERS = unchecked((int)0x00000004);
        public const int BSM_APPLICATIONS = unchecked((int)0x00000008);
        public const int BSM_ALLDESKTOPS = unchecked((int)0x00000010);
        public const int BSF_QUERY = unchecked((int)0x00000001);
        public const int BSF_IGNORECURRENTTASK = unchecked((int)0x00000002);
        public const int BSF_FLUSHDISK = unchecked((int)0x00000004);
        public const int BSF_NOHANG = unchecked((int)0x00000008);
        public const int BSF_POSTMESSAGE = unchecked((int)0x00000010);
        public const int BSF_FORCEIFHUNG = unchecked((int)0x00000020);
        public const int BSF_NOTIMEOUTIFNOTHUNG = unchecked((int)0x00000040);
        public const int BSF_ALLOWSFW = unchecked((int)0x00000080);
        public const int BSF_SENDNOTIFYMESSAGE = unchecked((int)0x00000100);
        public const int BSF_RETURNHDESK = unchecked((int)0x00000200);
        public const int BSF_LUID = unchecked((int)0x00000400);
        public const int BROADCAST_QUERY_DENY = unchecked((int)0x424D5144);
        public const int DEVICE_NOTIFY_WINDOW_HANDLE = unchecked((int)0x00000000);
        public const int DEVICE_NOTIFY_SERVICE_HANDLE = unchecked((int)0x00000001);
        public const int DEVICE_NOTIFY_ALL_INTERFACE_CLASSES = unchecked((int)0x00000004);
        // unknown type: RegisterDeviceNotification RegisterDeviceNotificationW
        // unknown type: PostMessage PostMessageW
        // unknown type: PostThreadMessage PostThreadMessageW
        // macro function: PostAppMessageA ( idThread , wMsg , wParam , lParam ) PostThreadMessageA ( ( DWORD ) idThread , wMsg , wParam , lParam )
        // macro function: PostAppMessageW ( idThread , wMsg , wParam , lParam ) PostThreadMessageW ( ( DWORD ) idThread , wMsg , wParam , lParam )
        // unknown type: PostAppMessage PostAppMessageW
        public static readonly IntPtr HWND_BROADCAST = new IntPtr((  0xffff ));
        public static readonly IntPtr HWND_MESSAGE = new IntPtr((  - 3 ));
        // unknown type: DefWindowProc DefWindowProcW
        // unknown type: CallWindowProc CallWindowProcW
        public const int ISMEX_NOSEND = unchecked((int)0x00000000);
        public const int ISMEX_SEND = unchecked((int)0x00000001);
        public const int ISMEX_NOTIFY = unchecked((int)0x00000002);
        public const int ISMEX_CALLBACK = unchecked((int)0x00000004);
        public const int ISMEX_REPLIED = unchecked((int)0x00000008);
        // unknown type: RegisterClass RegisterClassW
        // unknown type: UnregisterClass UnregisterClassW
        // unknown type: GetClassInfo GetClassInfoW
        // unknown type: RegisterClassEx RegisterClassExW
        // unknown type: GetClassInfoEx GetClassInfoExW
        public const int CW_USEDEFAULT = unchecked((int)0x80000000);
        public static readonly IntPtr HWND_DESKTOP = new IntPtr((  0 ));
        // unknown type: CreateWindowEx CreateWindowExW
        // macro function: CreateWindowA ( lpClassName , lpWindowName , dwStyle , x , y , nWidth , nHeight , hWndParent , hMenu , hInstance , lpParam ) CreateWindowExA ( 0L , lpClassName , lpWindowName , dwStyle , x , y , nWidth , nHeight , hWndParent , hMenu , hInstance , lpParam )
        // macro function: CreateWindowW ( lpClassName , lpWindowName , dwStyle , x , y , nWidth , nHeight , hWndParent , hMenu , hInstance , lpParam ) CreateWindowExW ( 0L , lpClassName , lpWindowName , dwStyle , x , y , nWidth , nHeight , hWndParent , hMenu , hInstance , lpParam )
        // unknown type: CreateWindow CreateWindowW
        public const int PW_CLIENTONLY = unchecked((int)0x00000001);
        public const int PW_RENDERFULLCONTENT = unchecked((int)0x00000002);
        public const int LWA_COLORKEY = unchecked((int)0x00000001);
        public const int LWA_ALPHA = unchecked((int)0x00000002);
        public const int ULW_COLORKEY = unchecked((int)0x00000001);
        public const int ULW_ALPHA = unchecked((int)0x00000002);
        public const int ULW_OPAQUE = unchecked((int)0x00000004);
        public const int ULW_EX_NORESIZE = unchecked((int)0x00000008);
        public const int FLASHW_STOP = 0;
        public const int FLASHW_CAPTION = unchecked((int)0x00000001);
        public const int FLASHW_TRAY = unchecked((int)0x00000002);
        public const int FLASHW_ALL = ( FLASHW_CAPTION | FLASHW_TRAY );
        public const int FLASHW_TIMER = unchecked((int)0x00000004);
        public const int FLASHW_TIMERNOFG = unchecked((int)0x0000000C);
        public const int WDA_NONE = unchecked((int)0x00000000);
        public const int WDA_MONITOR = unchecked((int)0x00000001);
        public const int SWP_NOSIZE = unchecked((int)0x0001);
        public const int SWP_NOMOVE = unchecked((int)0x0002);
        public const int SWP_NOZORDER = unchecked((int)0x0004);
        public const int SWP_NOREDRAW = unchecked((int)0x0008);
        public const int SWP_NOACTIVATE = unchecked((int)0x0010);
        public const int SWP_FRAMECHANGED = unchecked((int)0x0020);
        public const int SWP_SHOWWINDOW = unchecked((int)0x0040);
        public const int SWP_HIDEWINDOW = unchecked((int)0x0080);
        public const int SWP_NOCOPYBITS = unchecked((int)0x0100);
        public const int SWP_NOOWNERZORDER = unchecked((int)0x0200);
        public const int SWP_NOSENDCHANGING = unchecked((int)0x0400);
        // unknown type: SWP_DRAWFRAME SWP_FRAMECHANGED
        // unknown type: SWP_NOREPOSITION SWP_NOOWNERZORDER
        public const int SWP_DEFERERASE = unchecked((int)0x2000);
        public const int SWP_ASYNCWINDOWPOS = unchecked((int)0x4000);
        public static readonly IntPtr HWND_TOP = new IntPtr((  0 ));
        public static readonly IntPtr HWND_BOTTOM = new IntPtr((  1 ));
        public static readonly IntPtr HWND_TOPMOST = new IntPtr((  - 1 ));
        public static readonly IntPtr HWND_NOTOPMOST = new IntPtr((  - 2 ));
        // unknown type: CreateDialogParam CreateDialogParamW
        // unknown type: CreateDialogIndirectParam CreateDialogIndirectParamW
        // macro function: CreateDialogA ( hInstance , lpName , hWndParent , lpDialogFunc ) CreateDialogParamA ( hInstance , lpName , hWndParent , lpDialogFunc , 0L )
        // macro function: CreateDialogW ( hInstance , lpName , hWndParent , lpDialogFunc ) CreateDialogParamW ( hInstance , lpName , hWndParent , lpDialogFunc , 0L )
        // unknown type: CreateDialog CreateDialogW
        // macro function: CreateDialogIndirectA ( hInstance , lpTemplate , hWndParent , lpDialogFunc ) CreateDialogIndirectParamA ( hInstance , lpTemplate , hWndParent , lpDialogFunc , 0L )
        // macro function: CreateDialogIndirectW ( hInstance , lpTemplate , hWndParent , lpDialogFunc ) CreateDialogIndirectParamW ( hInstance , lpTemplate , hWndParent , lpDialogFunc , 0L )
        // unknown type: CreateDialogIndirect CreateDialogIndirectW
        // unknown type: DialogBoxParam DialogBoxParamW
        // unknown type: DialogBoxIndirectParam DialogBoxIndirectParamW
        // macro function: DialogBoxA ( hInstance , lpTemplate , hWndParent , lpDialogFunc ) DialogBoxParamA ( hInstance , lpTemplate , hWndParent , lpDialogFunc , 0L )
        // macro function: DialogBoxW ( hInstance , lpTemplate , hWndParent , lpDialogFunc ) DialogBoxParamW ( hInstance , lpTemplate , hWndParent , lpDialogFunc , 0L )
        // unknown type: DialogBox DialogBoxW
        // macro function: DialogBoxIndirectA ( hInstance , lpTemplate , hWndParent , lpDialogFunc ) DialogBoxIndirectParamA ( hInstance , lpTemplate , hWndParent , lpDialogFunc , 0L )
        // macro function: DialogBoxIndirectW ( hInstance , lpTemplate , hWndParent , lpDialogFunc ) DialogBoxIndirectParamW ( hInstance , lpTemplate , hWndParent , lpDialogFunc , 0L )
        // unknown type: DialogBoxIndirect DialogBoxIndirectW
        // unknown type: SetDlgItemText SetDlgItemTextW
        // unknown type: GetDlgItemText GetDlgItemTextW
        // unknown type: SendDlgItemMessage SendDlgItemMessageW
        // unknown type: DefDlgProc DefDlgProcW
        public const int DLGWINDOWEXTRA = 30;
        // unknown type: CallMsgFilter CallMsgFilterW
        // unknown type: RegisterClipboardFormat RegisterClipboardFormatW
        // unknown type: GetClipboardFormatName GetClipboardFormatNameW
        // unknown type: CharToOem CharToOemW
        // unknown type: OemToChar OemToCharW
        // unknown type: CharToOemBuff CharToOemBuffW
        // unknown type: OemToCharBuff OemToCharBuffW
        // unknown type: CharUpper CharUpperW
        // unknown type: CharUpperBuff CharUpperBuffW
        // unknown type: CharLower CharLowerW
        // unknown type: CharLowerBuff CharLowerBuffW
        // unknown type: CharNext CharNextW
        // unknown type: CharPrev CharPrevW
        // unknown type: AnsiToOem CharToOemA
        // unknown type: OemToAnsi OemToCharA
        // unknown type: AnsiToOemBuff CharToOemBuffA
        // unknown type: OemToAnsiBuff OemToCharBuffA
        // unknown type: AnsiUpper CharUpperA
        // unknown type: AnsiUpperBuff CharUpperBuffA
        // unknown type: AnsiLower CharLowerA
        // unknown type: AnsiLowerBuff CharLowerBuffA
        // unknown type: AnsiNext CharNextA
        // unknown type: AnsiPrev CharPrevA
        // unknown type: IsCharAlpha IsCharAlphaW
        // unknown type: IsCharAlphaNumeric IsCharAlphaNumericW
        // unknown type: IsCharUpper IsCharUpperW
        // unknown type: IsCharLower IsCharLowerW
        // unknown type: GetKeyNameText GetKeyNameTextW
        // unknown type: VkKeyScan VkKeyScanW
        // unknown type: VkKeyScanEx VkKeyScanExW
        public const int KEYEVENTF_EXTENDEDKEY = unchecked((int)0x0001);
        public const int KEYEVENTF_KEYUP = unchecked((int)0x0002);
        public const int KEYEVENTF_UNICODE = unchecked((int)0x0004);
        public const int KEYEVENTF_SCANCODE = unchecked((int)0x0008);
        public const int MOUSEEVENTF_MOVE = unchecked((int)0x0001);
        public const int MOUSEEVENTF_LEFTDOWN = unchecked((int)0x0002);
        public const int MOUSEEVENTF_LEFTUP = unchecked((int)0x0004);
        public const int MOUSEEVENTF_RIGHTDOWN = unchecked((int)0x0008);
        public const int MOUSEEVENTF_RIGHTUP = unchecked((int)0x0010);
        public const int MOUSEEVENTF_MIDDLEDOWN = unchecked((int)0x0020);
        public const int MOUSEEVENTF_MIDDLEUP = unchecked((int)0x0040);
        public const int MOUSEEVENTF_XDOWN = unchecked((int)0x0080);
        public const int MOUSEEVENTF_XUP = unchecked((int)0x0100);
        public const int MOUSEEVENTF_WHEEL = unchecked((int)0x0800);
        public const int MOUSEEVENTF_HWHEEL = unchecked((int)0x01000);
        public const int MOUSEEVENTF_MOVE_NOCOALESCE = unchecked((int)0x2000);
        public const int MOUSEEVENTF_VIRTUALDESK = unchecked((int)0x4000);
        public const int MOUSEEVENTF_ABSOLUTE = unchecked((int)0x8000);
        public const int INPUT_MOUSE = 0;
        public const int INPUT_KEYBOARD = 1;
        public const int INPUT_HARDWARE = 2;
        // macro function: TOUCH_COORD_TO_PIXEL ( l ) ( ( l ) / 100 )
        public const int TOUCHEVENTF_MOVE = unchecked((int)0x0001);
        public const int TOUCHEVENTF_DOWN = unchecked((int)0x0002);
        public const int TOUCHEVENTF_UP = unchecked((int)0x0004);
        public const int TOUCHEVENTF_INRANGE = unchecked((int)0x0008);
        public const int TOUCHEVENTF_PRIMARY = unchecked((int)0x0010);
        public const int TOUCHEVENTF_NOCOALESCE = unchecked((int)0x0020);
        public const int TOUCHEVENTF_PEN = unchecked((int)0x0040);
        public const int TOUCHEVENTF_PALM = unchecked((int)0x0080);
        public const int TOUCHINPUTMASKF_TIMEFROMSYSTEM = unchecked((int)0x0001);
        public const int TOUCHINPUTMASKF_EXTRAINFO = unchecked((int)0x0002);
        public const int TOUCHINPUTMASKF_CONTACTAREA = unchecked((int)0x0004);
        public const int TWF_FINETOUCH = unchecked((int)0x00000001);
        public const int TWF_WANTPALM = unchecked((int)0x00000002);
        public const int POINTER_FLAG_NONE = unchecked((int)0x00000000);
        public const int POINTER_FLAG_NEW = unchecked((int)0x00000001);
        public const int POINTER_FLAG_INRANGE = unchecked((int)0x00000002);
        public const int POINTER_FLAG_INCONTACT = unchecked((int)0x00000004);
        public const int POINTER_FLAG_FIRSTBUTTON = unchecked((int)0x00000010);
        public const int POINTER_FLAG_SECONDBUTTON = unchecked((int)0x00000020);
        public const int POINTER_FLAG_THIRDBUTTON = unchecked((int)0x00000040);
        public const int POINTER_FLAG_FOURTHBUTTON = unchecked((int)0x00000080);
        public const int POINTER_FLAG_FIFTHBUTTON = unchecked((int)0x00000100);
        public const int POINTER_FLAG_PRIMARY = unchecked((int)0x00002000);
        public const int POINTER_FLAG_CONFIDENCE = unchecked((int)0x00004000);
        public const int POINTER_FLAG_CANCELED = unchecked((int)0x00008000);
        public const int POINTER_FLAG_DOWN = unchecked((int)0x00010000);
        public const int POINTER_FLAG_UPDATE = unchecked((int)0x00020000);
        public const int POINTER_FLAG_UP = unchecked((int)0x00040000);
        public const int POINTER_FLAG_WHEEL = unchecked((int)0x00080000);
        public const int POINTER_FLAG_HWHEEL = unchecked((int)0x00100000);
        public const int POINTER_FLAG_CAPTURECHANGED = unchecked((int)0x00200000);
        public const int POINTER_FLAG_HASTRANSFORM = unchecked((int)0x00400000);
        public const int POINTER_MOD_SHIFT = unchecked((int)0x0004);
        public const int POINTER_MOD_CTRL = unchecked((int)0x0008);
        public const int TOUCH_FLAG_NONE = unchecked((int)0x00000000);
        public const int TOUCH_MASK_NONE = unchecked((int)0x00000000);
        public const int TOUCH_MASK_CONTACTAREA = unchecked((int)0x00000001);
        public const int TOUCH_MASK_ORIENTATION = unchecked((int)0x00000002);
        public const int TOUCH_MASK_PRESSURE = unchecked((int)0x00000004);
        public const int PEN_FLAG_NONE = unchecked((int)0x00000000);
        public const int PEN_FLAG_BARREL = unchecked((int)0x00000001);
        public const int PEN_FLAG_INVERTED = unchecked((int)0x00000002);
        public const int PEN_FLAG_ERASER = unchecked((int)0x00000004);
        public const int PEN_MASK_NONE = unchecked((int)0x00000000);
        public const int PEN_MASK_PRESSURE = unchecked((int)0x00000001);
        public const int PEN_MASK_ROTATION = unchecked((int)0x00000002);
        public const int PEN_MASK_TILT_X = unchecked((int)0x00000004);
        public const int PEN_MASK_TILT_Y = unchecked((int)0x00000008);
        public const int POINTER_MESSAGE_FLAG_NEW = unchecked((int)0x00000001);
        public const int POINTER_MESSAGE_FLAG_INRANGE = unchecked((int)0x00000002);
        public const int POINTER_MESSAGE_FLAG_INCONTACT = unchecked((int)0x00000004);
        public const int POINTER_MESSAGE_FLAG_FIRSTBUTTON = unchecked((int)0x00000010);
        public const int POINTER_MESSAGE_FLAG_SECONDBUTTON = unchecked((int)0x00000020);
        public const int POINTER_MESSAGE_FLAG_THIRDBUTTON = unchecked((int)0x00000040);
        public const int POINTER_MESSAGE_FLAG_FOURTHBUTTON = unchecked((int)0x00000080);
        public const int POINTER_MESSAGE_FLAG_FIFTHBUTTON = unchecked((int)0x00000100);
        public const int POINTER_MESSAGE_FLAG_PRIMARY = unchecked((int)0x00002000);
        public const int POINTER_MESSAGE_FLAG_CONFIDENCE = unchecked((int)0x00004000);
        public const int POINTER_MESSAGE_FLAG_CANCELED = unchecked((int)0x00008000);
        // macro function: GET_POINTERID_WPARAM ( wParam ) ( LOWORD ( wParam ) )
        // macro function: IS_POINTER_FLAG_SET_WPARAM ( wParam , flag ) ( ( ( DWORD ) HIWORD ( wParam ) & ( flag ) ) == ( flag ) )
        // macro function: IS_POINTER_NEW_WPARAM ( wParam ) IS_POINTER_FLAG_SET_WPARAM ( wParam , POINTER_MESSAGE_FLAG_NEW )
        // macro function: IS_POINTER_INRANGE_WPARAM ( wParam ) IS_POINTER_FLAG_SET_WPARAM ( wParam , POINTER_MESSAGE_FLAG_INRANGE )
        // macro function: IS_POINTER_INCONTACT_WPARAM ( wParam ) IS_POINTER_FLAG_SET_WPARAM ( wParam , POINTER_MESSAGE_FLAG_INCONTACT )
        // macro function: IS_POINTER_FIRSTBUTTON_WPARAM ( wParam ) IS_POINTER_FLAG_SET_WPARAM ( wParam , POINTER_MESSAGE_FLAG_FIRSTBUTTON )
        // macro function: IS_POINTER_SECONDBUTTON_WPARAM ( wParam ) IS_POINTER_FLAG_SET_WPARAM ( wParam , POINTER_MESSAGE_FLAG_SECONDBUTTON )
        // macro function: IS_POINTER_THIRDBUTTON_WPARAM ( wParam ) IS_POINTER_FLAG_SET_WPARAM ( wParam , POINTER_MESSAGE_FLAG_THIRDBUTTON )
        // macro function: IS_POINTER_FOURTHBUTTON_WPARAM ( wParam ) IS_POINTER_FLAG_SET_WPARAM ( wParam , POINTER_MESSAGE_FLAG_FOURTHBUTTON )
        // macro function: IS_POINTER_FIFTHBUTTON_WPARAM ( wParam ) IS_POINTER_FLAG_SET_WPARAM ( wParam , POINTER_MESSAGE_FLAG_FIFTHBUTTON )
        // macro function: IS_POINTER_PRIMARY_WPARAM ( wParam ) IS_POINTER_FLAG_SET_WPARAM ( wParam , POINTER_MESSAGE_FLAG_PRIMARY )
        // macro function: HAS_POINTER_CONFIDENCE_WPARAM ( wParam ) IS_POINTER_FLAG_SET_WPARAM ( wParam , POINTER_MESSAGE_FLAG_CONFIDENCE )
        // macro function: IS_POINTER_CANCELED_WPARAM ( wParam ) IS_POINTER_FLAG_SET_WPARAM ( wParam , POINTER_MESSAGE_FLAG_CANCELED )
        // unknown type: PA_ACTIVATE MA_ACTIVATE
        // unknown type: PA_NOACTIVATE MA_NOACTIVATE
        public const int MAX_TOUCH_COUNT = 256;
        public const int TOUCH_FEEDBACK_DEFAULT = unchecked((int)0x1);
        public const int TOUCH_FEEDBACK_INDIRECT = unchecked((int)0x2);
        public const int TOUCH_FEEDBACK_NONE = unchecked((int)0x3);
        public const int TOUCH_HIT_TESTING_DEFAULT = unchecked((int)0x0);
        public const int TOUCH_HIT_TESTING_CLIENT = unchecked((int)0x1);
        public const int TOUCH_HIT_TESTING_NONE = unchecked((int)0x2);
        public const int TOUCH_HIT_TESTING_PROXIMITY_CLOSEST = unchecked((int)0x0);
        public const int TOUCH_HIT_TESTING_PROXIMITY_FARTHEST = unchecked((int)0xFFF);
        public const int GWFS_INCLUDE_ANCESTORS = unchecked((int)0x00000001);
        // unknown type: MapVirtualKey MapVirtualKeyW
        // unknown type: MapVirtualKeyEx MapVirtualKeyExW
        public const int MAPVK_VK_TO_VSC = ( 0 );
        public const int MAPVK_VSC_TO_VK = ( 1 );
        public const int MAPVK_VK_TO_CHAR = ( 2 );
        public const int MAPVK_VSC_TO_VK_EX = ( 3 );
        public const int MAPVK_VK_TO_VSC_EX = ( 4 );
        public const int MWMO_WAITALL = unchecked((int)0x0001);
        public const int MWMO_ALERTABLE = unchecked((int)0x0002);
        public const int MWMO_INPUTAVAILABLE = unchecked((int)0x0004);
        public const int QS_KEY = unchecked((int)0x0001);
        public const int QS_MOUSEMOVE = unchecked((int)0x0002);
        public const int QS_MOUSEBUTTON = unchecked((int)0x0004);
        public const int QS_POSTMESSAGE = unchecked((int)0x0008);
        public const int QS_TIMER = unchecked((int)0x0010);
        public const int QS_PAINT = unchecked((int)0x0020);
        public const int QS_SENDMESSAGE = unchecked((int)0x0040);
        public const int QS_HOTKEY = unchecked((int)0x0080);
        public const int QS_ALLPOSTMESSAGE = unchecked((int)0x0100);
        public const int QS_RAWINPUT = unchecked((int)0x0400);
        public const int QS_TOUCH = unchecked((int)0x0800);
        public const int QS_POINTER = unchecked((int)0x1000);
        public const int QS_MOUSE = ( QS_MOUSEMOVE | QS_MOUSEBUTTON );
        public const int QS_INPUT = ( QS_MOUSE | QS_KEY | QS_RAWINPUT | QS_TOUCH | QS_POINTER );
        public const int QS_ALLEVENTS = ( QS_INPUT | QS_POSTMESSAGE | QS_TIMER | QS_PAINT | QS_HOTKEY );
        public const int QS_ALLINPUT = ( QS_INPUT | QS_POSTMESSAGE | QS_TIMER | QS_PAINT | QS_HOTKEY | QS_SENDMESSAGE );
        public const int USER_TIMER_MAXIMUM = unchecked((int)0x7FFFFFFF);
        public const int USER_TIMER_MINIMUM = unchecked((int)0x0000000A);
        public const int TIMERV_DEFAULT_COALESCING = ( 0 );
        public const int TIMERV_NO_COALESCING = unchecked((int)0xFFFFFFFF);
        public const int TIMERV_COALESCING_MIN = ( 1 );
        public const int TIMERV_COALESCING_MAX = unchecked((int)0x7FFFFFF5);
        // unknown type: LoadAccelerators LoadAcceleratorsW
        // unknown type: CreateAcceleratorTable CreateAcceleratorTableW
        // unknown type: CopyAcceleratorTable CopyAcceleratorTableW
        // unknown type: TranslateAccelerator TranslateAcceleratorW
        public const int SM_CXSCREEN = 0;
        public const int SM_CYSCREEN = 1;
        public const int SM_CXVSCROLL = 2;
        public const int SM_CYHSCROLL = 3;
        public const int SM_CYCAPTION = 4;
        public const int SM_CXBORDER = 5;
        public const int SM_CYBORDER = 6;
        public const int SM_CXDLGFRAME = 7;
        public const int SM_CYDLGFRAME = 8;
        public const int SM_CYVTHUMB = 9;
        public const int SM_CXHTHUMB = 10;
        public const int SM_CXICON = 11;
        public const int SM_CYICON = 12;
        public const int SM_CXCURSOR = 13;
        public const int SM_CYCURSOR = 14;
        public const int SM_CYMENU = 15;
        public const int SM_CXFULLSCREEN = 16;
        public const int SM_CYFULLSCREEN = 17;
        public const int SM_CYKANJIWINDOW = 18;
        public const int SM_MOUSEPRESENT = 19;
        public const int SM_CYVSCROLL = 20;
        public const int SM_CXHSCROLL = 21;
        public const int SM_DEBUG = 22;
        public const int SM_SWAPBUTTON = 23;
        public const int SM_RESERVED1 = 24;
        public const int SM_RESERVED2 = 25;
        public const int SM_RESERVED3 = 26;
        public const int SM_RESERVED4 = 27;
        public const int SM_CXMIN = 28;
        public const int SM_CYMIN = 29;
        public const int SM_CXSIZE = 30;
        public const int SM_CYSIZE = 31;
        public const int SM_CXFRAME = 32;
        public const int SM_CYFRAME = 33;
        public const int SM_CXMINTRACK = 34;
        public const int SM_CYMINTRACK = 35;
        public const int SM_CXDOUBLECLK = 36;
        public const int SM_CYDOUBLECLK = 37;
        public const int SM_CXICONSPACING = 38;
        public const int SM_CYICONSPACING = 39;
        public const int SM_MENUDROPALIGNMENT = 40;
        public const int SM_PENWINDOWS = 41;
        public const int SM_DBCSENABLED = 42;
        public const int SM_CMOUSEBUTTONS = 43;
        // unknown type: SM_CXFIXEDFRAME SM_CXDLGFRAME
        // unknown type: SM_CYFIXEDFRAME SM_CYDLGFRAME
        // unknown type: SM_CXSIZEFRAME SM_CXFRAME
        // unknown type: SM_CYSIZEFRAME SM_CYFRAME
        public const int SM_SECURE = 44;
        public const int SM_CXEDGE = 45;
        public const int SM_CYEDGE = 46;
        public const int SM_CXMINSPACING = 47;
        public const int SM_CYMINSPACING = 48;
        public const int SM_CXSMICON = 49;
        public const int SM_CYSMICON = 50;
        public const int SM_CYSMCAPTION = 51;
        public const int SM_CXSMSIZE = 52;
        public const int SM_CYSMSIZE = 53;
        public const int SM_CXMENUSIZE = 54;
        public const int SM_CYMENUSIZE = 55;
        public const int SM_ARRANGE = 56;
        public const int SM_CXMINIMIZED = 57;
        public const int SM_CYMINIMIZED = 58;
        public const int SM_CXMAXTRACK = 59;
        public const int SM_CYMAXTRACK = 60;
        public const int SM_CXMAXIMIZED = 61;
        public const int SM_CYMAXIMIZED = 62;
        public const int SM_NETWORK = 63;
        public const int SM_CLEANBOOT = 67;
        public const int SM_CXDRAG = 68;
        public const int SM_CYDRAG = 69;
        public const int SM_SHOWSOUNDS = 70;
        public const int SM_CXMENUCHECK = 71;
        public const int SM_CYMENUCHECK = 72;
        public const int SM_SLOWMACHINE = 73;
        public const int SM_MIDEASTENABLED = 74;
        public const int SM_MOUSEWHEELPRESENT = 75;
        public const int SM_XVIRTUALSCREEN = 76;
        public const int SM_YVIRTUALSCREEN = 77;
        public const int SM_CXVIRTUALSCREEN = 78;
        public const int SM_CYVIRTUALSCREEN = 79;
        public const int SM_CMONITORS = 80;
        public const int SM_SAMEDISPLAYFORMAT = 81;
        public const int SM_IMMENABLED = 82;
        public const int SM_CXFOCUSBORDER = 83;
        public const int SM_CYFOCUSBORDER = 84;
        public const int SM_TABLETPC = 86;
        public const int SM_MEDIACENTER = 87;
        public const int SM_STARTER = 88;
        public const int SM_SERVERR2 = 89;
        public const int SM_MOUSEHORIZONTALWHEELPRESENT = 91;
        public const int SM_CXPADDEDBORDER = 92;
        public const int SM_DIGITIZER = 94;
        public const int SM_MAXIMUMTOUCHES = 95;
        public const int SM_CMETRICS = 97;
        public const int SM_REMOTESESSION = unchecked((int)0x1000);
        public const int SM_SHUTTINGDOWN = unchecked((int)0x2000);
        public const int SM_REMOTECONTROL = unchecked((int)0x2001);
        public const int SM_CARETBLINKINGENABLED = unchecked((int)0x2002);
        public const int SM_CONVERTIBLESLATEMODE = unchecked((int)0x2003);
        public const int SM_SYSTEMDOCKED = unchecked((int)0x2004);
        // unknown type: LoadMenu LoadMenuW
        // unknown type: LoadMenuIndirect LoadMenuIndirectW
        // unknown type: ChangeMenu ChangeMenuW
        // unknown type: GetMenuString GetMenuStringW
        public const int PMB_ACTIVE = unchecked((int)0x00000001);
        // unknown type: InsertMenu InsertMenuW
        // unknown type: AppendMenu AppendMenuW
        // unknown type: ModifyMenu ModifyMenuW
        public const int MNC_IGNORE = 0;
        public const int MNC_CLOSE = 1;
        public const int MNC_EXECUTE = 2;
        public const int MNC_SELECT = 3;
        public const int MNS_NOCHECK = unchecked((int)0x80000000);
        public const int MNS_MODELESS = unchecked((int)0x40000000);
        public const int MNS_DRAGDROP = unchecked((int)0x20000000);
        public const int MNS_AUTODISMISS = unchecked((int)0x10000000);
        public const int MNS_NOTIFYBYPOS = unchecked((int)0x08000000);
        public const int MNS_CHECKORBMP = unchecked((int)0x04000000);
        public const int MIM_MAXHEIGHT = unchecked((int)0x00000001);
        public const int MIM_BACKGROUND = unchecked((int)0x00000002);
        public const int MIM_HELPID = unchecked((int)0x00000004);
        public const int MIM_MENUDATA = unchecked((int)0x00000008);
        public const int MIM_STYLE = unchecked((int)0x00000010);
        public const int MIM_APPLYTOSUBMENUS = unchecked((int)0x80000000);
        public const int MND_CONTINUE = 0;
        public const int MND_ENDMENU = 1;
        public const int MNGOF_TOPGAP = unchecked((int)0x00000001);
        public const int MNGOF_BOTTOMGAP = unchecked((int)0x00000002);
        public const int MNGO_NOINTERFACE = unchecked((int)0x00000000);
        public const int MNGO_NOERROR = unchecked((int)0x00000001);
        public const int MIIM_STATE = unchecked((int)0x00000001);
        public const int MIIM_ID = unchecked((int)0x00000002);
        public const int MIIM_SUBMENU = unchecked((int)0x00000004);
        public const int MIIM_CHECKMARKS = unchecked((int)0x00000008);
        public const int MIIM_TYPE = unchecked((int)0x00000010);
        public const int MIIM_DATA = unchecked((int)0x00000020);
        public const int MIIM_STRING = unchecked((int)0x00000040);
        public const int MIIM_BITMAP = unchecked((int)0x00000080);
        public const int MIIM_FTYPE = unchecked((int)0x00000100);
        public static readonly IntPtr HBMMENU_CALLBACK = new IntPtr((  - 1 ));
        public static readonly IntPtr HBMMENU_SYSTEM = new IntPtr((  1 ));
        public static readonly IntPtr HBMMENU_MBAR_RESTORE = new IntPtr((  2 ));
        public static readonly IntPtr HBMMENU_MBAR_MINIMIZE = new IntPtr((  3 ));
        public static readonly IntPtr HBMMENU_MBAR_CLOSE = new IntPtr((  5 ));
        public static readonly IntPtr HBMMENU_MBAR_CLOSE_D = new IntPtr((  6 ));
        public static readonly IntPtr HBMMENU_MBAR_MINIMIZE_D = new IntPtr((  7 ));
        public static readonly IntPtr HBMMENU_POPUP_CLOSE = new IntPtr((  8 ));
        public static readonly IntPtr HBMMENU_POPUP_RESTORE = new IntPtr((  9 ));
        public static readonly IntPtr HBMMENU_POPUP_MAXIMIZE = new IntPtr((  10 ));
        public static readonly IntPtr HBMMENU_POPUP_MINIMIZE = new IntPtr((  11 ));
        // unknown type: InsertMenuItem InsertMenuItemW
        // unknown type: GetMenuItemInfo GetMenuItemInfoW
        // unknown type: SetMenuItemInfo SetMenuItemInfoW
        public const int GMDI_USEDISABLED = unchecked((int)0x0001);
        public const int GMDI_GOINTOPOPUPS = unchecked((int)0x0002);
        public const int TPM_LEFTBUTTON = unchecked((int)0x0000);
        public const int TPM_RIGHTBUTTON = unchecked((int)0x0002);
        public const int TPM_LEFTALIGN = unchecked((int)0x0000);
        public const int TPM_CENTERALIGN = unchecked((int)0x0004);
        public const int TPM_RIGHTALIGN = unchecked((int)0x0008);
        public const int TPM_TOPALIGN = unchecked((int)0x0000);
        public const int TPM_VCENTERALIGN = unchecked((int)0x0010);
        public const int TPM_BOTTOMALIGN = unchecked((int)0x0020);
        public const int TPM_HORIZONTAL = unchecked((int)0x0000);
        public const int TPM_VERTICAL = unchecked((int)0x0040);
        public const int TPM_NONOTIFY = unchecked((int)0x0080);
        public const int TPM_RETURNCMD = unchecked((int)0x0100);
        public const int TPM_RECURSE = unchecked((int)0x0001);
        public const int TPM_HORPOSANIMATION = unchecked((int)0x0400);
        public const int TPM_HORNEGANIMATION = unchecked((int)0x0800);
        public const int TPM_VERPOSANIMATION = unchecked((int)0x1000);
        public const int TPM_VERNEGANIMATION = unchecked((int)0x2000);
        public const int TPM_NOANIMATION = unchecked((int)0x4000);
        public const int TPM_LAYOUTRTL = unchecked((int)0x8000);
        public const int TPM_WORKAREA = unchecked((int)0x10000);
        public const int DOF_EXECUTABLE = unchecked((int)0x8001);
        public const int DOF_DOCUMENT = unchecked((int)0x8002);
        public const int DOF_DIRECTORY = unchecked((int)0x8003);
        public const int DOF_MULTIPLE = unchecked((int)0x8004);
        public const int DOF_PROGMAN = unchecked((int)0x0001);
        public const int DOF_SHELLDATA = unchecked((int)0x0002);
        public const int DO_DROPFILE = unchecked((int)0x454C4946);
        public const int DO_PRINTFILE = unchecked((int)0x544E5250);
        public const int DT_TOP = unchecked((int)0x00000000);
        public const int DT_LEFT = unchecked((int)0x00000000);
        public const int DT_CENTER = unchecked((int)0x00000001);
        public const int DT_RIGHT = unchecked((int)0x00000002);
        public const int DT_VCENTER = unchecked((int)0x00000004);
        public const int DT_BOTTOM = unchecked((int)0x00000008);
        public const int DT_WORDBREAK = unchecked((int)0x00000010);
        public const int DT_SINGLELINE = unchecked((int)0x00000020);
        public const int DT_EXPANDTABS = unchecked((int)0x00000040);
        public const int DT_TABSTOP = unchecked((int)0x00000080);
        public const int DT_NOCLIP = unchecked((int)0x00000100);
        public const int DT_EXTERNALLEADING = unchecked((int)0x00000200);
        public const int DT_CALCRECT = unchecked((int)0x00000400);
        public const int DT_NOPREFIX = unchecked((int)0x00000800);
        public const int DT_INTERNAL = unchecked((int)0x00001000);
        public const int DT_EDITCONTROL = unchecked((int)0x00002000);
        public const int DT_PATH_ELLIPSIS = unchecked((int)0x00004000);
        public const int DT_END_ELLIPSIS = unchecked((int)0x00008000);
        public const int DT_MODIFYSTRING = unchecked((int)0x00010000);
        public const int DT_RTLREADING = unchecked((int)0x00020000);
        public const int DT_WORD_ELLIPSIS = unchecked((int)0x00040000);
        public const int DT_NOFULLWIDTHCHARBREAK = unchecked((int)0x00080000);
        public const int DT_HIDEPREFIX = unchecked((int)0x00100000);
        public const int DT_PREFIXONLY = unchecked((int)0x00200000);
        // macro function: _In_bypassable_reads_or_z_ ( size ) _When_ ( ( ( size ) == - 1 ) || ( _String_length_ ( _Curr_ ) < ( size ) ) , _In_z_ ) _When_ ( ( ( size ) != - 1 ) && ( _String_length_ ( _Curr_ ) >= ( size ) ) , _In_reads_ ( size ) )
        // macro function: _Inout_grows_updates_bypassable_or_z_ ( size , grows ) _When_ ( ( ( size ) == - 1 ) || ( _String_length_ ( _Curr_ ) < ( size ) ) , _Pre_z_ _Pre_valid_ _Out_writes_z_ ( _String_length_ ( _Curr_ ) + ( grows ) ) ) _When_ ( ( ( size ) != - 1 ) && ( _String_length_ ( _Curr_ ) >= ( size ) ) , _Pre_count_ ( size ) _Pre_valid_ _Out_writes_z_ ( ( size ) + ( grows ) ) )
        // unknown type: DrawText DrawTextW
        // unknown type: DrawTextEx DrawTextExW
        // unknown type: GrayString GrayStringW
        public const int DST_COMPLEX = unchecked((int)0x0000);
        public const int DST_TEXT = unchecked((int)0x0001);
        public const int DST_PREFIXTEXT = unchecked((int)0x0002);
        public const int DST_ICON = unchecked((int)0x0003);
        public const int DST_BITMAP = unchecked((int)0x0004);
        public const int DSS_NORMAL = unchecked((int)0x0000);
        public const int DSS_UNION = unchecked((int)0x0010);
        public const int DSS_DISABLED = unchecked((int)0x0020);
        public const int DSS_MONO = unchecked((int)0x0080);
        public const int DSS_HIDEPREFIX = unchecked((int)0x0200);
        public const int DSS_PREFIXONLY = unchecked((int)0x0400);
        public const int DSS_RIGHT = unchecked((int)0x8000);
        // unknown type: DrawState DrawStateW
        // unknown type: TabbedTextOut TabbedTextOutW
        // unknown type: GetTabbedTextExtent GetTabbedTextExtentW
        public const int ASFW_ANY = (  - 1 );
        public const int LSFW_LOCK = 1;
        public const int LSFW_UNLOCK = 2;
        public const int DCX_WINDOW = unchecked((int)0x00000001);
        public const int DCX_CACHE = unchecked((int)0x00000002);
        public const int DCX_NORESETATTRS = unchecked((int)0x00000004);
        public const int DCX_CLIPCHILDREN = unchecked((int)0x00000008);
        public const int DCX_CLIPSIBLINGS = unchecked((int)0x00000010);
        public const int DCX_PARENTCLIP = unchecked((int)0x00000020);
        public const int DCX_EXCLUDERGN = unchecked((int)0x00000040);
        public const int DCX_INTERSECTRGN = unchecked((int)0x00000080);
        public const int DCX_EXCLUDEUPDATE = unchecked((int)0x00000100);
        public const int DCX_INTERSECTUPDATE = unchecked((int)0x00000200);
        public const int DCX_LOCKWINDOWUPDATE = unchecked((int)0x00000400);
        public const int DCX_VALIDATE = unchecked((int)0x00200000);
        public const int RDW_INVALIDATE = unchecked((int)0x0001);
        public const int RDW_INTERNALPAINT = unchecked((int)0x0002);
        public const int RDW_ERASE = unchecked((int)0x0004);
        public const int RDW_VALIDATE = unchecked((int)0x0008);
        public const int RDW_NOINTERNALPAINT = unchecked((int)0x0010);
        public const int RDW_NOERASE = unchecked((int)0x0020);
        public const int RDW_NOCHILDREN = unchecked((int)0x0040);
        public const int RDW_ALLCHILDREN = unchecked((int)0x0080);
        public const int RDW_UPDATENOW = unchecked((int)0x0100);
        public const int RDW_ERASENOW = unchecked((int)0x0200);
        public const int RDW_FRAME = unchecked((int)0x0400);
        public const int RDW_NOFRAME = unchecked((int)0x0800);
        public const int SW_SCROLLCHILDREN = unchecked((int)0x0001);
        public const int SW_INVALIDATE = unchecked((int)0x0002);
        public const int SW_ERASE = unchecked((int)0x0004);
        public const int SW_SMOOTHSCROLL = unchecked((int)0x0010);
        public const int ESB_ENABLE_BOTH = unchecked((int)0x0000);
        public const int ESB_DISABLE_BOTH = unchecked((int)0x0003);
        public const int ESB_DISABLE_LEFT = unchecked((int)0x0001);
        public const int ESB_DISABLE_RIGHT = unchecked((int)0x0002);
        public const int ESB_DISABLE_UP = unchecked((int)0x0001);
        public const int ESB_DISABLE_DOWN = unchecked((int)0x0002);
        // unknown type: ESB_DISABLE_LTUP ESB_DISABLE_LEFT
        // unknown type: ESB_DISABLE_RTDN ESB_DISABLE_RIGHT
        // unknown type: SetProp SetPropW
        // unknown type: GetProp GetPropW
        // unknown type: RemoveProp RemovePropW
        // unknown type: EnumPropsEx EnumPropsExW
        // unknown type: EnumProps EnumPropsW
        // unknown type: SetWindowText SetWindowTextW
        // unknown type: GetWindowText GetWindowTextW
        // unknown type: GetWindowTextLength GetWindowTextLengthW
        public const int HELPINFO_WINDOW = unchecked((int)0x0001);
        public const int HELPINFO_MENUITEM = unchecked((int)0x0002);
        public const int MB_OK = unchecked((int)0x00000000);
        public const int MB_OKCANCEL = unchecked((int)0x00000001);
        public const int MB_ABORTRETRYIGNORE = unchecked((int)0x00000002);
        public const int MB_YESNOCANCEL = unchecked((int)0x00000003);
        public const int MB_YESNO = unchecked((int)0x00000004);
        public const int MB_RETRYCANCEL = unchecked((int)0x00000005);
        public const int MB_CANCELTRYCONTINUE = unchecked((int)0x00000006);
        public const int MB_ICONHAND = unchecked((int)0x00000010);
        public const int MB_ICONQUESTION = unchecked((int)0x00000020);
        public const int MB_ICONEXCLAMATION = unchecked((int)0x00000030);
        public const int MB_ICONASTERISK = unchecked((int)0x00000040);
        public const int MB_USERICON = unchecked((int)0x00000080);
        // unknown type: MB_ICONWARNING MB_ICONEXCLAMATION
        // unknown type: MB_ICONERROR MB_ICONHAND
        // unknown type: MB_ICONINFORMATION MB_ICONASTERISK
        // unknown type: MB_ICONSTOP MB_ICONHAND
        public const int MB_DEFBUTTON1 = unchecked((int)0x00000000);
        public const int MB_DEFBUTTON2 = unchecked((int)0x00000100);
        public const int MB_DEFBUTTON3 = unchecked((int)0x00000200);
        public const int MB_DEFBUTTON4 = unchecked((int)0x00000300);
        public const int MB_APPLMODAL = unchecked((int)0x00000000);
        public const int MB_SYSTEMMODAL = unchecked((int)0x00001000);
        public const int MB_TASKMODAL = unchecked((int)0x00002000);
        public const int MB_HELP = unchecked((int)0x00004000);
        public const int MB_NOFOCUS = unchecked((int)0x00008000);
        public const int MB_SETFOREGROUND = unchecked((int)0x00010000);
        public const int MB_DEFAULT_DESKTOP_ONLY = unchecked((int)0x00020000);
        public const int MB_TOPMOST = unchecked((int)0x00040000);
        public const int MB_RIGHT = unchecked((int)0x00080000);
        public const int MB_RTLREADING = unchecked((int)0x00100000);
        public const int MB_SERVICE_NOTIFICATION = unchecked((int)0x00200000);
        public const int MB_SERVICE_NOTIFICATION_NT3X = unchecked((int)0x00040000);
        public const int MB_TYPEMASK = unchecked((int)0x0000000F);
        public const int MB_ICONMASK = unchecked((int)0x000000F0);
        public const int MB_DEFMASK = unchecked((int)0x00000F00);
        public const int MB_MODEMASK = unchecked((int)0x00003000);
        public const int MB_MISCMASK = unchecked((int)0x0000C000);
        // unknown type: MessageBox MessageBoxW
        // unknown type: MessageBoxEx MessageBoxExW
        // unknown type: MessageBoxIndirect MessageBoxIndirectW
        public const int CWP_ALL = unchecked((int)0x0000);
        public const int CWP_SKIPINVISIBLE = unchecked((int)0x0001);
        public const int CWP_SKIPDISABLED = unchecked((int)0x0002);
        public const int CWP_SKIPTRANSPARENT = unchecked((int)0x0004);
        public const int CTLCOLOR_MSGBOX = 0;
        public const int CTLCOLOR_EDIT = 1;
        public const int CTLCOLOR_LISTBOX = 2;
        public const int CTLCOLOR_BTN = 3;
        public const int CTLCOLOR_DLG = 4;
        public const int CTLCOLOR_SCROLLBAR = 5;
        public const int CTLCOLOR_STATIC = 6;
        public const int CTLCOLOR_MAX = 7;
        public const int COLOR_SCROLLBAR = 0;
        public const int COLOR_BACKGROUND = 1;
        public const int COLOR_ACTIVECAPTION = 2;
        public const int COLOR_INACTIVECAPTION = 3;
        public const int COLOR_MENU = 4;
        public const int COLOR_WINDOW = 5;
        public const int COLOR_WINDOWFRAME = 6;
        public const int COLOR_MENUTEXT = 7;
        public const int COLOR_WINDOWTEXT = 8;
        public const int COLOR_CAPTIONTEXT = 9;
        public const int COLOR_ACTIVEBORDER = 10;
        public const int COLOR_INACTIVEBORDER = 11;
        public const int COLOR_APPWORKSPACE = 12;
        public const int COLOR_HIGHLIGHT = 13;
        public const int COLOR_HIGHLIGHTTEXT = 14;
        public const int COLOR_BTNFACE = 15;
        public const int COLOR_BTNSHADOW = 16;
        public const int COLOR_GRAYTEXT = 17;
        public const int COLOR_BTNTEXT = 18;
        public const int COLOR_INACTIVECAPTIONTEXT = 19;
        public const int COLOR_BTNHIGHLIGHT = 20;
        public const int COLOR_3DDKSHADOW = 21;
        public const int COLOR_3DLIGHT = 22;
        public const int COLOR_INFOTEXT = 23;
        public const int COLOR_INFOBK = 24;
        public const int COLOR_HOTLIGHT = 26;
        public const int COLOR_GRADIENTACTIVECAPTION = 27;
        public const int COLOR_GRADIENTINACTIVECAPTION = 28;
        public const int COLOR_MENUHILIGHT = 29;
        public const int COLOR_MENUBAR = 30;
        // unknown type: COLOR_DESKTOP COLOR_BACKGROUND
        // unknown type: COLOR_3DFACE COLOR_BTNFACE
        // unknown type: COLOR_3DSHADOW COLOR_BTNSHADOW
        // unknown type: COLOR_3DHIGHLIGHT COLOR_BTNHIGHLIGHT
        // unknown type: COLOR_3DHILIGHT COLOR_BTNHIGHLIGHT
        // unknown type: COLOR_BTNHILIGHT COLOR_BTNHIGHLIGHT
        // unknown type: GetWindowLong GetWindowLongW
        // unknown type: SetWindowLong SetWindowLongW
        // unknown type: GetWindowLongPtr GetWindowLongPtrW
        // unknown type: SetWindowLongPtr SetWindowLongPtrW
        // unknown type: GetClassLong GetClassLongW
        // unknown type: SetClassLong SetClassLongW
        // unknown type: GetClassLongPtr GetClassLongPtrW
        // unknown type: SetClassLongPtr SetClassLongPtrW
        // unknown type: FindWindow FindWindowW
        // unknown type: FindWindowEx FindWindowExW
        // macro function: EnumTaskWindows ( hTask , lpfn , lParam ) EnumThreadWindows ( HandleToUlong ( hTask ) , lpfn , lParam )
        // unknown type: GetClassName GetClassNameW
        // macro function: GetNextWindow ( hWnd , wCmd ) GetWindow ( hWnd , wCmd )
        // macro function: GetSysModalWindow ( ) ( NULL )
        // macro function: SetSysModalWindow ( hWnd ) ( NULL )
        // macro function: GetWindowTask ( hWnd ) ( ( HANDLE ) ( DWORD_PTR ) GetWindowThreadProcessId ( hWnd , NULL ) )
        public const int GW_HWNDFIRST = 0;
        public const int GW_HWNDLAST = 1;
        public const int GW_HWNDNEXT = 2;
        public const int GW_HWNDPREV = 3;
        public const int GW_OWNER = 4;
        public const int GW_CHILD = 5;
        public const int GW_ENABLEDPOPUP = 6;
        public const int GW_MAX = 6;
        // unknown type: SetWindowsHook SetWindowsHookW
        // unknown type: SetWindowsHookEx SetWindowsHookExW
        // macro function: DefHookProc ( nCode , wParam , lParam , phhk ) CallNextHookEx ( * phhk , nCode , wParam , lParam )
        public const int MF_INSERT = unchecked((int)0x00000000);
        public const int MF_CHANGE = unchecked((int)0x00000080);
        public const int MF_APPEND = unchecked((int)0x00000100);
        public const int MF_DELETE = unchecked((int)0x00000200);
        public const int MF_REMOVE = unchecked((int)0x00001000);
        public const int MF_BYCOMMAND = unchecked((int)0x00000000);
        public const int MF_BYPOSITION = unchecked((int)0x00000400);
        public const int MF_SEPARATOR = unchecked((int)0x00000800);
        public const int MF_ENABLED = unchecked((int)0x00000000);
        public const int MF_GRAYED = unchecked((int)0x00000001);
        public const int MF_DISABLED = unchecked((int)0x00000002);
        public const int MF_UNCHECKED = unchecked((int)0x00000000);
        public const int MF_CHECKED = unchecked((int)0x00000008);
        public const int MF_USECHECKBITMAPS = unchecked((int)0x00000200);
        public const int MF_STRING = unchecked((int)0x00000000);
        public const int MF_BITMAP = unchecked((int)0x00000004);
        public const int MF_OWNERDRAW = unchecked((int)0x00000100);
        public const int MF_POPUP = unchecked((int)0x00000010);
        public const int MF_MENUBARBREAK = unchecked((int)0x00000020);
        public const int MF_MENUBREAK = unchecked((int)0x00000040);
        public const int MF_UNHILITE = unchecked((int)0x00000000);
        public const int MF_HILITE = unchecked((int)0x00000080);
        public const int MF_DEFAULT = unchecked((int)0x00001000);
        public const int MF_SYSMENU = unchecked((int)0x00002000);
        public const int MF_HELP = unchecked((int)0x00004000);
        public const int MF_RIGHTJUSTIFY = unchecked((int)0x00004000);
        public const int MF_MOUSESELECT = unchecked((int)0x00008000);
        public const int MF_END = unchecked((int)0x00000080);
        // unknown type: MFT_STRING MF_STRING
        // unknown type: MFT_BITMAP MF_BITMAP
        // unknown type: MFT_MENUBARBREAK MF_MENUBARBREAK
        // unknown type: MFT_MENUBREAK MF_MENUBREAK
        // unknown type: MFT_OWNERDRAW MF_OWNERDRAW
        public const int MFT_RADIOCHECK = unchecked((int)0x00000200);
        // unknown type: MFT_SEPARATOR MF_SEPARATOR
        public const int MFT_RIGHTORDER = unchecked((int)0x00002000);
        // unknown type: MFT_RIGHTJUSTIFY MF_RIGHTJUSTIFY
        public const int MFS_GRAYED = unchecked((int)0x00000003);
        // unknown type: MFS_DISABLED MFS_GRAYED
        // unknown type: MFS_CHECKED MF_CHECKED
        // unknown type: MFS_HILITE MF_HILITE
        // unknown type: MFS_ENABLED MF_ENABLED
        // unknown type: MFS_UNCHECKED MF_UNCHECKED
        // unknown type: MFS_UNHILITE MF_UNHILITE
        // unknown type: MFS_DEFAULT MF_DEFAULT
// duplicate: MF_END = MF_END 0x00000080L
        public const int SC_SIZE = unchecked((int)0xF000);
        public const int SC_MOVE = unchecked((int)0xF010);
        public const int SC_MINIMIZE = unchecked((int)0xF020);
        public const int SC_MAXIMIZE = unchecked((int)0xF030);
        public const int SC_NEXTWINDOW = unchecked((int)0xF040);
        public const int SC_PREVWINDOW = unchecked((int)0xF050);
        public const int SC_CLOSE = unchecked((int)0xF060);
        public const int SC_VSCROLL = unchecked((int)0xF070);
        public const int SC_HSCROLL = unchecked((int)0xF080);
        public const int SC_MOUSEMENU = unchecked((int)0xF090);
        public const int SC_KEYMENU = unchecked((int)0xF100);
        public const int SC_ARRANGE = unchecked((int)0xF110);
        public const int SC_RESTORE = unchecked((int)0xF120);
        public const int SC_TASKLIST = unchecked((int)0xF130);
        public const int SC_SCREENSAVE = unchecked((int)0xF140);
        public const int SC_HOTKEY = unchecked((int)0xF150);
        public const int SC_DEFAULT = unchecked((int)0xF160);
        public const int SC_MONITORPOWER = unchecked((int)0xF170);
        public const int SC_CONTEXTHELP = unchecked((int)0xF180);
        public const int SC_SEPARATOR = unchecked((int)0xF00F);
        public const int SCF_ISSECURE = unchecked((int)0x00000001);
        // macro function: GET_SC_WPARAM ( wParam ) ( ( int ) wParam & 0xFFF0 )
        // unknown type: SC_ICON SC_MINIMIZE
        // unknown type: SC_ZOOM SC_MAXIMIZE
        // unknown type: LoadBitmap LoadBitmapW
        // unknown type: LoadCursor LoadCursorW
        // unknown type: LoadCursorFromFile LoadCursorFromFileW
        // macro function: CopyCursor ( pcur ) ( ( HCURSOR ) CopyIcon ( ( HICON ) ( pcur ) ) )
        // unknown type: LoadIcon LoadIconW
        // unknown type: PrivateExtractIcons PrivateExtractIconsW
        public const int IMAGE_BITMAP = 0;
        public const int IMAGE_ICON = 1;
        public const int IMAGE_CURSOR = 2;
        public const int IMAGE_ENHMETAFILE = 3;
        public const int LR_DEFAULTCOLOR = unchecked((int)0x00000000);
        public const int LR_MONOCHROME = unchecked((int)0x00000001);
        public const int LR_COLOR = unchecked((int)0x00000002);
        public const int LR_COPYRETURNORG = unchecked((int)0x00000004);
        public const int LR_COPYDELETEORG = unchecked((int)0x00000008);
        public const int LR_LOADFROMFILE = unchecked((int)0x00000010);
        public const int LR_LOADTRANSPARENT = unchecked((int)0x00000020);
        public const int LR_DEFAULTSIZE = unchecked((int)0x00000040);
        public const int LR_VGACOLOR = unchecked((int)0x00000080);
        public const int LR_LOADMAP3DCOLORS = unchecked((int)0x00001000);
        public const int LR_CREATEDIBSECTION = unchecked((int)0x00002000);
        public const int LR_COPYFROMRESOURCE = unchecked((int)0x00004000);
        public const int LR_SHARED = unchecked((int)0x00008000);
        // unknown type: LoadImage LoadImageW
        public const int DI_MASK = unchecked((int)0x0001);
        public const int DI_IMAGE = unchecked((int)0x0002);
        public const int DI_NORMAL = unchecked((int)0x0003);
        public const int DI_COMPAT = unchecked((int)0x0004);
        public const int DI_DEFAULTSIZE = unchecked((int)0x0008);
        public const int DI_NOMIRROR = unchecked((int)0x0010);
        // unknown type: GetIconInfoEx GetIconInfoExW
        public const int RES_ICON = 1;
        public const int RES_CURSOR = 2;
        public const int ORD_LANGDRIVER = 1;
        // unknown type: IDI_APPLICATION MAKEINTRESOURCE ( 32512 )
        // unknown type: IDI_HAND MAKEINTRESOURCE ( 32513 )
        // unknown type: IDI_QUESTION MAKEINTRESOURCE ( 32514 )
        // unknown type: IDI_EXCLAMATION MAKEINTRESOURCE ( 32515 )
        // unknown type: IDI_ASTERISK MAKEINTRESOURCE ( 32516 )
        // unknown type: IDI_WINLOGO MAKEINTRESOURCE ( 32517 )
        // unknown type: IDI_SHIELD MAKEINTRESOURCE ( 32518 )
        // unknown type: IDI_WARNING IDI_EXCLAMATION
        // unknown type: IDI_ERROR IDI_HAND
        // unknown type: IDI_INFORMATION IDI_ASTERISK
        public const int IDOK = 1;
        public const int IDCANCEL = 2;
        public const int IDABORT = 3;
        public const int IDRETRY = 4;
        public const int IDIGNORE = 5;
        public const int IDYES = 6;
        public const int IDNO = 7;
        public const int IDCLOSE = 8;
        public const int IDHELP = 9;
        public const int IDTRYAGAIN = 10;
        public const int IDCONTINUE = 11;
        public const int IDTIMEOUT = 32000;
        public const int ES_LEFT = unchecked((int)0x0000);
        public const int ES_CENTER = unchecked((int)0x0001);
        public const int ES_RIGHT = unchecked((int)0x0002);
        public const int ES_MULTILINE = unchecked((int)0x0004);
        public const int ES_UPPERCASE = unchecked((int)0x0008);
        public const int ES_LOWERCASE = unchecked((int)0x0010);
        public const int ES_PASSWORD = unchecked((int)0x0020);
        public const int ES_AUTOVSCROLL = unchecked((int)0x0040);
        public const int ES_AUTOHSCROLL = unchecked((int)0x0080);
        public const int ES_NOHIDESEL = unchecked((int)0x0100);
        public const int ES_OEMCONVERT = unchecked((int)0x0400);
        public const int ES_READONLY = unchecked((int)0x0800);
        public const int ES_WANTRETURN = unchecked((int)0x1000);
        public const int ES_NUMBER = unchecked((int)0x2000);
        public const int EN_SETFOCUS = unchecked((int)0x0100);
        public const int EN_KILLFOCUS = unchecked((int)0x0200);
        public const int EN_CHANGE = unchecked((int)0x0300);
        public const int EN_UPDATE = unchecked((int)0x0400);
        public const int EN_ERRSPACE = unchecked((int)0x0500);
        public const int EN_MAXTEXT = unchecked((int)0x0501);
        public const int EN_HSCROLL = unchecked((int)0x0601);
        public const int EN_VSCROLL = unchecked((int)0x0602);
        public const int EN_ALIGN_LTR_EC = unchecked((int)0x0700);
        public const int EN_ALIGN_RTL_EC = unchecked((int)0x0701);
        public const int EN_BEFORE_PASTE = unchecked((int)0x0800);
        public const int EN_AFTER_PASTE = unchecked((int)0x0801);
        public const int EC_LEFTMARGIN = unchecked((int)0x0001);
        public const int EC_RIGHTMARGIN = unchecked((int)0x0002);
        public const int EC_USEFONTINFO = unchecked((int)0xffff);
        public const int EMSIS_COMPOSITIONSTRING = unchecked((int)0x0001);
        public const int EIMES_GETCOMPSTRATONCE = unchecked((int)0x0001);
        public const int EIMES_CANCELCOMPSTRINFOCUS = unchecked((int)0x0002);
        public const int EIMES_COMPLETECOMPSTRKILLFOCUS = unchecked((int)0x0004);
        public const int EM_GETSEL = unchecked((int)0x00B0);
        public const int EM_SETSEL = unchecked((int)0x00B1);
        public const int EM_GETRECT = unchecked((int)0x00B2);
        public const int EM_SETRECT = unchecked((int)0x00B3);
        public const int EM_SETRECTNP = unchecked((int)0x00B4);
        public const int EM_SCROLL = unchecked((int)0x00B5);
        public const int EM_LINESCROLL = unchecked((int)0x00B6);
        public const int EM_SCROLLCARET = unchecked((int)0x00B7);
        public const int EM_GETMODIFY = unchecked((int)0x00B8);
        public const int EM_SETMODIFY = unchecked((int)0x00B9);
        public const int EM_GETLINECOUNT = unchecked((int)0x00BA);
        public const int EM_LINEINDEX = unchecked((int)0x00BB);
        public const int EM_SETHANDLE = unchecked((int)0x00BC);
        public const int EM_GETHANDLE = unchecked((int)0x00BD);
        public const int EM_GETTHUMB = unchecked((int)0x00BE);
        public const int EM_LINELENGTH = unchecked((int)0x00C1);
        public const int EM_REPLACESEL = unchecked((int)0x00C2);
        public const int EM_GETLINE = unchecked((int)0x00C4);
        public const int EM_LIMITTEXT = unchecked((int)0x00C5);
        public const int EM_CANUNDO = unchecked((int)0x00C6);
        public const int EM_UNDO = unchecked((int)0x00C7);
        public const int EM_FMTLINES = unchecked((int)0x00C8);
        public const int EM_LINEFROMCHAR = unchecked((int)0x00C9);
        public const int EM_SETTABSTOPS = unchecked((int)0x00CB);
        public const int EM_SETPASSWORDCHAR = unchecked((int)0x00CC);
        public const int EM_EMPTYUNDOBUFFER = unchecked((int)0x00CD);
        public const int EM_GETFIRSTVISIBLELINE = unchecked((int)0x00CE);
        public const int EM_SETREADONLY = unchecked((int)0x00CF);
        public const int EM_SETWORDBREAKPROC = unchecked((int)0x00D0);
        public const int EM_GETWORDBREAKPROC = unchecked((int)0x00D1);
        public const int EM_GETPASSWORDCHAR = unchecked((int)0x00D2);
        public const int EM_SETMARGINS = unchecked((int)0x00D3);
        public const int EM_GETMARGINS = unchecked((int)0x00D4);
        // unknown type: EM_SETLIMITTEXT EM_LIMITTEXT
        public const int EM_GETLIMITTEXT = unchecked((int)0x00D5);
        public const int EM_POSFROMCHAR = unchecked((int)0x00D6);
        public const int EM_CHARFROMPOS = unchecked((int)0x00D7);
        public const int EM_SETIMESTATUS = unchecked((int)0x00D8);
        public const int EM_GETIMESTATUS = unchecked((int)0x00D9);
        public const int EM_ENABLEFEATURE = unchecked((int)0x00DA);
        public const int WB_LEFT = 0;
        public const int WB_RIGHT = 1;
        public const int WB_ISDELIMITER = 2;
        public const int BS_PUSHBUTTON = unchecked((int)0x00000000);
        public const int BS_DEFPUSHBUTTON = unchecked((int)0x00000001);
        public const int BS_CHECKBOX = unchecked((int)0x00000002);
        public const int BS_AUTOCHECKBOX = unchecked((int)0x00000003);
        public const int BS_RADIOBUTTON = unchecked((int)0x00000004);
        public const int BS_3STATE = unchecked((int)0x00000005);
        public const int BS_AUTO3STATE = unchecked((int)0x00000006);
        public const int BS_GROUPBOX = unchecked((int)0x00000007);
        public const int BS_USERBUTTON = unchecked((int)0x00000008);
        public const int BS_AUTORADIOBUTTON = unchecked((int)0x00000009);
        public const int BS_PUSHBOX = unchecked((int)0x0000000A);
        public const int BS_OWNERDRAW = unchecked((int)0x0000000B);
        public const int BS_TYPEMASK = unchecked((int)0x0000000F);
        public const int BS_LEFTTEXT = unchecked((int)0x00000020);
        public const int BS_TEXT = unchecked((int)0x00000000);
        public const int BS_ICON = unchecked((int)0x00000040);
        public const int BS_BITMAP = unchecked((int)0x00000080);
        public const int BS_LEFT = unchecked((int)0x00000100);
        public const int BS_RIGHT = unchecked((int)0x00000200);
        public const int BS_CENTER = unchecked((int)0x00000300);
        public const int BS_TOP = unchecked((int)0x00000400);
        public const int BS_BOTTOM = unchecked((int)0x00000800);
        public const int BS_VCENTER = unchecked((int)0x00000C00);
        public const int BS_PUSHLIKE = unchecked((int)0x00001000);
        public const int BS_MULTILINE = unchecked((int)0x00002000);
        public const int BS_NOTIFY = unchecked((int)0x00004000);
        public const int BS_FLAT = unchecked((int)0x00008000);
        // unknown type: BS_RIGHTBUTTON BS_LEFTTEXT
        public const int BN_CLICKED = 0;
        public const int BN_PAINT = 1;
        public const int BN_HILITE = 2;
        public const int BN_UNHILITE = 3;
        public const int BN_DISABLE = 4;
        public const int BN_DOUBLECLICKED = 5;
        // unknown type: BN_PUSHED BN_HILITE
        // unknown type: BN_UNPUSHED BN_UNHILITE
        // unknown type: BN_DBLCLK BN_DOUBLECLICKED
        public const int BN_SETFOCUS = 6;
        public const int BN_KILLFOCUS = 7;
        public const int BM_GETCHECK = unchecked((int)0x00F0);
        public const int BM_SETCHECK = unchecked((int)0x00F1);
        public const int BM_GETSTATE = unchecked((int)0x00F2);
        public const int BM_SETSTATE = unchecked((int)0x00F3);
        public const int BM_SETSTYLE = unchecked((int)0x00F4);
        public const int BM_CLICK = unchecked((int)0x00F5);
        public const int BM_GETIMAGE = unchecked((int)0x00F6);
        public const int BM_SETIMAGE = unchecked((int)0x00F7);
        public const int BM_SETDONTCLICK = unchecked((int)0x00F8);
        public const int BST_UNCHECKED = unchecked((int)0x0000);
        public const int BST_CHECKED = unchecked((int)0x0001);
        public const int BST_INDETERMINATE = unchecked((int)0x0002);
        public const int BST_PUSHED = unchecked((int)0x0004);
        public const int BST_FOCUS = unchecked((int)0x0008);
        public const int SS_LEFT = unchecked((int)0x00000000);
        public const int SS_CENTER = unchecked((int)0x00000001);
        public const int SS_RIGHT = unchecked((int)0x00000002);
        public const int SS_ICON = unchecked((int)0x00000003);
        public const int SS_BLACKRECT = unchecked((int)0x00000004);
        public const int SS_GRAYRECT = unchecked((int)0x00000005);
        public const int SS_WHITERECT = unchecked((int)0x00000006);
        public const int SS_BLACKFRAME = unchecked((int)0x00000007);
        public const int SS_GRAYFRAME = unchecked((int)0x00000008);
        public const int SS_WHITEFRAME = unchecked((int)0x00000009);
        public const int SS_USERITEM = unchecked((int)0x0000000A);
        public const int SS_SIMPLE = unchecked((int)0x0000000B);
        public const int SS_LEFTNOWORDWRAP = unchecked((int)0x0000000C);
        public const int SS_OWNERDRAW = unchecked((int)0x0000000D);
        public const int SS_BITMAP = unchecked((int)0x0000000E);
        public const int SS_ENHMETAFILE = unchecked((int)0x0000000F);
        public const int SS_ETCHEDHORZ = unchecked((int)0x00000010);
        public const int SS_ETCHEDVERT = unchecked((int)0x00000011);
        public const int SS_ETCHEDFRAME = unchecked((int)0x00000012);
        public const int SS_TYPEMASK = unchecked((int)0x0000001F);
        public const int SS_REALSIZECONTROL = unchecked((int)0x00000040);
        public const int SS_NOPREFIX = unchecked((int)0x00000080);
        public const int SS_NOTIFY = unchecked((int)0x00000100);
        public const int SS_CENTERIMAGE = unchecked((int)0x00000200);
        public const int SS_RIGHTJUST = unchecked((int)0x00000400);
        public const int SS_REALSIZEIMAGE = unchecked((int)0x00000800);
        public const int SS_SUNKEN = unchecked((int)0x00001000);
        public const int SS_EDITCONTROL = unchecked((int)0x00002000);
        public const int SS_ENDELLIPSIS = unchecked((int)0x00004000);
        public const int SS_PATHELLIPSIS = unchecked((int)0x00008000);
        public const int SS_WORDELLIPSIS = unchecked((int)0x0000C000);
        public const int SS_ELLIPSISMASK = unchecked((int)0x0000C000);
        public const int STM_SETICON = unchecked((int)0x0170);
        public const int STM_GETICON = unchecked((int)0x0171);
        public const int STM_SETIMAGE = unchecked((int)0x0172);
        public const int STM_GETIMAGE = unchecked((int)0x0173);
        public const int STN_CLICKED = 0;
        public const int STN_DBLCLK = 1;
        public const int STN_ENABLE = 2;
        public const int STN_DISABLE = 3;
        public const int STM_MSGMAX = unchecked((int)0x0174);
        public const int WC_DIALOG = unchecked((int)0x8002);
        public const int DWL_MSGRESULT = 0;
        public const int DWL_DLGPROC = 4;
        public const int DWL_USER = 8;
        public const int DWLP_MSGRESULT = 0;
        // unknown type: DWLP_DLGPROC DWLP_MSGRESULT + sizeof ( LRESULT )
        // unknown type: DWLP_USER DWLP_DLGPROC + sizeof ( DLGPROC )
        // unknown type: IsDialogMessage IsDialogMessageW
        // unknown type: DlgDirList DlgDirListW
        public const int DDL_READWRITE = unchecked((int)0x0000);
        public const int DDL_READONLY = unchecked((int)0x0001);
        public const int DDL_HIDDEN = unchecked((int)0x0002);
        public const int DDL_SYSTEM = unchecked((int)0x0004);
        public const int DDL_DIRECTORY = unchecked((int)0x0010);
        public const int DDL_ARCHIVE = unchecked((int)0x0020);
        public const int DDL_POSTMSGS = unchecked((int)0x2000);
        public const int DDL_DRIVES = unchecked((int)0x4000);
        public const int DDL_EXCLUSIVE = unchecked((int)0x8000);
        // unknown type: DlgDirSelectEx DlgDirSelectExW
        // unknown type: DlgDirListComboBox DlgDirListComboBoxW
        // unknown type: DlgDirSelectComboBoxEx DlgDirSelectComboBoxExW
        public const int DS_ABSALIGN = unchecked((int)0x01);
        public const int DS_SYSMODAL = unchecked((int)0x02);
        public const int DS_LOCALEDIT = unchecked((int)0x20);
        public const int DS_SETFONT = unchecked((int)0x40);
        public const int DS_MODALFRAME = unchecked((int)0x80);
        public const int DS_NOIDLEMSG = unchecked((int)0x100);
        public const int DS_SETFOREGROUND = unchecked((int)0x200);
        public const int DS_3DLOOK = unchecked((int)0x0004);
        public const int DS_FIXEDSYS = unchecked((int)0x0008);
        public const int DS_NOFAILCREATE = unchecked((int)0x0010);
        public const int DS_CONTROL = unchecked((int)0x0400);
        public const int DS_CENTER = unchecked((int)0x0800);
        public const int DS_CENTERMOUSE = unchecked((int)0x1000);
        public const int DS_CONTEXTHELP = unchecked((int)0x2000);
        public const long DS_SHELLFONT = ( DS_SETFONT | DS_FIXEDSYS );
        public const int DC_HASDEFID = unchecked((int)0x534B);
        public const int DLGC_WANTARROWS = unchecked((int)0x0001);
        public const int DLGC_WANTTAB = unchecked((int)0x0002);
        public const int DLGC_WANTALLKEYS = unchecked((int)0x0004);
        public const int DLGC_WANTMESSAGE = unchecked((int)0x0004);
        public const int DLGC_HASSETSEL = unchecked((int)0x0008);
        public const int DLGC_DEFPUSHBUTTON = unchecked((int)0x0010);
        public const int DLGC_UNDEFPUSHBUTTON = unchecked((int)0x0020);
        public const int DLGC_RADIOBUTTON = unchecked((int)0x0040);
        public const int DLGC_WANTCHARS = unchecked((int)0x0080);
        public const int DLGC_STATIC = unchecked((int)0x0100);
        public const int DLGC_BUTTON = unchecked((int)0x2000);
        public const int LB_CTLCODE = 0;
        public const int LB_OKAY = 0;
        public const int LB_ERR = ( - 1 );
        public const int LB_ERRSPACE = ( - 2 );
        public const int LBN_ERRSPACE = ( - 2 );
        public const int LBN_SELCHANGE = 1;
        public const int LBN_DBLCLK = 2;
        public const int LBN_SELCANCEL = 3;
        public const int LBN_SETFOCUS = 4;
        public const int LBN_KILLFOCUS = 5;
        public const int LB_ADDSTRING = unchecked((int)0x0180);
        public const int LB_INSERTSTRING = unchecked((int)0x0181);
        public const int LB_DELETESTRING = unchecked((int)0x0182);
        public const int LB_SELITEMRANGEEX = unchecked((int)0x0183);
        public const int LB_RESETCONTENT = unchecked((int)0x0184);
        public const int LB_SETSEL = unchecked((int)0x0185);
        public const int LB_SETCURSEL = unchecked((int)0x0186);
        public const int LB_GETSEL = unchecked((int)0x0187);
        public const int LB_GETCURSEL = unchecked((int)0x0188);
        public const int LB_GETTEXT = unchecked((int)0x0189);
        public const int LB_GETTEXTLEN = unchecked((int)0x018A);
        public const int LB_GETCOUNT = unchecked((int)0x018B);
        public const int LB_SELECTSTRING = unchecked((int)0x018C);
        public const int LB_DIR = unchecked((int)0x018D);
        public const int LB_GETTOPINDEX = unchecked((int)0x018E);
        public const int LB_FINDSTRING = unchecked((int)0x018F);
        public const int LB_GETSELCOUNT = unchecked((int)0x0190);
        public const int LB_GETSELITEMS = unchecked((int)0x0191);
        public const int LB_SETTABSTOPS = unchecked((int)0x0192);
        public const int LB_GETHORIZONTALEXTENT = unchecked((int)0x0193);
        public const int LB_SETHORIZONTALEXTENT = unchecked((int)0x0194);
        public const int LB_SETCOLUMNWIDTH = unchecked((int)0x0195);
        public const int LB_ADDFILE = unchecked((int)0x0196);
        public const int LB_SETTOPINDEX = unchecked((int)0x0197);
        public const int LB_GETITEMRECT = unchecked((int)0x0198);
        public const int LB_GETITEMDATA = unchecked((int)0x0199);
        public const int LB_SETITEMDATA = unchecked((int)0x019A);
        public const int LB_SELITEMRANGE = unchecked((int)0x019B);
        public const int LB_SETANCHORINDEX = unchecked((int)0x019C);
        public const int LB_GETANCHORINDEX = unchecked((int)0x019D);
        public const int LB_SETCARETINDEX = unchecked((int)0x019E);
        public const int LB_GETCARETINDEX = unchecked((int)0x019F);
        public const int LB_SETITEMHEIGHT = unchecked((int)0x01A0);
        public const int LB_GETITEMHEIGHT = unchecked((int)0x01A1);
        public const int LB_FINDSTRINGEXACT = unchecked((int)0x01A2);
        public const int LB_SETLOCALE = unchecked((int)0x01A5);
        public const int LB_GETLOCALE = unchecked((int)0x01A6);
        public const int LB_SETCOUNT = unchecked((int)0x01A7);
        public const int LB_INITSTORAGE = unchecked((int)0x01A8);
        public const int LB_ITEMFROMPOINT = unchecked((int)0x01A9);
        public const int LB_GETLISTBOXINFO = unchecked((int)0x01B2);
        public const int LB_MSGMAX = unchecked((int)0x01B3);
        public const int LBS_NOTIFY = unchecked((int)0x0001);
        public const int LBS_SORT = unchecked((int)0x0002);
        public const int LBS_NOREDRAW = unchecked((int)0x0004);
        public const int LBS_MULTIPLESEL = unchecked((int)0x0008);
        public const int LBS_OWNERDRAWFIXED = unchecked((int)0x0010);
        public const int LBS_OWNERDRAWVARIABLE = unchecked((int)0x0020);
        public const int LBS_HASSTRINGS = unchecked((int)0x0040);
        public const int LBS_USETABSTOPS = unchecked((int)0x0080);
        public const int LBS_NOINTEGRALHEIGHT = unchecked((int)0x0100);
        public const int LBS_MULTICOLUMN = unchecked((int)0x0200);
        public const int LBS_WANTKEYBOARDINPUT = unchecked((int)0x0400);
        public const int LBS_EXTENDEDSEL = unchecked((int)0x0800);
        public const int LBS_DISABLENOSCROLL = unchecked((int)0x1000);
        public const int LBS_NODATA = unchecked((int)0x2000);
        public const int LBS_NOSEL = unchecked((int)0x4000);
        public const int LBS_COMBOBOX = unchecked((int)0x8000);
        public const long LBS_STANDARD = ( LBS_NOTIFY | LBS_SORT | (long)WS._VSCROLL | (long)WS._BORDER );
        public const int CB_OKAY = 0;
        public const int CB_ERR = ( - 1 );
        public const int CB_ERRSPACE = ( - 2 );
        public const int CBN_ERRSPACE = ( - 1 );
        public const int CBN_SELCHANGE = 1;
        public const int CBN_DBLCLK = 2;
        public const int CBN_SETFOCUS = 3;
        public const int CBN_KILLFOCUS = 4;
        public const int CBN_EDITCHANGE = 5;
        public const int CBN_EDITUPDATE = 6;
        public const int CBN_DROPDOWN = 7;
        public const int CBN_CLOSEUP = 8;
        public const int CBN_SELENDOK = 9;
        public const int CBN_SELENDCANCEL = 10;
        public const int CBS_SIMPLE = unchecked((int)0x0001);
        public const int CBS_DROPDOWN = unchecked((int)0x0002);
        public const int CBS_DROPDOWNLIST = unchecked((int)0x0003);
        public const int CBS_OWNERDRAWFIXED = unchecked((int)0x0010);
        public const int CBS_OWNERDRAWVARIABLE = unchecked((int)0x0020);
        public const int CBS_AUTOHSCROLL = unchecked((int)0x0040);
        public const int CBS_OEMCONVERT = unchecked((int)0x0080);
        public const int CBS_SORT = unchecked((int)0x0100);
        public const int CBS_HASSTRINGS = unchecked((int)0x0200);
        public const int CBS_NOINTEGRALHEIGHT = unchecked((int)0x0400);
        public const int CBS_DISABLENOSCROLL = unchecked((int)0x0800);
        public const int CBS_UPPERCASE = unchecked((int)0x2000);
        public const int CBS_LOWERCASE = unchecked((int)0x4000);
        public const int CB_GETEDITSEL = unchecked((int)0x0140);
        public const int CB_LIMITTEXT = unchecked((int)0x0141);
        public const int CB_SETEDITSEL = unchecked((int)0x0142);
        public const int CB_ADDSTRING = unchecked((int)0x0143);
        public const int CB_DELETESTRING = unchecked((int)0x0144);
        public const int CB_DIR = unchecked((int)0x0145);
        public const int CB_GETCOUNT = unchecked((int)0x0146);
        public const int CB_GETCURSEL = unchecked((int)0x0147);
        public const int CB_GETLBTEXT = unchecked((int)0x0148);
        public const int CB_GETLBTEXTLEN = unchecked((int)0x0149);
        public const int CB_INSERTSTRING = unchecked((int)0x014A);
        public const int CB_RESETCONTENT = unchecked((int)0x014B);
        public const int CB_FINDSTRING = unchecked((int)0x014C);
        public const int CB_SELECTSTRING = unchecked((int)0x014D);
        public const int CB_SETCURSEL = unchecked((int)0x014E);
        public const int CB_SHOWDROPDOWN = unchecked((int)0x014F);
        public const int CB_GETITEMDATA = unchecked((int)0x0150);
        public const int CB_SETITEMDATA = unchecked((int)0x0151);
        public const int CB_GETDROPPEDCONTROLRECT = unchecked((int)0x0152);
        public const int CB_SETITEMHEIGHT = unchecked((int)0x0153);
        public const int CB_GETITEMHEIGHT = unchecked((int)0x0154);
        public const int CB_SETEXTENDEDUI = unchecked((int)0x0155);
        public const int CB_GETEXTENDEDUI = unchecked((int)0x0156);
        public const int CB_GETDROPPEDSTATE = unchecked((int)0x0157);
        public const int CB_FINDSTRINGEXACT = unchecked((int)0x0158);
        public const int CB_SETLOCALE = unchecked((int)0x0159);
        public const int CB_GETLOCALE = unchecked((int)0x015A);
        public const int CB_GETTOPINDEX = unchecked((int)0x015b);
        public const int CB_SETTOPINDEX = unchecked((int)0x015c);
        public const int CB_GETHORIZONTALEXTENT = unchecked((int)0x015d);
        public const int CB_SETHORIZONTALEXTENT = unchecked((int)0x015e);
        public const int CB_GETDROPPEDWIDTH = unchecked((int)0x015f);
        public const int CB_SETDROPPEDWIDTH = unchecked((int)0x0160);
        public const int CB_INITSTORAGE = unchecked((int)0x0161);
        public const int CB_GETCOMBOBOXINFO = unchecked((int)0x0164);
        public const int CB_MSGMAX = unchecked((int)0x0165);
        public const int SBS_HORZ = unchecked((int)0x0000);
        public const int SBS_VERT = unchecked((int)0x0001);
        public const int SBS_TOPALIGN = unchecked((int)0x0002);
        public const int SBS_LEFTALIGN = unchecked((int)0x0002);
        public const int SBS_BOTTOMALIGN = unchecked((int)0x0004);
        public const int SBS_RIGHTALIGN = unchecked((int)0x0004);
        public const int SBS_SIZEBOXTOPLEFTALIGN = unchecked((int)0x0002);
        public const int SBS_SIZEBOXBOTTOMRIGHTALIGN = unchecked((int)0x0004);
        public const int SBS_SIZEBOX = unchecked((int)0x0008);
        public const int SBS_SIZEGRIP = unchecked((int)0x0010);
        public const int SBM_SETPOS = unchecked((int)0x00E0);
        public const int SBM_GETPOS = unchecked((int)0x00E1);
        public const int SBM_SETRANGE = unchecked((int)0x00E2);
        public const int SBM_SETRANGEREDRAW = unchecked((int)0x00E6);
        public const int SBM_GETRANGE = unchecked((int)0x00E3);
        public const int SBM_ENABLE_ARROWS = unchecked((int)0x00E4);
        public const int SBM_SETSCROLLINFO = unchecked((int)0x00E9);
        public const int SBM_GETSCROLLINFO = unchecked((int)0x00EA);
        public const int SBM_GETSCROLLBARINFO = unchecked((int)0x00EB);
        public const int SIF_RANGE = unchecked((int)0x0001);
        public const int SIF_PAGE = unchecked((int)0x0002);
        public const int SIF_POS = unchecked((int)0x0004);
        public const int SIF_DISABLENOSCROLL = unchecked((int)0x0008);
        public const int SIF_TRACKPOS = unchecked((int)0x0010);
        public const int SIF_ALL = ( SIF_RANGE | SIF_PAGE | SIF_POS | SIF_TRACKPOS );
        public const int MDIS_ALLCHILDSTYLES = unchecked((int)0x0001);
        public const int MDITILE_VERTICAL = unchecked((int)0x0000);
        public const int MDITILE_HORIZONTAL = unchecked((int)0x0001);
        public const int MDITILE_SKIPDISABLED = unchecked((int)0x0002);
        public const int MDITILE_ZORDER = unchecked((int)0x0004);
        // unknown type: DefFrameProc DefFrameProcW
        // unknown type: DefMDIChildProc DefMDIChildProcW
        // unknown type: CreateMDIWindow CreateMDIWindowW
        public const int HELP_CONTEXT = unchecked((int)0x0001);
        public const int HELP_QUIT = unchecked((int)0x0002);
        public const int HELP_INDEX = unchecked((int)0x0003);
        public const int HELP_CONTENTS = unchecked((int)0x0003);
        public const int HELP_HELPONHELP = unchecked((int)0x0004);
        public const int HELP_SETINDEX = unchecked((int)0x0005);
        public const int HELP_SETCONTENTS = unchecked((int)0x0005);
        public const int HELP_CONTEXTPOPUP = unchecked((int)0x0008);
        public const int HELP_FORCEFILE = unchecked((int)0x0009);
        public const int HELP_KEY = unchecked((int)0x0101);
        public const int HELP_COMMAND = unchecked((int)0x0102);
        public const int HELP_PARTIALKEY = unchecked((int)0x0105);
        public const int HELP_MULTIKEY = unchecked((int)0x0201);
        public const int HELP_SETWINPOS = unchecked((int)0x0203);
        public const int HELP_CONTEXTMENU = unchecked((int)0x000a);
        public const int HELP_FINDER = unchecked((int)0x000b);
        public const int HELP_WM_HELP = unchecked((int)0x000c);
        public const int HELP_SETPOPUP_POS = unchecked((int)0x000d);
        public const int HELP_TCARD = unchecked((int)0x8000);
        public const int HELP_TCARD_DATA = unchecked((int)0x0010);
        public const int HELP_TCARD_OTHER_CALLER = unchecked((int)0x0011);
        public const int IDH_NO_HELP = 28440;
        public const int IDH_MISSING_CONTEXT = 28441;
        public const int IDH_GENERIC_HELP_BUTTON = 28442;
        public const int IDH_OK = 28443;
        public const int IDH_CANCEL = 28444;
        public const int IDH_HELP = 28445;
        // unknown type: WinHelp WinHelpW
        public const int GR_GDIOBJECTS = 0;
        public const int GR_USEROBJECTS = 1;
        public const int GR_GDIOBJECTS_PEAK = 2;
        public const int GR_USEROBJECTS_PEAK = 4;
        public static readonly IntPtr GR_GLOBAL = new IntPtr((  - 2 ));
        public const int SPI_GETBEEP = unchecked((int)0x0001);
        public const int SPI_SETBEEP = unchecked((int)0x0002);
        public const int SPI_GETMOUSE = unchecked((int)0x0003);
        public const int SPI_SETMOUSE = unchecked((int)0x0004);
        public const int SPI_GETBORDER = unchecked((int)0x0005);
        public const int SPI_SETBORDER = unchecked((int)0x0006);
        public const int SPI_GETKEYBOARDSPEED = unchecked((int)0x000A);
        public const int SPI_SETKEYBOARDSPEED = unchecked((int)0x000B);
        public const int SPI_LANGDRIVER = unchecked((int)0x000C);
        public const int SPI_ICONHORIZONTALSPACING = unchecked((int)0x000D);
        public const int SPI_GETSCREENSAVETIMEOUT = unchecked((int)0x000E);
        public const int SPI_SETSCREENSAVETIMEOUT = unchecked((int)0x000F);
        public const int SPI_GETSCREENSAVEACTIVE = unchecked((int)0x0010);
        public const int SPI_SETSCREENSAVEACTIVE = unchecked((int)0x0011);
        public const int SPI_GETGRIDGRANULARITY = unchecked((int)0x0012);
        public const int SPI_SETGRIDGRANULARITY = unchecked((int)0x0013);
        public const int SPI_SETDESKWALLPAPER = unchecked((int)0x0014);
        public const int SPI_SETDESKPATTERN = unchecked((int)0x0015);
        public const int SPI_GETKEYBOARDDELAY = unchecked((int)0x0016);
        public const int SPI_SETKEYBOARDDELAY = unchecked((int)0x0017);
        public const int SPI_ICONVERTICALSPACING = unchecked((int)0x0018);
        public const int SPI_GETICONTITLEWRAP = unchecked((int)0x0019);
        public const int SPI_SETICONTITLEWRAP = unchecked((int)0x001A);
        public const int SPI_GETMENUDROPALIGNMENT = unchecked((int)0x001B);
        public const int SPI_SETMENUDROPALIGNMENT = unchecked((int)0x001C);
        public const int SPI_SETDOUBLECLKWIDTH = unchecked((int)0x001D);
        public const int SPI_SETDOUBLECLKHEIGHT = unchecked((int)0x001E);
        public const int SPI_GETICONTITLELOGFONT = unchecked((int)0x001F);
        public const int SPI_SETDOUBLECLICKTIME = unchecked((int)0x0020);
        public const int SPI_SETMOUSEBUTTONSWAP = unchecked((int)0x0021);
        public const int SPI_SETICONTITLELOGFONT = unchecked((int)0x0022);
        public const int SPI_GETFASTTASKSWITCH = unchecked((int)0x0023);
        public const int SPI_SETFASTTASKSWITCH = unchecked((int)0x0024);
        public const int SPI_SETDRAGFULLWINDOWS = unchecked((int)0x0025);
        public const int SPI_GETDRAGFULLWINDOWS = unchecked((int)0x0026);
        public const int SPI_GETNONCLIENTMETRICS = unchecked((int)0x0029);
        public const int SPI_SETNONCLIENTMETRICS = unchecked((int)0x002A);
        public const int SPI_GETMINIMIZEDMETRICS = unchecked((int)0x002B);
        public const int SPI_SETMINIMIZEDMETRICS = unchecked((int)0x002C);
        public const int SPI_GETICONMETRICS = unchecked((int)0x002D);
        public const int SPI_SETICONMETRICS = unchecked((int)0x002E);
        public const int SPI_SETWORKAREA = unchecked((int)0x002F);
        public const int SPI_GETWORKAREA = unchecked((int)0x0030);
        public const int SPI_SETPENWINDOWS = unchecked((int)0x0031);
        public const int SPI_GETHIGHCONTRAST = unchecked((int)0x0042);
        public const int SPI_SETHIGHCONTRAST = unchecked((int)0x0043);
        public const int SPI_GETKEYBOARDPREF = unchecked((int)0x0044);
        public const int SPI_SETKEYBOARDPREF = unchecked((int)0x0045);
        public const int SPI_GETSCREENREADER = unchecked((int)0x0046);
        public const int SPI_SETSCREENREADER = unchecked((int)0x0047);
        public const int SPI_GETANIMATION = unchecked((int)0x0048);
        public const int SPI_SETANIMATION = unchecked((int)0x0049);
        public const int SPI_GETFONTSMOOTHING = unchecked((int)0x004A);
        public const int SPI_SETFONTSMOOTHING = unchecked((int)0x004B);
        public const int SPI_SETDRAGWIDTH = unchecked((int)0x004C);
        public const int SPI_SETDRAGHEIGHT = unchecked((int)0x004D);
        public const int SPI_SETHANDHELD = unchecked((int)0x004E);
        public const int SPI_GETLOWPOWERTIMEOUT = unchecked((int)0x004F);
        public const int SPI_GETPOWEROFFTIMEOUT = unchecked((int)0x0050);
        public const int SPI_SETLOWPOWERTIMEOUT = unchecked((int)0x0051);
        public const int SPI_SETPOWEROFFTIMEOUT = unchecked((int)0x0052);
        public const int SPI_GETLOWPOWERACTIVE = unchecked((int)0x0053);
        public const int SPI_GETPOWEROFFACTIVE = unchecked((int)0x0054);
        public const int SPI_SETLOWPOWERACTIVE = unchecked((int)0x0055);
        public const int SPI_SETPOWEROFFACTIVE = unchecked((int)0x0056);
        public const int SPI_SETCURSORS = unchecked((int)0x0057);
        public const int SPI_SETICONS = unchecked((int)0x0058);
        public const int SPI_GETDEFAULTINPUTLANG = unchecked((int)0x0059);
        public const int SPI_SETDEFAULTINPUTLANG = unchecked((int)0x005A);
        public const int SPI_SETLANGTOGGLE = unchecked((int)0x005B);
        public const int SPI_GETWINDOWSEXTENSION = unchecked((int)0x005C);
        public const int SPI_SETMOUSETRAILS = unchecked((int)0x005D);
        public const int SPI_GETMOUSETRAILS = unchecked((int)0x005E);
        public const int SPI_SETSCREENSAVERRUNNING = unchecked((int)0x0061);
        // unknown type: SPI_SCREENSAVERRUNNING SPI_SETSCREENSAVERRUNNING
        public const int SPI_GETFILTERKEYS = unchecked((int)0x0032);
        public const int SPI_SETFILTERKEYS = unchecked((int)0x0033);
        public const int SPI_GETTOGGLEKEYS = unchecked((int)0x0034);
        public const int SPI_SETTOGGLEKEYS = unchecked((int)0x0035);
        public const int SPI_GETMOUSEKEYS = unchecked((int)0x0036);
        public const int SPI_SETMOUSEKEYS = unchecked((int)0x0037);
        public const int SPI_GETSHOWSOUNDS = unchecked((int)0x0038);
        public const int SPI_SETSHOWSOUNDS = unchecked((int)0x0039);
        public const int SPI_GETSTICKYKEYS = unchecked((int)0x003A);
        public const int SPI_SETSTICKYKEYS = unchecked((int)0x003B);
        public const int SPI_GETACCESSTIMEOUT = unchecked((int)0x003C);
        public const int SPI_SETACCESSTIMEOUT = unchecked((int)0x003D);
        public const int SPI_GETSERIALKEYS = unchecked((int)0x003E);
        public const int SPI_SETSERIALKEYS = unchecked((int)0x003F);
        public const int SPI_GETSOUNDSENTRY = unchecked((int)0x0040);
        public const int SPI_SETSOUNDSENTRY = unchecked((int)0x0041);
        public const int SPI_GETSNAPTODEFBUTTON = unchecked((int)0x005F);
        public const int SPI_SETSNAPTODEFBUTTON = unchecked((int)0x0060);
        public const int SPI_GETMOUSEHOVERWIDTH = unchecked((int)0x0062);
        public const int SPI_SETMOUSEHOVERWIDTH = unchecked((int)0x0063);
        public const int SPI_GETMOUSEHOVERHEIGHT = unchecked((int)0x0064);
        public const int SPI_SETMOUSEHOVERHEIGHT = unchecked((int)0x0065);
        public const int SPI_GETMOUSEHOVERTIME = unchecked((int)0x0066);
        public const int SPI_SETMOUSEHOVERTIME = unchecked((int)0x0067);
        public const int SPI_GETWHEELSCROLLLINES = unchecked((int)0x0068);
        public const int SPI_SETWHEELSCROLLLINES = unchecked((int)0x0069);
        public const int SPI_GETMENUSHOWDELAY = unchecked((int)0x006A);
        public const int SPI_SETMENUSHOWDELAY = unchecked((int)0x006B);
        public const int SPI_GETWHEELSCROLLCHARS = unchecked((int)0x006C);
        public const int SPI_SETWHEELSCROLLCHARS = unchecked((int)0x006D);
        public const int SPI_GETSHOWIMEUI = unchecked((int)0x006E);
        public const int SPI_SETSHOWIMEUI = unchecked((int)0x006F);
        public const int SPI_GETMOUSESPEED = unchecked((int)0x0070);
        public const int SPI_SETMOUSESPEED = unchecked((int)0x0071);
        public const int SPI_GETSCREENSAVERRUNNING = unchecked((int)0x0072);
        public const int SPI_GETDESKWALLPAPER = unchecked((int)0x0073);
        public const int SPI_GETAUDIODESCRIPTION = unchecked((int)0x0074);
        public const int SPI_SETAUDIODESCRIPTION = unchecked((int)0x0075);
        public const int SPI_GETSCREENSAVESECURE = unchecked((int)0x0076);
        public const int SPI_SETSCREENSAVESECURE = unchecked((int)0x0077);
        public const int SPI_GETHUNGAPPTIMEOUT = unchecked((int)0x0078);
        public const int SPI_SETHUNGAPPTIMEOUT = unchecked((int)0x0079);
        public const int SPI_GETWAITTOKILLTIMEOUT = unchecked((int)0x007A);
        public const int SPI_SETWAITTOKILLTIMEOUT = unchecked((int)0x007B);
        public const int SPI_GETWAITTOKILLSERVICETIMEOUT = unchecked((int)0x007C);
        public const int SPI_SETWAITTOKILLSERVICETIMEOUT = unchecked((int)0x007D);
        public const int SPI_GETMOUSEDOCKTHRESHOLD = unchecked((int)0x007E);
        public const int SPI_SETMOUSEDOCKTHRESHOLD = unchecked((int)0x007F);
        public const int SPI_GETPENDOCKTHRESHOLD = unchecked((int)0x0080);
        public const int SPI_SETPENDOCKTHRESHOLD = unchecked((int)0x0081);
        public const int SPI_GETWINARRANGING = unchecked((int)0x0082);
        public const int SPI_SETWINARRANGING = unchecked((int)0x0083);
        public const int SPI_GETMOUSEDRAGOUTTHRESHOLD = unchecked((int)0x0084);
        public const int SPI_SETMOUSEDRAGOUTTHRESHOLD = unchecked((int)0x0085);
        public const int SPI_GETPENDRAGOUTTHRESHOLD = unchecked((int)0x0086);
        public const int SPI_SETPENDRAGOUTTHRESHOLD = unchecked((int)0x0087);
        public const int SPI_GETMOUSESIDEMOVETHRESHOLD = unchecked((int)0x0088);
        public const int SPI_SETMOUSESIDEMOVETHRESHOLD = unchecked((int)0x0089);
        public const int SPI_GETPENSIDEMOVETHRESHOLD = unchecked((int)0x008A);
        public const int SPI_SETPENSIDEMOVETHRESHOLD = unchecked((int)0x008B);
        public const int SPI_GETDRAGFROMMAXIMIZE = unchecked((int)0x008C);
        public const int SPI_SETDRAGFROMMAXIMIZE = unchecked((int)0x008D);
        public const int SPI_GETSNAPSIZING = unchecked((int)0x008E);
        public const int SPI_SETSNAPSIZING = unchecked((int)0x008F);
        public const int SPI_GETDOCKMOVING = unchecked((int)0x0090);
        public const int SPI_SETDOCKMOVING = unchecked((int)0x0091);
        public const int MAX_TOUCH_PREDICTION_FILTER_TAPS = 3;
        public const int TOUCHPREDICTIONPARAMETERS_DEFAULT_LATENCY = 8;
        public const int TOUCHPREDICTIONPARAMETERS_DEFAULT_SAMPLETIME = 8;
        public const int TOUCHPREDICTIONPARAMETERS_DEFAULT_USE_HW_TIMESTAMP = 1;
        public const float TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_DELTA = 0.001f;
        public const float TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_MIN = 0.9f;
        public const float TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_MAX = 0.999f;
        public const float TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_LAMBDA_LEARNING_RATE = 0.001f;
        public const float TOUCHPREDICTIONPARAMETERS_DEFAULT_RLS_EXPO_SMOOTH_ALPHA = 0.99f;
        public const int SPI_GETTOUCHPREDICTIONPARAMETERS = unchecked((int)0x009C);
        public const int SPI_SETTOUCHPREDICTIONPARAMETERS = unchecked((int)0x009D);
        public const int MAX_LOGICALDPIOVERRIDE = 2;
        public const int MIN_LOGICALDPIOVERRIDE = - 2;
        public const int SPI_GETLOGICALDPIOVERRIDE = unchecked((int)0x009E);
        public const int SPI_SETLOGICALDPIOVERRIDE = unchecked((int)0x009F);
        public const int SPI_GETMENURECT = unchecked((int)0x00A2);
        public const int SPI_SETMENURECT = unchecked((int)0x00A3);
        public const int SPI_GETACTIVEWINDOWTRACKING = unchecked((int)0x1000);
        public const int SPI_SETACTIVEWINDOWTRACKING = unchecked((int)0x1001);
        public const int SPI_GETMENUANIMATION = unchecked((int)0x1002);
        public const int SPI_SETMENUANIMATION = unchecked((int)0x1003);
        public const int SPI_GETCOMBOBOXANIMATION = unchecked((int)0x1004);
        public const int SPI_SETCOMBOBOXANIMATION = unchecked((int)0x1005);
        public const int SPI_GETLISTBOXSMOOTHSCROLLING = unchecked((int)0x1006);
        public const int SPI_SETLISTBOXSMOOTHSCROLLING = unchecked((int)0x1007);
        public const int SPI_GETGRADIENTCAPTIONS = unchecked((int)0x1008);
        public const int SPI_SETGRADIENTCAPTIONS = unchecked((int)0x1009);
        public const int SPI_GETKEYBOARDCUES = unchecked((int)0x100A);
        public const int SPI_SETKEYBOARDCUES = unchecked((int)0x100B);
        // unknown type: SPI_GETMENUUNDERLINES SPI_GETKEYBOARDCUES
        // unknown type: SPI_SETMENUUNDERLINES SPI_SETKEYBOARDCUES
        public const int SPI_GETACTIVEWNDTRKZORDER = unchecked((int)0x100C);
        public const int SPI_SETACTIVEWNDTRKZORDER = unchecked((int)0x100D);
        public const int SPI_GETHOTTRACKING = unchecked((int)0x100E);
        public const int SPI_SETHOTTRACKING = unchecked((int)0x100F);
        public const int SPI_GETMENUFADE = unchecked((int)0x1012);
        public const int SPI_SETMENUFADE = unchecked((int)0x1013);
        public const int SPI_GETSELECTIONFADE = unchecked((int)0x1014);
        public const int SPI_SETSELECTIONFADE = unchecked((int)0x1015);
        public const int SPI_GETTOOLTIPANIMATION = unchecked((int)0x1016);
        public const int SPI_SETTOOLTIPANIMATION = unchecked((int)0x1017);
        public const int SPI_GETTOOLTIPFADE = unchecked((int)0x1018);
        public const int SPI_SETTOOLTIPFADE = unchecked((int)0x1019);
        public const int SPI_GETCURSORSHADOW = unchecked((int)0x101A);
        public const int SPI_SETCURSORSHADOW = unchecked((int)0x101B);
        public const int SPI_GETMOUSESONAR = unchecked((int)0x101C);
        public const int SPI_SETMOUSESONAR = unchecked((int)0x101D);
        public const int SPI_GETMOUSECLICKLOCK = unchecked((int)0x101E);
        public const int SPI_SETMOUSECLICKLOCK = unchecked((int)0x101F);
        public const int SPI_GETMOUSEVANISH = unchecked((int)0x1020);
        public const int SPI_SETMOUSEVANISH = unchecked((int)0x1021);
        public const int SPI_GETFLATMENU = unchecked((int)0x1022);
        public const int SPI_SETFLATMENU = unchecked((int)0x1023);
        public const int SPI_GETDROPSHADOW = unchecked((int)0x1024);
        public const int SPI_SETDROPSHADOW = unchecked((int)0x1025);
        public const int SPI_GETBLOCKSENDINPUTRESETS = unchecked((int)0x1026);
        public const int SPI_SETBLOCKSENDINPUTRESETS = unchecked((int)0x1027);
        public const int SPI_GETUIEFFECTS = unchecked((int)0x103E);
        public const int SPI_SETUIEFFECTS = unchecked((int)0x103F);
        public const int SPI_GETDISABLEOVERLAPPEDCONTENT = unchecked((int)0x1040);
        public const int SPI_SETDISABLEOVERLAPPEDCONTENT = unchecked((int)0x1041);
        public const int SPI_GETCLIENTAREAANIMATION = unchecked((int)0x1042);
        public const int SPI_SETCLIENTAREAANIMATION = unchecked((int)0x1043);
        public const int SPI_GETCLEARTYPE = unchecked((int)0x1048);
        public const int SPI_SETCLEARTYPE = unchecked((int)0x1049);
        public const int SPI_GETSPEECHRECOGNITION = unchecked((int)0x104A);
        public const int SPI_SETSPEECHRECOGNITION = unchecked((int)0x104B);
        public const int SPI_GETCARETBROWSING = unchecked((int)0x104C);
        public const int SPI_SETCARETBROWSING = unchecked((int)0x104D);
        public const int SPI_GETTHREADLOCALINPUTSETTINGS = unchecked((int)0x104E);
        public const int SPI_SETTHREADLOCALINPUTSETTINGS = unchecked((int)0x104F);
        public const int SPI_GETSYSTEMLANGUAGEBAR = unchecked((int)0x1050);
        public const int SPI_SETSYSTEMLANGUAGEBAR = unchecked((int)0x1051);
        public const int SPI_GETFOREGROUNDLOCKTIMEOUT = unchecked((int)0x2000);
        public const int SPI_SETFOREGROUNDLOCKTIMEOUT = unchecked((int)0x2001);
        public const int SPI_GETACTIVEWNDTRKTIMEOUT = unchecked((int)0x2002);
        public const int SPI_SETACTIVEWNDTRKTIMEOUT = unchecked((int)0x2003);
        public const int SPI_GETFOREGROUNDFLASHCOUNT = unchecked((int)0x2004);
        public const int SPI_SETFOREGROUNDFLASHCOUNT = unchecked((int)0x2005);
        public const int SPI_GETCARETWIDTH = unchecked((int)0x2006);
        public const int SPI_SETCARETWIDTH = unchecked((int)0x2007);
        public const int SPI_GETMOUSECLICKLOCKTIME = unchecked((int)0x2008);
        public const int SPI_SETMOUSECLICKLOCKTIME = unchecked((int)0x2009);
        public const int SPI_GETFONTSMOOTHINGTYPE = unchecked((int)0x200A);
        public const int SPI_SETFONTSMOOTHINGTYPE = unchecked((int)0x200B);
        public const int FE_FONTSMOOTHINGSTANDARD = unchecked((int)0x0001);
        public const int FE_FONTSMOOTHINGCLEARTYPE = unchecked((int)0x0002);
        public const int SPI_GETFONTSMOOTHINGCONTRAST = unchecked((int)0x200C);
        public const int SPI_SETFONTSMOOTHINGCONTRAST = unchecked((int)0x200D);
        public const int SPI_GETFOCUSBORDERWIDTH = unchecked((int)0x200E);
        public const int SPI_SETFOCUSBORDERWIDTH = unchecked((int)0x200F);
        public const int SPI_GETFOCUSBORDERHEIGHT = unchecked((int)0x2010);
        public const int SPI_SETFOCUSBORDERHEIGHT = unchecked((int)0x2011);
        public const int SPI_GETFONTSMOOTHINGORIENTATION = unchecked((int)0x2012);
        public const int SPI_SETFONTSMOOTHINGORIENTATION = unchecked((int)0x2013);
        public const int FE_FONTSMOOTHINGORIENTATIONBGR = unchecked((int)0x0000);
        public const int FE_FONTSMOOTHINGORIENTATIONRGB = unchecked((int)0x0001);
        public const int SPI_GETMINIMUMHITRADIUS = unchecked((int)0x2014);
        public const int SPI_SETMINIMUMHITRADIUS = unchecked((int)0x2015);
        public const int SPI_GETMESSAGEDURATION = unchecked((int)0x2016);
        public const int SPI_SETMESSAGEDURATION = unchecked((int)0x2017);
        public const int SPI_GETCONTACTVISUALIZATION = unchecked((int)0x2018);
        public const int SPI_SETCONTACTVISUALIZATION = unchecked((int)0x2019);
        public const int CONTACTVISUALIZATION_OFF = unchecked((int)0x0000);
        public const int CONTACTVISUALIZATION_ON = unchecked((int)0x0001);
        public const int CONTACTVISUALIZATION_PRESENTATIONMODE = unchecked((int)0x0002);
        public const int SPI_GETGESTUREVISUALIZATION = unchecked((int)0x201A);
        public const int SPI_SETGESTUREVISUALIZATION = unchecked((int)0x201B);
        public const int GESTUREVISUALIZATION_OFF = unchecked((int)0x0000);
        public const int GESTUREVISUALIZATION_ON = unchecked((int)0x001F);
        public const int GESTUREVISUALIZATION_TAP = unchecked((int)0x0001);
        public const int GESTUREVISUALIZATION_DOUBLETAP = unchecked((int)0x0002);
        public const int GESTUREVISUALIZATION_PRESSANDTAP = unchecked((int)0x0004);
        public const int GESTUREVISUALIZATION_PRESSANDHOLD = unchecked((int)0x0008);
        public const int GESTUREVISUALIZATION_RIGHTTAP = unchecked((int)0x0010);
        public const int SPI_GETMOUSEWHEELROUTING = unchecked((int)0x201C);
        public const int SPI_SETMOUSEWHEELROUTING = unchecked((int)0x201D);
        public const int MOUSEWHEEL_ROUTING_FOCUS = 0;
        public const int MOUSEWHEEL_ROUTING_HYBRID = 1;
        public const int MOUSEWHEEL_ROUTING_MOUSE_POS = 2;
        public const int SPI_GETPENVISUALIZATION = unchecked((int)0x201E);
        public const int SPI_SETPENVISUALIZATION = unchecked((int)0x201F);
        public const int PENVISUALIZATION_ON = unchecked((int)0x0023);
        public const int PENVISUALIZATION_OFF = unchecked((int)0x0000);
        public const int PENVISUALIZATION_TAP = unchecked((int)0x0001);
        public const int PENVISUALIZATION_DOUBLETAP = unchecked((int)0x0002);
        public const int PENVISUALIZATION_CURSOR = unchecked((int)0x0020);
        public const int SPI_GETPENARBITRATIONTYPE = unchecked((int)0x2020);
        public const int SPI_SETPENARBITRATIONTYPE = unchecked((int)0x2021);
        public const int PENARBITRATIONTYPE_NONE = unchecked((int)0x0000);
        public const int PENARBITRATIONTYPE_WIN8 = unchecked((int)0x0001);
        public const int PENARBITRATIONTYPE_FIS = unchecked((int)0x0002);
        public const int PENARBITRATIONTYPE_SPT = unchecked((int)0x0003);
        public const int PENARBITRATIONTYPE_MAX = unchecked((int)0x0004);
        public const int SPI_GETCARETTIMEOUT = unchecked((int)0x2022);
        public const int SPI_SETCARETTIMEOUT = unchecked((int)0x2023);
        public const int SPI_GETHANDEDNESS = unchecked((int)0x2024);
        public const int SPI_SETHANDEDNESS = unchecked((int)0x2025);
        public const int SPIF_UPDATEINIFILE = unchecked((int)0x0001);
        public const int SPIF_SENDWININICHANGE = unchecked((int)0x0002);
        // unknown type: SPIF_SENDCHANGE SPIF_SENDWININICHANGE
        public const int METRICS_USEDEFAULT = - 1;
        public const int ARW_BOTTOMLEFT = unchecked((int)0x0000);
        public const int ARW_BOTTOMRIGHT = unchecked((int)0x0001);
        public const int ARW_TOPLEFT = unchecked((int)0x0002);
        public const int ARW_TOPRIGHT = unchecked((int)0x0003);
        public const int ARW_STARTMASK = unchecked((int)0x0003);
        public const int ARW_STARTRIGHT = unchecked((int)0x0001);
        public const int ARW_STARTTOP = unchecked((int)0x0002);
        public const int ARW_LEFT = unchecked((int)0x0000);
        public const int ARW_RIGHT = unchecked((int)0x0000);
        public const int ARW_UP = unchecked((int)0x0004);
        public const int ARW_DOWN = unchecked((int)0x0004);
        public const int ARW_HIDE = unchecked((int)0x0008);
        public const int SERKF_SERIALKEYSON = unchecked((int)0x00000001);
        public const int SERKF_AVAILABLE = unchecked((int)0x00000002);
        public const int SERKF_INDICATOR = unchecked((int)0x00000004);
        public const int HCF_HIGHCONTRASTON = unchecked((int)0x00000001);
        public const int HCF_AVAILABLE = unchecked((int)0x00000002);
        public const int HCF_HOTKEYACTIVE = unchecked((int)0x00000004);
        public const int HCF_CONFIRMHOTKEY = unchecked((int)0x00000008);
        public const int HCF_HOTKEYSOUND = unchecked((int)0x00000010);
        public const int HCF_INDICATOR = unchecked((int)0x00000020);
        public const int HCF_HOTKEYAVAILABLE = unchecked((int)0x00000040);
        public const int HCF_LOGONDESKTOP = unchecked((int)0x00000100);
        public const int HCF_DEFAULTDESKTOP = unchecked((int)0x00000200);
        public const int CDS_UPDATEREGISTRY = unchecked((int)0x00000001);
        public const int CDS_TEST = unchecked((int)0x00000002);
        public const int CDS_FULLSCREEN = unchecked((int)0x00000004);
        public const int CDS_GLOBAL = unchecked((int)0x00000008);
        public const int CDS_SET_PRIMARY = unchecked((int)0x00000010);
        public const int CDS_VIDEOPARAMETERS = unchecked((int)0x00000020);
        public const int CDS_ENABLE_UNSAFE_MODES = unchecked((int)0x00000100);
        public const int CDS_DISABLE_UNSAFE_MODES = unchecked((int)0x00000200);
        public const int CDS_RESET = unchecked((int)0x40000000);
        public const int CDS_RESET_EX = unchecked((int)0x20000000);
        public const int CDS_NORESET = unchecked((int)0x10000000);
        public const int DISP_CHANGE_SUCCESSFUL = 0;
        public const int DISP_CHANGE_RESTART = 1;
        public const int DISP_CHANGE_FAILED = - 1;
        public const int DISP_CHANGE_BADMODE = - 2;
        public const int DISP_CHANGE_NOTUPDATED = - 3;
        public const int DISP_CHANGE_BADFLAGS = - 4;
        public const int DISP_CHANGE_BADPARAM = - 5;
        public const int DISP_CHANGE_BADDUALVIEW = - 6;
        // unknown type: ChangeDisplaySettings ChangeDisplaySettingsW
        // unknown type: ChangeDisplaySettingsEx ChangeDisplaySettingsExW
        public const int ENUM_CURRENT_SETTINGS = (  - 1 );
        public const int ENUM_REGISTRY_SETTINGS = (  - 2 );
        // unknown type: EnumDisplaySettings EnumDisplaySettingsW
        // unknown type: EnumDisplaySettingsEx EnumDisplaySettingsExW
        public const int EDS_RAWMODE = unchecked((int)0x00000002);
        public const int EDS_ROTATEDMODE = unchecked((int)0x00000004);
        // unknown type: EnumDisplayDevices EnumDisplayDevicesW
        public const int EDD_GET_DEVICE_INTERFACE_NAME = unchecked((int)0x00000001);
        // unknown type: SystemParametersInfo SystemParametersInfoW
        public const int FKF_FILTERKEYSON = unchecked((int)0x00000001);
        public const int FKF_AVAILABLE = unchecked((int)0x00000002);
        public const int FKF_HOTKEYACTIVE = unchecked((int)0x00000004);
        public const int FKF_CONFIRMHOTKEY = unchecked((int)0x00000008);
        public const int FKF_HOTKEYSOUND = unchecked((int)0x00000010);
        public const int FKF_INDICATOR = unchecked((int)0x00000020);
        public const int FKF_CLICKON = unchecked((int)0x00000040);
        public const int SKF_STICKYKEYSON = unchecked((int)0x00000001);
        public const int SKF_AVAILABLE = unchecked((int)0x00000002);
        public const int SKF_HOTKEYACTIVE = unchecked((int)0x00000004);
        public const int SKF_CONFIRMHOTKEY = unchecked((int)0x00000008);
        public const int SKF_HOTKEYSOUND = unchecked((int)0x00000010);
        public const int SKF_INDICATOR = unchecked((int)0x00000020);
        public const int SKF_AUDIBLEFEEDBACK = unchecked((int)0x00000040);
        public const int SKF_TRISTATE = unchecked((int)0x00000080);
        public const int SKF_TWOKEYSOFF = unchecked((int)0x00000100);
        public const int SKF_LALTLATCHED = unchecked((int)0x10000000);
        public const int SKF_LCTLLATCHED = unchecked((int)0x04000000);
        public const int SKF_LSHIFTLATCHED = unchecked((int)0x01000000);
        public const int SKF_RALTLATCHED = unchecked((int)0x20000000);
        public const int SKF_RCTLLATCHED = unchecked((int)0x08000000);
        public const int SKF_RSHIFTLATCHED = unchecked((int)0x02000000);
        public const int SKF_LWINLATCHED = unchecked((int)0x40000000);
        public const int SKF_RWINLATCHED = unchecked((int)0x80000000);
        public const int SKF_LALTLOCKED = unchecked((int)0x00100000);
        public const int SKF_LCTLLOCKED = unchecked((int)0x00040000);
        public const int SKF_LSHIFTLOCKED = unchecked((int)0x00010000);
        public const int SKF_RALTLOCKED = unchecked((int)0x00200000);
        public const int SKF_RCTLLOCKED = unchecked((int)0x00080000);
        public const int SKF_RSHIFTLOCKED = unchecked((int)0x00020000);
        public const int SKF_LWINLOCKED = unchecked((int)0x00400000);
        public const int SKF_RWINLOCKED = unchecked((int)0x00800000);
        public const int MKF_MOUSEKEYSON = unchecked((int)0x00000001);
        public const int MKF_AVAILABLE = unchecked((int)0x00000002);
        public const int MKF_HOTKEYACTIVE = unchecked((int)0x00000004);
        public const int MKF_CONFIRMHOTKEY = unchecked((int)0x00000008);
        public const int MKF_HOTKEYSOUND = unchecked((int)0x00000010);
        public const int MKF_INDICATOR = unchecked((int)0x00000020);
        public const int MKF_MODIFIERS = unchecked((int)0x00000040);
        public const int MKF_REPLACENUMBERS = unchecked((int)0x00000080);
        public const int MKF_LEFTBUTTONSEL = unchecked((int)0x10000000);
        public const int MKF_RIGHTBUTTONSEL = unchecked((int)0x20000000);
        public const int MKF_LEFTBUTTONDOWN = unchecked((int)0x01000000);
        public const int MKF_RIGHTBUTTONDOWN = unchecked((int)0x02000000);
        public const int MKF_MOUSEMODE = unchecked((int)0x80000000);
        public const int ATF_TIMEOUTON = unchecked((int)0x00000001);
        public const int ATF_ONOFFFEEDBACK = unchecked((int)0x00000002);
        public const int SSGF_NONE = 0;
        public const int SSGF_DISPLAY = 3;
        public const int SSTF_NONE = 0;
        public const int SSTF_CHARS = 1;
        public const int SSTF_BORDER = 2;
        public const int SSTF_DISPLAY = 3;
        public const int SSWF_NONE = 0;
        public const int SSWF_TITLE = 1;
        public const int SSWF_WINDOW = 2;
        public const int SSWF_DISPLAY = 3;
        public const int SSWF_CUSTOM = 4;
        public const int SSF_SOUNDSENTRYON = unchecked((int)0x00000001);
        public const int SSF_AVAILABLE = unchecked((int)0x00000002);
        public const int SSF_INDICATOR = unchecked((int)0x00000004);
        public const int TKF_TOGGLEKEYSON = unchecked((int)0x00000001);
        public const int TKF_AVAILABLE = unchecked((int)0x00000002);
        public const int TKF_HOTKEYACTIVE = unchecked((int)0x00000004);
        public const int TKF_CONFIRMHOTKEY = unchecked((int)0x00000008);
        public const int TKF_HOTKEYSOUND = unchecked((int)0x00000010);
        public const int TKF_INDICATOR = unchecked((int)0x00000020);
        public const int SLE_ERROR = unchecked((int)0x00000001);
        public const int SLE_MINORERROR = unchecked((int)0x00000002);
        public const int SLE_WARNING = unchecked((int)0x00000003);
        public const int MONITOR_DEFAULTTONULL = unchecked((int)0x00000000);
        public const int MONITOR_DEFAULTTOPRIMARY = unchecked((int)0x00000001);
        public const int MONITOR_DEFAULTTONEAREST = unchecked((int)0x00000002);
        public const int MONITORINFOF_PRIMARY = unchecked((int)0x00000001);
        // unknown type: GetMonitorInfo GetMonitorInfoW
        public const int WINEVENT_OUTOFCONTEXT = unchecked((int)0x0000);
        public const int WINEVENT_SKIPOWNTHREAD = unchecked((int)0x0001);
        public const int WINEVENT_SKIPOWNPROCESS = unchecked((int)0x0002);
        public const int WINEVENT_INCONTEXT = unchecked((int)0x0004);
        public const int CHILDID_SELF = 0;
        public const int INDEXID_OBJECT = 0;
        public const int INDEXID_CONTAINER = 0;
        public const int OBJID_WINDOW = unchecked((int)0x00000000);
        public const int OBJID_SYSMENU = unchecked((int)0xFFFFFFFF);
        public const int OBJID_TITLEBAR = unchecked((int)0xFFFFFFFE);
        public const int OBJID_MENU = unchecked((int)0xFFFFFFFD);
        public const int OBJID_CLIENT = unchecked((int)0xFFFFFFFC);
        public const int OBJID_VSCROLL = unchecked((int)0xFFFFFFFB);
        public const int OBJID_HSCROLL = unchecked((int)0xFFFFFFFA);
        public const int OBJID_SIZEGRIP = unchecked((int)0xFFFFFFF9);
        public const int OBJID_CARET = unchecked((int)0xFFFFFFF8);
        public const int OBJID_CURSOR = unchecked((int)0xFFFFFFF7);
        public const int OBJID_ALERT = unchecked((int)0xFFFFFFF6);
        public const int OBJID_SOUND = unchecked((int)0xFFFFFFF5);
        public const int OBJID_QUERYCLASSNAMEIDX = unchecked((int)0xFFFFFFF4);
        public const int OBJID_NATIVEOM = unchecked((int)0xFFFFFFF0);
        public const int EVENT_MIN = unchecked((int)0x00000001);
        public const int EVENT_MAX = unchecked((int)0x7FFFFFFF);
        public const int EVENT_SYSTEM_SOUND = unchecked((int)0x0001);
        public const int EVENT_SYSTEM_ALERT = unchecked((int)0x0002);
        public const int EVENT_SYSTEM_FOREGROUND = unchecked((int)0x0003);
        public const int EVENT_SYSTEM_MENUSTART = unchecked((int)0x0004);
        public const int EVENT_SYSTEM_MENUEND = unchecked((int)0x0005);
        public const int EVENT_SYSTEM_MENUPOPUPSTART = unchecked((int)0x0006);
        public const int EVENT_SYSTEM_MENUPOPUPEND = unchecked((int)0x0007);
        public const int EVENT_SYSTEM_CAPTURESTART = unchecked((int)0x0008);
        public const int EVENT_SYSTEM_CAPTUREEND = unchecked((int)0x0009);
        public const int EVENT_SYSTEM_MOVESIZESTART = unchecked((int)0x000A);
        public const int EVENT_SYSTEM_MOVESIZEEND = unchecked((int)0x000B);
        public const int EVENT_SYSTEM_CONTEXTHELPSTART = unchecked((int)0x000C);
        public const int EVENT_SYSTEM_CONTEXTHELPEND = unchecked((int)0x000D);
        public const int EVENT_SYSTEM_DRAGDROPSTART = unchecked((int)0x000E);
        public const int EVENT_SYSTEM_DRAGDROPEND = unchecked((int)0x000F);
        public const int EVENT_SYSTEM_DIALOGSTART = unchecked((int)0x0010);
        public const int EVENT_SYSTEM_DIALOGEND = unchecked((int)0x0011);
        public const int EVENT_SYSTEM_SCROLLINGSTART = unchecked((int)0x0012);
        public const int EVENT_SYSTEM_SCROLLINGEND = unchecked((int)0x0013);
        public const int EVENT_SYSTEM_SWITCHSTART = unchecked((int)0x0014);
        public const int EVENT_SYSTEM_SWITCHEND = unchecked((int)0x0015);
        public const int EVENT_SYSTEM_MINIMIZESTART = unchecked((int)0x0016);
        public const int EVENT_SYSTEM_MINIMIZEEND = unchecked((int)0x0017);
        public const int EVENT_SYSTEM_DESKTOPSWITCH = unchecked((int)0x0020);
        public const int EVENT_SYSTEM_SWITCHER_APPGRABBED = unchecked((int)0x0024);
        public const int EVENT_SYSTEM_SWITCHER_APPOVERTARGET = unchecked((int)0x0025);
        public const int EVENT_SYSTEM_SWITCHER_APPDROPPED = unchecked((int)0x0026);
        public const int EVENT_SYSTEM_SWITCHER_CANCELLED = unchecked((int)0x0027);
        public const int EVENT_SYSTEM_IME_KEY_NOTIFICATION = unchecked((int)0x0029);
        public const int EVENT_SYSTEM_END = unchecked((int)0x00FF);
        public const int EVENT_OEM_DEFINED_START = unchecked((int)0x0101);
        public const int EVENT_OEM_DEFINED_END = unchecked((int)0x01FF);
        public const int EVENT_UIA_EVENTID_START = unchecked((int)0x4E00);
        public const int EVENT_UIA_EVENTID_END = unchecked((int)0x4EFF);
        public const int EVENT_UIA_PROPID_START = unchecked((int)0x7500);
        public const int EVENT_UIA_PROPID_END = unchecked((int)0x75FF);
        public const int EVENT_CONSOLE_CARET = unchecked((int)0x4001);
        public const int EVENT_CONSOLE_UPDATE_REGION = unchecked((int)0x4002);
        public const int EVENT_CONSOLE_UPDATE_SIMPLE = unchecked((int)0x4003);
        public const int EVENT_CONSOLE_UPDATE_SCROLL = unchecked((int)0x4004);
        public const int EVENT_CONSOLE_LAYOUT = unchecked((int)0x4005);
        public const int EVENT_CONSOLE_START_APPLICATION = unchecked((int)0x4006);
        public const int EVENT_CONSOLE_END_APPLICATION = unchecked((int)0x4007);
        public const int CONSOLE_APPLICATION_16BIT = unchecked((int)0x0000);
        public const int CONSOLE_CARET_SELECTION = unchecked((int)0x0001);
        public const int CONSOLE_CARET_VISIBLE = unchecked((int)0x0002);
        public const int EVENT_CONSOLE_END = unchecked((int)0x40FF);
        public const int EVENT_OBJECT_CREATE = unchecked((int)0x8000);
        public const int EVENT_OBJECT_DESTROY = unchecked((int)0x8001);
        public const int EVENT_OBJECT_SHOW = unchecked((int)0x8002);
        public const int EVENT_OBJECT_HIDE = unchecked((int)0x8003);
        public const int EVENT_OBJECT_REORDER = unchecked((int)0x8004);
        public const int EVENT_OBJECT_FOCUS = unchecked((int)0x8005);
        public const int EVENT_OBJECT_SELECTION = unchecked((int)0x8006);
        public const int EVENT_OBJECT_SELECTIONADD = unchecked((int)0x8007);
        public const int EVENT_OBJECT_SELECTIONREMOVE = unchecked((int)0x8008);
        public const int EVENT_OBJECT_SELECTIONWITHIN = unchecked((int)0x8009);
        public const int EVENT_OBJECT_STATECHANGE = unchecked((int)0x800A);
        public const int EVENT_OBJECT_LOCATIONCHANGE = unchecked((int)0x800B);
        public const int EVENT_OBJECT_NAMECHANGE = unchecked((int)0x800C);
        public const int EVENT_OBJECT_DESCRIPTIONCHANGE = unchecked((int)0x800D);
        public const int EVENT_OBJECT_VALUECHANGE = unchecked((int)0x800E);
        public const int EVENT_OBJECT_PARENTCHANGE = unchecked((int)0x800F);
        public const int EVENT_OBJECT_HELPCHANGE = unchecked((int)0x8010);
        public const int EVENT_OBJECT_DEFACTIONCHANGE = unchecked((int)0x8011);
        public const int EVENT_OBJECT_ACCELERATORCHANGE = unchecked((int)0x8012);
        public const int EVENT_OBJECT_INVOKED = unchecked((int)0x8013);
        public const int EVENT_OBJECT_TEXTSELECTIONCHANGED = unchecked((int)0x8014);
        public const int EVENT_OBJECT_CONTENTSCROLLED = unchecked((int)0x8015);
        public const int EVENT_SYSTEM_ARRANGMENTPREVIEW = unchecked((int)0x8016);
        public const int EVENT_OBJECT_CLOAKED = unchecked((int)0x8017);
        public const int EVENT_OBJECT_UNCLOAKED = unchecked((int)0x8018);
        public const int EVENT_OBJECT_LIVEREGIONCHANGED = unchecked((int)0x8019);
        public const int EVENT_OBJECT_HOSTEDOBJECTSINVALIDATED = unchecked((int)0x8020);
        public const int EVENT_OBJECT_DRAGSTART = unchecked((int)0x8021);
        public const int EVENT_OBJECT_DRAGCANCEL = unchecked((int)0x8022);
        public const int EVENT_OBJECT_DRAGCOMPLETE = unchecked((int)0x8023);
        public const int EVENT_OBJECT_DRAGENTER = unchecked((int)0x8024);
        public const int EVENT_OBJECT_DRAGLEAVE = unchecked((int)0x8025);
        public const int EVENT_OBJECT_DRAGDROPPED = unchecked((int)0x8026);
        public const int EVENT_OBJECT_IME_SHOW = unchecked((int)0x8027);
        public const int EVENT_OBJECT_IME_HIDE = unchecked((int)0x8028);
        public const int EVENT_OBJECT_IME_CHANGE = unchecked((int)0x8029);
        public const int EVENT_OBJECT_TEXTEDIT_CONVERSIONTARGETCHANGED = unchecked((int)0x8030);
        public const int EVENT_OBJECT_END = unchecked((int)0x80FF);
        public const int EVENT_AIA_START = unchecked((int)0xA000);
        public const int EVENT_AIA_END = unchecked((int)0xAFFF);
        public const int SOUND_SYSTEM_STARTUP = 1;
        public const int SOUND_SYSTEM_SHUTDOWN = 2;
        public const int SOUND_SYSTEM_BEEP = 3;
        public const int SOUND_SYSTEM_ERROR = 4;
        public const int SOUND_SYSTEM_QUESTION = 5;
        public const int SOUND_SYSTEM_WARNING = 6;
        public const int SOUND_SYSTEM_INFORMATION = 7;
        public const int SOUND_SYSTEM_MAXIMIZE = 8;
        public const int SOUND_SYSTEM_MINIMIZE = 9;
        public const int SOUND_SYSTEM_RESTOREUP = 10;
        public const int SOUND_SYSTEM_RESTOREDOWN = 11;
        public const int SOUND_SYSTEM_APPSTART = 12;
        public const int SOUND_SYSTEM_FAULT = 13;
        public const int SOUND_SYSTEM_APPEND = 14;
        public const int SOUND_SYSTEM_MENUCOMMAND = 15;
        public const int SOUND_SYSTEM_MENUPOPUP = 16;
        public const int CSOUND_SYSTEM = 16;
        public const int ALERT_SYSTEM_INFORMATIONAL = 1;
        public const int ALERT_SYSTEM_WARNING = 2;
        public const int ALERT_SYSTEM_ERROR = 3;
        public const int ALERT_SYSTEM_QUERY = 4;
        public const int ALERT_SYSTEM_CRITICAL = 5;
        public const int CALERT_SYSTEM = 6;
        public const int GUI_CARETBLINKING = unchecked((int)0x00000001);
        public const int GUI_INMOVESIZE = unchecked((int)0x00000002);
        public const int GUI_INMENUMODE = unchecked((int)0x00000004);
        public const int GUI_SYSTEMMENUMODE = unchecked((int)0x00000008);
        public const int GUI_POPUPMENUMODE = unchecked((int)0x00000010);
        public const int GUI_16BITTASK = unchecked((int)0x00000000);
        public const int USER_DEFAULT_SCREEN_DPI = 96;
        // unknown type: GetWindowModuleFileName GetWindowModuleFileNameW
        public const int STATE_SYSTEM_UNAVAILABLE = unchecked((int)0x00000001);
        public const int STATE_SYSTEM_SELECTED = unchecked((int)0x00000002);
        public const int STATE_SYSTEM_FOCUSED = unchecked((int)0x00000004);
        public const int STATE_SYSTEM_PRESSED = unchecked((int)0x00000008);
        public const int STATE_SYSTEM_CHECKED = unchecked((int)0x00000010);
        public const int STATE_SYSTEM_MIXED = unchecked((int)0x00000020);
        // unknown type: STATE_SYSTEM_INDETERMINATE STATE_SYSTEM_MIXED
        public const int STATE_SYSTEM_READONLY = unchecked((int)0x00000040);
        public const int STATE_SYSTEM_HOTTRACKED = unchecked((int)0x00000080);
        public const int STATE_SYSTEM_DEFAULT = unchecked((int)0x00000100);
        public const int STATE_SYSTEM_EXPANDED = unchecked((int)0x00000200);
        public const int STATE_SYSTEM_COLLAPSED = unchecked((int)0x00000400);
        public const int STATE_SYSTEM_BUSY = unchecked((int)0x00000800);
        public const int STATE_SYSTEM_FLOATING = unchecked((int)0x00001000);
        public const int STATE_SYSTEM_MARQUEED = unchecked((int)0x00002000);
        public const int STATE_SYSTEM_ANIMATED = unchecked((int)0x00004000);
        public const int STATE_SYSTEM_INVISIBLE = unchecked((int)0x00008000);
        public const int STATE_SYSTEM_OFFSCREEN = unchecked((int)0x00010000);
        public const int STATE_SYSTEM_SIZEABLE = unchecked((int)0x00020000);
        public const int STATE_SYSTEM_MOVEABLE = unchecked((int)0x00040000);
        public const int STATE_SYSTEM_SELFVOICING = unchecked((int)0x00080000);
        public const int STATE_SYSTEM_FOCUSABLE = unchecked((int)0x00100000);
        public const int STATE_SYSTEM_SELECTABLE = unchecked((int)0x00200000);
        public const int STATE_SYSTEM_LINKED = unchecked((int)0x00400000);
        public const int STATE_SYSTEM_TRAVERSED = unchecked((int)0x00800000);
        public const int STATE_SYSTEM_MULTISELECTABLE = unchecked((int)0x01000000);
        public const int STATE_SYSTEM_EXTSELECTABLE = unchecked((int)0x02000000);
        public const int STATE_SYSTEM_ALERT_LOW = unchecked((int)0x04000000);
        public const int STATE_SYSTEM_ALERT_MEDIUM = unchecked((int)0x08000000);
        public const int STATE_SYSTEM_ALERT_HIGH = unchecked((int)0x10000000);
        public const int STATE_SYSTEM_PROTECTED = unchecked((int)0x20000000);
        public const int STATE_SYSTEM_VALID = unchecked((int)0x3FFFFFFF);
        public const int CCHILDREN_TITLEBAR = 5;
        public const int CCHILDREN_SCROLLBAR = 5;
        public const int CURSOR_SHOWING = unchecked((int)0x00000001);
        public const int CURSOR_SUPPRESSED = unchecked((int)0x00000002);
        public const int GA_PARENT = 1;
        public const int GA_ROOT = 2;
        public const int GA_ROOTOWNER = 3;
        // unknown type: RealGetWindowClass RealGetWindowClassW
        // unknown type: GetAltTabInfo GetAltTabInfoW
        // macro function: GET_RAWINPUT_CODE_WPARAM ( wParam ) ( ( wParam ) & 0xff )
        public const int RIM_INPUT = 0;
        public const int RIM_INPUTSINK = 1;
        public const int RIM_TYPEMOUSE = 0;
        public const int RIM_TYPEKEYBOARD = 1;
        public const int RIM_TYPEHID = 2;
        public const int RIM_TYPEMAX = 2;
        public const int RI_MOUSE_LEFT_BUTTON_DOWN = unchecked((int)0x0001);
        public const int RI_MOUSE_LEFT_BUTTON_UP = unchecked((int)0x0002);
        public const int RI_MOUSE_RIGHT_BUTTON_DOWN = unchecked((int)0x0004);
        public const int RI_MOUSE_RIGHT_BUTTON_UP = unchecked((int)0x0008);
        public const int RI_MOUSE_MIDDLE_BUTTON_DOWN = unchecked((int)0x0010);
        public const int RI_MOUSE_MIDDLE_BUTTON_UP = unchecked((int)0x0020);
        // unknown type: RI_MOUSE_BUTTON_1_DOWN RI_MOUSE_LEFT_BUTTON_DOWN
        // unknown type: RI_MOUSE_BUTTON_1_UP RI_MOUSE_LEFT_BUTTON_UP
        // unknown type: RI_MOUSE_BUTTON_2_DOWN RI_MOUSE_RIGHT_BUTTON_DOWN
        // unknown type: RI_MOUSE_BUTTON_2_UP RI_MOUSE_RIGHT_BUTTON_UP
        // unknown type: RI_MOUSE_BUTTON_3_DOWN RI_MOUSE_MIDDLE_BUTTON_DOWN
        // unknown type: RI_MOUSE_BUTTON_3_UP RI_MOUSE_MIDDLE_BUTTON_UP
        public const int RI_MOUSE_BUTTON_4_DOWN = unchecked((int)0x0040);
        public const int RI_MOUSE_BUTTON_4_UP = unchecked((int)0x0080);
        public const int RI_MOUSE_BUTTON_5_DOWN = unchecked((int)0x0100);
        public const int RI_MOUSE_BUTTON_5_UP = unchecked((int)0x0200);
        public const int RI_MOUSE_WHEEL = unchecked((int)0x0400);
        public const int RI_MOUSE_HWHEEL = unchecked((int)0x0800);
        public const int MOUSE_MOVE_RELATIVE = 0;
        public const int MOUSE_MOVE_ABSOLUTE = 1;
        public const int MOUSE_VIRTUAL_DESKTOP = unchecked((int)0x02);
        public const int MOUSE_ATTRIBUTES_CHANGED = unchecked((int)0x04);
        public const int MOUSE_MOVE_NOCOALESCE = unchecked((int)0x08);
        public const int KEYBOARD_OVERRUN_MAKE_CODE = unchecked((int)0xFF);
        public const int RI_KEY_MAKE = 0;
        public const int RI_KEY_BREAK = 1;
        public const int RI_KEY_E0 = 2;
        public const int RI_KEY_E1 = 4;
        public const int RI_KEY_TERMSRV_SET_LED = 8;
        public const int RI_KEY_TERMSRV_SHADOW = unchecked((int)0x10);
        // macro function: RAWINPUT_ALIGN ( x ) ( ( ( x ) + sizeof ( QWORD ) - 1 ) & ~ ( sizeof ( QWORD ) - 1 ) )
        // macro function: NEXTRAWINPUTBLOCK ( ptr ) ( ( PRAWINPUT ) RAWINPUT_ALIGN ( ( ULONG_PTR ) ( ( PBYTE ) ( ptr ) + ( ptr ) -> header . dwSize ) ) )
        public const int RID_INPUT = unchecked((int)0x10000003);
        public const int RID_HEADER = unchecked((int)0x10000005);
        public const int RIDI_PREPARSEDDATA = unchecked((int)0x20000005);
        public const int RIDI_DEVICENAME = unchecked((int)0x20000007);
        public const int RIDI_DEVICEINFO = unchecked((int)0x2000000b);
        // unknown type: GetRawInputDeviceInfo GetRawInputDeviceInfoW
        public const int RIDEV_REMOVE = unchecked((int)0x00000001);
        public const int RIDEV_EXCLUDE = unchecked((int)0x00000010);
        public const int RIDEV_PAGEONLY = unchecked((int)0x00000020);
        public const int RIDEV_NOLEGACY = unchecked((int)0x00000030);
        public const int RIDEV_INPUTSINK = unchecked((int)0x00000100);
        public const int RIDEV_CAPTUREMOUSE = unchecked((int)0x00000200);
        public const int RIDEV_NOHOTKEYS = unchecked((int)0x00000200);
        public const int RIDEV_APPKEYS = unchecked((int)0x00000400);
        public const int RIDEV_EXINPUTSINK = unchecked((int)0x00001000);
        public const int RIDEV_DEVNOTIFY = unchecked((int)0x00002000);
        public const int RIDEV_EXMODEMASK = unchecked((int)0x000000F0);
        // macro function: RIDEV_EXMODE ( mode ) ( ( mode ) & RIDEV_EXMODEMASK )
        public const int GIDC_ARRIVAL = 1;
        public const int GIDC_REMOVAL = 2;
        // macro function: GET_DEVICE_CHANGE_WPARAM ( wParam ) ( LOWORD ( wParam ) )
        public const int POINTER_DEVICE_PRODUCT_STRING_MAX = 520;
        public const int PDC_ARRIVAL = unchecked((int)0x001);
        public const int PDC_REMOVAL = unchecked((int)0x002);
        public const int PDC_ORIENTATION_0 = unchecked((int)0x004);
        public const int PDC_ORIENTATION_90 = unchecked((int)0x008);
        public const int PDC_ORIENTATION_180 = unchecked((int)0x010);
        public const int PDC_ORIENTATION_270 = unchecked((int)0x020);
        public const int PDC_MODE_DEFAULT = unchecked((int)0x040);
        public const int PDC_MODE_CENTERED = unchecked((int)0x080);
        public const int PDC_MAPPING_CHANGE = unchecked((int)0x100);
        public const int PDC_RESOLUTION = unchecked((int)0x200);
        public const int PDC_ORIGIN = unchecked((int)0x400);
        public const int PDC_MODE_ASPECTRATIOPRESERVED = unchecked((int)0x800);
        public const int MSGFLT_ADD = 1;
        public const int MSGFLT_REMOVE = 2;
        public const int MSGFLTINFO_NONE = ( 0 );
        public const int MSGFLTINFO_ALREADYALLOWED_FORWND = ( 1 );
        public const int MSGFLTINFO_ALREADYDISALLOWED_FORWND = ( 2 );
        public const int MSGFLTINFO_ALLOWED_HIGHER = ( 3 );
        public const int MSGFLT_RESET = ( 0 );
        public const int MSGFLT_ALLOW = ( 1 );
        public const int MSGFLT_DISALLOW = ( 2 );
        public const int GF_BEGIN = unchecked((int)0x00000001);
        public const int GF_INERTIA = unchecked((int)0x00000002);
        public const int GF_END = unchecked((int)0x00000004);
        public const int GID_BEGIN = 1;
        public const int GID_END = 2;
        public const int GID_ZOOM = 3;
        public const int GID_PAN = 4;
        public const int GID_ROTATE = 5;
        public const int GID_TWOFINGERTAP = 6;
        public const int GID_PRESSANDTAP = 7;
        // unknown type: GID_ROLLOVER GID_PRESSANDTAP
        // macro function: GID_ROTATE_ANGLE_TO_ARGUMENT ( _arg_ ) ( ( USHORT ) ( ( ( ( _arg_ ) + 2.0 * 3.14159265 ) / ( 4.0 * 3.14159265 ) ) * 65535.0 ) )
        // macro function: GID_ROTATE_ANGLE_FROM_ARGUMENT ( _arg_ ) ( ( ( ( double ) ( _arg_ ) / 65535.0 ) * 4.0 * 3.14159265 ) - 2.0 * 3.14159265 )
        public const int GC_ALLGESTURES = unchecked((int)0x00000001);
        public const int GC_ZOOM = unchecked((int)0x00000001);
        public const int GC_PAN = unchecked((int)0x00000001);
        public const int GC_PAN_WITH_SINGLE_FINGER_VERTICALLY = unchecked((int)0x00000002);
        public const int GC_PAN_WITH_SINGLE_FINGER_HORIZONTALLY = unchecked((int)0x00000004);
        public const int GC_PAN_WITH_GUTTER = unchecked((int)0x00000008);
        public const int GC_PAN_WITH_INERTIA = unchecked((int)0x00000010);
        public const int GC_ROTATE = unchecked((int)0x00000001);
        public const int GC_TWOFINGERTAP = unchecked((int)0x00000001);
        public const int GC_PRESSANDTAP = unchecked((int)0x00000001);
        // unknown type: GC_ROLLOVER GC_PRESSANDTAP
        public const int GESTURECONFIGMAXCOUNT = 256;
        public const int GCF_INCLUDE_ANCESTORS = unchecked((int)0x00000001);
        public const int NID_INTEGRATED_TOUCH = unchecked((int)0x00000001);
        public const int NID_EXTERNAL_TOUCH = unchecked((int)0x00000002);
        public const int NID_INTEGRATED_PEN = unchecked((int)0x00000004);
        public const int NID_EXTERNAL_PEN = unchecked((int)0x00000008);
        public const int NID_MULTI_INPUT = unchecked((int)0x00000040);
        public const int NID_READY = unchecked((int)0x00000080);
        public const int MAX_STR_BLOCKREASON = 256;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct tagINPUT__anonymous_532 // 1
    {
        [FieldOffset(0)]
        public tagMOUSEINPUT mi;
        [FieldOffset(0)]
        public tagKEYBDINPUT ki;
        [FieldOffset(0)]
        public tagHARDWAREINPUT hi;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct tagPOINTER_TYPE_INFO__anonymous_571 // 1
    {
        [FieldOffset(0)]
        public tagPOINTER_TOUCH_INFO touchInfo;
        [FieldOffset(0)]
        public tagPOINTER_PEN_INFO penInfo;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct tagINPUT_TRANSFORM__anonymous_619 // 1
    {
       // anonymous struct __param__;
        [FieldOffset(0)]
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=4)]public float[][] m;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagINPUT_TRANSFORM___anonymous_620 // 1
    {
        public float _11;
        public float _12;
        public float _13;
        public float _14;
        public float _21;
        public float _22;
        public float _23;
        public float _24;
        public float _31;
        public float _32;
        public float _33;
        public float _34;
        public float _41;
        public float _42;
        public float _43;
        public float _44;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct tagRAWMOUSE__anonymous_1245 // 1
    {
        [FieldOffset(0)]
        public uint ulButtons;
       // anonymous struct __param__;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagRAWMOUSE___anonymous_1246 // 1
    {
        public ushort usButtonFlags;
        public ushort usButtonData;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct tagRAWINPUT__anonymous_1259 // 2
    {
        [FieldOffset(0)]
        public tagRAWMOUSE mouse;
        [FieldOffset(0)]
        public tagRAWKEYBOARD keyboard;
        [FieldOffset(0)]
        public tagRAWHID hid;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct tagRID_DEVICE_INFO__anonymous_1274 // 1
    {
        [FieldOffset(0)]
        public tagRID_DEVICE_INFO_MOUSE mouse;
        [FieldOffset(0)]
        public tagRID_DEVICE_INFO_KEYBOARD keyboard;
        [FieldOffset(0)]
        public tagRID_DEVICE_INFO_HID hid;
    }
    public delegate long WNDPROC(IntPtr __param__1, uint __param__2, ulong __param__3, long __param__4);
    public delegate long DLGPROC(IntPtr __param__1, uint __param__2, ulong __param__3, long __param__4);
    public delegate void TIMERPROC(IntPtr __param__1, uint __param__2, ulong __param__3, uint __param__4);
    public delegate int GRAYSTRINGPROC(IntPtr __param__1, long __param__2, int __param__3);
    public delegate int WNDENUMPROC(IntPtr __param__1, long __param__2);
    public delegate long HOOKPROC(int code, ulong wParam, long lParam);
    public delegate void SENDASYNCPROC(IntPtr __param__1, uint __param__2, ulong __param__3, long __param__4);
    public delegate int PROPENUMPROCA(IntPtr __param__1, string __param__2, IntPtr __param__3);
    public delegate int PROPENUMPROCW(IntPtr __param__1, ref ushort __param__2, IntPtr __param__3);
    public delegate int PROPENUMPROCEXA(IntPtr __param__1, out sbyte __param__2, IntPtr __param__3, ulong __param__4);
    public delegate int PROPENUMPROCEXW(IntPtr __param__1, out ushort __param__2, IntPtr __param__3, ulong __param__4);
    public delegate int EDITWORDBREAKPROCA(out sbyte lpch, int ichCurrent, int cch, int code);
    public delegate int EDITWORDBREAKPROCW(out ushort lpch, int ichCurrent, int cch, int code);
    public delegate int DRAWSTATEPROC(IntPtr hdc, long lData, ulong wData, int cx, int cy);
    public delegate int NAMEENUMPROCA(out sbyte __param__1, long __param__2);
    public delegate int NAMEENUMPROCW(out ushort __param__1, long __param__2);
    [StructLayout(LayoutKind.Sequential)]
    public struct tagCBT_CREATEWNDA // 2
    {
        public IntPtr lpcs;
        public IntPtr hwndInsertAfter;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagCREATESTRUCTA // 2
    {
        public IntPtr lpCreateParams;
        public IntPtr hInstance;
        public IntPtr hMenu;
        public IntPtr hwndParent;
        public int cy;
        public int cx;
        public int y;
        public int x;
        public int style;
        [MarshalAs(UnmanagedType.LPStr)]public string lpszName;
        [MarshalAs(UnmanagedType.LPStr)]public string lpszClass;
        public uint dwExStyle;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagCBT_CREATEWNDW // 2
    {
        public IntPtr lpcs;
        public IntPtr hwndInsertAfter;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagCREATESTRUCTW // 2
    {
        public IntPtr lpCreateParams;
        public IntPtr hInstance;
        public IntPtr hMenu;
        public IntPtr hwndParent;
        public int cy;
        public int cx;
        public int y;
        public int x;
        public int style;
        [MarshalAs(UnmanagedType.LPWStr)]public string lpszName;
        [MarshalAs(UnmanagedType.LPWStr)]public string lpszClass;
        public uint dwExStyle;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagCBTACTIVATESTRUCT // 2
    {
        public int fMouse;
        public IntPtr hWndActive;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagWTSSESSION_NOTIFICATION // 2
    {
        public uint cbSize;
        public uint dwSessionId;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct SHELLHOOKINFO // 2
    {
        public IntPtr hwnd;
        public tagRECT rc;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagEVENTMSG // 7
    {
        public uint message;
        public uint paramL;
        public uint paramH;
        public uint time;
        public IntPtr hwnd;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagCWPSTRUCT // 4
    {
        public long lParam;
        public ulong wParam;
        public uint message;
        public IntPtr hwnd;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagCWPRETSTRUCT // 4
    {
        public long lResult;
        public long lParam;
        public ulong wParam;
        public uint message;
        public IntPtr hwnd;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagKBDLLHOOKSTRUCT // 3
    {
        public uint vkCode;
        public uint scanCode;
        public uint flags;
        public uint time;
        public ulong dwExtraInfo;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagMSLLHOOKSTRUCT // 3
    {
        public tagPOINT pt;
        public uint mouseData;
        public uint flags;
        public uint time;
        public ulong dwExtraInfo;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagDEBUGHOOKINFO // 4
    {
        public uint idThread;
        public uint idThreadInstaller;
        public long lParam;
        public ulong wParam;
        public int code;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagMOUSEHOOKSTRUCT // 4
    {
        public tagPOINT pt;
        public IntPtr hwnd;
        public uint wHitTestCode;
        public ulong dwExtraInfo;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagMOUSEHOOKSTRUCTEX // 3
    {
        public uint mouseData;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagHARDWAREHOOKSTRUCT // 3
    {
        public IntPtr hwnd;
        public uint message;
        public ulong wParam;
        public long lParam;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagMOUSEMOVEPOINT // 3
    {
        public int x;
        public int y;
        public uint time;
        public ulong dwExtraInfo;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagUSEROBJECTFLAGS // 2
    {
        public int fInherit;
        public int fReserved;
        public uint dwFlags;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagWNDCLASSEXA // 4
    {
        public uint cbSize;
        public uint style;
        public WNDPROC lpfnWndProc;
        public int cbClsExtra;
        public int cbWndExtra;
        public IntPtr hInstance;
        public IntPtr hIcon;
        public IntPtr hCursor;
        public IntPtr hbrBackground;
        [MarshalAs(UnmanagedType.LPStr)]public string lpszMenuName;
        [MarshalAs(UnmanagedType.LPStr)]public string lpszClassName;
        public IntPtr hIconSm;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagWNDCLASSEXW // 4
    {
        public uint cbSize;
        public uint style;
        public WNDPROC lpfnWndProc;
        public int cbClsExtra;
        public int cbWndExtra;
        public IntPtr hInstance;
        public IntPtr hIcon;
        public IntPtr hCursor;
        public IntPtr hbrBackground;
        [MarshalAs(UnmanagedType.LPWStr)]public string lpszMenuName;
        [MarshalAs(UnmanagedType.LPWStr)]public string lpszClassName;
        public IntPtr hIconSm;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagWNDCLASSA // 4
    {
        public uint style;
        public WNDPROC lpfnWndProc;
        public int cbClsExtra;
        public int cbWndExtra;
        public IntPtr hInstance;
        public IntPtr hIcon;
        public IntPtr hCursor;
        public IntPtr hbrBackground;
        [MarshalAs(UnmanagedType.LPStr)]public string lpszMenuName;
        [MarshalAs(UnmanagedType.LPStr)]public string lpszClassName;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagWNDCLASSW // 4
    {
        public uint style;
        public WNDPROC lpfnWndProc;
        public int cbClsExtra;
        public int cbWndExtra;
        public IntPtr hInstance;
        public IntPtr hIcon;
        public IntPtr hCursor;
        public IntPtr hbrBackground;
        [MarshalAs(UnmanagedType.LPWStr)]public string lpszMenuName;
        [MarshalAs(UnmanagedType.LPWStr)]public string lpszClassName;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagMSG // 4
    {
        public IntPtr hwnd;
        public uint message;
        public ulong wParam;
        public long lParam;
        public uint time;
        public tagPOINT pt;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagMINMAXINFO // 3
    {
        public tagPOINT ptReserved;
        public tagPOINT ptMaxSize;
        public tagPOINT ptMaxPosition;
        public tagPOINT ptMinTrackSize;
        public tagPOINT ptMaxTrackSize;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagCOPYDATASTRUCT // 2
    {
        public ulong dwData;
        public uint cbData;
        public IntPtr lpData;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagMDINEXTMENU // 3
    {
        public IntPtr hmenuIn;
        public IntPtr hmenuNext;
        public IntPtr hwndNext;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct POWERBROADCAST_SETTING // 2
    {
        public Guid PowerSetting;
        public uint DataLength;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=1)]public byte[] Data;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagWINDOWPOS // 3
    {
        public IntPtr hwnd;
        public IntPtr hwndInsertAfter;
        public int x;
        public int y;
        public int cx;
        public int cy;
        public uint flags;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagNCCALCSIZE_PARAMS // 2
    {
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=3)]public tagRECT[] rgrc;
        public IntPtr lppos;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagTRACKMOUSEEVENT // 2
    {
        public uint cbSize;
        public uint dwFlags;
        public IntPtr hwndTrack;
        public uint dwHoverTime;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagACCEL // 2
    {
        public byte fVirt;
        public ushort key;
        public ushort cmd;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagPAINTSTRUCT // 4
    {
        public IntPtr hdc;
        public int fErase;
        public tagRECT rcPaint;
        public int fRestore;
        public int fIncUpdate;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=32)]public byte[] rgbReserved;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagWINDOWPLACEMENT // 1
    {
        public uint length;
        public uint flags;
        public uint showCmd;
        public tagPOINT ptMinPosition;
        public tagPOINT ptMaxPosition;
        public tagRECT rcNormalPosition;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagNMHDR // 1
    {
        public IntPtr hwndFrom;
        public ulong idFrom;
        public uint code;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagSTYLESTRUCT // 2
    {
        public uint styleOld;
        public uint styleNew;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagMEASUREITEMSTRUCT // 3
    {
        public uint CtlType;
        public uint CtlID;
        public uint itemID;
        public uint itemWidth;
        public uint itemHeight;
        public ulong itemData;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagDRAWITEMSTRUCT // 3
    {
        public uint CtlType;
        public uint CtlID;
        public uint itemID;
        public uint itemAction;
        public uint itemState;
        public IntPtr hwndItem;
        public IntPtr hDC;
        public tagRECT rcItem;
        public ulong itemData;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagDELETEITEMSTRUCT // 3
    {
        public uint CtlType;
        public uint CtlID;
        public uint itemID;
        public IntPtr hwndItem;
        public ulong itemData;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagCOMPAREITEMSTRUCT // 3
    {
        public uint CtlType;
        public uint CtlID;
        public IntPtr hwndItem;
        public uint itemID1;
        public ulong itemData1;
        public uint itemID2;
        public ulong itemData2;
        public uint dwLocaleId;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct BSMINFO // 2
    {
        public uint cbSize;
        public IntPtr hdesk;
        public IntPtr hwnd;
        public _LUID luid;
    }
    public delegate byte PREGISTERCLASSNAMEW(ref ushort __param__1);
    [StructLayout(LayoutKind.Sequential)]
    public struct tagUPDATELAYEREDWINDOWINFO // 2
    {
        public uint cbSize;
        public IntPtr hdcDst;
        public IntPtr pptDst;
        public IntPtr psize;
        public IntPtr hdcSrc;
        public IntPtr pptSrc;
        public uint crKey;
        public IntPtr pblend;
        public uint dwFlags;
        public IntPtr prcDirty;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct FLASHWINFO // 2
    {
        public uint cbSize;
        public IntPtr hwnd;
        public uint dwFlags;
        public uint uCount;
        public uint dwTimeout;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DLGTEMPLATE // 1
    {
        public uint style;
        public uint dwExtendedStyle;
        public ushort cdit;
        public short x;
        public short y;
        public short cx;
        public short cy;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DLGITEMTEMPLATE // 1
    {
        public uint style;
        public uint dwExtendedStyle;
        public short x;
        public short y;
        public short cx;
        public short cy;
        public ushort id;
    }
    public enum DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS // 1
    {
        _DEFAULT = 0x0,
        _DISABLE_FONT_UPDATE = 0x1,
        _DISABLE_RELAYOUT = 0x2,
    }
    public enum DIALOG_DPI_CHANGE_BEHAVIORS // 1
    {
        _DEFAULT = 0x0,
        _DISABLE_ALL = 0x1,
        _DISABLE_RESIZE = 0x2,
        _DISABLE_CONTROL_RELAYOUT = 0x4,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagMOUSEINPUT // 3
    {
        public int dx;
        public int dy;
        public uint mouseData;
        public uint dwFlags;
        public uint time;
        public ulong dwExtraInfo;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagKEYBDINPUT // 3
    {
        public ushort wVk;
        public ushort wScan;
        public uint dwFlags;
        public uint time;
        public ulong dwExtraInfo;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagHARDWAREINPUT // 3
    {
        public uint uMsg;
        public ushort wParamL;
        public ushort wParamH;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagINPUT // 3
    {
        public uint type;
        public tagINPUT__anonymous_532 __param__2;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct HTOUCHINPUT__ // 1
    {
        public int unused;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagTOUCHINPUT // 2
    {
        public int x;
        public int y;
        public IntPtr hSource;
        public uint dwID;
        public uint dwFlags;
        public uint dwMask;
        public uint dwTime;
        public ulong dwExtraInfo;
        public uint cxContact;
        public uint cyContact;
    }
    public enum tagPOINTER_INPUT_TYPE // 0
    {
        _POINTER = 0x1,
        _TOUCH = 0x2,
        _PEN = 0x3,
        _MOUSE = 0x4,
        _TOUCHPAD = 0x5,
    }
    public enum tagPOINTER_BUTTON_CHANGE_TYPE // 1
    {
        _NONE = 0x0,
        _FIRSTBUTTON_DOWN = 0x1,
        _FIRSTBUTTON_UP = 0x2,
        _SECONDBUTTON_DOWN = 0x3,
        _SECONDBUTTON_UP = 0x4,
        _THIRDBUTTON_DOWN = 0x5,
        _THIRDBUTTON_UP = 0x6,
        _FOURTHBUTTON_DOWN = 0x7,
        _FOURTHBUTTON_UP = 0x8,
        _FIFTHBUTTON_DOWN = 0x9,
        _FIFTHBUTTON_UP = 0xa,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagPOINTER_INFO // 1
    {
        public uint pointerType;
        public uint pointerId;
        public uint frameId;
        public uint pointerFlags;
        public IntPtr sourceDevice;
        public IntPtr hwndTarget;
        public tagPOINT ptPixelLocation;
        public tagPOINT ptHimetricLocation;
        public tagPOINT ptPixelLocationRaw;
        public tagPOINT ptHimetricLocationRaw;
        public uint dwTime;
        public uint historyCount;
        public int InputData;
        public uint dwKeyStates;
        public ulong PerformanceCount;
        public tagPOINTER_BUTTON_CHANGE_TYPE ButtonChangeType;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagPOINTER_TOUCH_INFO // 1
    {
        public tagPOINTER_INFO pointerInfo;
        public uint touchFlags;
        public uint touchMask;
        public tagRECT rcContact;
        public tagRECT rcContactRaw;
        public uint orientation;
        public uint pressure;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagPOINTER_PEN_INFO // 1
    {
        public tagPOINTER_INFO pointerInfo;
        public uint penFlags;
        public uint penMask;
        public uint pressure;
        public uint rotation;
        public int tiltX;
        public int tiltY;
    }
    public enum POINTER_FEEDBACK_MODE // 1
    {
        _DEFAULT = 0x1,
        _INDIRECT = 0x2,
        _NONE = 0x3,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagUSAGE_PROPERTIES // 2
    {
        public ushort level;
        public ushort page;
        public ushort usage;
        public int logicalMinimum;
        public int logicalMaximum;
        public ushort unit;
        public ushort exponent;
        public byte count;
        public int physicalMinimum;
        public int physicalMaximum;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagPOINTER_TYPE_INFO // 2
    {
        public uint type;
        public tagPOINTER_TYPE_INFO__anonymous_571 __param__2;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagINPUT_INJECTION_VALUE // 2
    {
        public ushort page;
        public ushort usage;
        public int value;
        public ushort index;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct HSYNTHETICPOINTERDEVICE__ // 1
    {
        public int unused;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION // 2
    {
        public ushort score;
        public tagPOINT adjustedPoint;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagTOUCH_HIT_TESTING_INPUT // 2
    {
        public uint pointerId;
        public tagPOINT point;
        public tagRECT boundingBox;
        public tagRECT nonOccludedBoundingBox;
        public uint orientation;
    }
    public enum tagFEEDBACK_TYPE // 1
    {
        _TOUCH_CONTACTVISUALIZATION = 0x1,
        _PEN_BARRELVISUALIZATION = 0x2,
        _PEN_TAP = 0x3,
        _PEN_DOUBLETAP = 0x4,
        _PEN_PRESSANDHOLD = 0x5,
        _PEN_RIGHTTAP = 0x6,
        _TOUCH_TAP = 0x7,
        _TOUCH_DOUBLETAP = 0x8,
        _TOUCH_PRESSANDHOLD = 0x9,
        _TOUCH_RIGHTTAP = 0xa,
        _GESTURE_PRESSANDTAP = 0xb,
        _MAX = unchecked((int)0xffffffff),
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagINPUT_TRANSFORM // 1
    {
        public tagINPUT_TRANSFORM__anonymous_619 __param__1;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagLASTINPUTINFO // 2
    {
        public uint cbSize;
        public uint dwTime;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagTPMPARAMS // 1
    {
        public uint cbSize;
        public tagRECT rcExclude;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagMENUINFO // 2
    {
        public uint cbSize;
        public uint fMask;
        public uint dwStyle;
        public uint cyMax;
        public IntPtr hbrBack;
        public uint dwContextHelpID;
        public ulong dwMenuData;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagMENUGETOBJECTINFO // 2
    {
        public uint dwFlags;
        public uint uPos;
        public IntPtr hmenu;
        public IntPtr riid;
        public IntPtr pvObj;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagMENUITEMINFOA // 2
    {
        public uint cbSize;
        public uint fMask;
        public uint fType;
        public uint fState;
        public uint wID;
        public IntPtr hSubMenu;
        public IntPtr hbmpChecked;
        public IntPtr hbmpUnchecked;
        public ulong dwItemData;
        public IntPtr dwTypeData;
        public uint cch;
        public IntPtr hbmpItem;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagMENUITEMINFOW // 2
    {
        public uint cbSize;
        public uint fMask;
        public uint fType;
        public uint fState;
        public uint wID;
        public IntPtr hSubMenu;
        public IntPtr hbmpChecked;
        public IntPtr hbmpUnchecked;
        public ulong dwItemData;
        public IntPtr dwTypeData;
        public uint cch;
        public IntPtr hbmpItem;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagDROPSTRUCT // 3
    {
        public IntPtr hwndSource;
        public IntPtr hwndSink;
        public uint wFmt;
        public ulong dwData;
        public tagPOINT ptDrop;
        public uint dwControlData;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagDRAWTEXTPARAMS // 2
    {
        public uint cbSize;
        public int iTabLength;
        public int iLeftMargin;
        public int iRightMargin;
        public uint uiLengthDrawn;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagHELPINFO // 2
    {
        public uint cbSize;
        public int iContextType;
        public int iCtrlId;
        public IntPtr hItemHandle;
        public ulong dwContextId;
        public tagPOINT MousePos;
    }
    public delegate void MSGBOXCALLBACK(out tagHELPINFO lpHelpInfo);
    [StructLayout(LayoutKind.Sequential)]
    public struct tagMSGBOXPARAMSA // 3
    {
        public uint cbSize;
        public IntPtr hwndOwner;
        public IntPtr hInstance;
        [MarshalAs(UnmanagedType.LPStr)]public string lpszText;
        [MarshalAs(UnmanagedType.LPStr)]public string lpszCaption;
        public uint dwStyle;
        [MarshalAs(UnmanagedType.LPStr)]public string lpszIcon;
        public ulong dwContextHelpId;
        public MSGBOXCALLBACK lpfnMsgBoxCallback;
        public uint dwLanguageId;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagMSGBOXPARAMSW // 3
    {
        public uint cbSize;
        public IntPtr hwndOwner;
        public IntPtr hInstance;
        [MarshalAs(UnmanagedType.LPWStr)]public string lpszText;
        [MarshalAs(UnmanagedType.LPWStr)]public string lpszCaption;
        public uint dwStyle;
        [MarshalAs(UnmanagedType.LPWStr)]public string lpszIcon;
        public ulong dwContextHelpId;
        public MSGBOXCALLBACK lpfnMsgBoxCallback;
        public uint dwLanguageId;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct MENUITEMTEMPLATEHEADER // 2
    {
        public ushort versionNumber;
        public ushort offset;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct MENUITEMTEMPLATE // 2
    {
        public ushort mtOption;
        public ushort mtID;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=1)]public ushort[] mtString;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct _ICONINFO // 1
    {
        public int fIcon;
        public uint xHotspot;
        public uint yHotspot;
        public IntPtr hbmMask;
        public IntPtr hbmColor;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagCURSORSHAPE // 2
    {
        public int xHotSpot;
        public int yHotSpot;
        public int cx;
        public int cy;
        public int cbWidth;
        public byte Planes;
        public byte BitsPixel;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct _ICONINFOEXA // 2
    {
        public uint cbSize;
        public int fIcon;
        public uint xHotspot;
        public uint yHotspot;
        public IntPtr hbmMask;
        public IntPtr hbmColor;
        public ushort wResID;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=260)]public sbyte[] szModName;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=260)]public sbyte[] szResName;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct _ICONINFOEXW // 2
    {
        public uint cbSize;
        public int fIcon;
        public uint xHotspot;
        public uint yHotspot;
        public IntPtr hbmMask;
        public IntPtr hbmColor;
        public ushort wResID;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=260)]public ushort[] szModName;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=260)]public ushort[] szResName;
    }
    public enum EDIT_CONTROL_FEATURE // 1
    {
        _ENTERPRISE_DATA_PROTECTION_PASTE_SUPPORT = 0x0,
        _PASTE_NOTIFICATIONS = 0x1,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagSCROLLINFO // 2
    {
        public uint cbSize;
        public uint fMask;
        public int nMin;
        public int nMax;
        public uint nPage;
        public int nPos;
        public int nTrackPos;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagMDICREATESTRUCTA // 2
    {
        [MarshalAs(UnmanagedType.LPStr)]public string szClass;
        [MarshalAs(UnmanagedType.LPStr)]public string szTitle;
        public IntPtr hOwner;
        public int x;
        public int y;
        public int cx;
        public int cy;
        public uint style;
        public long lParam;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagMDICREATESTRUCTW // 2
    {
        [MarshalAs(UnmanagedType.LPWStr)]public string szClass;
        [MarshalAs(UnmanagedType.LPWStr)]public string szTitle;
        public IntPtr hOwner;
        public int x;
        public int y;
        public int cx;
        public int cy;
        public uint style;
        public long lParam;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagCLIENTCREATESTRUCT // 2
    {
        public IntPtr hWindowMenu;
        public uint idFirstChild;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagMULTIKEYHELPA // 3
    {
        public uint mkSize;
        public sbyte mkKeylist;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=1)]public sbyte[] szKeyphrase;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagMULTIKEYHELPW // 3
    {
        public uint mkSize;
        public ushort mkKeylist;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=1)]public ushort[] szKeyphrase;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagHELPWININFOA // 3
    {
        public int wStructSize;
        public int x;
        public int y;
        public int dx;
        public int dy;
        public int wMax;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=2)]public sbyte[] rgchMember;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagHELPWININFOW // 3
    {
        public int wStructSize;
        public int x;
        public int y;
        public int dx;
        public int dy;
        public int wMax;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=2)]public ushort[] rgchMember;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagTouchPredictionParameters // 2
    {
        public uint cbSize;
        public uint dwLatency;
        public uint dwSampleTime;
        public uint bUseHWTimeStamp;
    }
    public enum tagHANDEDNESS // 2
    {
        _LEFT = 0x0,
        _RIGHT = 0x1,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagNONCLIENTMETRICSA // 3
    {
        public uint cbSize;
        public int iBorderWidth;
        public int iScrollWidth;
        public int iScrollHeight;
        public int iCaptionWidth;
        public int iCaptionHeight;
        public tagLOGFONTA lfCaptionFont;
        public int iSmCaptionWidth;
        public int iSmCaptionHeight;
        public tagLOGFONTA lfSmCaptionFont;
        public int iMenuWidth;
        public int iMenuHeight;
        public tagLOGFONTA lfMenuFont;
        public tagLOGFONTA lfStatusFont;
        public tagLOGFONTA lfMessageFont;
        public int iPaddedBorderWidth;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagNONCLIENTMETRICSW // 3
    {
        public uint cbSize;
        public int iBorderWidth;
        public int iScrollWidth;
        public int iScrollHeight;
        public int iCaptionWidth;
        public int iCaptionHeight;
        public tagLOGFONTW lfCaptionFont;
        public int iSmCaptionWidth;
        public int iSmCaptionHeight;
        public tagLOGFONTW lfSmCaptionFont;
        public int iMenuWidth;
        public int iMenuHeight;
        public tagLOGFONTW lfMenuFont;
        public tagLOGFONTW lfStatusFont;
        public tagLOGFONTW lfMessageFont;
        public int iPaddedBorderWidth;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagMINIMIZEDMETRICS // 3
    {
        public uint cbSize;
        public int iWidth;
        public int iHorzGap;
        public int iVertGap;
        public int iArrange;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagICONMETRICSA // 3
    {
        public uint cbSize;
        public int iHorzSpacing;
        public int iVertSpacing;
        public int iTitleWrap;
        public tagLOGFONTA lfFont;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagICONMETRICSW // 3
    {
        public uint cbSize;
        public int iHorzSpacing;
        public int iVertSpacing;
        public int iTitleWrap;
        public tagLOGFONTW lfFont;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagANIMATIONINFO // 2
    {
        public uint cbSize;
        public int iMinAnimate;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagSERIALKEYSA // 2
    {
        public uint cbSize;
        public uint dwFlags;
        public IntPtr lpszActivePort;
        public IntPtr lpszPort;
        public uint iBaudRate;
        public uint iPortState;
        public uint iActive;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagSERIALKEYSW // 2
    {
        public uint cbSize;
        public uint dwFlags;
        public IntPtr lpszActivePort;
        public IntPtr lpszPort;
        public uint iBaudRate;
        public uint iPortState;
        public uint iActive;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagHIGHCONTRASTA // 2
    {
        public uint cbSize;
        public uint dwFlags;
        public IntPtr lpszDefaultScheme;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagHIGHCONTRASTW // 2
    {
        public uint cbSize;
        public uint dwFlags;
        public IntPtr lpszDefaultScheme;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagFILTERKEYS // 2
    {
        public uint cbSize;
        public uint dwFlags;
        public uint iWaitMSec;
        public uint iDelayMSec;
        public uint iRepeatMSec;
        public uint iBounceMSec;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagSTICKYKEYS // 2
    {
        public uint cbSize;
        public uint dwFlags;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagMOUSEKEYS // 2
    {
        public uint cbSize;
        public uint dwFlags;
        public uint iMaxSpeed;
        public uint iTimeToMaxSpeed;
        public uint iCtrlSpeed;
        public uint dwReserved1;
        public uint dwReserved2;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagACCESSTIMEOUT // 2
    {
        public uint cbSize;
        public uint dwFlags;
        public uint iTimeOutMSec;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagSOUNDSENTRYA // 2
    {
        public uint cbSize;
        public uint dwFlags;
        public uint iFSTextEffect;
        public uint iFSTextEffectMSec;
        public uint iFSTextEffectColorBits;
        public uint iFSGrafEffect;
        public uint iFSGrafEffectMSec;
        public uint iFSGrafEffectColor;
        public uint iWindowsEffect;
        public uint iWindowsEffectMSec;
        public IntPtr lpszWindowsEffectDLL;
        public uint iWindowsEffectOrdinal;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagSOUNDSENTRYW // 2
    {
        public uint cbSize;
        public uint dwFlags;
        public uint iFSTextEffect;
        public uint iFSTextEffectMSec;
        public uint iFSTextEffectColorBits;
        public uint iFSGrafEffect;
        public uint iFSGrafEffectMSec;
        public uint iFSGrafEffectColor;
        public uint iWindowsEffect;
        public uint iWindowsEffectMSec;
        public IntPtr lpszWindowsEffectDLL;
        public uint iWindowsEffectOrdinal;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagTOGGLEKEYS // 2
    {
        public uint cbSize;
        public uint dwFlags;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagAUDIODESCRIPTION // 2
    {
        public uint cbSize;
        public int Enabled;
        public uint Locale;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagMONITORINFO // 4
    {
        public uint cbSize;
        public tagRECT rcMonitor;
        public tagRECT rcWork;
        public uint dwFlags;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagMONITORINFOEXA // 2
    {
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=32)]public sbyte[] szDevice;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagMONITORINFOEXW // 2
    {
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=32)]public ushort[] szDevice;
    }
    public delegate int MONITORENUMPROC(out HMONITOR__ __param__1, IntPtr __param__2, out tagRECT __param__3, long __param__4);
    public delegate void WINEVENTPROC(out HWINEVENTHOOK__ hWinEventHook, uint _event, IntPtr hwnd, int idObject, int idChild, uint idEventThread, uint dwmsEventTime);
    [StructLayout(LayoutKind.Sequential)]
    public struct tagGUITHREADINFO // 3
    {
        public uint cbSize;
        public uint flags;
        public IntPtr hwndActive;
        public IntPtr hwndFocus;
        public IntPtr hwndCapture;
        public IntPtr hwndMenuOwner;
        public IntPtr hwndMoveSize;
        public IntPtr hwndCaret;
        public tagRECT rcCaret;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagCURSORINFO // 3
    {
        public uint cbSize;
        public uint flags;
        public IntPtr hCursor;
        public tagPOINT ptScreenPos;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagWINDOWINFO // 3
    {
        public uint cbSize;
        public tagRECT rcWindow;
        public tagRECT rcClient;
        public uint dwStyle;
        public uint dwExStyle;
        public uint dwWindowStatus;
        public uint cxWindowBorders;
        public uint cyWindowBorders;
        public ushort atomWindowType;
        public ushort wCreatorVersion;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagTITLEBARINFO // 3
    {
        public uint cbSize;
        public tagRECT rcTitleBar;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=6)]public uint[] rgstate;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagTITLEBARINFOEX // 3
    {
        public uint cbSize;
        public tagRECT rcTitleBar;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=6)]public uint[] rgstate;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=6)]public tagRECT[] rgrect;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagMENUBARINFO // 3
    {
        public uint cbSize;
        public tagRECT rcBar;
        public IntPtr hMenu;
        public IntPtr hwndMenu;
        public int fBarFocused;
        public int fFocused;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagSCROLLBARINFO // 3
    {
        public uint cbSize;
        public tagRECT rcScrollBar;
        public int dxyLineButton;
        public int xyThumbTop;
        public int xyThumbBottom;
        public int reserved;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=6)]public uint[] rgstate;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagCOMBOBOXINFO // 3
    {
        public uint cbSize;
        public tagRECT rcItem;
        public tagRECT rcButton;
        public uint stateButton;
        public IntPtr hwndCombo;
        public IntPtr hwndItem;
        public IntPtr hwndList;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagALTTABINFO // 3
    {
        public uint cbSize;
        public int cItems;
        public int cColumns;
        public int cRows;
        public int iColFocus;
        public int iRowFocus;
        public int cxItem;
        public int cyItem;
        public tagPOINT ptStart;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct HRAWINPUT__ // 1
    {
        public int unused;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagRAWINPUTHEADER // 3
    {
        public uint dwType;
        public uint dwSize;
        public IntPtr hDevice;
        public ulong wParam;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagRAWMOUSE // 3
    {
        public ushort usFlags;
        public tagRAWMOUSE__anonymous_1245 __param__2;
        public uint ulRawButtons;
        public int lLastX;
        public int lLastY;
        public uint ulExtraInformation;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagRAWKEYBOARD // 3
    {
        public ushort MakeCode;
        public ushort Flags;
        public ushort Reserved;
        public ushort VKey;
        public uint Message;
        public uint ExtraInformation;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagRAWHID // 3
    {
        public uint dwSizeHid;
        public uint dwCount;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=1)]public byte[] bRawData;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagRAWINPUT // 3
    {
        public tagRAWINPUTHEADER header;
        public tagRAWINPUT__anonymous_1259 __param__2;
        public tagRAWINPUT__anonymous_1259 data;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagRID_DEVICE_INFO_MOUSE // 2
    {
        public uint dwId;
        public uint dwNumberOfButtons;
        public uint dwSampleRate;
        public int fHasHorizontalWheel;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagRID_DEVICE_INFO_KEYBOARD // 2
    {
        public uint dwType;
        public uint dwSubType;
        public uint dwKeyboardMode;
        public uint dwNumberOfFunctionKeys;
        public uint dwNumberOfIndicators;
        public uint dwNumberOfKeysTotal;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagRID_DEVICE_INFO_HID // 2
    {
        public uint dwVendorId;
        public uint dwProductId;
        public uint dwVersionNumber;
        public ushort usUsagePage;
        public ushort usUsage;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagRID_DEVICE_INFO // 3
    {
        public uint cbSize;
        public uint dwType;
        public tagRID_DEVICE_INFO__anonymous_1274 __param__3;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagRAWINPUTDEVICE // 3
    {
        public ushort usUsagePage;
        public ushort usUsage;
        public uint dwFlags;
        public IntPtr hwndTarget;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagRAWINPUTDEVICELIST // 2
    {
        public IntPtr hDevice;
        public uint dwType;
    }
    public enum tagPOINTER_DEVICE_TYPE // 1
    {
        _INTEGRATED_PEN = 0x1,
        _EXTERNAL_PEN = 0x2,
        _TOUCH = 0x3,
        _TOUCH_PAD = 0x4,
        _MAX = unchecked((int)0xffffffff),
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagPOINTER_DEVICE_INFO // 1
    {
        public uint displayOrientation;
        public IntPtr device;
        public tagPOINTER_DEVICE_TYPE pointerDeviceType;
        public IntPtr monitor;
        public uint startingCursorId;
        public ushort maxActiveContacts;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=520)]public ushort[] productString;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagPOINTER_DEVICE_PROPERTY // 1
    {
        public int logicalMin;
        public int logicalMax;
        public int physicalMin;
        public int physicalMax;
        public uint unit;
        public uint unitExponent;
        public ushort usagePageId;
        public ushort usageId;
    }
    public enum tagPOINTER_DEVICE_CURSOR_TYPE // 1
    {
        _UNKNOWN = 0x0,
        _TIP = 0x1,
        _ERASER = 0x2,
        _MAX = unchecked((int)0xffffffff),
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagPOINTER_DEVICE_CURSOR_INFO // 1
    {
        public uint cursorId;
        public tagPOINTER_DEVICE_CURSOR_TYPE cursor;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagCHANGEFILTERSTRUCT // 2
    {
        public uint cbSize;
        public uint ExtStatus;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct HGESTUREINFO__ // 1
    {
        public int unused;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagGESTUREINFO // 2
    {
        public uint cbSize;
        public uint dwFlags;
        public uint dwID;
        public IntPtr hwndTarget;
        public tagPOINTS ptsLocation;
        public uint dwInstanceID;
        public uint dwSequenceID;
        public ulong ullArguments;
        public uint cbExtraArgs;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagGESTURENOTIFYSTRUCT // 2
    {
        public uint cbSize;
        public uint dwFlags;
        public IntPtr hwndTarget;
        public tagPOINTS ptsLocation;
        public uint dwInstanceID;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagGESTURECONFIG // 2
    {
        public uint dwID;
        public uint dwWant;
        public uint dwBlock;
    }
    public enum tagINPUT_MESSAGE_DEVICE_TYPE // 1
    {
        _UNAVAILABLE = 0x0,
        _KEYBOARD = 0x1,
        _MOUSE = 0x2,
        _TOUCH = 0x4,
        _PEN = 0x8,
        _TOUCHPAD = 0x10,
    }
    public enum tagINPUT_MESSAGE_ORIGIN_ID // 1
    {
        _UNAVAILABLE = 0x0,
        _HARDWARE = 0x1,
        _INJECTED = 0x2,
        _SYSTEM = 0x4,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagINPUT_MESSAGE_SOURCE // 1
    {
        public tagINPUT_MESSAGE_DEVICE_TYPE deviceType;
        public tagINPUT_MESSAGE_ORIGIN_ID originId;
    }
    public enum tagAR_STATE // 2
    {
        _ENABLED = 0x0,
        _DISABLED = 0x1,
        _SUPPRESSED = 0x2,
        _REMOTESESSION = 0x4,
        _MULTIMON = 0x8,
        _NOSENSOR = 0x10,
        _NOT_SUPPORTED = 0x20,
        _DOCKED = 0x40,
        _LAPTOP = 0x80,
    }
    public enum ORIENTATION_PREFERENCE // 1
    {
        _NONE = 0x0,
        _LANDSCAPE = 0x1,
        _PORTRAIT = 0x2,
        _LANDSCAPE_FLIPPED = 0x4,
        _PORTRAIT_FLIPPED = 0x8,
    }
    public static class winuser {
        [DllImport("user32.dll")]
        public static extern int wvsprintfA(
            out sbyte __param__1,
            [MarshalAs(UnmanagedType.LPStr)]string __param__2,
            out sbyte arglist
        );
        [DllImport("user32.dll")]
        public static extern int wvsprintfW(
            out ushort __param__1,
            ref ushort __param__2,
            out sbyte arglist
        );
        [DllImport("user32.dll")]
        public static extern int wsprintfA(
            out sbyte __param__1,
            [MarshalAs(UnmanagedType.LPStr)]string __param__2
        );
        [DllImport("user32.dll")]
        public static extern int wsprintfW(
            out ushort __param__1,
            ref ushort __param__2
        );
        [DllImport("user32.dll")]
        public static extern IntPtr LoadKeyboardLayoutA(
            [MarshalAs(UnmanagedType.LPStr)]string pwszKLID,
            uint Flags
        );
        [DllImport("user32.dll")]
        public static extern IntPtr LoadKeyboardLayoutW(
            ref ushort pwszKLID,
            uint Flags
        );
        [DllImport("user32.dll")]
        public static extern IntPtr ActivateKeyboardLayout(
            IntPtr hkl,
            uint Flags
        );
        [DllImport("user32.dll")]
        public static extern int ToUnicodeEx(
            uint wVirtKey,
            uint wScanCode,
            ref byte lpKeyState,
            out ushort pwszBuff,
            int cchBuff,
            uint wFlags,
            IntPtr dwhkl
        );
        [DllImport("user32.dll")]
        public static extern int UnloadKeyboardLayout(
            IntPtr hkl
        );
        [DllImport("user32.dll")]
        public static extern int GetKeyboardLayoutNameA(
            out sbyte pwszKLID
        );
        [DllImport("user32.dll")]
        public static extern int GetKeyboardLayoutNameW(
            out ushort pwszKLID
        );
        [DllImport("user32.dll")]
        public static extern int GetKeyboardLayoutList(
            int nBuff,
            out IntPtr lpList
        );
        [DllImport("user32.dll")]
        public static extern IntPtr GetKeyboardLayout(
            uint idThread
        );
        [DllImport("user32.dll")]
        public static extern int GetMouseMovePointsEx(
            uint cbSize,
            out tagMOUSEMOVEPOINT lppt,
            out tagMOUSEMOVEPOINT lpptBuf,
            int nBufPoints,
            uint resolution
        );
        [DllImport("user32.dll")]
        public static extern IntPtr CreateDesktopA(
            [MarshalAs(UnmanagedType.LPStr)]string lpszDesktop,
            [MarshalAs(UnmanagedType.LPStr)]string lpszDevice,
            out _devicemodeA pDevmode,
            uint dwFlags,
            uint dwDesiredAccess,
            out _SECURITY_ATTRIBUTES lpsa
        );
        [DllImport("user32.dll")]
        public static extern IntPtr CreateDesktopW(
            ref ushort lpszDesktop,
            ref ushort lpszDevice,
            out _devicemodeW pDevmode,
            uint dwFlags,
            uint dwDesiredAccess,
            out _SECURITY_ATTRIBUTES lpsa
        );
        [DllImport("user32.dll")]
        public static extern IntPtr CreateDesktopExA(
            [MarshalAs(UnmanagedType.LPStr)]string lpszDesktop,
            [MarshalAs(UnmanagedType.LPStr)]string lpszDevice,
            out _devicemodeA pDevmode,
            uint dwFlags,
            uint dwDesiredAccess,
            out _SECURITY_ATTRIBUTES lpsa,
            uint ulHeapSize,
            IntPtr pvoid
        );
        [DllImport("user32.dll")]
        public static extern IntPtr CreateDesktopExW(
            ref ushort lpszDesktop,
            ref ushort lpszDevice,
            out _devicemodeW pDevmode,
            uint dwFlags,
            uint dwDesiredAccess,
            out _SECURITY_ATTRIBUTES lpsa,
            uint ulHeapSize,
            IntPtr pvoid
        );
        [DllImport("user32.dll")]
        public static extern IntPtr OpenDesktopA(
            [MarshalAs(UnmanagedType.LPStr)]string lpszDesktop,
            uint dwFlags,
            int fInherit,
            uint dwDesiredAccess
        );
        [DllImport("user32.dll")]
        public static extern IntPtr OpenDesktopW(
            ref ushort lpszDesktop,
            uint dwFlags,
            int fInherit,
            uint dwDesiredAccess
        );
        [DllImport("user32.dll")]
        public static extern IntPtr OpenInputDesktop(
            uint dwFlags,
            int fInherit,
            uint dwDesiredAccess
        );
        [DllImport("user32.dll")]
        public static extern int EnumDesktopsA(
            out HWINSTA__ hwinsta,
            out NAMEENUMPROCA lpEnumFunc,
            long lParam
        );
        [DllImport("user32.dll")]
        public static extern int EnumDesktopsW(
            out HWINSTA__ hwinsta,
            out NAMEENUMPROCW lpEnumFunc,
            long lParam
        );
        [DllImport("user32.dll")]
        public static extern int EnumDesktopWindows(
            out HDESK__ hDesktop,
            WNDENUMPROC lpfn,
            long lParam
        );
        [DllImport("user32.dll")]
        public static extern int SwitchDesktop(
            out HDESK__ hDesktop
        );
        [DllImport("user32.dll")]
        public static extern int SetThreadDesktop(
            out HDESK__ hDesktop
        );
        [DllImport("user32.dll")]
        public static extern int CloseDesktop(
            out HDESK__ hDesktop
        );
        [DllImport("user32.dll")]
        public static extern IntPtr GetThreadDesktop(
            uint dwThreadId
        );
        [DllImport("user32.dll")]
        public static extern IntPtr CreateWindowStationA(
            [MarshalAs(UnmanagedType.LPStr)]string lpwinsta,
            uint dwFlags,
            uint dwDesiredAccess,
            out _SECURITY_ATTRIBUTES lpsa
        );
        [DllImport("user32.dll")]
        public static extern IntPtr CreateWindowStationW(
            ref ushort lpwinsta,
            uint dwFlags,
            uint dwDesiredAccess,
            out _SECURITY_ATTRIBUTES lpsa
        );
        [DllImport("user32.dll")]
        public static extern IntPtr OpenWindowStationA(
            [MarshalAs(UnmanagedType.LPStr)]string lpszWinSta,
            int fInherit,
            uint dwDesiredAccess
        );
        [DllImport("user32.dll")]
        public static extern IntPtr OpenWindowStationW(
            ref ushort lpszWinSta,
            int fInherit,
            uint dwDesiredAccess
        );
        [DllImport("user32.dll")]
        public static extern int EnumWindowStationsA(
            out NAMEENUMPROCA lpEnumFunc,
            long lParam
        );
        [DllImport("user32.dll")]
        public static extern int EnumWindowStationsW(
            out NAMEENUMPROCW lpEnumFunc,
            long lParam
        );
        [DllImport("user32.dll")]
        public static extern int CloseWindowStation(
            out HWINSTA__ hWinSta
        );
        [DllImport("user32.dll")]
        public static extern int SetProcessWindowStation(
            out HWINSTA__ hWinSta
        );
        [DllImport("user32.dll")]
        public static extern IntPtr GetProcessWindowStation(
        );
        [DllImport("user32.dll")]
        public static extern int SetUserObjectSecurity(
            IntPtr hObj,
            out uint pSIRequested,
            IntPtr pSID
        );
        [DllImport("user32.dll")]
        public static extern int GetUserObjectSecurity(
            IntPtr hObj,
            out uint pSIRequested,
            IntPtr pSID,
            uint nLength,
            out uint lpnLengthNeeded
        );
        [DllImport("user32.dll")]
        public static extern int GetUserObjectInformationA(
            IntPtr hObj,
            int nIndex,
            IntPtr pvInfo,
            uint nLength,
            out uint lpnLengthNeeded
        );
        [DllImport("user32.dll")]
        public static extern int GetUserObjectInformationW(
            IntPtr hObj,
            int nIndex,
            IntPtr pvInfo,
            uint nLength,
            out uint lpnLengthNeeded
        );
        [DllImport("user32.dll")]
        public static extern int SetUserObjectInformationA(
            IntPtr hObj,
            int nIndex,
            IntPtr pvInfo,
            uint nLength
        );
        [DllImport("user32.dll")]
        public static extern int SetUserObjectInformationW(
            IntPtr hObj,
            int nIndex,
            IntPtr pvInfo,
            uint nLength
        );
        [DllImport("user32.dll")]
        public static extern int IsHungAppWindow(
            IntPtr hwnd
        );
        [DllImport("user32.dll")]
        public static extern void DisableProcessWindowsGhosting(
        );
        [DllImport("user32.dll")]
        public static extern uint RegisterWindowMessageA(
            [MarshalAs(UnmanagedType.LPStr)]string lpString
        );
        [DllImport("user32.dll")]
        public static extern uint RegisterWindowMessageW(
            ref ushort lpString
        );
        [DllImport("user32.dll")]
        public static extern int TrackMouseEvent(
            out tagTRACKMOUSEEVENT lpEventTrack
        );
        [DllImport("user32.dll")]
        public static extern int DrawEdge(
            IntPtr hdc,
            out tagRECT qrc,
            uint edge,
            uint grfFlags
        );
        [DllImport("user32.dll")]
        public static extern int DrawFrameControl(
            IntPtr __param__1,
            out tagRECT __param__2,
            uint __param__3,
            uint __param__4
        );
        [DllImport("user32.dll")]
        public static extern int DrawCaption(
            IntPtr hwnd,
            IntPtr hdc,
            ref tagRECT lprect,
            uint flags
        );
        [DllImport("user32.dll")]
        public static extern int DrawAnimatedRects(
            IntPtr hwnd,
            int idAni,
            ref tagRECT lprcFrom,
            ref tagRECT lprcTo
        );
        [DllImport("user32.dll")]
        public static extern int GetMessageA(
            out tagMSG lpMsg,
            IntPtr hWnd,
            uint wMsgFilterMin,
            uint wMsgFilterMax
        );
        [DllImport("user32.dll")]
        public static extern int GetMessageW(
            out tagMSG lpMsg,
            IntPtr hWnd,
            uint wMsgFilterMin,
            uint wMsgFilterMax
        );
        [DllImport("user32.dll")]
        public static extern int TranslateMessage(
            ref tagMSG lpMsg
        );
        [DllImport("user32.dll")]
        public static extern long DispatchMessageA(
            ref tagMSG lpMsg
        );
        [DllImport("user32.dll")]
        public static extern long DispatchMessageW(
            ref tagMSG lpMsg
        );
        [DllImport("user32.dll")]
        public static extern int SetMessageQueue(
            int cMessagesMax
        );
        [DllImport("user32.dll")]
        public static extern int PeekMessageA(
            out tagMSG lpMsg,
            IntPtr hWnd,
            uint wMsgFilterMin,
            uint wMsgFilterMax,
            uint wRemoveMsg
        );
        [DllImport("user32.dll")]
        public static extern int PeekMessageW(
            out tagMSG lpMsg,
            IntPtr hWnd,
            uint wMsgFilterMin,
            uint wMsgFilterMax,
            uint wRemoveMsg
        );
        [DllImport("user32.dll")]
        public static extern int RegisterHotKey(
            IntPtr hWnd,
            int id,
            uint fsModifiers,
            uint vk
        );
        [DllImport("user32.dll")]
        public static extern int UnregisterHotKey(
            IntPtr hWnd,
            int id
        );
        [DllImport("user32.dll")]
        public static extern int ExitWindowsEx(
            uint uFlags,
            uint dwReason
        );
        [DllImport("user32.dll")]
        public static extern int SwapMouseButton(
            int fSwap
        );
        [DllImport("user32.dll")]
        public static extern uint GetMessagePos(
        );
        [DllImport("user32.dll")]
        public static extern int GetMessageTime(
        );
        [DllImport("user32.dll")]
        public static extern long GetMessageExtraInfo(
        );
        [DllImport("user32.dll")]
        public static extern uint GetUnpredictedMessagePos(
        );
        [DllImport("user32.dll")]
        public static extern int IsWow64Message(
        );
        [DllImport("user32.dll")]
        public static extern long SetMessageExtraInfo(
            long lParam
        );
        [DllImport("user32.dll")]
        public static extern long SendMessageA(
            IntPtr hWnd,
            uint Msg,
            ulong wParam,
            long lParam
        );
        [DllImport("user32.dll")]
        public static extern long SendMessageW(
            IntPtr hWnd,
            uint Msg,
            ulong wParam,
            long lParam
        );
        [DllImport("user32.dll")]
        public static extern long SendMessageTimeoutA(
            IntPtr hWnd,
            uint Msg,
            ulong wParam,
            long lParam,
            uint fuFlags,
            uint uTimeout,
            out ulong lpdwResult
        );
        [DllImport("user32.dll")]
        public static extern long SendMessageTimeoutW(
            IntPtr hWnd,
            uint Msg,
            ulong wParam,
            long lParam,
            uint fuFlags,
            uint uTimeout,
            out ulong lpdwResult
        );
        [DllImport("user32.dll")]
        public static extern int SendNotifyMessageA(
            IntPtr hWnd,
            uint Msg,
            ulong wParam,
            long lParam
        );
        [DllImport("user32.dll")]
        public static extern int SendNotifyMessageW(
            IntPtr hWnd,
            uint Msg,
            ulong wParam,
            long lParam
        );
        [DllImport("user32.dll")]
        public static extern int SendMessageCallbackA(
            IntPtr hWnd,
            uint Msg,
            ulong wParam,
            long lParam,
            SENDASYNCPROC lpResultCallBack,
            ulong dwData
        );
        [DllImport("user32.dll")]
        public static extern int SendMessageCallbackW(
            IntPtr hWnd,
            uint Msg,
            ulong wParam,
            long lParam,
            SENDASYNCPROC lpResultCallBack,
            ulong dwData
        );
        [DllImport("user32.dll")]
        public static extern int BroadcastSystemMessageExA(
            uint flags,
            out uint lpInfo,
            uint Msg,
            ulong wParam,
            long lParam,
            out BSMINFO pbsmInfo
        );
        [DllImport("user32.dll")]
        public static extern int BroadcastSystemMessageExW(
            uint flags,
            out uint lpInfo,
            uint Msg,
            ulong wParam,
            long lParam,
            out BSMINFO pbsmInfo
        );
        [DllImport("user32.dll")]
        public static extern int BroadcastSystemMessageA(
            uint flags,
            out uint lpInfo,
            uint Msg,
            ulong wParam,
            long lParam
        );
        [DllImport("user32.dll")]
        public static extern int BroadcastSystemMessageW(
            uint flags,
            out uint lpInfo,
            uint Msg,
            ulong wParam,
            long lParam
        );
        [DllImport("user32.dll")]
        public static extern IntPtr RegisterDeviceNotificationA(
            IntPtr hRecipient,
            IntPtr NotificationFilter,
            uint Flags
        );
        [DllImport("user32.dll")]
        public static extern IntPtr RegisterDeviceNotificationW(
            IntPtr hRecipient,
            IntPtr NotificationFilter,
            uint Flags
        );
        [DllImport("user32.dll")]
        public static extern int UnregisterDeviceNotification(
            IntPtr Handle
        );
        [DllImport("user32.dll")]
        public static extern IntPtr RegisterPowerSettingNotification(
            IntPtr hRecipient,
            ref Guid PowerSettingGuid,
            uint Flags
        );
        [DllImport("user32.dll")]
        public static extern int UnregisterPowerSettingNotification(
            IntPtr Handle
        );
        [DllImport("user32.dll")]
        public static extern IntPtr RegisterSuspendResumeNotification(
            IntPtr hRecipient,
            uint Flags
        );
        [DllImport("user32.dll")]
        public static extern int UnregisterSuspendResumeNotification(
            IntPtr Handle
        );
        [DllImport("user32.dll")]
        public static extern int PostMessageA(
            IntPtr hWnd,
            uint Msg,
            ulong wParam,
            long lParam
        );
        [DllImport("user32.dll")]
        public static extern int PostMessageW(
            IntPtr hWnd,
            uint Msg,
            ulong wParam,
            long lParam
        );
        [DllImport("user32.dll")]
        public static extern int PostThreadMessageA(
            uint idThread,
            uint Msg,
            ulong wParam,
            long lParam
        );
        [DllImport("user32.dll")]
        public static extern int PostThreadMessageW(
            uint idThread,
            uint Msg,
            ulong wParam,
            long lParam
        );
        [DllImport("user32.dll")]
        public static extern int AttachThreadInput(
            uint idAttach,
            uint idAttachTo,
            int fAttach
        );
        [DllImport("user32.dll")]
        public static extern int ReplyMessage(
            long lResult
        );
        [DllImport("user32.dll")]
        public static extern int WaitMessage(
        );
        [DllImport("user32.dll")]
        public static extern uint WaitForInputIdle(
            IntPtr hProcess,
            uint dwMilliseconds
        );
        [DllImport("user32.dll")]
        public static extern long DefWindowProcA(
            IntPtr hWnd,
            uint Msg,
            ulong wParam,
            long lParam
        );
        [DllImport("user32.dll")]
        public static extern long DefWindowProcW(
            IntPtr hWnd,
            uint Msg,
            ulong wParam,
            long lParam
        );
        [DllImport("user32.dll")]
        public static extern void PostQuitMessage(
            int nExitCode
        );
        [DllImport("user32.dll")]
        public static extern long CallWindowProcA(
            WNDPROC lpPrevWndFunc,
            IntPtr hWnd,
            uint Msg,
            ulong wParam,
            long lParam
        );
        [DllImport("user32.dll")]
        public static extern long CallWindowProcW(
            WNDPROC lpPrevWndFunc,
            IntPtr hWnd,
            uint Msg,
            ulong wParam,
            long lParam
        );
        [DllImport("user32.dll")]
        public static extern int InSendMessage(
        );
        [DllImport("user32.dll")]
        public static extern uint InSendMessageEx(
            IntPtr lpReserved
        );
        [DllImport("user32.dll")]
        public static extern uint GetDoubleClickTime(
        );
        [DllImport("user32.dll")]
        public static extern int SetDoubleClickTime(
            uint __param__1
        );
        [DllImport("user32.dll")]
        public static extern ushort RegisterClassA(
            ref tagWNDCLASSA lpWndClass
        );
        [DllImport("user32.dll")]
        public static extern ushort RegisterClassW(
            ref tagWNDCLASSW lpWndClass
        );
        [DllImport("user32.dll")]
        public static extern int UnregisterClassA(
            [MarshalAs(UnmanagedType.LPStr)]string lpClassName,
            IntPtr hInstance
        );
        [DllImport("user32.dll")]
        public static extern int UnregisterClassW(
            ref ushort lpClassName,
            IntPtr hInstance
        );
        [DllImport("user32.dll")]
        public static extern int GetClassInfoA(
            IntPtr hInstance,
            [MarshalAs(UnmanagedType.LPStr)]string lpClassName,
            out tagWNDCLASSA lpWndClass
        );
        [DllImport("user32.dll")]
        public static extern int GetClassInfoW(
            IntPtr hInstance,
            ref ushort lpClassName,
            out tagWNDCLASSW lpWndClass
        );
        [DllImport("user32.dll")]
        public static extern ushort RegisterClassExA(
            ref tagWNDCLASSEXA __param__1
        );
        [DllImport("user32.dll")]
        public static extern ushort RegisterClassExW(
            ref tagWNDCLASSEXW __param__1
        );
        [DllImport("user32.dll")]
        public static extern int GetClassInfoExA(
            IntPtr hInstance,
            [MarshalAs(UnmanagedType.LPStr)]string lpszClass,
            out tagWNDCLASSEXA lpwcx
        );
        [DllImport("user32.dll")]
        public static extern int GetClassInfoExW(
            IntPtr hInstance,
            ref ushort lpszClass,
            out tagWNDCLASSEXW lpwcx
        );
        [DllImport("user32.dll")]
        public static extern IntPtr CreateWindowExA(
            uint dwExStyle,
            [MarshalAs(UnmanagedType.LPStr)]string lpClassName,
            [MarshalAs(UnmanagedType.LPStr)]string lpWindowName,
            uint dwStyle,
            int X,
            int Y,
            int nWidth,
            int nHeight,
            IntPtr hWndParent,
            IntPtr hMenu,
            IntPtr hInstance,
            IntPtr lpParam
        );
        [DllImport("user32.dll")]
        public static extern IntPtr CreateWindowExW(
            uint dwExStyle,
            ref ushort lpClassName,
            ref ushort lpWindowName,
            uint dwStyle,
            int X,
            int Y,
            int nWidth,
            int nHeight,
            IntPtr hWndParent,
            IntPtr hMenu,
            IntPtr hInstance,
            IntPtr lpParam
        );
        [DllImport("user32.dll")]
        public static extern int IsWindow(
            IntPtr hWnd
        );
        [DllImport("user32.dll")]
        public static extern int IsMenu(
            IntPtr hMenu
        );
        [DllImport("user32.dll")]
        public static extern int IsChild(
            IntPtr hWndParent,
            IntPtr hWnd
        );
        [DllImport("user32.dll")]
        public static extern int DestroyWindow(
            IntPtr hWnd
        );
        [DllImport("user32.dll")]
        public static extern int ShowWindow(
            IntPtr hWnd,
            int nCmdShow
        );
        [DllImport("user32.dll")]
        public static extern int AnimateWindow(
            IntPtr hWnd,
            uint dwTime,
            uint dwFlags
        );
        [DllImport("user32.dll")]
        public static extern int UpdateLayeredWindow(
            IntPtr hWnd,
            IntPtr hdcDst,
            out tagPOINT pptDst,
            out tagSIZE psize,
            IntPtr hdcSrc,
            out tagPOINT pptSrc,
            uint crKey,
            out _BLENDFUNCTION pblend,
            uint dwFlags
        );
        [DllImport("user32.dll")]
        public static extern int UpdateLayeredWindowIndirect(
            IntPtr hWnd,
            ref tagUPDATELAYEREDWINDOWINFO pULWInfo
        );
        [DllImport("user32.dll")]
        public static extern int GetLayeredWindowAttributes(
            IntPtr hwnd,
            out uint pcrKey,
            out byte pbAlpha,
            out uint pdwFlags
        );
        [DllImport("user32.dll")]
        public static extern int PrintWindow(
            IntPtr hwnd,
            IntPtr hdcBlt,
            uint nFlags
        );
        [DllImport("user32.dll")]
        public static extern int SetLayeredWindowAttributes(
            IntPtr hwnd,
            uint crKey,
            byte bAlpha,
            uint dwFlags
        );
        [DllImport("user32.dll")]
        public static extern int ShowWindowAsync(
            IntPtr hWnd,
            int nCmdShow
        );
        [DllImport("user32.dll")]
        public static extern int FlashWindow(
            IntPtr hWnd,
            int bInvert
        );
        [DllImport("user32.dll")]
        public static extern int FlashWindowEx(
            out FLASHWINFO pfwi
        );
        [DllImport("user32.dll")]
        public static extern int ShowOwnedPopups(
            IntPtr hWnd,
            int fShow
        );
        [DllImport("user32.dll")]
        public static extern int OpenIcon(
            IntPtr hWnd
        );
        [DllImport("user32.dll")]
        public static extern int CloseWindow(
            IntPtr hWnd
        );
        [DllImport("user32.dll")]
        public static extern int MoveWindow(
            IntPtr hWnd,
            int X,
            int Y,
            int nWidth,
            int nHeight,
            int bRepaint
        );
        [DllImport("user32.dll")]
        public static extern int SetWindowPos(
            IntPtr hWnd,
            IntPtr hWndInsertAfter,
            int X,
            int Y,
            int cx,
            int cy,
            uint uFlags
        );
        [DllImport("user32.dll")]
        public static extern int GetWindowPlacement(
            IntPtr hWnd,
            out tagWINDOWPLACEMENT lpwndpl
        );
        [DllImport("user32.dll")]
        public static extern int SetWindowPlacement(
            IntPtr hWnd,
            ref tagWINDOWPLACEMENT lpwndpl
        );
        [DllImport("user32.dll")]
        public static extern int GetWindowDisplayAffinity(
            IntPtr hWnd,
            out uint pdwAffinity
        );
        [DllImport("user32.dll")]
        public static extern int SetWindowDisplayAffinity(
            IntPtr hWnd,
            uint dwAffinity
        );
        [DllImport("user32.dll")]
        public static extern IntPtr BeginDeferWindowPos(
            int nNumWindows
        );
        [DllImport("user32.dll")]
        public static extern IntPtr DeferWindowPos(
            IntPtr hWinPosInfo,
            IntPtr hWnd,
            IntPtr hWndInsertAfter,
            int x,
            int y,
            int cx,
            int cy,
            uint uFlags
        );
        [DllImport("user32.dll")]
        public static extern int EndDeferWindowPos(
            IntPtr hWinPosInfo
        );
        [DllImport("user32.dll")]
        public static extern int IsWindowVisible(
            IntPtr hWnd
        );
        [DllImport("user32.dll")]
        public static extern int IsIconic(
            IntPtr hWnd
        );
        [DllImport("user32.dll")]
        public static extern int AnyPopup(
        );
        [DllImport("user32.dll")]
        public static extern int BringWindowToTop(
            IntPtr hWnd
        );
        [DllImport("user32.dll")]
        public static extern int IsZoomed(
            IntPtr hWnd
        );
        [DllImport("user32.dll")]
        public static extern IntPtr CreateDialogParamA(
            IntPtr hInstance,
            [MarshalAs(UnmanagedType.LPStr)]string lpTemplateName,
            IntPtr hWndParent,
            DLGPROC lpDialogFunc,
            long dwInitParam
        );
        [DllImport("user32.dll")]
        public static extern IntPtr CreateDialogParamW(
            IntPtr hInstance,
            ref ushort lpTemplateName,
            IntPtr hWndParent,
            DLGPROC lpDialogFunc,
            long dwInitParam
        );
        [DllImport("user32.dll")]
        public static extern IntPtr CreateDialogIndirectParamA(
            IntPtr hInstance,
            ref DLGTEMPLATE lpTemplate,
            IntPtr hWndParent,
            DLGPROC lpDialogFunc,
            long dwInitParam
        );
        [DllImport("user32.dll")]
        public static extern IntPtr CreateDialogIndirectParamW(
            IntPtr hInstance,
            ref DLGTEMPLATE lpTemplate,
            IntPtr hWndParent,
            DLGPROC lpDialogFunc,
            long dwInitParam
        );
        [DllImport("user32.dll")]
        public static extern long DialogBoxParamA(
            IntPtr hInstance,
            [MarshalAs(UnmanagedType.LPStr)]string lpTemplateName,
            IntPtr hWndParent,
            DLGPROC lpDialogFunc,
            long dwInitParam
        );
        [DllImport("user32.dll")]
        public static extern long DialogBoxParamW(
            IntPtr hInstance,
            ref ushort lpTemplateName,
            IntPtr hWndParent,
            DLGPROC lpDialogFunc,
            long dwInitParam
        );
        [DllImport("user32.dll")]
        public static extern long DialogBoxIndirectParamA(
            IntPtr hInstance,
            ref DLGTEMPLATE hDialogTemplate,
            IntPtr hWndParent,
            DLGPROC lpDialogFunc,
            long dwInitParam
        );
        [DllImport("user32.dll")]
        public static extern long DialogBoxIndirectParamW(
            IntPtr hInstance,
            ref DLGTEMPLATE hDialogTemplate,
            IntPtr hWndParent,
            DLGPROC lpDialogFunc,
            long dwInitParam
        );
        [DllImport("user32.dll")]
        public static extern int EndDialog(
            IntPtr hDlg,
            long nResult
        );
        [DllImport("user32.dll")]
        public static extern IntPtr GetDlgItem(
            IntPtr hDlg,
            int nIDDlgItem
        );
        [DllImport("user32.dll")]
        public static extern int SetDlgItemInt(
            IntPtr hDlg,
            int nIDDlgItem,
            uint uValue,
            int bSigned
        );
        [DllImport("user32.dll")]
        public static extern uint GetDlgItemInt(
            IntPtr hDlg,
            int nIDDlgItem,
            out int lpTranslated,
            int bSigned
        );
        [DllImport("user32.dll")]
        public static extern int SetDlgItemTextA(
            IntPtr hDlg,
            int nIDDlgItem,
            [MarshalAs(UnmanagedType.LPStr)]string lpString
        );
        [DllImport("user32.dll")]
        public static extern int SetDlgItemTextW(
            IntPtr hDlg,
            int nIDDlgItem,
            ref ushort lpString
        );
        [DllImport("user32.dll")]
        public static extern uint GetDlgItemTextA(
            IntPtr hDlg,
            int nIDDlgItem,
            out sbyte lpString,
            int cchMax
        );
        [DllImport("user32.dll")]
        public static extern uint GetDlgItemTextW(
            IntPtr hDlg,
            int nIDDlgItem,
            out ushort lpString,
            int cchMax
        );
        [DllImport("user32.dll")]
        public static extern int CheckDlgButton(
            IntPtr hDlg,
            int nIDButton,
            uint uCheck
        );
        [DllImport("user32.dll")]
        public static extern int CheckRadioButton(
            IntPtr hDlg,
            int nIDFirstButton,
            int nIDLastButton,
            int nIDCheckButton
        );
        [DllImport("user32.dll")]
        public static extern uint IsDlgButtonChecked(
            IntPtr hDlg,
            int nIDButton
        );
        [DllImport("user32.dll")]
        public static extern long SendDlgItemMessageA(
            IntPtr hDlg,
            int nIDDlgItem,
            uint Msg,
            ulong wParam,
            long lParam
        );
        [DllImport("user32.dll")]
        public static extern long SendDlgItemMessageW(
            IntPtr hDlg,
            int nIDDlgItem,
            uint Msg,
            ulong wParam,
            long lParam
        );
        [DllImport("user32.dll")]
        public static extern IntPtr GetNextDlgGroupItem(
            IntPtr hDlg,
            IntPtr hCtl,
            int bPrevious
        );
        [DllImport("user32.dll")]
        public static extern IntPtr GetNextDlgTabItem(
            IntPtr hDlg,
            IntPtr hCtl,
            int bPrevious
        );
        [DllImport("user32.dll")]
        public static extern int GetDlgCtrlID(
            IntPtr hWnd
        );
        [DllImport("user32.dll")]
        public static extern int GetDialogBaseUnits(
        );
        [DllImport("user32.dll")]
        public static extern long DefDlgProcA(
            IntPtr hDlg,
            uint Msg,
            ulong wParam,
            long lParam
        );
        [DllImport("user32.dll")]
        public static extern long DefDlgProcW(
            IntPtr hDlg,
            uint Msg,
            ulong wParam,
            long lParam
        );
        [DllImport("user32.dll")]
        public static extern int SetDialogControlDpiChangeBehavior(
            IntPtr hWnd,
            DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS mask,
            DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS values
        );
        [DllImport("user32.dll")]
        public static extern DIALOG_CONTROL_DPI_CHANGE_BEHAVIORS GetDialogControlDpiChangeBehavior(
            IntPtr hWnd
        );
        [DllImport("user32.dll")]
        public static extern int SetDialogDpiChangeBehavior(
            IntPtr hDlg,
            DIALOG_DPI_CHANGE_BEHAVIORS mask,
            DIALOG_DPI_CHANGE_BEHAVIORS values
        );
        [DllImport("user32.dll")]
        public static extern DIALOG_DPI_CHANGE_BEHAVIORS GetDialogDpiChangeBehavior(
            IntPtr hDlg
        );
        [DllImport("user32.dll")]
        public static extern int CallMsgFilterA(
            out tagMSG lpMsg,
            int nCode
        );
        [DllImport("user32.dll")]
        public static extern int CallMsgFilterW(
            out tagMSG lpMsg,
            int nCode
        );
        [DllImport("user32.dll")]
        public static extern int OpenClipboard(
            IntPtr hWndNewOwner
        );
        [DllImport("user32.dll")]
        public static extern int CloseClipboard(
        );
        [DllImport("user32.dll")]
        public static extern uint GetClipboardSequenceNumber(
        );
        [DllImport("user32.dll")]
        public static extern IntPtr GetClipboardOwner(
        );
        [DllImport("user32.dll")]
        public static extern IntPtr SetClipboardViewer(
            IntPtr hWndNewViewer
        );
        [DllImport("user32.dll")]
        public static extern IntPtr GetClipboardViewer(
        );
        [DllImport("user32.dll")]
        public static extern int ChangeClipboardChain(
            IntPtr hWndRemove,
            IntPtr hWndNewNext
        );
        [DllImport("user32.dll")]
        public static extern IntPtr SetClipboardData(
            uint uFormat,
            IntPtr hMem
        );
        [DllImport("user32.dll")]
        public static extern IntPtr GetClipboardData(
            uint uFormat
        );
        [DllImport("user32.dll")]
        public static extern uint RegisterClipboardFormatA(
            [MarshalAs(UnmanagedType.LPStr)]string lpszFormat
        );
        [DllImport("user32.dll")]
        public static extern uint RegisterClipboardFormatW(
            ref ushort lpszFormat
        );
        [DllImport("user32.dll")]
        public static extern int CountClipboardFormats(
        );
        [DllImport("user32.dll")]
        public static extern uint EnumClipboardFormats(
            uint format
        );
        [DllImport("user32.dll")]
        public static extern int GetClipboardFormatNameA(
            uint format,
            out sbyte lpszFormatName,
            int cchMaxCount
        );
        [DllImport("user32.dll")]
        public static extern int GetClipboardFormatNameW(
            uint format,
            out ushort lpszFormatName,
            int cchMaxCount
        );
        [DllImport("user32.dll")]
        public static extern int EmptyClipboard(
        );
        [DllImport("user32.dll")]
        public static extern int IsClipboardFormatAvailable(
            uint format
        );
        [DllImport("user32.dll")]
        public static extern int GetPriorityClipboardFormat(
            out uint paFormatPriorityList,
            int cFormats
        );
        [DllImport("user32.dll")]
        public static extern IntPtr GetOpenClipboardWindow(
        );
        [DllImport("user32.dll")]
        public static extern int AddClipboardFormatListener(
            IntPtr hwnd
        );
        [DllImport("user32.dll")]
        public static extern int RemoveClipboardFormatListener(
            IntPtr hwnd
        );
        [DllImport("user32.dll")]
        public static extern int GetUpdatedClipboardFormats(
            out uint lpuiFormats,
            uint cFormats,
            out uint pcFormatsOut
        );
        [DllImport("user32.dll")]
        public static extern int CharToOemA(
            [MarshalAs(UnmanagedType.LPStr)]string pSrc,
            out sbyte pDst
        );
        [DllImport("user32.dll")]
        public static extern int CharToOemW(
            ref ushort pSrc,
            out sbyte pDst
        );
        [DllImport("user32.dll")]
        public static extern int OemToCharA(
            [MarshalAs(UnmanagedType.LPStr)]string pSrc,
            out sbyte pDst
        );
        [DllImport("user32.dll")]
        public static extern int OemToCharW(
            [MarshalAs(UnmanagedType.LPStr)]string pSrc,
            out ushort pDst
        );
        [DllImport("user32.dll")]
        public static extern int CharToOemBuffA(
            [MarshalAs(UnmanagedType.LPStr)]string lpszSrc,
            out sbyte lpszDst,
            uint cchDstLength
        );
        [DllImport("user32.dll")]
        public static extern int CharToOemBuffW(
            ref ushort lpszSrc,
            out sbyte lpszDst,
            uint cchDstLength
        );
        [DllImport("user32.dll")]
        public static extern int OemToCharBuffA(
            [MarshalAs(UnmanagedType.LPStr)]string lpszSrc,
            out sbyte lpszDst,
            uint cchDstLength
        );
        [DllImport("user32.dll")]
        public static extern int OemToCharBuffW(
            [MarshalAs(UnmanagedType.LPStr)]string lpszSrc,
            out ushort lpszDst,
            uint cchDstLength
        );
        [DllImport("user32.dll")]
        public static extern IntPtr CharUpperA(
            out sbyte lpsz
        );
        [DllImport("user32.dll")]
        public static extern IntPtr CharUpperW(
            out ushort lpsz
        );
        [DllImport("user32.dll")]
        public static extern uint CharUpperBuffA(
            out sbyte lpsz,
            uint cchLength
        );
        [DllImport("user32.dll")]
        public static extern uint CharUpperBuffW(
            out ushort lpsz,
            uint cchLength
        );
        [DllImport("user32.dll")]
        public static extern IntPtr CharLowerA(
            out sbyte lpsz
        );
        [DllImport("user32.dll")]
        public static extern IntPtr CharLowerW(
            out ushort lpsz
        );
        [DllImport("user32.dll")]
        public static extern uint CharLowerBuffA(
            out sbyte lpsz,
            uint cchLength
        );
        [DllImport("user32.dll")]
        public static extern uint CharLowerBuffW(
            out ushort lpsz,
            uint cchLength
        );
        [DllImport("user32.dll")]
        public static extern IntPtr CharNextA(
            [MarshalAs(UnmanagedType.LPStr)]string lpsz
        );
        [DllImport("user32.dll")]
        public static extern IntPtr CharNextW(
            ref ushort lpsz
        );
        [DllImport("user32.dll")]
        public static extern IntPtr CharPrevA(
            [MarshalAs(UnmanagedType.LPStr)]string lpszStart,
            [MarshalAs(UnmanagedType.LPStr)]string lpszCurrent
        );
        [DllImport("user32.dll")]
        public static extern IntPtr CharPrevW(
            ref ushort lpszStart,
            ref ushort lpszCurrent
        );
        [DllImport("user32.dll")]
        public static extern IntPtr CharNextExA(
            ushort CodePage,
            [MarshalAs(UnmanagedType.LPStr)]string lpCurrentChar,
            uint dwFlags
        );
        [DllImport("user32.dll")]
        public static extern IntPtr CharPrevExA(
            ushort CodePage,
            [MarshalAs(UnmanagedType.LPStr)]string lpStart,
            [MarshalAs(UnmanagedType.LPStr)]string lpCurrentChar,
            uint dwFlags
        );
        [DllImport("user32.dll")]
        public static extern int IsCharAlphaA(
            sbyte ch
        );
        [DllImport("user32.dll")]
        public static extern int IsCharAlphaW(
            ushort ch
        );
        [DllImport("user32.dll")]
        public static extern int IsCharAlphaNumericA(
            sbyte ch
        );
        [DllImport("user32.dll")]
        public static extern int IsCharAlphaNumericW(
            ushort ch
        );
        [DllImport("user32.dll")]
        public static extern int IsCharUpperA(
            sbyte ch
        );
        [DllImport("user32.dll")]
        public static extern int IsCharUpperW(
            ushort ch
        );
        [DllImport("user32.dll")]
        public static extern int IsCharLowerA(
            sbyte ch
        );
        [DllImport("user32.dll")]
        public static extern int IsCharLowerW(
            ushort ch
        );
        [DllImport("user32.dll")]
        public static extern IntPtr SetFocus(
            IntPtr hWnd
        );
        [DllImport("user32.dll")]
        public static extern IntPtr GetActiveWindow(
        );
        [DllImport("user32.dll")]
        public static extern IntPtr GetFocus(
        );
        [DllImport("user32.dll")]
        public static extern uint GetKBCodePage(
        );
        [DllImport("user32.dll")]
        public static extern short GetKeyState(
            int nVirtKey
        );
        [DllImport("user32.dll")]
        public static extern short GetAsyncKeyState(
            int vKey
        );
        [DllImport("user32.dll")]
        public static extern int GetKeyboardState(
            out byte lpKeyState
        );
        [DllImport("user32.dll")]
        public static extern int SetKeyboardState(
            out byte lpKeyState
        );
        [DllImport("user32.dll")]
        public static extern int GetKeyNameTextA(
            int lParam,
            out sbyte lpString,
            int cchSize
        );
        [DllImport("user32.dll")]
        public static extern int GetKeyNameTextW(
            int lParam,
            out ushort lpString,
            int cchSize
        );
        [DllImport("user32.dll")]
        public static extern int GetKeyboardType(
            int nTypeFlag
        );
        [DllImport("user32.dll")]
        public static extern int ToAscii(
            uint uVirtKey,
            uint uScanCode,
            ref byte lpKeyState,
            out ushort lpChar,
            uint uFlags
        );
        [DllImport("user32.dll")]
        public static extern int ToAsciiEx(
            uint uVirtKey,
            uint uScanCode,
            ref byte lpKeyState,
            out ushort lpChar,
            uint uFlags,
            IntPtr dwhkl
        );
        [DllImport("user32.dll")]
        public static extern int ToUnicode(
            uint wVirtKey,
            uint wScanCode,
            ref byte lpKeyState,
            out ushort pwszBuff,
            int cchBuff,
            uint wFlags
        );
        [DllImport("user32.dll")]
        public static extern uint OemKeyScan(
            ushort wOemChar
        );
        [DllImport("user32.dll")]
        public static extern short VkKeyScanA(
            sbyte ch
        );
        [DllImport("user32.dll")]
        public static extern short VkKeyScanW(
            ushort ch
        );
        [DllImport("user32.dll")]
        public static extern short VkKeyScanExA(
            sbyte ch,
            IntPtr dwhkl
        );
        [DllImport("user32.dll")]
        public static extern short VkKeyScanExW(
            ushort ch,
            IntPtr dwhkl
        );
        [DllImport("user32.dll")]
        public static extern void keybd_event(
            byte bVk,
            byte bScan,
            uint dwFlags,
            ulong dwExtraInfo
        );
        [DllImport("user32.dll")]
        public static extern void mouse_event(
            uint dwFlags,
            uint dx,
            uint dy,
            uint dwData,
            ulong dwExtraInfo
        );
        [DllImport("user32.dll")]
        public static extern uint SendInput(
            uint cInputs,
            out tagINPUT pInputs,
            int cbSize
        );
        [DllImport("user32.dll")]
        public static extern int GetTouchInputInfo(
            out HTOUCHINPUT__ hTouchInput,
            uint cInputs,
            out tagTOUCHINPUT pInputs,
            int cbSize
        );
        [DllImport("user32.dll")]
        public static extern int CloseTouchInputHandle(
            out HTOUCHINPUT__ hTouchInput
        );
        [DllImport("user32.dll")]
        public static extern int RegisterTouchWindow(
            IntPtr hwnd,
            uint ulFlags
        );
        [DllImport("user32.dll")]
        public static extern int UnregisterTouchWindow(
            IntPtr hwnd
        );
        [DllImport("user32.dll")]
        public static extern int IsTouchWindow(
            IntPtr hwnd,
            out uint pulFlags
        );
        [DllImport("user32.dll")]
        public static extern int InitializeTouchInjection(
            uint maxCount,
            uint dwMode
        );
        [DllImport("user32.dll")]
        public static extern int InjectTouchInput(
            uint count,
            ref tagPOINTER_TOUCH_INFO contacts
        );
        [DllImport("user32.dll")]
        public static extern int GetPointerType(
            uint pointerId,
            out uint pointerType
        );
        [DllImport("user32.dll")]
        public static extern int GetPointerCursorId(
            uint pointerId,
            out uint cursorId
        );
        [DllImport("user32.dll")]
        public static extern int GetPointerInfo(
            uint pointerId,
            out tagPOINTER_INFO pointerInfo
        );
        [DllImport("user32.dll")]
        public static extern int GetPointerInfoHistory(
            uint pointerId,
            out uint entriesCount,
            out tagPOINTER_INFO pointerInfo
        );
        [DllImport("user32.dll")]
        public static extern int GetPointerFrameInfo(
            uint pointerId,
            out uint pointerCount,
            out tagPOINTER_INFO pointerInfo
        );
        [DllImport("user32.dll")]
        public static extern int GetPointerFrameInfoHistory(
            uint pointerId,
            out uint entriesCount,
            out uint pointerCount,
            out tagPOINTER_INFO pointerInfo
        );
        [DllImport("user32.dll")]
        public static extern int GetPointerTouchInfo(
            uint pointerId,
            out tagPOINTER_TOUCH_INFO touchInfo
        );
        [DllImport("user32.dll")]
        public static extern int GetPointerTouchInfoHistory(
            uint pointerId,
            out uint entriesCount,
            out tagPOINTER_TOUCH_INFO touchInfo
        );
        [DllImport("user32.dll")]
        public static extern int GetPointerFrameTouchInfo(
            uint pointerId,
            out uint pointerCount,
            out tagPOINTER_TOUCH_INFO touchInfo
        );
        [DllImport("user32.dll")]
        public static extern int GetPointerFrameTouchInfoHistory(
            uint pointerId,
            out uint entriesCount,
            out uint pointerCount,
            out tagPOINTER_TOUCH_INFO touchInfo
        );
        [DllImport("user32.dll")]
        public static extern int GetPointerPenInfo(
            uint pointerId,
            out tagPOINTER_PEN_INFO penInfo
        );
        [DllImport("user32.dll")]
        public static extern int GetPointerPenInfoHistory(
            uint pointerId,
            out uint entriesCount,
            out tagPOINTER_PEN_INFO penInfo
        );
        [DllImport("user32.dll")]
        public static extern int GetPointerFramePenInfo(
            uint pointerId,
            out uint pointerCount,
            out tagPOINTER_PEN_INFO penInfo
        );
        [DllImport("user32.dll")]
        public static extern int GetPointerFramePenInfoHistory(
            uint pointerId,
            out uint entriesCount,
            out uint pointerCount,
            out tagPOINTER_PEN_INFO penInfo
        );
        [DllImport("user32.dll")]
        public static extern int SkipPointerFrameMessages(
            uint pointerId
        );
        [DllImport("user32.dll")]
        public static extern int RegisterPointerInputTarget(
            IntPtr hwnd,
            uint pointerType
        );
        [DllImport("user32.dll")]
        public static extern int UnregisterPointerInputTarget(
            IntPtr hwnd,
            uint pointerType
        );
        [DllImport("user32.dll")]
        public static extern int RegisterPointerInputTargetEx(
            IntPtr hwnd,
            uint pointerType,
            int fObserve
        );
        [DllImport("user32.dll")]
        public static extern int UnregisterPointerInputTargetEx(
            IntPtr hwnd,
            uint pointerType
        );
        [DllImport("user32.dll")]
        public static extern IntPtr CreateSyntheticPointerDevice(
            uint pointerType,
            uint maxCount,
            POINTER_FEEDBACK_MODE mode
        );
        [DllImport("user32.dll")]
        public static extern int InjectSyntheticPointerInput(
            out HSYNTHETICPOINTERDEVICE__ device,
            ref tagPOINTER_TYPE_INFO pointerInfo,
            uint count
        );
        [DllImport("user32.dll")]
        public static extern void DestroySyntheticPointerDevice(
            out HSYNTHETICPOINTERDEVICE__ device
        );
        [DllImport("user32.dll")]
        public static extern int EnableMouseInPointer(
            int fEnable
        );
        [DllImport("user32.dll")]
        public static extern int IsMouseInPointerEnabled(
        );
        [DllImport("user32.dll")]
        public static extern int EnableMouseInPointerForThread(
        );
        [DllImport("user32.dll")]
        public static extern int RegisterTouchHitTestingWindow(
            IntPtr hwnd,
            uint value
        );
        [DllImport("user32.dll")]
        public static extern int EvaluateProximityToRect(
            ref tagRECT controlBoundingBox,
            ref tagTOUCH_HIT_TESTING_INPUT pHitTestingInput,
            out tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION pProximityEval
        );
        [DllImport("user32.dll")]
        public static extern int EvaluateProximityToPolygon(
            uint numVertices,
            ref tagPOINT controlPolygon,
            ref tagTOUCH_HIT_TESTING_INPUT pHitTestingInput,
            out tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION pProximityEval
        );
        [DllImport("user32.dll")]
        public static extern long PackTouchHitTestingProximityEvaluation(
            ref tagTOUCH_HIT_TESTING_INPUT pHitTestingInput,
            ref tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION pProximityEval
        );
        [DllImport("user32.dll")]
        public static extern int GetWindowFeedbackSetting(
            IntPtr hwnd,
            tagFEEDBACK_TYPE feedback,
            uint dwFlags,
            out uint pSize,
            IntPtr config
        );
        [DllImport("user32.dll")]
        public static extern int SetWindowFeedbackSetting(
            IntPtr hwnd,
            tagFEEDBACK_TYPE feedback,
            uint dwFlags,
            uint size,
            IntPtr configuration
        );
        [DllImport("user32.dll")]
        public static extern int GetPointerInputTransform(
            uint pointerId,
            uint historyCount,
            out tagINPUT_TRANSFORM inputTransform
        );
        [DllImport("user32.dll")]
        public static extern int GetLastInputInfo(
            out tagLASTINPUTINFO plii
        );
        [DllImport("user32.dll")]
        public static extern uint MapVirtualKeyA(
            uint uCode,
            uint uMapType
        );
        [DllImport("user32.dll")]
        public static extern uint MapVirtualKeyW(
            uint uCode,
            uint uMapType
        );
        [DllImport("user32.dll")]
        public static extern uint MapVirtualKeyExA(
            uint uCode,
            uint uMapType,
            IntPtr dwhkl
        );
        [DllImport("user32.dll")]
        public static extern uint MapVirtualKeyExW(
            uint uCode,
            uint uMapType,
            IntPtr dwhkl
        );
        [DllImport("user32.dll")]
        public static extern int GetInputState(
        );
        [DllImport("user32.dll")]
        public static extern uint GetQueueStatus(
            uint flags
        );
        [DllImport("user32.dll")]
        public static extern IntPtr GetCapture(
        );
        [DllImport("user32.dll")]
        public static extern IntPtr SetCapture(
            IntPtr hWnd
        );
        [DllImport("user32.dll")]
        public static extern int ReleaseCapture(
        );
        [DllImport("user32.dll")]
        public static extern uint MsgWaitForMultipleObjects(
            uint nCount,
            ref IntPtr pHandles,
            int fWaitAll,
            uint dwMilliseconds,
            uint dwWakeMask
        );
        [DllImport("user32.dll")]
        public static extern uint MsgWaitForMultipleObjectsEx(
            uint nCount,
            ref IntPtr pHandles,
            uint dwMilliseconds,
            uint dwWakeMask,
            uint dwFlags
        );
        [DllImport("user32.dll")]
        public static extern ulong SetTimer(
            IntPtr hWnd,
            ulong nIDEvent,
            uint uElapse,
            TIMERPROC lpTimerFunc
        );
        [DllImport("user32.dll")]
        public static extern ulong SetCoalescableTimer(
            IntPtr hWnd,
            ulong nIDEvent,
            uint uElapse,
            TIMERPROC lpTimerFunc,
            uint uToleranceDelay
        );
        [DllImport("user32.dll")]
        public static extern int KillTimer(
            IntPtr hWnd,
            ulong uIDEvent
        );
        [DllImport("user32.dll")]
        public static extern int IsWindowUnicode(
            IntPtr hWnd
        );
        [DllImport("user32.dll")]
        public static extern int EnableWindow(
            IntPtr hWnd,
            int bEnable
        );
        [DllImport("user32.dll")]
        public static extern int IsWindowEnabled(
            IntPtr hWnd
        );
        [DllImport("user32.dll")]
        public static extern IntPtr LoadAcceleratorsA(
            IntPtr hInstance,
            [MarshalAs(UnmanagedType.LPStr)]string lpTableName
        );
        [DllImport("user32.dll")]
        public static extern IntPtr LoadAcceleratorsW(
            IntPtr hInstance,
            ref ushort lpTableName
        );
        [DllImport("user32.dll")]
        public static extern IntPtr CreateAcceleratorTableA(
            out tagACCEL paccel,
            int cAccel
        );
        [DllImport("user32.dll")]
        public static extern IntPtr CreateAcceleratorTableW(
            out tagACCEL paccel,
            int cAccel
        );
        [DllImport("user32.dll")]
        public static extern int DestroyAcceleratorTable(
            out HACCEL__ hAccel
        );
        [DllImport("user32.dll")]
        public static extern int CopyAcceleratorTableA(
            out HACCEL__ hAccelSrc,
            out tagACCEL lpAccelDst,
            int cAccelEntries
        );
        [DllImport("user32.dll")]
        public static extern int CopyAcceleratorTableW(
            out HACCEL__ hAccelSrc,
            out tagACCEL lpAccelDst,
            int cAccelEntries
        );
        [DllImport("user32.dll")]
        public static extern int TranslateAcceleratorA(
            IntPtr hWnd,
            out HACCEL__ hAccTable,
            out tagMSG lpMsg
        );
        [DllImport("user32.dll")]
        public static extern int TranslateAcceleratorW(
            IntPtr hWnd,
            out HACCEL__ hAccTable,
            out tagMSG lpMsg
        );
        [DllImport("user32.dll")]
        public static extern int GetSystemMetrics(
            int nIndex
        );
        [DllImport("user32.dll")]
        public static extern int GetSystemMetricsForDpi(
            int nIndex,
            uint dpi
        );
        [DllImport("user32.dll")]
        public static extern IntPtr LoadMenuA(
            IntPtr hInstance,
            [MarshalAs(UnmanagedType.LPStr)]string lpMenuName
        );
        [DllImport("user32.dll")]
        public static extern IntPtr LoadMenuW(
            IntPtr hInstance,
            ref ushort lpMenuName
        );
        [DllImport("user32.dll")]
        public static extern IntPtr LoadMenuIndirectA(
            IntPtr lpMenuTemplate
        );
        [DllImport("user32.dll")]
        public static extern IntPtr LoadMenuIndirectW(
            IntPtr lpMenuTemplate
        );
        [DllImport("user32.dll")]
        public static extern IntPtr GetMenu(
            IntPtr hWnd
        );
        [DllImport("user32.dll")]
        public static extern int SetMenu(
            IntPtr hWnd,
            IntPtr hMenu
        );
        [DllImport("user32.dll")]
        public static extern int ChangeMenuA(
            IntPtr hMenu,
            uint cmd,
            [MarshalAs(UnmanagedType.LPStr)]string lpszNewItem,
            uint cmdInsert,
            uint flags
        );
        [DllImport("user32.dll")]
        public static extern int ChangeMenuW(
            IntPtr hMenu,
            uint cmd,
            ref ushort lpszNewItem,
            uint cmdInsert,
            uint flags
        );
        [DllImport("user32.dll")]
        public static extern int HiliteMenuItem(
            IntPtr hWnd,
            IntPtr hMenu,
            uint uIDHiliteItem,
            uint uHilite
        );
        [DllImport("user32.dll")]
        public static extern int GetMenuStringA(
            IntPtr hMenu,
            uint uIDItem,
            out sbyte lpString,
            int cchMax,
            uint flags
        );
        [DllImport("user32.dll")]
        public static extern int GetMenuStringW(
            IntPtr hMenu,
            uint uIDItem,
            out ushort lpString,
            int cchMax,
            uint flags
        );
        [DllImport("user32.dll")]
        public static extern uint GetMenuState(
            IntPtr hMenu,
            uint uId,
            uint uFlags
        );
        [DllImport("user32.dll")]
        public static extern int DrawMenuBar(
            IntPtr hWnd
        );
        [DllImport("user32.dll")]
        public static extern IntPtr GetSystemMenu(
            IntPtr hWnd,
            int bRevert
        );
        [DllImport("user32.dll")]
        public static extern IntPtr CreateMenu(
        );
        [DllImport("user32.dll")]
        public static extern IntPtr CreatePopupMenu(
        );
        [DllImport("user32.dll")]
        public static extern int DestroyMenu(
            IntPtr hMenu
        );
        [DllImport("user32.dll")]
        public static extern uint CheckMenuItem(
            IntPtr hMenu,
            uint uIDCheckItem,
            uint uCheck
        );
        [DllImport("user32.dll")]
        public static extern int EnableMenuItem(
            IntPtr hMenu,
            uint uIDEnableItem,
            uint uEnable
        );
        [DllImport("user32.dll")]
        public static extern IntPtr GetSubMenu(
            IntPtr hMenu,
            int nPos
        );
        [DllImport("user32.dll")]
        public static extern uint GetMenuItemID(
            IntPtr hMenu,
            int nPos
        );
        [DllImport("user32.dll")]
        public static extern int GetMenuItemCount(
            IntPtr hMenu
        );
        [DllImport("user32.dll")]
        public static extern int InsertMenuA(
            IntPtr hMenu,
            uint uPosition,
            uint uFlags,
            ulong uIDNewItem,
            [MarshalAs(UnmanagedType.LPStr)]string lpNewItem
        );
        [DllImport("user32.dll")]
        public static extern int InsertMenuW(
            IntPtr hMenu,
            uint uPosition,
            uint uFlags,
            ulong uIDNewItem,
            ref ushort lpNewItem
        );
        [DllImport("user32.dll")]
        public static extern int AppendMenuA(
            IntPtr hMenu,
            uint uFlags,
            ulong uIDNewItem,
            [MarshalAs(UnmanagedType.LPStr)]string lpNewItem
        );
        [DllImport("user32.dll")]
        public static extern int AppendMenuW(
            IntPtr hMenu,
            uint uFlags,
            ulong uIDNewItem,
            ref ushort lpNewItem
        );
        [DllImport("user32.dll")]
        public static extern int ModifyMenuA(
            IntPtr hMnu,
            uint uPosition,
            uint uFlags,
            ulong uIDNewItem,
            [MarshalAs(UnmanagedType.LPStr)]string lpNewItem
        );
        [DllImport("user32.dll")]
        public static extern int ModifyMenuW(
            IntPtr hMnu,
            uint uPosition,
            uint uFlags,
            ulong uIDNewItem,
            ref ushort lpNewItem
        );
        [DllImport("user32.dll")]
        public static extern int RemoveMenu(
            IntPtr hMenu,
            uint uPosition,
            uint uFlags
        );
        [DllImport("user32.dll")]
        public static extern int DeleteMenu(
            IntPtr hMenu,
            uint uPosition,
            uint uFlags
        );
        [DllImport("user32.dll")]
        public static extern int SetMenuItemBitmaps(
            IntPtr hMenu,
            uint uPosition,
            uint uFlags,
            out HBITMAP__ hBitmapUnchecked,
            out HBITMAP__ hBitmapChecked
        );
        [DllImport("user32.dll")]
        public static extern int GetMenuCheckMarkDimensions(
        );
        [DllImport("user32.dll")]
        public static extern int TrackPopupMenu(
            IntPtr hMenu,
            uint uFlags,
            int x,
            int y,
            int nReserved,
            IntPtr hWnd,
            ref tagRECT prcRect
        );
        [DllImport("user32.dll")]
        public static extern int TrackPopupMenuEx(
            IntPtr hMenu,
            uint uFlags,
            int x,
            int y,
            IntPtr hwnd,
            out tagTPMPARAMS lptpm
        );
        [DllImport("user32.dll")]
        public static extern int CalculatePopupWindowPosition(
            ref tagPOINT anchorPoint,
            ref tagSIZE windowSize,
            uint flags,
            out tagRECT excludeRect,
            out tagRECT popupWindowPosition
        );
        [DllImport("user32.dll")]
        public static extern int GetMenuInfo(
            IntPtr __param__1,
            out tagMENUINFO __param__2
        );
        [DllImport("user32.dll")]
        public static extern int SetMenuInfo(
            IntPtr __param__1,
            ref tagMENUINFO __param__2
        );
        [DllImport("user32.dll")]
        public static extern int EndMenu(
        );
        [DllImport("user32.dll")]
        public static extern int InsertMenuItemA(
            IntPtr hmenu,
            uint item,
            int fByPosition,
            ref tagMENUITEMINFOA lpmi
        );
        [DllImport("user32.dll")]
        public static extern int InsertMenuItemW(
            IntPtr hmenu,
            uint item,
            int fByPosition,
            ref tagMENUITEMINFOW lpmi
        );
        [DllImport("user32.dll")]
        public static extern int GetMenuItemInfoA(
            IntPtr hmenu,
            uint item,
            int fByPosition,
            out tagMENUITEMINFOA lpmii
        );
        [DllImport("user32.dll")]
        public static extern int GetMenuItemInfoW(
            IntPtr hmenu,
            uint item,
            int fByPosition,
            out tagMENUITEMINFOW lpmii
        );
        [DllImport("user32.dll")]
        public static extern int SetMenuItemInfoA(
            IntPtr hmenu,
            uint item,
            int fByPositon,
            ref tagMENUITEMINFOA lpmii
        );
        [DllImport("user32.dll")]
        public static extern int SetMenuItemInfoW(
            IntPtr hmenu,
            uint item,
            int fByPositon,
            ref tagMENUITEMINFOW lpmii
        );
        [DllImport("user32.dll")]
        public static extern uint GetMenuDefaultItem(
            IntPtr hMenu,
            uint fByPos,
            uint gmdiFlags
        );
        [DllImport("user32.dll")]
        public static extern int SetMenuDefaultItem(
            IntPtr hMenu,
            uint uItem,
            uint fByPos
        );
        [DllImport("user32.dll")]
        public static extern int GetMenuItemRect(
            IntPtr hWnd,
            IntPtr hMenu,
            uint uItem,
            out tagRECT lprcItem
        );
        [DllImport("user32.dll")]
        public static extern int MenuItemFromPoint(
            IntPtr hWnd,
            IntPtr hMenu,
            tagPOINT ptScreen
        );
        [DllImport("user32.dll")]
        public static extern uint DragObject(
            IntPtr hwndParent,
            IntPtr hwndFrom,
            uint fmt,
            ulong data,
            IntPtr hcur
        );
        [DllImport("user32.dll")]
        public static extern int DragDetect(
            IntPtr hwnd,
            tagPOINT pt
        );
        [DllImport("user32.dll")]
        public static extern int DrawIcon(
            IntPtr hDC,
            int X,
            int Y,
            IntPtr hIcon
        );
        [DllImport("user32.dll")]
        public static extern int DrawTextA(
            IntPtr hdc,
            [MarshalAs(UnmanagedType.LPStr)]string lpchText,
            int cchText,
            out tagRECT lprc,
            uint format
        );
        [DllImport("user32.dll")]
        public static extern int DrawTextW(
            IntPtr hdc,
            ref ushort lpchText,
            int cchText,
            out tagRECT lprc,
            uint format
        );
        [DllImport("user32.dll")]
        public static extern int DrawTextExA(
            IntPtr hdc,
            out sbyte lpchText,
            int cchText,
            out tagRECT lprc,
            uint format,
            out tagDRAWTEXTPARAMS lpdtp
        );
        [DllImport("user32.dll")]
        public static extern int DrawTextExW(
            IntPtr hdc,
            out ushort lpchText,
            int cchText,
            out tagRECT lprc,
            uint format,
            out tagDRAWTEXTPARAMS lpdtp
        );
        [DllImport("user32.dll")]
        public static extern int GrayStringA(
            IntPtr hDC,
            out HBRUSH__ hBrush,
            GRAYSTRINGPROC lpOutputFunc,
            long lpData,
            int nCount,
            int X,
            int Y,
            int nWidth,
            int nHeight
        );
        [DllImport("user32.dll")]
        public static extern int GrayStringW(
            IntPtr hDC,
            out HBRUSH__ hBrush,
            GRAYSTRINGPROC lpOutputFunc,
            long lpData,
            int nCount,
            int X,
            int Y,
            int nWidth,
            int nHeight
        );
        [DllImport("user32.dll")]
        public static extern int DrawStateA(
            IntPtr hdc,
            out HBRUSH__ hbrFore,
            DRAWSTATEPROC qfnCallBack,
            long lData,
            ulong wData,
            int x,
            int y,
            int cx,
            int cy,
            uint uFlags
        );
        [DllImport("user32.dll")]
        public static extern int DrawStateW(
            IntPtr hdc,
            out HBRUSH__ hbrFore,
            DRAWSTATEPROC qfnCallBack,
            long lData,
            ulong wData,
            int x,
            int y,
            int cx,
            int cy,
            uint uFlags
        );
        [DllImport("user32.dll")]
        public static extern int TabbedTextOutA(
            IntPtr hdc,
            int x,
            int y,
            [MarshalAs(UnmanagedType.LPStr)]string lpString,
            int chCount,
            int nTabPositions,
            ref int lpnTabStopPositions,
            int nTabOrigin
        );
        [DllImport("user32.dll")]
        public static extern int TabbedTextOutW(
            IntPtr hdc,
            int x,
            int y,
            ref ushort lpString,
            int chCount,
            int nTabPositions,
            ref int lpnTabStopPositions,
            int nTabOrigin
        );
        [DllImport("user32.dll")]
        public static extern uint GetTabbedTextExtentA(
            IntPtr hdc,
            [MarshalAs(UnmanagedType.LPStr)]string lpString,
            int chCount,
            int nTabPositions,
            ref int lpnTabStopPositions
        );
        [DllImport("user32.dll")]
        public static extern uint GetTabbedTextExtentW(
            IntPtr hdc,
            ref ushort lpString,
            int chCount,
            int nTabPositions,
            ref int lpnTabStopPositions
        );
        [DllImport("user32.dll")]
        public static extern int UpdateWindow(
            IntPtr hWnd
        );
        [DllImport("user32.dll")]
        public static extern IntPtr SetActiveWindow(
            IntPtr hWnd
        );
        [DllImport("user32.dll")]
        public static extern IntPtr GetForegroundWindow(
        );
        [DllImport("user32.dll")]
        public static extern int PaintDesktop(
            IntPtr hdc
        );
        [DllImport("user32.dll")]
        public static extern void SwitchToThisWindow(
            IntPtr hwnd,
            int fUnknown
        );
        [DllImport("user32.dll")]
        public static extern int SetForegroundWindow(
            IntPtr hWnd
        );
        [DllImport("user32.dll")]
        public static extern int AllowSetForegroundWindow(
            uint dwProcessId
        );
        [DllImport("user32.dll")]
        public static extern int LockSetForegroundWindow(
            uint uLockCode
        );
        [DllImport("user32.dll")]
        public static extern IntPtr WindowFromDC(
            IntPtr hDC
        );
        [DllImport("user32.dll")]
        public static extern IntPtr GetDC(
            IntPtr hWnd
        );
        [DllImport("user32.dll")]
        public static extern IntPtr GetDCEx(
            IntPtr hWnd,
            out HRGN__ hrgnClip,
            uint flags
        );
        [DllImport("user32.dll")]
        public static extern IntPtr GetWindowDC(
            IntPtr hWnd
        );
        [DllImport("user32.dll")]
        public static extern int ReleaseDC(
            IntPtr hWnd,
            IntPtr hDC
        );
        [DllImport("user32.dll")]
        public static extern IntPtr BeginPaint(
            IntPtr hWnd,
            out tagPAINTSTRUCT lpPaint
        );
        [DllImport("user32.dll")]
        public static extern int EndPaint(
            IntPtr hWnd,
            ref tagPAINTSTRUCT lpPaint
        );
        [DllImport("user32.dll")]
        public static extern int GetUpdateRect(
            IntPtr hWnd,
            out tagRECT lpRect,
            int bErase
        );
        [DllImport("user32.dll")]
        public static extern int GetUpdateRgn(
            IntPtr hWnd,
            out HRGN__ hRgn,
            int bErase
        );
        [DllImport("user32.dll")]
        public static extern int SetWindowRgn(
            IntPtr hWnd,
            out HRGN__ hRgn,
            int bRedraw
        );
        [DllImport("user32.dll")]
        public static extern int GetWindowRgn(
            IntPtr hWnd,
            out HRGN__ hRgn
        );
        [DllImport("user32.dll")]
        public static extern int GetWindowRgnBox(
            IntPtr hWnd,
            out tagRECT lprc
        );
        [DllImport("user32.dll")]
        public static extern int ExcludeUpdateRgn(
            IntPtr hDC,
            IntPtr hWnd
        );
        [DllImport("user32.dll")]
        public static extern int InvalidateRect(
            IntPtr hWnd,
            ref tagRECT lpRect,
            int bErase
        );
        [DllImport("user32.dll")]
        public static extern int ValidateRect(
            IntPtr hWnd,
            ref tagRECT lpRect
        );
        [DllImport("user32.dll")]
        public static extern int InvalidateRgn(
            IntPtr hWnd,
            out HRGN__ hRgn,
            int bErase
        );
        [DllImport("user32.dll")]
        public static extern int ValidateRgn(
            IntPtr hWnd,
            out HRGN__ hRgn
        );
        [DllImport("user32.dll")]
        public static extern int RedrawWindow(
            IntPtr hWnd,
            ref tagRECT lprcUpdate,
            out HRGN__ hrgnUpdate,
            uint flags
        );
        [DllImport("user32.dll")]
        public static extern int LockWindowUpdate(
            IntPtr hWndLock
        );
        [DllImport("user32.dll")]
        public static extern int ScrollWindow(
            IntPtr hWnd,
            int XAmount,
            int YAmount,
            ref tagRECT lpRect,
            ref tagRECT lpClipRect
        );
        [DllImport("user32.dll")]
        public static extern int ScrollDC(
            IntPtr hDC,
            int dx,
            int dy,
            ref tagRECT lprcScroll,
            ref tagRECT lprcClip,
            out HRGN__ hrgnUpdate,
            out tagRECT lprcUpdate
        );
        [DllImport("user32.dll")]
        public static extern int ScrollWindowEx(
            IntPtr hWnd,
            int dx,
            int dy,
            ref tagRECT prcScroll,
            ref tagRECT prcClip,
            out HRGN__ hrgnUpdate,
            out tagRECT prcUpdate,
            uint flags
        );
        [DllImport("user32.dll")]
        public static extern int SetScrollPos(
            IntPtr hWnd,
            int nBar,
            int nPos,
            int bRedraw
        );
        [DllImport("user32.dll")]
        public static extern int GetScrollPos(
            IntPtr hWnd,
            int nBar
        );
        [DllImport("user32.dll")]
        public static extern int SetScrollRange(
            IntPtr hWnd,
            int nBar,
            int nMinPos,
            int nMaxPos,
            int bRedraw
        );
        [DllImport("user32.dll")]
        public static extern int GetScrollRange(
            IntPtr hWnd,
            int nBar,
            out int lpMinPos,
            out int lpMaxPos
        );
        [DllImport("user32.dll")]
        public static extern int ShowScrollBar(
            IntPtr hWnd,
            int wBar,
            int bShow
        );
        [DllImport("user32.dll")]
        public static extern int EnableScrollBar(
            IntPtr hWnd,
            uint wSBflags,
            uint wArrows
        );
        [DllImport("user32.dll")]
        public static extern int SetPropA(
            IntPtr hWnd,
            [MarshalAs(UnmanagedType.LPStr)]string lpString,
            IntPtr hData
        );
        [DllImport("user32.dll")]
        public static extern int SetPropW(
            IntPtr hWnd,
            ref ushort lpString,
            IntPtr hData
        );
        [DllImport("user32.dll")]
        public static extern IntPtr GetPropA(
            IntPtr hWnd,
            [MarshalAs(UnmanagedType.LPStr)]string lpString
        );
        [DllImport("user32.dll")]
        public static extern IntPtr GetPropW(
            IntPtr hWnd,
            ref ushort lpString
        );
        [DllImport("user32.dll")]
        public static extern IntPtr RemovePropA(
            IntPtr hWnd,
            [MarshalAs(UnmanagedType.LPStr)]string lpString
        );
        [DllImport("user32.dll")]
        public static extern IntPtr RemovePropW(
            IntPtr hWnd,
            ref ushort lpString
        );
        [DllImport("user32.dll")]
        public static extern int EnumPropsExA(
            IntPtr hWnd,
            PROPENUMPROCEXA lpEnumFunc,
            long lParam
        );
        [DllImport("user32.dll")]
        public static extern int EnumPropsExW(
            IntPtr hWnd,
            PROPENUMPROCEXW lpEnumFunc,
            long lParam
        );
        [DllImport("user32.dll")]
        public static extern int EnumPropsA(
            IntPtr hWnd,
            PROPENUMPROCA lpEnumFunc
        );
        [DllImport("user32.dll")]
        public static extern int EnumPropsW(
            IntPtr hWnd,
            PROPENUMPROCW lpEnumFunc
        );
        [DllImport("user32.dll")]
        public static extern int SetWindowTextA(
            IntPtr hWnd,
            [MarshalAs(UnmanagedType.LPStr)]string lpString
        );
        [DllImport("user32.dll")]
        public static extern int SetWindowTextW(
            IntPtr hWnd,
            ref ushort lpString
        );
        [DllImport("user32.dll")]
        public static extern int GetWindowTextA(
            IntPtr hWnd,
            out sbyte lpString,
            int nMaxCount
        );
        [DllImport("user32.dll")]
        public static extern int GetWindowTextW(
            IntPtr hWnd,
            out ushort lpString,
            int nMaxCount
        );
        [DllImport("user32.dll")]
        public static extern int GetWindowTextLengthA(
            IntPtr hWnd
        );
        [DllImport("user32.dll")]
        public static extern int GetWindowTextLengthW(
            IntPtr hWnd
        );
        [DllImport("user32.dll")]
        public static extern int GetClientRect(
            IntPtr hWnd,
            out tagRECT lpRect
        );
        [DllImport("user32.dll")]
        public static extern int GetWindowRect(
            IntPtr hWnd,
            out tagRECT lpRect
        );
        [DllImport("user32.dll")]
        public static extern int AdjustWindowRect(
            out tagRECT lpRect,
            uint dwStyle,
            int bMenu
        );
        [DllImport("user32.dll")]
        public static extern int AdjustWindowRectEx(
            out tagRECT lpRect,
            uint dwStyle,
            int bMenu,
            uint dwExStyle
        );
        [DllImport("user32.dll")]
        public static extern int AdjustWindowRectExForDpi(
            out tagRECT lpRect,
            uint dwStyle,
            int bMenu,
            uint dwExStyle,
            uint dpi
        );
        [DllImport("user32.dll")]
        public static extern int SetWindowContextHelpId(
            IntPtr __param__1,
            uint __param__2
        );
        [DllImport("user32.dll")]
        public static extern uint GetWindowContextHelpId(
            IntPtr __param__1
        );
        [DllImport("user32.dll")]
        public static extern int SetMenuContextHelpId(
            IntPtr __param__1,
            uint __param__2
        );
        [DllImport("user32.dll")]
        public static extern uint GetMenuContextHelpId(
            IntPtr __param__1
        );
        [DllImport("user32.dll")]
        public static extern int MessageBoxA(
            IntPtr hWnd,
            [MarshalAs(UnmanagedType.LPStr)]string lpText,
            [MarshalAs(UnmanagedType.LPStr)]string lpCaption,
            uint uType
        );
        [DllImport("user32.dll")]
        public static extern int MessageBoxW(
            IntPtr hWnd,
            ref ushort lpText,
            ref ushort lpCaption,
            uint uType
        );
        [DllImport("user32.dll")]
        public static extern int MessageBoxExA(
            IntPtr hWnd,
            [MarshalAs(UnmanagedType.LPStr)]string lpText,
            [MarshalAs(UnmanagedType.LPStr)]string lpCaption,
            uint uType,
            ushort wLanguageId
        );
        [DllImport("user32.dll")]
        public static extern int MessageBoxExW(
            IntPtr hWnd,
            ref ushort lpText,
            ref ushort lpCaption,
            uint uType,
            ushort wLanguageId
        );
        [DllImport("user32.dll")]
        public static extern int MessageBoxIndirectA(
            ref tagMSGBOXPARAMSA lpmbp
        );
        [DllImport("user32.dll")]
        public static extern int MessageBoxIndirectW(
            ref tagMSGBOXPARAMSW lpmbp
        );
        [DllImport("user32.dll")]
        public static extern int MessageBeep(
            uint uType
        );
        [DllImport("user32.dll")]
        public static extern int ShowCursor(
            int bShow
        );
        [DllImport("user32.dll")]
        public static extern int SetCursorPos(
            int X,
            int Y
        );
        [DllImport("user32.dll")]
        public static extern int SetPhysicalCursorPos(
            int X,
            int Y
        );
        [DllImport("user32.dll")]
        public static extern IntPtr SetCursor(
            IntPtr hCursor
        );
        [DllImport("user32.dll")]
        public static extern int GetCursorPos(
            out tagPOINT lpPoint
        );
        [DllImport("user32.dll")]
        public static extern int GetPhysicalCursorPos(
            out tagPOINT lpPoint
        );
        [DllImport("user32.dll")]
        public static extern int GetClipCursor(
            out tagRECT lpRect
        );
        [DllImport("user32.dll")]
        public static extern IntPtr GetCursor(
        );
        [DllImport("user32.dll")]
        public static extern int CreateCaret(
            IntPtr hWnd,
            out HBITMAP__ hBitmap,
            int nWidth,
            int nHeight
        );
        [DllImport("user32.dll")]
        public static extern uint GetCaretBlinkTime(
        );
        [DllImport("user32.dll")]
        public static extern int SetCaretBlinkTime(
            uint uMSeconds
        );
        [DllImport("user32.dll")]
        public static extern int DestroyCaret(
        );
        [DllImport("user32.dll")]
        public static extern int HideCaret(
            IntPtr hWnd
        );
        [DllImport("user32.dll")]
        public static extern int ShowCaret(
            IntPtr hWnd
        );
        [DllImport("user32.dll")]
        public static extern int SetCaretPos(
            int X,
            int Y
        );
        [DllImport("user32.dll")]
        public static extern int GetCaretPos(
            out tagPOINT lpPoint
        );
        [DllImport("user32.dll")]
        public static extern int ClientToScreen(
            IntPtr hWnd,
            out tagPOINT lpPoint
        );
        [DllImport("user32.dll")]
        public static extern int ScreenToClient(
            IntPtr hWnd,
            out tagPOINT lpPoint
        );
        [DllImport("user32.dll")]
        public static extern int LogicalToPhysicalPoint(
            IntPtr hWnd,
            out tagPOINT lpPoint
        );
        [DllImport("user32.dll")]
        public static extern int PhysicalToLogicalPoint(
            IntPtr hWnd,
            out tagPOINT lpPoint
        );
        [DllImport("user32.dll")]
        public static extern int LogicalToPhysicalPointForPerMonitorDPI(
            IntPtr hWnd,
            out tagPOINT lpPoint
        );
        [DllImport("user32.dll")]
        public static extern int PhysicalToLogicalPointForPerMonitorDPI(
            IntPtr hWnd,
            out tagPOINT lpPoint
        );
        [DllImport("user32.dll")]
        public static extern int MapWindowPoints(
            IntPtr hWndFrom,
            IntPtr hWndTo,
            out tagPOINT lpPoints,
            uint cPoints
        );
        [DllImport("user32.dll")]
        public static extern IntPtr WindowFromPoint(
            tagPOINT Point
        );
        [DllImport("user32.dll")]
        public static extern IntPtr WindowFromPhysicalPoint(
            tagPOINT Point
        );
        [DllImport("user32.dll")]
        public static extern IntPtr ChildWindowFromPoint(
            IntPtr hWndParent,
            tagPOINT Point
        );
        [DllImport("user32.dll")]
        public static extern int ClipCursor(
            ref tagRECT lpRect
        );
        [DllImport("user32.dll")]
        public static extern IntPtr ChildWindowFromPointEx(
            IntPtr hwnd,
            tagPOINT pt,
            uint flags
        );
        [DllImport("user32.dll")]
        public static extern uint GetSysColor(
            int nIndex
        );
        [DllImport("user32.dll")]
        public static extern IntPtr GetSysColorBrush(
            int nIndex
        );
        [DllImport("user32.dll")]
        public static extern int SetSysColors(
            int cElements,
            ref int lpaElements,
            ref uint lpaRgbValues
        );
        [DllImport("user32.dll")]
        public static extern int DrawFocusRect(
            IntPtr hDC,
            ref tagRECT lprc
        );
        [DllImport("user32.dll")]
        public static extern int FillRect(
            IntPtr hDC,
            ref tagRECT lprc,
            out HBRUSH__ hbr
        );
        [DllImport("user32.dll")]
        public static extern int FrameRect(
            IntPtr hDC,
            ref tagRECT lprc,
            out HBRUSH__ hbr
        );
        [DllImport("user32.dll")]
        public static extern int InvertRect(
            IntPtr hDC,
            ref tagRECT lprc
        );
        [DllImport("user32.dll")]
        public static extern int SetRect(
            out tagRECT lprc,
            int xLeft,
            int yTop,
            int xRight,
            int yBottom
        );
        [DllImport("user32.dll")]
        public static extern int SetRectEmpty(
            out tagRECT lprc
        );
        [DllImport("user32.dll")]
        public static extern int CopyRect(
            out tagRECT lprcDst,
            ref tagRECT lprcSrc
        );
        [DllImport("user32.dll")]
        public static extern int InflateRect(
            out tagRECT lprc,
            int dx,
            int dy
        );
        [DllImport("user32.dll")]
        public static extern int IntersectRect(
            out tagRECT lprcDst,
            ref tagRECT lprcSrc1,
            ref tagRECT lprcSrc2
        );
        [DllImport("user32.dll")]
        public static extern int UnionRect(
            out tagRECT lprcDst,
            ref tagRECT lprcSrc1,
            ref tagRECT lprcSrc2
        );
        [DllImport("user32.dll")]
        public static extern int SubtractRect(
            out tagRECT lprcDst,
            ref tagRECT lprcSrc1,
            ref tagRECT lprcSrc2
        );
        [DllImport("user32.dll")]
        public static extern int OffsetRect(
            out tagRECT lprc,
            int dx,
            int dy
        );
        [DllImport("user32.dll")]
        public static extern int IsRectEmpty(
            ref tagRECT lprc
        );
        [DllImport("user32.dll")]
        public static extern int EqualRect(
            ref tagRECT lprc1,
            ref tagRECT lprc2
        );
        [DllImport("user32.dll")]
        public static extern int PtInRect(
            ref tagRECT lprc,
            tagPOINT pt
        );
        [DllImport("user32.dll")]
        public static extern ushort GetWindowWord(
            IntPtr hWnd,
            int nIndex
        );
        [DllImport("user32.dll")]
        public static extern ushort SetWindowWord(
            IntPtr hWnd,
            int nIndex,
            ushort wNewWord
        );
        [DllImport("user32.dll")]
        public static extern int GetWindowLongA(
            IntPtr hWnd,
            int nIndex
        );
        [DllImport("user32.dll")]
        public static extern int GetWindowLongW(
            IntPtr hWnd,
            int nIndex
        );
        [DllImport("user32.dll")]
        public static extern int SetWindowLongA(
            IntPtr hWnd,
            int nIndex,
            int dwNewLong
        );
        [DllImport("user32.dll")]
        public static extern int SetWindowLongW(
            IntPtr hWnd,
            int nIndex,
            int dwNewLong
        );
        [DllImport("user32.dll")]
        public static extern long GetWindowLongPtrA(
            IntPtr hWnd,
            int nIndex
        );
        [DllImport("user32.dll")]
        public static extern long GetWindowLongPtrW(
            IntPtr hWnd,
            int nIndex
        );
        [DllImport("user32.dll")]
        public static extern long SetWindowLongPtrA(
            IntPtr hWnd,
            int nIndex,
            long dwNewLong
        );
        [DllImport("user32.dll")]
        public static extern long SetWindowLongPtrW(
            IntPtr hWnd,
            int nIndex,
            long dwNewLong
        );
        [DllImport("user32.dll")]
        public static extern ushort GetClassWord(
            IntPtr hWnd,
            int nIndex
        );
        [DllImport("user32.dll")]
        public static extern ushort SetClassWord(
            IntPtr hWnd,
            int nIndex,
            ushort wNewWord
        );
        [DllImport("user32.dll")]
        public static extern uint GetClassLongA(
            IntPtr hWnd,
            int nIndex
        );
        [DllImport("user32.dll")]
        public static extern uint GetClassLongW(
            IntPtr hWnd,
            int nIndex
        );
        [DllImport("user32.dll")]
        public static extern uint SetClassLongA(
            IntPtr hWnd,
            int nIndex,
            int dwNewLong
        );
        [DllImport("user32.dll")]
        public static extern uint SetClassLongW(
            IntPtr hWnd,
            int nIndex,
            int dwNewLong
        );
        [DllImport("user32.dll")]
        public static extern ulong GetClassLongPtrA(
            IntPtr hWnd,
            int nIndex
        );
        [DllImport("user32.dll")]
        public static extern ulong GetClassLongPtrW(
            IntPtr hWnd,
            int nIndex
        );
        [DllImport("user32.dll")]
        public static extern ulong SetClassLongPtrA(
            IntPtr hWnd,
            int nIndex,
            long dwNewLong
        );
        [DllImport("user32.dll")]
        public static extern ulong SetClassLongPtrW(
            IntPtr hWnd,
            int nIndex,
            long dwNewLong
        );
        [DllImport("user32.dll")]
        public static extern int GetProcessDefaultLayout(
            out uint pdwDefaultLayout
        );
        [DllImport("user32.dll")]
        public static extern int SetProcessDefaultLayout(
            uint dwDefaultLayout
        );
        [DllImport("user32.dll")]
        public static extern IntPtr GetDesktopWindow(
        );
        [DllImport("user32.dll")]
        public static extern IntPtr GetParent(
            IntPtr hWnd
        );
        [DllImport("user32.dll")]
        public static extern IntPtr SetParent(
            IntPtr hWndChild,
            IntPtr hWndNewParent
        );
        [DllImport("user32.dll")]
        public static extern int EnumChildWindows(
            IntPtr hWndParent,
            WNDENUMPROC lpEnumFunc,
            long lParam
        );
        [DllImport("user32.dll")]
        public static extern IntPtr FindWindowA(
            [MarshalAs(UnmanagedType.LPStr)]string lpClassName,
            [MarshalAs(UnmanagedType.LPStr)]string lpWindowName
        );
        [DllImport("user32.dll")]
        public static extern IntPtr FindWindowW(
            ref ushort lpClassName,
            ref ushort lpWindowName
        );
        [DllImport("user32.dll")]
        public static extern IntPtr FindWindowExA(
            IntPtr hWndParent,
            IntPtr hWndChildAfter,
            [MarshalAs(UnmanagedType.LPStr)]string lpszClass,
            [MarshalAs(UnmanagedType.LPStr)]string lpszWindow
        );
        [DllImport("user32.dll")]
        public static extern IntPtr FindWindowExW(
            IntPtr hWndParent,
            IntPtr hWndChildAfter,
            ref ushort lpszClass,
            ref ushort lpszWindow
        );
        [DllImport("user32.dll")]
        public static extern IntPtr GetShellWindow(
        );
        [DllImport("user32.dll")]
        public static extern int RegisterShellHookWindow(
            IntPtr hwnd
        );
        [DllImport("user32.dll")]
        public static extern int DeregisterShellHookWindow(
            IntPtr hwnd
        );
        [DllImport("user32.dll")]
        public static extern int EnumWindows(
            WNDENUMPROC lpEnumFunc,
            long lParam
        );
        [DllImport("user32.dll")]
        public static extern int EnumThreadWindows(
            uint dwThreadId,
            WNDENUMPROC lpfn,
            long lParam
        );
        [DllImport("user32.dll")]
        public static extern int GetClassNameA(
            IntPtr hWnd,
            out sbyte lpClassName,
            int nMaxCount
        );
        [DllImport("user32.dll")]
        public static extern int GetClassNameW(
            IntPtr hWnd,
            out ushort lpClassName,
            int nMaxCount
        );
        [DllImport("user32.dll")]
        public static extern IntPtr GetTopWindow(
            IntPtr hWnd
        );
        [DllImport("user32.dll")]
        public static extern uint GetWindowThreadProcessId(
            IntPtr hWnd,
            out uint lpdwProcessId
        );
        [DllImport("user32.dll")]
        public static extern int IsGUIThread(
            int bConvert
        );
        [DllImport("user32.dll")]
        public static extern IntPtr GetLastActivePopup(
            IntPtr hWnd
        );
        [DllImport("user32.dll")]
        public static extern IntPtr GetWindow(
            IntPtr hWnd,
            uint uCmd
        );
        [DllImport("user32.dll")]
        public static extern IntPtr SetWindowsHookA(
            int nFilterType,
            HOOKPROC pfnFilterProc
        );
        [DllImport("user32.dll")]
        public static extern IntPtr SetWindowsHookW(
            int nFilterType,
            HOOKPROC pfnFilterProc
        );
        [DllImport("user32.dll")]
        public static extern int UnhookWindowsHook(
            int nCode,
            HOOKPROC pfnFilterProc
        );
        [DllImport("user32.dll")]
        public static extern IntPtr SetWindowsHookExA(
            int idHook,
            HOOKPROC lpfn,
            IntPtr hmod,
            uint dwThreadId
        );
        [DllImport("user32.dll")]
        public static extern IntPtr SetWindowsHookExW(
            int idHook,
            HOOKPROC lpfn,
            IntPtr hmod,
            uint dwThreadId
        );
        [DllImport("user32.dll")]
        public static extern int UnhookWindowsHookEx(
            out HHOOK__ hhk
        );
        [DllImport("user32.dll")]
        public static extern long CallNextHookEx(
            out HHOOK__ hhk,
            int nCode,
            ulong wParam,
            long lParam
        );
        [DllImport("user32.dll")]
        public static extern int CheckMenuRadioItem(
            IntPtr hmenu,
            uint first,
            uint last,
            uint check,
            uint flags
        );
        [DllImport("user32.dll")]
        public static extern IntPtr LoadBitmapA(
            IntPtr hInstance,
            [MarshalAs(UnmanagedType.LPStr)]string lpBitmapName
        );
        [DllImport("user32.dll")]
        public static extern IntPtr LoadBitmapW(
            IntPtr hInstance,
            ref ushort lpBitmapName
        );
        [DllImport("user32.dll")]
        public static extern IntPtr LoadCursorA(
            IntPtr hInstance,
            [MarshalAs(UnmanagedType.LPStr)]string lpCursorName
        );
        [DllImport("user32.dll")]
        public static extern IntPtr LoadCursorW(
            IntPtr hInstance,
            ref ushort lpCursorName
        );
        public static IntPtr LoadCursorW(
            IntPtr hInstance,
            int lpCursorName
        )
        {
            Span<int> src = stackalloc int[1];
            src[0] = lpCursorName;
            var cast = MemoryMarshal.Cast<int, ushort>(src);
            return LoadCursorW(hInstance, ref cast[0]);
        }
    
        [DllImport("user32.dll")]
        public static extern IntPtr LoadCursorFromFileA(
            [MarshalAs(UnmanagedType.LPStr)]string lpFileName
        );
        [DllImport("user32.dll")]
        public static extern IntPtr LoadCursorFromFileW(
            ref ushort lpFileName
        );
        [DllImport("user32.dll")]
        public static extern IntPtr CreateCursor(
            IntPtr hInst,
            int xHotSpot,
            int yHotSpot,
            int nWidth,
            int nHeight,
            IntPtr pvANDPlane,
            IntPtr pvXORPlane
        );
        [DllImport("user32.dll")]
        public static extern int DestroyCursor(
            IntPtr hCursor
        );
        [DllImport("user32.dll")]
        public static extern int SetSystemCursor(
            IntPtr hcur,
            uint id
        );
        [DllImport("user32.dll")]
        public static extern IntPtr LoadIconA(
            IntPtr hInstance,
            [MarshalAs(UnmanagedType.LPStr)]string lpIconName
        );
        [DllImport("user32.dll")]
        public static extern IntPtr LoadIconW(
            IntPtr hInstance,
            ref ushort lpIconName
        );
        [DllImport("user32.dll")]
        public static extern uint PrivateExtractIconsA(
            [MarshalAs(UnmanagedType.LPStr)]string szFileName,
            int nIconIndex,
            int cxIcon,
            int cyIcon,
            out IntPtr phicon,
            out uint piconid,
            uint nIcons,
            uint flags
        );
        [DllImport("user32.dll")]
        public static extern uint PrivateExtractIconsW(
            ref ushort szFileName,
            int nIconIndex,
            int cxIcon,
            int cyIcon,
            out IntPtr phicon,
            out uint piconid,
            uint nIcons,
            uint flags
        );
        [DllImport("user32.dll")]
        public static extern IntPtr CreateIcon(
            IntPtr hInstance,
            int nWidth,
            int nHeight,
            byte cPlanes,
            byte cBitsPixel,
            ref byte lpbANDbits,
            ref byte lpbXORbits
        );
        [DllImport("user32.dll")]
        public static extern int DestroyIcon(
            IntPtr hIcon
        );
        [DllImport("user32.dll")]
        public static extern int LookupIconIdFromDirectory(
            out byte presbits,
            int fIcon
        );
        [DllImport("user32.dll")]
        public static extern int LookupIconIdFromDirectoryEx(
            out byte presbits,
            int fIcon,
            int cxDesired,
            int cyDesired,
            uint Flags
        );
        [DllImport("user32.dll")]
        public static extern IntPtr CreateIconFromResource(
            out byte presbits,
            uint dwResSize,
            int fIcon,
            uint dwVer
        );
        [DllImport("user32.dll")]
        public static extern IntPtr CreateIconFromResourceEx(
            out byte presbits,
            uint dwResSize,
            int fIcon,
            uint dwVer,
            int cxDesired,
            int cyDesired,
            uint Flags
        );
        [DllImport("user32.dll")]
        public static extern IntPtr LoadImageA(
            IntPtr hInst,
            [MarshalAs(UnmanagedType.LPStr)]string name,
            uint type,
            int cx,
            int cy,
            uint fuLoad
        );
        [DllImport("user32.dll")]
        public static extern IntPtr LoadImageW(
            IntPtr hInst,
            ref ushort name,
            uint type,
            int cx,
            int cy,
            uint fuLoad
        );
        [DllImport("user32.dll")]
        public static extern IntPtr CopyImage(
            IntPtr h,
            uint type,
            int cx,
            int cy,
            uint flags
        );
        [DllImport("user32.dll")]
        public static extern int DrawIconEx(
            IntPtr hdc,
            int xLeft,
            int yTop,
            IntPtr hIcon,
            int cxWidth,
            int cyWidth,
            uint istepIfAniCur,
            out HBRUSH__ hbrFlickerFreeDraw,
            uint diFlags
        );
        [DllImport("user32.dll")]
        public static extern IntPtr CreateIconIndirect(
            out _ICONINFO piconinfo
        );
        [DllImport("user32.dll")]
        public static extern IntPtr CopyIcon(
            IntPtr hIcon
        );
        [DllImport("user32.dll")]
        public static extern int GetIconInfo(
            IntPtr hIcon,
            out _ICONINFO piconinfo
        );
        [DllImport("user32.dll")]
        public static extern int GetIconInfoExA(
            IntPtr hicon,
            out _ICONINFOEXA piconinfo
        );
        [DllImport("user32.dll")]
        public static extern int GetIconInfoExW(
            IntPtr hicon,
            out _ICONINFOEXW piconinfo
        );
        [DllImport("user32.dll")]
        public static extern int IsDialogMessageA(
            IntPtr hDlg,
            out tagMSG lpMsg
        );
        [DllImport("user32.dll")]
        public static extern int IsDialogMessageW(
            IntPtr hDlg,
            out tagMSG lpMsg
        );
        [DllImport("user32.dll")]
        public static extern int MapDialogRect(
            IntPtr hDlg,
            out tagRECT lpRect
        );
        [DllImport("user32.dll")]
        public static extern int DlgDirListA(
            IntPtr hDlg,
            out sbyte lpPathSpec,
            int nIDListBox,
            int nIDStaticPath,
            uint uFileType
        );
        [DllImport("user32.dll")]
        public static extern int DlgDirListW(
            IntPtr hDlg,
            out ushort lpPathSpec,
            int nIDListBox,
            int nIDStaticPath,
            uint uFileType
        );
        [DllImport("user32.dll")]
        public static extern int DlgDirSelectExA(
            IntPtr hwndDlg,
            out sbyte lpString,
            int chCount,
            int idListBox
        );
        [DllImport("user32.dll")]
        public static extern int DlgDirSelectExW(
            IntPtr hwndDlg,
            out ushort lpString,
            int chCount,
            int idListBox
        );
        [DllImport("user32.dll")]
        public static extern int DlgDirListComboBoxA(
            IntPtr hDlg,
            out sbyte lpPathSpec,
            int nIDComboBox,
            int nIDStaticPath,
            uint uFiletype
        );
        [DllImport("user32.dll")]
        public static extern int DlgDirListComboBoxW(
            IntPtr hDlg,
            out ushort lpPathSpec,
            int nIDComboBox,
            int nIDStaticPath,
            uint uFiletype
        );
        [DllImport("user32.dll")]
        public static extern int DlgDirSelectComboBoxExA(
            IntPtr hwndDlg,
            out sbyte lpString,
            int cchOut,
            int idComboBox
        );
        [DllImport("user32.dll")]
        public static extern int DlgDirSelectComboBoxExW(
            IntPtr hwndDlg,
            out ushort lpString,
            int cchOut,
            int idComboBox
        );
        [DllImport("user32.dll")]
        public static extern int SetScrollInfo(
            IntPtr hwnd,
            int nBar,
            ref tagSCROLLINFO lpsi,
            int redraw
        );
        [DllImport("user32.dll")]
        public static extern int GetScrollInfo(
            IntPtr hwnd,
            int nBar,
            out tagSCROLLINFO lpsi
        );
        [DllImport("user32.dll")]
        public static extern long DefFrameProcA(
            IntPtr hWnd,
            IntPtr hWndMDIClient,
            uint uMsg,
            ulong wParam,
            long lParam
        );
        [DllImport("user32.dll")]
        public static extern long DefFrameProcW(
            IntPtr hWnd,
            IntPtr hWndMDIClient,
            uint uMsg,
            ulong wParam,
            long lParam
        );
        [DllImport("user32.dll")]
        public static extern long DefMDIChildProcA(
            IntPtr hWnd,
            uint uMsg,
            ulong wParam,
            long lParam
        );
        [DllImport("user32.dll")]
        public static extern long DefMDIChildProcW(
            IntPtr hWnd,
            uint uMsg,
            ulong wParam,
            long lParam
        );
        [DllImport("user32.dll")]
        public static extern int TranslateMDISysAccel(
            IntPtr hWndClient,
            out tagMSG lpMsg
        );
        [DllImport("user32.dll")]
        public static extern uint ArrangeIconicWindows(
            IntPtr hWnd
        );
        [DllImport("user32.dll")]
        public static extern IntPtr CreateMDIWindowA(
            [MarshalAs(UnmanagedType.LPStr)]string lpClassName,
            [MarshalAs(UnmanagedType.LPStr)]string lpWindowName,
            uint dwStyle,
            int X,
            int Y,
            int nWidth,
            int nHeight,
            IntPtr hWndParent,
            IntPtr hInstance,
            long lParam
        );
        [DllImport("user32.dll")]
        public static extern IntPtr CreateMDIWindowW(
            ref ushort lpClassName,
            ref ushort lpWindowName,
            uint dwStyle,
            int X,
            int Y,
            int nWidth,
            int nHeight,
            IntPtr hWndParent,
            IntPtr hInstance,
            long lParam
        );
        [DllImport("user32.dll")]
        public static extern ushort TileWindows(
            IntPtr hwndParent,
            uint wHow,
            ref tagRECT lpRect,
            uint cKids,
            ref IntPtr lpKids
        );
        [DllImport("user32.dll")]
        public static extern ushort CascadeWindows(
            IntPtr hwndParent,
            uint wHow,
            ref tagRECT lpRect,
            uint cKids,
            ref IntPtr lpKids
        );
        [DllImport("user32.dll")]
        public static extern int WinHelpA(
            IntPtr hWndMain,
            [MarshalAs(UnmanagedType.LPStr)]string lpszHelp,
            uint uCommand,
            ulong dwData
        );
        [DllImport("user32.dll")]
        public static extern int WinHelpW(
            IntPtr hWndMain,
            ref ushort lpszHelp,
            uint uCommand,
            ulong dwData
        );
        [DllImport("user32.dll")]
        public static extern uint GetGuiResources(
            IntPtr hProcess,
            uint uiFlags
        );
        [DllImport("user32.dll")]
        public static extern int ChangeDisplaySettingsA(
            out _devicemodeA lpDevMode,
            uint dwFlags
        );
        [DllImport("user32.dll")]
        public static extern int ChangeDisplaySettingsW(
            out _devicemodeW lpDevMode,
            uint dwFlags
        );
        [DllImport("user32.dll")]
        public static extern int ChangeDisplaySettingsExA(
            [MarshalAs(UnmanagedType.LPStr)]string lpszDeviceName,
            out _devicemodeA lpDevMode,
            IntPtr hwnd,
            uint dwflags,
            IntPtr lParam
        );
        [DllImport("user32.dll")]
        public static extern int ChangeDisplaySettingsExW(
            ref ushort lpszDeviceName,
            out _devicemodeW lpDevMode,
            IntPtr hwnd,
            uint dwflags,
            IntPtr lParam
        );
        [DllImport("user32.dll")]
        public static extern int EnumDisplaySettingsA(
            [MarshalAs(UnmanagedType.LPStr)]string lpszDeviceName,
            uint iModeNum,
            out _devicemodeA lpDevMode
        );
        [DllImport("user32.dll")]
        public static extern int EnumDisplaySettingsW(
            ref ushort lpszDeviceName,
            uint iModeNum,
            out _devicemodeW lpDevMode
        );
        [DllImport("user32.dll")]
        public static extern int EnumDisplaySettingsExA(
            [MarshalAs(UnmanagedType.LPStr)]string lpszDeviceName,
            uint iModeNum,
            out _devicemodeA lpDevMode,
            uint dwFlags
        );
        [DllImport("user32.dll")]
        public static extern int EnumDisplaySettingsExW(
            ref ushort lpszDeviceName,
            uint iModeNum,
            out _devicemodeW lpDevMode,
            uint dwFlags
        );
        [DllImport("user32.dll")]
        public static extern int EnumDisplayDevicesA(
            [MarshalAs(UnmanagedType.LPStr)]string lpDevice,
            uint iDevNum,
            out _DISPLAY_DEVICEA lpDisplayDevice,
            uint dwFlags
        );
        [DllImport("user32.dll")]
        public static extern int EnumDisplayDevicesW(
            ref ushort lpDevice,
            uint iDevNum,
            out _DISPLAY_DEVICEW lpDisplayDevice,
            uint dwFlags
        );
        [DllImport("user32.dll")]
        public static extern int GetDisplayConfigBufferSizes(
            uint flags,
            out uint numPathArrayElements,
            out uint numModeInfoArrayElements
        );
        [DllImport("user32.dll")]
        public static extern int SetDisplayConfig(
            uint numPathArrayElements,
            out DISPLAYCONFIG_PATH_INFO pathArray,
            uint numModeInfoArrayElements,
            out DISPLAYCONFIG_MODE_INFO modeInfoArray,
            uint flags
        );
        [DllImport("user32.dll")]
        public static extern int QueryDisplayConfig(
            uint flags,
            out uint numPathArrayElements,
            out DISPLAYCONFIG_PATH_INFO pathArray,
            out uint numModeInfoArrayElements,
            out DISPLAYCONFIG_MODE_INFO modeInfoArray,
            out DISPLAYCONFIG_TOPOLOGY_ID currentTopologyId
        );
        [DllImport("user32.dll")]
        public static extern int DisplayConfigGetDeviceInfo(
            out DISPLAYCONFIG_DEVICE_INFO_HEADER requestPacket
        );
        [DllImport("user32.dll")]
        public static extern int DisplayConfigSetDeviceInfo(
            out DISPLAYCONFIG_DEVICE_INFO_HEADER setPacket
        );
        [DllImport("user32.dll")]
        public static extern int SystemParametersInfoA(
            uint uiAction,
            uint uiParam,
            IntPtr pvParam,
            uint fWinIni
        );
        [DllImport("user32.dll")]
        public static extern int SystemParametersInfoW(
            uint uiAction,
            uint uiParam,
            IntPtr pvParam,
            uint fWinIni
        );
        [DllImport("user32.dll")]
        public static extern int SystemParametersInfoForDpi(
            uint uiAction,
            uint uiParam,
            IntPtr pvParam,
            uint fWinIni,
            uint dpi
        );
        [DllImport("user32.dll")]
        public static extern int SoundSentry(
        );
        [DllImport("user32.dll")]
        public static extern void SetDebugErrorLevel(
            uint dwLevel
        );
        [DllImport("user32.dll")]
        public static extern void SetLastErrorEx(
            uint dwErrCode,
            uint dwType
        );
        [DllImport("user32.dll")]
        public static extern int InternalGetWindowText(
            IntPtr hWnd,
            out ushort pString,
            int cchMaxCount
        );
        [DllImport("user32.dll")]
        public static extern int CancelShutdown(
        );
        [DllImport("user32.dll")]
        public static extern IntPtr MonitorFromPoint(
            tagPOINT pt,
            uint dwFlags
        );
        [DllImport("user32.dll")]
        public static extern IntPtr MonitorFromRect(
            ref tagRECT lprc,
            uint dwFlags
        );
        [DllImport("user32.dll")]
        public static extern IntPtr MonitorFromWindow(
            IntPtr hwnd,
            uint dwFlags
        );
        [DllImport("user32.dll")]
        public static extern int GetMonitorInfoA(
            out HMONITOR__ hMonitor,
            out tagMONITORINFO lpmi
        );
        [DllImport("user32.dll")]
        public static extern int GetMonitorInfoW(
            out HMONITOR__ hMonitor,
            out tagMONITORINFO lpmi
        );
        [DllImport("user32.dll")]
        public static extern int EnumDisplayMonitors(
            IntPtr hdc,
            ref tagRECT lprcClip,
            MONITORENUMPROC lpfnEnum,
            long dwData
        );
        [DllImport("user32.dll")]
        public static extern void NotifyWinEvent(
            uint _event,
            IntPtr hwnd,
            int idObject,
            int idChild
        );
        [DllImport("user32.dll")]
        public static extern IntPtr SetWinEventHook(
            uint eventMin,
            uint eventMax,
            IntPtr hmodWinEventProc,
            WINEVENTPROC pfnWinEventProc,
            uint idProcess,
            uint idThread,
            uint dwFlags
        );
        [DllImport("user32.dll")]
        public static extern int IsWinEventHookInstalled(
            uint _event
        );
        [DllImport("user32.dll")]
        public static extern int UnhookWinEvent(
            out HWINEVENTHOOK__ hWinEventHook
        );
        [DllImport("user32.dll")]
        public static extern int GetGUIThreadInfo(
            uint idThread,
            out tagGUITHREADINFO pgui
        );
        [DllImport("user32.dll")]
        public static extern int BlockInput(
            int fBlockIt
        );
        [DllImport("user32.dll")]
        public static extern int SetProcessDPIAware(
        );
        [DllImport("user32.dll")]
        public static extern int IsProcessDPIAware(
        );
        [DllImport("user32.dll")]
        public static extern IntPtr SetThreadDpiAwarenessContext(
            out DPI_AWARENESS_CONTEXT__ dpiContext
        );
        [DllImport("user32.dll")]
        public static extern IntPtr GetThreadDpiAwarenessContext(
        );
        [DllImport("user32.dll")]
        public static extern IntPtr GetWindowDpiAwarenessContext(
            IntPtr hwnd
        );
        [DllImport("user32.dll")]
        public static extern DPI_AWARENESS GetAwarenessFromDpiAwarenessContext(
            out DPI_AWARENESS_CONTEXT__ value
        );
        [DllImport("user32.dll")]
        public static extern uint GetDpiFromDpiAwarenessContext(
            out DPI_AWARENESS_CONTEXT__ value
        );
        [DllImport("user32.dll")]
        public static extern int AreDpiAwarenessContextsEqual(
            out DPI_AWARENESS_CONTEXT__ dpiContextA,
            out DPI_AWARENESS_CONTEXT__ dpiContextB
        );
        [DllImport("user32.dll")]
        public static extern int IsValidDpiAwarenessContext(
            out DPI_AWARENESS_CONTEXT__ value
        );
        [DllImport("user32.dll")]
        public static extern uint GetDpiForWindow(
            IntPtr hwnd
        );
        [DllImport("user32.dll")]
        public static extern uint GetDpiForSystem(
        );
        [DllImport("user32.dll")]
        public static extern uint GetSystemDpiForProcess(
            IntPtr hProcess
        );
        [DllImport("user32.dll")]
        public static extern int EnableNonClientDpiScaling(
            IntPtr hwnd
        );
        [DllImport("user32.dll")]
        public static extern int InheritWindowMonitor(
            IntPtr hwnd,
            IntPtr hwndInherit
        );
        [DllImport("user32.dll")]
        public static extern int SetProcessDpiAwarenessContext(
            out DPI_AWARENESS_CONTEXT__ value
        );
        [DllImport("user32.dll")]
        public static extern DPI_HOSTING_BEHAVIOR SetThreadDpiHostingBehavior(
            DPI_HOSTING_BEHAVIOR value
        );
        [DllImport("user32.dll")]
        public static extern DPI_HOSTING_BEHAVIOR GetThreadDpiHostingBehavior(
        );
        [DllImport("user32.dll")]
        public static extern DPI_HOSTING_BEHAVIOR GetWindowDpiHostingBehavior(
            IntPtr hwnd
        );
        [DllImport("user32.dll")]
        public static extern uint GetWindowModuleFileNameA(
            IntPtr hwnd,
            out sbyte pszFileName,
            uint cchFileNameMax
        );
        [DllImport("user32.dll")]
        public static extern uint GetWindowModuleFileNameW(
            IntPtr hwnd,
            out ushort pszFileName,
            uint cchFileNameMax
        );
        [DllImport("user32.dll")]
        public static extern int GetCursorInfo(
            out tagCURSORINFO pci
        );
        [DllImport("user32.dll")]
        public static extern int GetWindowInfo(
            IntPtr hwnd,
            out tagWINDOWINFO pwi
        );
        [DllImport("user32.dll")]
        public static extern int GetTitleBarInfo(
            IntPtr hwnd,
            out tagTITLEBARINFO pti
        );
        [DllImport("user32.dll")]
        public static extern int GetMenuBarInfo(
            IntPtr hwnd,
            int idObject,
            int idItem,
            out tagMENUBARINFO pmbi
        );
        [DllImport("user32.dll")]
        public static extern int GetScrollBarInfo(
            IntPtr hwnd,
            int idObject,
            out tagSCROLLBARINFO psbi
        );
        [DllImport("user32.dll")]
        public static extern int GetComboBoxInfo(
            IntPtr hwndCombo,
            out tagCOMBOBOXINFO pcbi
        );
        [DllImport("user32.dll")]
        public static extern IntPtr GetAncestor(
            IntPtr hwnd,
            uint gaFlags
        );
        [DllImport("user32.dll")]
        public static extern IntPtr RealChildWindowFromPoint(
            IntPtr hwndParent,
            tagPOINT ptParentClientCoords
        );
        [DllImport("user32.dll")]
        public static extern uint RealGetWindowClassA(
            IntPtr hwnd,
            out sbyte ptszClassName,
            uint cchClassNameMax
        );
        [DllImport("user32.dll")]
        public static extern uint RealGetWindowClassW(
            IntPtr hwnd,
            out ushort ptszClassName,
            uint cchClassNameMax
        );
        [DllImport("user32.dll")]
        public static extern int GetAltTabInfoA(
            IntPtr hwnd,
            int iItem,
            out tagALTTABINFO pati,
            out sbyte pszItemText,
            uint cchItemText
        );
        [DllImport("user32.dll")]
        public static extern int GetAltTabInfoW(
            IntPtr hwnd,
            int iItem,
            out tagALTTABINFO pati,
            out ushort pszItemText,
            uint cchItemText
        );
        [DllImport("user32.dll")]
        public static extern uint GetListBoxInfo(
            IntPtr hwnd
        );
        [DllImport("user32.dll")]
        public static extern int LockWorkStation(
        );
        [DllImport("user32.dll")]
        public static extern int UserHandleGrantAccess(
            IntPtr hUserHandle,
            IntPtr hJob,
            int bGrant
        );
        [DllImport("user32.dll")]
        public static extern uint GetRawInputData(
            out HRAWINPUT__ hRawInput,
            uint uiCommand,
            IntPtr pData,
            out uint pcbSize,
            uint cbSizeHeader
        );
        [DllImport("user32.dll")]
        public static extern uint GetRawInputDeviceInfoA(
            IntPtr hDevice,
            uint uiCommand,
            IntPtr pData,
            out uint pcbSize
        );
        [DllImport("user32.dll")]
        public static extern uint GetRawInputDeviceInfoW(
            IntPtr hDevice,
            uint uiCommand,
            IntPtr pData,
            out uint pcbSize
        );
        [DllImport("user32.dll")]
        public static extern uint GetRawInputBuffer(
            out tagRAWINPUT pData,
            out uint pcbSize,
            uint cbSizeHeader
        );
        [DllImport("user32.dll")]
        public static extern int RegisterRawInputDevices(
            ref tagRAWINPUTDEVICE pRawInputDevices,
            uint uiNumDevices,
            uint cbSize
        );
        [DllImport("user32.dll")]
        public static extern uint GetRegisteredRawInputDevices(
            out tagRAWINPUTDEVICE pRawInputDevices,
            out uint puiNumDevices,
            uint cbSize
        );
        [DllImport("user32.dll")]
        public static extern uint GetRawInputDeviceList(
            out tagRAWINPUTDEVICELIST pRawInputDeviceList,
            out uint puiNumDevices,
            uint cbSize
        );
        [DllImport("user32.dll")]
        public static extern long DefRawInputProc(
            out IntPtr paRawInput,
            int nInput,
            uint cbSizeHeader
        );
        [DllImport("user32.dll")]
        public static extern int GetPointerDevices(
            out uint deviceCount,
            out tagPOINTER_DEVICE_INFO pointerDevices
        );
        [DllImport("user32.dll")]
        public static extern int GetPointerDevice(
            IntPtr device,
            out tagPOINTER_DEVICE_INFO pointerDevice
        );
        [DllImport("user32.dll")]
        public static extern int GetPointerDeviceProperties(
            IntPtr device,
            out uint propertyCount,
            out tagPOINTER_DEVICE_PROPERTY pointerProperties
        );
        [DllImport("user32.dll")]
        public static extern int RegisterPointerDeviceNotifications(
            IntPtr window,
            int notifyRange
        );
        [DllImport("user32.dll")]
        public static extern int GetPointerDeviceRects(
            IntPtr device,
            out tagRECT pointerDeviceRect,
            out tagRECT displayRect
        );
        [DllImport("user32.dll")]
        public static extern int GetPointerDeviceCursors(
            IntPtr device,
            out uint cursorCount,
            out tagPOINTER_DEVICE_CURSOR_INFO deviceCursors
        );
        [DllImport("user32.dll")]
        public static extern int GetRawPointerDeviceData(
            uint pointerId,
            uint historyCount,
            uint propertiesCount,
            out tagPOINTER_DEVICE_PROPERTY pProperties,
            out int pValues
        );
        [DllImport("user32.dll")]
        public static extern int ChangeWindowMessageFilter(
            uint message,
            uint dwFlag
        );
        [DllImport("user32.dll")]
        public static extern int ChangeWindowMessageFilterEx(
            IntPtr hwnd,
            uint message,
            uint action,
            out tagCHANGEFILTERSTRUCT pChangeFilterStruct
        );
        [DllImport("user32.dll")]
        public static extern int GetGestureInfo(
            out HGESTUREINFO__ hGestureInfo,
            out tagGESTUREINFO pGestureInfo
        );
        [DllImport("user32.dll")]
        public static extern int GetGestureExtraArgs(
            out HGESTUREINFO__ hGestureInfo,
            uint cbExtraArgs,
            out byte pExtraArgs
        );
        [DllImport("user32.dll")]
        public static extern int CloseGestureInfoHandle(
            out HGESTUREINFO__ hGestureInfo
        );
        [DllImport("user32.dll")]
        public static extern int SetGestureConfig(
            IntPtr hwnd,
            uint dwReserved,
            uint cIDs,
            out tagGESTURECONFIG pGestureConfig,
            uint cbSize
        );
        [DllImport("user32.dll")]
        public static extern int GetGestureConfig(
            IntPtr hwnd,
            uint dwReserved,
            uint dwFlags,
            out uint pcIDs,
            out tagGESTURECONFIG pGestureConfig,
            uint cbSize
        );
        [DllImport("user32.dll")]
        public static extern int ShutdownBlockReasonCreate(
            IntPtr hWnd,
            ref ushort pwszReason
        );
        [DllImport("user32.dll")]
        public static extern int ShutdownBlockReasonQuery(
            IntPtr hWnd,
            out ushort pwszBuff,
            out uint pcchBuff
        );
        [DllImport("user32.dll")]
        public static extern int ShutdownBlockReasonDestroy(
            IntPtr hWnd
        );
        [DllImport("user32.dll")]
        public static extern int GetCurrentInputMessageSource(
            out tagINPUT_MESSAGE_SOURCE inputMessageSource
        );
        [DllImport("user32.dll")]
        public static extern int GetCIMSSM(
            out tagINPUT_MESSAGE_SOURCE inputMessageSource
        );
        [DllImport("user32.dll")]
        public static extern int GetAutoRotationState(
            out tagAR_STATE pState
        );
        [DllImport("user32.dll")]
        public static extern int GetDisplayAutoRotationPreferences(
            out ORIENTATION_PREFERENCE pOrientation
        );
        [DllImport("user32.dll")]
        public static extern int GetDisplayAutoRotationPreferencesByProcessId(
            uint dwProcessId,
            out ORIENTATION_PREFERENCE pOrientation,
            out int fRotateScreen
        );
        [DllImport("user32.dll")]
        public static extern int SetDisplayAutoRotationPreferences(
            ORIENTATION_PREFERENCE orientation
        );
        [DllImport("user32.dll")]
        public static extern int IsImmersiveProcess(
            IntPtr hProcess
        );
        [DllImport("user32.dll")]
        public static extern int SetProcessRestrictionExemption(
            int fEnableExemption
        );
    }
}
