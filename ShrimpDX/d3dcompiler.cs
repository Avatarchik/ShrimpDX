// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;
using HRESULT = System.Int32;

namespace ShrimpDX {
    public static partial class Constants {
        public const string D3DCOMPILER_DLL_A = "d3dcompiler_47.dll";
        public const int D3D_COMPILER_VERSION = 47;
        public const int D3DCOMPILE_DEBUG = ( 1 << 0 );
        public const int D3DCOMPILE_SKIP_VALIDATION = ( 1 << 1 );
        public const int D3DCOMPILE_SKIP_OPTIMIZATION = ( 1 << 2 );
        public const int D3DCOMPILE_PACK_MATRIX_ROW_MAJOR = ( 1 << 3 );
        public const int D3DCOMPILE_PACK_MATRIX_COLUMN_MAJOR = ( 1 << 4 );
        public const int D3DCOMPILE_PARTIAL_PRECISION = ( 1 << 5 );
        public const int D3DCOMPILE_FORCE_VS_SOFTWARE_NO_OPT = ( 1 << 6 );
        public const int D3DCOMPILE_FORCE_PS_SOFTWARE_NO_OPT = ( 1 << 7 );
        public const int D3DCOMPILE_NO_PRESHADER = ( 1 << 8 );
        public const int D3DCOMPILE_AVOID_FLOW_CONTROL = ( 1 << 9 );
        public const int D3DCOMPILE_PREFER_FLOW_CONTROL = ( 1 << 10 );
        public const int D3DCOMPILE_ENABLE_STRICTNESS = ( 1 << 11 );
        public const int D3DCOMPILE_ENABLE_BACKWARDS_COMPATIBILITY = ( 1 << 12 );
        public const int D3DCOMPILE_IEEE_STRICTNESS = ( 1 << 13 );
        public const int D3DCOMPILE_OPTIMIZATION_LEVEL0 = ( 1 << 14 );
        public const int D3DCOMPILE_OPTIMIZATION_LEVEL1 = 0;
        public const int D3DCOMPILE_OPTIMIZATION_LEVEL2 = ( ( 1 << 14 ) | ( 1 << 15 ) );
        public const int D3DCOMPILE_OPTIMIZATION_LEVEL3 = ( 1 << 15 );
        public const int D3DCOMPILE_RESERVED16 = ( 1 << 16 );
        public const int D3DCOMPILE_RESERVED17 = ( 1 << 17 );
        public const int D3DCOMPILE_WARNINGS_ARE_ERRORS = ( 1 << 18 );
        public const int D3DCOMPILE_RESOURCES_MAY_ALIAS = ( 1 << 19 );
        public const int D3DCOMPILE_ENABLE_UNBOUNDED_DESCRIPTOR_TABLES = ( 1 << 20 );
        public const int D3DCOMPILE_ALL_RESOURCES_BOUND = ( 1 << 21 );
        public const int D3DCOMPILE_DEBUG_NAME_FOR_SOURCE = ( 1 << 22 );
        public const int D3DCOMPILE_DEBUG_NAME_FOR_BINARY = ( 1 << 23 );
        public const int D3DCOMPILE_EFFECT_CHILD_EFFECT = ( 1 << 0 );
        public const int D3DCOMPILE_EFFECT_ALLOW_SLOW_OPS = ( 1 << 1 );
        public const int D3DCOMPILE_FLAGS2_FORCE_ROOT_SIGNATURE_LATEST = 0;
        public const int D3DCOMPILE_FLAGS2_FORCE_ROOT_SIGNATURE_1_0 = ( 1 << 4 );
        public const int D3DCOMPILE_FLAGS2_FORCE_ROOT_SIGNATURE_1_1 = ( 1 << 5 );
        public static IntPtr D3D_COMPILE_STANDARD_FILE_INCLUDE = new IntPtr(1);
        public const int D3DCOMPILE_SECDATA_MERGE_UAV_SLOTS = 0x00000001;
        public const int D3DCOMPILE_SECDATA_PRESERVE_TEMPLATE_SLOTS = 0x00000002;
        public const int D3DCOMPILE_SECDATA_REQUIRE_TEMPLATE_MATCH = 0x00000004;
        public const int D3D_DISASM_ENABLE_COLOR_CODE = 0x00000001;
        public const int D3D_DISASM_ENABLE_DEFAULT_VALUE_PRINTS = 0x00000002;
        public const int D3D_DISASM_ENABLE_INSTRUCTION_NUMBERING = 0x00000004;
        public const int D3D_DISASM_ENABLE_INSTRUCTION_CYCLE = 0x00000008;
        public const int D3D_DISASM_DISABLE_DEBUG_INFO = 0x00000010;
        public const int D3D_DISASM_ENABLE_INSTRUCTION_OFFSET = 0x00000020;
        public const int D3D_DISASM_INSTRUCTION_ONLY = 0x00000040;
        public const int D3D_DISASM_PRINT_HEX_LITERALS = 0x00000080;
        public const int D3D_GET_INST_OFFSETS_INCLUDE_NON_EXECUTABLE = 0x00000001;
        public const int D3D_COMPRESS_SHADER_KEEP_ALL_PARTS = 0x00000001;
    }
    public struct pD3DCompile { public IntPtr Value; }
    public struct pD3DPreprocess { public IntPtr Value; }
    public struct pD3DDisassemble { public IntPtr Value; }
    public enum D3DCOMPILER_STRIP_FLAGS
    {
        _REFLECTION_DATA = 0x1,
        _DEBUG_INFO = 0x2,
        _TEST_BLOBS = 0x4,
        _PRIVATE_DATA = 0x8,
        _ROOT_SIGNATURE = 0x10,
        _FORCE_DWORD = 0x7fffffff,
    }
    public enum D3D_BLOB_PART
    {
        _INPUT_SIGNATURE_BLOB = 0x0,
        _OUTPUT_SIGNATURE_BLOB = 0x1,
        _INPUT_AND_OUTPUT_SIGNATURE_BLOB = 0x2,
        _PATCH_CONSTANT_SIGNATURE_BLOB = 0x3,
        _ALL_SIGNATURE_BLOB = 0x4,
        _DEBUG_INFO = 0x5,
        _LEGACY_SHADER = 0x6,
        _XNA_PREPASS_SHADER = 0x7,
        _XNA_SHADER = 0x8,
        _PDB = 0x9,
        _PRIVATE_DATA = 0xa,
        _ROOT_SIGNATURE = 0xb,
        _DEBUG_NAME = 0xc,
        _TEST_ALTERNATE_SHADER = 0x8000,
        _TEST_COMPILE_DETAILS = 0x8001,
        _TEST_COMPILE_PERF = 0x8002,
        _TEST_COMPILE_REPORT = 0x8003,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct _D3D_SHADER_DATA
    {
        public LPCVOID pBytecode;
        public SIZE_T BytecodeLength;
    }
    public struct D3D_SHADER_DATA { public _D3D_SHADER_DATA Value; }
    public static class d3dcompiler {
        [DllImport("d3dcompiler.dll")]
        public static extern HRESULT D3DReadFileToBlob(
            LPCWSTR pFileName,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<ID3D10Blob>))]out ID3D10Blob ppContents
        );
        [DllImport("d3dcompiler.dll")]
        public static extern HRESULT D3DWriteBlobToFile(
            ID3D10Blob pBlob,
            LPCWSTR pFileName,
            int bOverwrite
        );
        [DllImport("d3dcompiler.dll")]
        public static extern HRESULT D3DCompile(
            LPCVOID pSrcData,
            SIZE_T SrcDataSize,
            string pSourceName,
            ref D3D_SHADER_MACRO pDefines,
            IntPtr pInclude,
            string pEntrypoint,
            string pTarget,
            uint Flags1,
            uint Flags2,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<ID3D10Blob>))]out ID3D10Blob ppCode,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<ID3D10Blob>))]out ID3D10Blob ppErrorMsgs
        );
        [DllImport("d3dcompiler.dll")]
        public static extern HRESULT D3DCompile2(
            LPCVOID pSrcData,
            SIZE_T SrcDataSize,
            string pSourceName,
            ref D3D_SHADER_MACRO pDefines,
            IntPtr pInclude,
            string pEntrypoint,
            string pTarget,
            uint Flags1,
            uint Flags2,
            uint SecondaryDataFlags,
            LPCVOID pSecondaryData,
            SIZE_T SecondaryDataSize,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<ID3D10Blob>))]out ID3D10Blob ppCode,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<ID3D10Blob>))]out ID3D10Blob ppErrorMsgs
        );
        [DllImport("d3dcompiler.dll")]
        public static extern HRESULT D3DCompileFromFile(
            LPCWSTR pFileName,
            ref D3D_SHADER_MACRO pDefines,
            IntPtr pInclude,
            string pEntrypoint,
            string pTarget,
            uint Flags1,
            uint Flags2,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<ID3D10Blob>))]out ID3D10Blob ppCode,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<ID3D10Blob>))]out ID3D10Blob ppErrorMsgs
        );
        [DllImport("d3dcompiler.dll")]
        public static extern HRESULT D3DPreprocess(
            LPCVOID pSrcData,
            SIZE_T SrcDataSize,
            string pSourceName,
            ref D3D_SHADER_MACRO pDefines,
            IntPtr pInclude,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<ID3D10Blob>))]out ID3D10Blob ppCodeText,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<ID3D10Blob>))]out ID3D10Blob ppErrorMsgs
        );
        [DllImport("d3dcompiler.dll")]
        public static extern HRESULT D3DGetDebugInfo(
            LPCVOID pSrcData,
            SIZE_T SrcDataSize,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<ID3D10Blob>))]out ID3D10Blob ppDebugInfo
        );
        [DllImport("d3dcompiler.dll")]
        public static extern HRESULT D3DReflect(
            LPCVOID pSrcData,
            SIZE_T SrcDataSize,
            ref Guid pInterface,
            out IntPtr ppReflector
        );
        [DllImport("d3dcompiler.dll")]
        public static extern HRESULT D3DReflectLibrary(
            LPCVOID pSrcData,
            SIZE_T SrcDataSize,
            ref Guid riid,
            out IntPtr ppReflector
        );
        [DllImport("d3dcompiler.dll")]
        public static extern HRESULT D3DDisassemble(
            LPCVOID pSrcData,
            SIZE_T SrcDataSize,
            uint Flags,
            string szComments,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<ID3D10Blob>))]out ID3D10Blob ppDisassembly
        );
        [DllImport("d3dcompiler.dll")]
        public static extern HRESULT D3DDisassembleRegion(
            LPCVOID pSrcData,
            SIZE_T SrcDataSize,
            uint Flags,
            string szComments,
            SIZE_T StartByteOffset,
            SIZE_T NumInsts,
            out SIZE_T pFinishByteOffset,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<ID3D10Blob>))]out ID3D10Blob ppDisassembly
        );
        [DllImport("d3dcompiler.dll")]
        public static extern HRESULT D3DCreateLinker(
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<ID3D11Linker>))]out ID3D11Linker ppLinker
        );
        [DllImport("d3dcompiler.dll")]
        public static extern HRESULT D3DLoadModule(
            LPCVOID pSrcData,
            SIZE_T cbSrcDataSize,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<ID3D11Module>))]out ID3D11Module ppModule
        );
        [DllImport("d3dcompiler.dll")]
        public static extern HRESULT D3DCreateFunctionLinkingGraph(
            uint uFlags,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<ID3D11FunctionLinkingGraph>))]out ID3D11FunctionLinkingGraph ppFunctionLinkingGraph
        );
        [DllImport("d3dcompiler.dll")]
        public static extern HRESULT D3DGetTraceInstructionOffsets(
            LPCVOID pSrcData,
            SIZE_T SrcDataSize,
            uint Flags,
            SIZE_T StartInstIndex,
            SIZE_T NumInsts,
            out SIZE_T pOffsets,
            out SIZE_T pTotalInsts
        );
        [DllImport("d3dcompiler.dll")]
        public static extern HRESULT D3DGetInputSignatureBlob(
            LPCVOID pSrcData,
            SIZE_T SrcDataSize,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<ID3D10Blob>))]out ID3D10Blob ppSignatureBlob
        );
        [DllImport("d3dcompiler.dll")]
        public static extern HRESULT D3DGetOutputSignatureBlob(
            LPCVOID pSrcData,
            SIZE_T SrcDataSize,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<ID3D10Blob>))]out ID3D10Blob ppSignatureBlob
        );
        [DllImport("d3dcompiler.dll")]
        public static extern HRESULT D3DGetInputAndOutputSignatureBlob(
            LPCVOID pSrcData,
            SIZE_T SrcDataSize,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<ID3D10Blob>))]out ID3D10Blob ppSignatureBlob
        );
        [DllImport("d3dcompiler.dll")]
        public static extern HRESULT D3DStripShader(
            LPCVOID pShaderBytecode,
            SIZE_T BytecodeLength,
            uint uStripFlags,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<ID3D10Blob>))]out ID3D10Blob ppStrippedBlob
        );
        [DllImport("d3dcompiler.dll")]
        public static extern HRESULT D3DGetBlobPart(
            LPCVOID pSrcData,
            SIZE_T SrcDataSize,
            D3D_BLOB_PART Part,
            uint Flags,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<ID3D10Blob>))]out ID3D10Blob ppPart
        );
        [DllImport("d3dcompiler.dll")]
        public static extern HRESULT D3DSetBlobPart(
            LPCVOID pSrcData,
            SIZE_T SrcDataSize,
            D3D_BLOB_PART Part,
            uint Flags,
            LPCVOID pPart,
            SIZE_T PartSize,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<ID3D10Blob>))]out ID3D10Blob ppNewShader
        );
        [DllImport("d3dcompiler.dll")]
        public static extern HRESULT D3DCreateBlob(
            SIZE_T Size,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<ID3D10Blob>))]out ID3D10Blob ppBlob
        );
        [DllImport("d3dcompiler.dll")]
        public static extern HRESULT D3DCompressShaders(
            uint uNumShaders,
            out D3D_SHADER_DATA pShaderData,
            uint uFlags,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<ID3D10Blob>))]out ID3D10Blob ppCompressedData
        );
        [DllImport("d3dcompiler.dll")]
        public static extern HRESULT D3DDecompressShaders(
            LPCVOID pSrcData,
            SIZE_T SrcDataSize,
            uint uNumShaders,
            uint uStartIndex,
            out uint pIndices,
            uint uFlags,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<ID3D10Blob>))]out ID3D10Blob ppShaders,
            out uint pTotalShaders
        );
        [DllImport("d3dcompiler.dll")]
        public static extern HRESULT D3DDisassemble10Effect(
            ID3D10Effect pEffect,
            uint Flags,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<ID3D10Blob>))]out ID3D10Blob ppDisassembly
        );
    }
}
