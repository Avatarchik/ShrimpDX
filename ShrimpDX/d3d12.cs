// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public static partial class Constants {
        public const int __REQUIRED_RPCNDR_H_VERSION__ = 500;
        public const int __REQUIRED_RPCSAL_H_VERSION__ = 100;
        public const int D3D12_16BIT_INDEX_STRIP_CUT_VALUE = unchecked((int)0xffff);
        public const int D3D12_32BIT_INDEX_STRIP_CUT_VALUE = unchecked((int)0xffffffff);
        public const int D3D12_8BIT_INDEX_STRIP_CUT_VALUE = unchecked((int)0xff);
        public const int D3D12_APPEND_ALIGNED_ELEMENT = unchecked((int)0xffffffff);
        public const int D3D12_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT = ( 9 );
        public const int D3D12_CLIP_OR_CULL_DISTANCE_COUNT = ( 8 );
        public const int D3D12_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT = ( 2 );
        public const int D3D12_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT = ( 14 );
        public const int D3D12_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS = ( 4 );
        public const int D3D12_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D12_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT = ( 15 );
        public const int D3D12_COMMONSHADER_CONSTANT_BUFFER_PARTIAL_UPDATE_EXTENTS_BYTE_ALIGNMENT = ( 16 );
        public const int D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS = ( 4 );
        public const int D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT = ( 15 );
        public const int D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST = ( 1 );
        public const int D3D12_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS = ( 1 );
        public const int D3D12_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT = ( 64 );
        public const int D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS = ( 4 );
        public const int D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT = ( 1 );
        public const int D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST = ( 1 );
        public const int D3D12_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS = ( 1 );
        public const int D3D12_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS = ( 1 );
        public const int D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT = ( 128 );
        public const int D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST = ( 1 );
        public const int D3D12_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS = ( 1 );
        public const int D3D12_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT = ( 128 );
        public const int D3D12_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS = ( 1 );
        public const int D3D12_COMMONSHADER_SAMPLER_REGISTER_COUNT = ( 16 );
        public const int D3D12_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST = ( 1 );
        public const int D3D12_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS = ( 1 );
        public const int D3D12_COMMONSHADER_SAMPLER_SLOT_COUNT = ( 16 );
        public const int D3D12_COMMONSHADER_SUBROUTINE_NESTING_LIMIT = ( 32 );
        public const int D3D12_COMMONSHADER_TEMP_REGISTER_COMPONENTS = ( 4 );
        public const int D3D12_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D12_COMMONSHADER_TEMP_REGISTER_COUNT = ( 4096 );
        public const int D3D12_COMMONSHADER_TEMP_REGISTER_READS_PER_INST = ( 3 );
        public const int D3D12_COMMONSHADER_TEMP_REGISTER_READ_PORTS = ( 3 );
        public const int D3D12_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX = ( 10 );
        public const int D3D12_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN = ( - 10 );
        public const int D3D12_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE = ( - 8 );
        public const int D3D12_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE = ( 7 );
        public const int D3D12_CONSTANT_BUFFER_DATA_PLACEMENT_ALIGNMENT = ( 256 );
        public const int D3D12_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 256 );
        public const int D3D12_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP = ( 64 );
        public const int D3D12_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 240 );
        public const int D3D12_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP = ( 68 );
        public const int D3D12_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 224 );
        public const int D3D12_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP = ( 72 );
        public const int D3D12_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 208 );
        public const int D3D12_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP = ( 76 );
        public const int D3D12_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 192 );
        public const int D3D12_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP = ( 84 );
        public const int D3D12_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 176 );
        public const int D3D12_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP = ( 92 );
        public const int D3D12_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 160 );
        public const int D3D12_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP = ( 100 );
        public const int D3D12_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 144 );
        public const int D3D12_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP = ( 112 );
        public const int D3D12_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 128 );
        public const int D3D12_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP = ( 128 );
        public const int D3D12_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 112 );
        public const int D3D12_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP = ( 144 );
        public const int D3D12_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 96 );
        public const int D3D12_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP = ( 168 );
        public const int D3D12_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 80 );
        public const int D3D12_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP = ( 204 );
        public const int D3D12_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 64 );
        public const int D3D12_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP = ( 256 );
        public const int D3D12_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 48 );
        public const int D3D12_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP = ( 340 );
        public const int D3D12_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 32 );
        public const int D3D12_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP = ( 512 );
        public const int D3D12_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 16 );
        public const int D3D12_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP = ( 768 );
        public const int D3D12_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION = ( 1 );
        public const int D3D12_CS_4_X_RAW_UAV_BYTE_ALIGNMENT = ( 256 );
        public const int D3D12_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP = ( 768 );
        public const int D3D12_CS_4_X_THREAD_GROUP_MAX_X = ( 768 );
        public const int D3D12_CS_4_X_THREAD_GROUP_MAX_Y = ( 768 );
        public const int D3D12_CS_4_X_UAV_REGISTER_COUNT = ( 1 );
        public const int D3D12_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION = ( 65535 );
        public const int D3D12_CS_TGSM_REGISTER_COUNT = ( 8192 );
        public const int D3D12_CS_TGSM_REGISTER_READS_PER_INST = ( 1 );
        public const int D3D12_CS_TGSM_RESOURCE_REGISTER_COMPONENTS = ( 1 );
        public const int D3D12_CS_TGSM_RESOURCE_REGISTER_READ_PORTS = ( 1 );
        public const int D3D12_CS_THREADGROUPID_REGISTER_COMPONENTS = ( 3 );
        public const int D3D12_CS_THREADGROUPID_REGISTER_COUNT = ( 1 );
        public const int D3D12_CS_THREADIDINGROUPFLATTENED_REGISTER_COMPONENTS = ( 1 );
        public const int D3D12_CS_THREADIDINGROUPFLATTENED_REGISTER_COUNT = ( 1 );
        public const int D3D12_CS_THREADIDINGROUP_REGISTER_COMPONENTS = ( 3 );
        public const int D3D12_CS_THREADIDINGROUP_REGISTER_COUNT = ( 1 );
        public const int D3D12_CS_THREADID_REGISTER_COMPONENTS = ( 3 );
        public const int D3D12_CS_THREADID_REGISTER_COUNT = ( 1 );
        public const int D3D12_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP = ( 1024 );
        public const int D3D12_CS_THREAD_GROUP_MAX_X = ( 1024 );
        public const int D3D12_CS_THREAD_GROUP_MAX_Y = ( 1024 );
        public const int D3D12_CS_THREAD_GROUP_MAX_Z = ( 64 );
        public const int D3D12_CS_THREAD_GROUP_MIN_X = ( 1 );
        public const int D3D12_CS_THREAD_GROUP_MIN_Y = ( 1 );
        public const int D3D12_CS_THREAD_GROUP_MIN_Z = ( 1 );
        public const int D3D12_CS_THREAD_LOCAL_TEMP_REGISTER_POOL = ( 16384 );
        public const float D3D12_DEFAULT_BLEND_FACTOR_ALPHA = ( 1.0f );
        public const float D3D12_DEFAULT_BLEND_FACTOR_BLUE = ( 1.0f );
        public const float D3D12_DEFAULT_BLEND_FACTOR_GREEN = ( 1.0f );
        public const float D3D12_DEFAULT_BLEND_FACTOR_RED = ( 1.0f );
        public const float D3D12_DEFAULT_BORDER_COLOR_COMPONENT = ( 0.0f );
        public const int D3D12_DEFAULT_DEPTH_BIAS = ( 0 );
        public const float D3D12_DEFAULT_DEPTH_BIAS_CLAMP = ( 0.0f );
        public const int D3D12_DEFAULT_MAX_ANISOTROPY = ( 16 );
        public const float D3D12_DEFAULT_MIP_LOD_BIAS = ( 0.0f );
        public const int D3D12_DEFAULT_MSAA_RESOURCE_PLACEMENT_ALIGNMENT = ( 4194304 );
        public const int D3D12_DEFAULT_RENDER_TARGET_ARRAY_INDEX = ( 0 );
        public const int D3D12_DEFAULT_RESOURCE_PLACEMENT_ALIGNMENT = ( 65536 );
        public const int D3D12_DEFAULT_SAMPLE_MASK = unchecked((int)0xffffffff);
        public const int D3D12_DEFAULT_SCISSOR_ENDX = ( 0 );
        public const int D3D12_DEFAULT_SCISSOR_ENDY = ( 0 );
        public const int D3D12_DEFAULT_SCISSOR_STARTX = ( 0 );
        public const int D3D12_DEFAULT_SCISSOR_STARTY = ( 0 );
        public const float D3D12_DEFAULT_SLOPE_SCALED_DEPTH_BIAS = ( 0.0f );
        public const int D3D12_DEFAULT_STENCIL_READ_MASK = unchecked((int)0xff);
        public const int D3D12_DEFAULT_STENCIL_REFERENCE = ( 0 );
        public const int D3D12_DEFAULT_STENCIL_WRITE_MASK = unchecked((int)0xff);
        public const int D3D12_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX = ( 0 );
        public const int D3D12_DEFAULT_VIEWPORT_HEIGHT = ( 0 );
        public const float D3D12_DEFAULT_VIEWPORT_MAX_DEPTH = ( 0.0f );
        public const float D3D12_DEFAULT_VIEWPORT_MIN_DEPTH = ( 0.0f );
        public const int D3D12_DEFAULT_VIEWPORT_TOPLEFTX = ( 0 );
        public const int D3D12_DEFAULT_VIEWPORT_TOPLEFTY = ( 0 );
        public const int D3D12_DEFAULT_VIEWPORT_WIDTH = ( 0 );
        public const int D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND = unchecked((int)0xffffffff);
        public const int D3D12_DRIVER_RESERVED_REGISTER_SPACE_VALUES_END = unchecked((int)0xfffffff7);
        public const int D3D12_DRIVER_RESERVED_REGISTER_SPACE_VALUES_START = unchecked((int)0xfffffff0);
        public const int D3D12_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = ( 3968 );
        public const int D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS = ( 4 );
        public const int D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D12_DS_INPUT_CONTROL_POINT_REGISTER_COUNT = ( 32 );
        public const int D3D12_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST = ( 2 );
        public const int D3D12_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS = ( 1 );
        public const int D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS = ( 3 );
        public const int D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT = ( 1 );
        public const int D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST = ( 2 );
        public const int D3D12_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS = ( 1 );
        public const int D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = ( 4 );
        public const int D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT = ( 32 );
        public const int D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = ( 2 );
        public const int D3D12_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = ( 1 );
        public const int D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = ( 1 );
        public const int D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = ( 1 );
        public const int D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = ( 2 );
        public const int D3D12_DS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = ( 1 );
        public const int D3D12_DS_OUTPUT_REGISTER_COMPONENTS = ( 4 );
        public const int D3D12_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D12_DS_OUTPUT_REGISTER_COUNT = ( 32 );
        public const double D3D12_FLOAT16_FUSED_TOLERANCE_IN_ULP = ( 0.6 );
        public const float D3D12_FLOAT32_MAX = ( 3.402823466e+38f );
        public const float D3D12_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP = ( 0.6f );
        public const float D3D12_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR = ( 2.4f );
        public const float D3D12_FLOAT_TO_SRGB_EXPONENT_NUMERATOR = ( 1.0f );
        public const float D3D12_FLOAT_TO_SRGB_OFFSET = ( 0.055f );
        public const float D3D12_FLOAT_TO_SRGB_SCALE_1 = ( 12.92f );
        public const float D3D12_FLOAT_TO_SRGB_SCALE_2 = ( 1.055f );
        public const float D3D12_FLOAT_TO_SRGB_THRESHOLD = ( 0.0031308f );
        public const float D3D12_FTOI_INSTRUCTION_MAX_INPUT = ( 2147483647.999f );
        public const float D3D12_FTOI_INSTRUCTION_MIN_INPUT = ( - 2147483648.999f );
        public const float D3D12_FTOU_INSTRUCTION_MAX_INPUT = ( 4294967295.999f );
        public const float D3D12_FTOU_INSTRUCTION_MIN_INPUT = ( 0.0f );
        public const int D3D12_GS_INPUT_INSTANCE_ID_READS_PER_INST = ( 2 );
        public const int D3D12_GS_INPUT_INSTANCE_ID_READ_PORTS = ( 1 );
        public const int D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS = ( 1 );
        public const int D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D12_GS_INPUT_INSTANCE_ID_REGISTER_COUNT = ( 1 );
        public const int D3D12_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS = ( 1 );
        public const int D3D12_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D12_GS_INPUT_PRIM_CONST_REGISTER_COUNT = ( 1 );
        public const int D3D12_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST = ( 2 );
        public const int D3D12_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS = ( 1 );
        public const int D3D12_GS_INPUT_REGISTER_COMPONENTS = ( 4 );
        public const int D3D12_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D12_GS_INPUT_REGISTER_COUNT = ( 32 );
        public const int D3D12_GS_INPUT_REGISTER_READS_PER_INST = ( 2 );
        public const int D3D12_GS_INPUT_REGISTER_READ_PORTS = ( 1 );
        public const int D3D12_GS_INPUT_REGISTER_VERTICES = ( 32 );
        public const int D3D12_GS_MAX_INSTANCE_COUNT = ( 32 );
        public const int D3D12_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES = ( 1024 );
        public const int D3D12_GS_OUTPUT_ELEMENTS = ( 32 );
        public const int D3D12_GS_OUTPUT_REGISTER_COMPONENTS = ( 4 );
        public const int D3D12_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D12_GS_OUTPUT_REGISTER_COUNT = ( 32 );
        public const int D3D12_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT = ( 32 );
        public const int D3D12_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT = ( 32 );
        public const int D3D12_HS_CONTROL_POINT_REGISTER_COMPONENTS = ( 4 );
        public const int D3D12_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D12_HS_CONTROL_POINT_REGISTER_READS_PER_INST = ( 2 );
        public const int D3D12_HS_CONTROL_POINT_REGISTER_READ_PORTS = ( 1 );
        public const int D3D12_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND = unchecked((int)0xffffffff);
        public const int D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS = ( 1 );
        public const int D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT = ( 1 );
        public const int D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST = ( 2 );
        public const int D3D12_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS = ( 1 );
        public const int D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS = ( 1 );
        public const int D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT = ( 1 );
        public const int D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST = ( 2 );
        public const int D3D12_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS = ( 1 );
        public const int D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = ( 1 );
        public const int D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = ( 1 );
        public const int D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = ( 2 );
        public const int D3D12_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = ( 1 );
        public const int D3D12_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND = unchecked((int)0xffffffff);
        public const float D3D12_HS_MAXTESSFACTOR_LOWER_BOUND = ( 1.0f );
        public const float D3D12_HS_MAXTESSFACTOR_UPPER_BOUND = ( 64.0f );
        public const int D3D12_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = ( 3968 );
        public const int D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS = ( 1 );
        public const int D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT = ( 1 );
        public const int D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST = ( 2 );
        public const int D3D12_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS = ( 1 );
        public const int D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = ( 4 );
        public const int D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT = ( 32 );
        public const int D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = ( 2 );
        public const int D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = ( 1 );
        public const int D3D12_HS_OUTPUT_PATCH_CONSTANT_REGISTER_SCALAR_COMPONENTS = ( 128 );
        public const int D3D12_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES = ( 0 );
        public const int D3D12_IA_DEFAULT_PRIMITIVE_TOPOLOGY = ( 0 );
        public const int D3D12_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES = ( 0 );
        public const int D3D12_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT = ( 1 );
        public const int D3D12_IA_INSTANCE_ID_BIT_COUNT = ( 32 );
        public const int D3D12_IA_INTEGER_ARITHMETIC_BIT_COUNT = ( 32 );
        public const int D3D12_IA_PATCH_MAX_CONTROL_POINT_COUNT = ( 32 );
        public const int D3D12_IA_PRIMITIVE_ID_BIT_COUNT = ( 32 );
        public const int D3D12_IA_VERTEX_ID_BIT_COUNT = ( 32 );
        public const int D3D12_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = ( 32 );
        public const int D3D12_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS = ( 128 );
        public const int D3D12_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT = ( 32 );
        public const int D3D12_INTEGER_DIVIDE_BY_ZERO_QUOTIENT = unchecked((int)0xffffffff);
        public const int D3D12_INTEGER_DIVIDE_BY_ZERO_REMAINDER = unchecked((int)0xffffffff);
        public const int D3D12_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL = unchecked((int)0xffffffff);
        public const int D3D12_KEEP_UNORDERED_ACCESS_VIEWS = unchecked((int)0xffffffff);
        public const float D3D12_LINEAR_GAMMA = ( 1.0f );
        public const int D3D12_MAJOR_VERSION = ( 12 );
        public const float D3D12_MAX_BORDER_COLOR_COMPONENT = ( 1.0f );
        public const float D3D12_MAX_DEPTH = ( 1.0f );
        public const int D3D12_MAX_LIVE_STATIC_SAMPLERS = ( 2032 );
        public const int D3D12_MAX_MAXANISOTROPY = ( 16 );
        public const int D3D12_MAX_MULTISAMPLE_SAMPLE_COUNT = ( 32 );
        public const float D3D12_MAX_POSITION_VALUE = ( 3.402823466e+34f );
        public const int D3D12_MAX_ROOT_COST = ( 64 );
        public const int D3D12_MAX_SHADER_VISIBLE_DESCRIPTOR_HEAP_SIZE_TIER_1 = ( 1000000 );
        public const int D3D12_MAX_SHADER_VISIBLE_DESCRIPTOR_HEAP_SIZE_TIER_2 = ( 1000000 );
        public const int D3D12_MAX_SHADER_VISIBLE_SAMPLER_HEAP_SIZE = ( 2048 );
        public const int D3D12_MAX_TEXTURE_DIMENSION_2_TO_EXP = ( 17 );
        public const int D3D12_MAX_VIEW_INSTANCE_COUNT = ( 4 );
        public const int D3D12_MINOR_VERSION = ( 0 );
        public const float D3D12_MIN_BORDER_COLOR_COMPONENT = ( 0.0f );
        public const float D3D12_MIN_DEPTH = ( 0.0f );
        public const int D3D12_MIN_MAXANISOTROPY = ( 0 );
        public const float D3D12_MIP_LOD_BIAS_MAX = ( 15.99f );
        public const float D3D12_MIP_LOD_BIAS_MIN = ( - 16.0f );
        public const int D3D12_MIP_LOD_FRACTIONAL_BIT_COUNT = ( 8 );
        public const int D3D12_MIP_LOD_RANGE_BIT_COUNT = ( 8 );
        public const float D3D12_MULTISAMPLE_ANTIALIAS_LINE_WIDTH = ( 1.4f );
        public const int D3D12_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT = ( 0 );
        public const int D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_END = unchecked((int)0xffffffff);
        public const int D3D12_OS_RESERVED_REGISTER_SPACE_VALUES_START = unchecked((int)0xfffffff8);
        public const int D3D12_PACKED_TILE = unchecked((int)0xffffffff);
        public const int D3D12_PIXEL_ADDRESS_RANGE_BIT_COUNT = ( 15 );
        public const int D3D12_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT = ( 16 );
        public const int D3D12_PS_CS_UAV_REGISTER_COMPONENTS = ( 1 );
        public const int D3D12_PS_CS_UAV_REGISTER_COUNT = ( 8 );
        public const int D3D12_PS_CS_UAV_REGISTER_READS_PER_INST = ( 1 );
        public const int D3D12_PS_CS_UAV_REGISTER_READ_PORTS = ( 1 );
        public const int D3D12_PS_FRONTFACING_DEFAULT_VALUE = unchecked((int)0xffffffff);
        public const int D3D12_PS_FRONTFACING_FALSE_VALUE = ( 0 );
        public const int D3D12_PS_FRONTFACING_TRUE_VALUE = unchecked((int)0xffffffff);
        public const int D3D12_PS_INPUT_REGISTER_COMPONENTS = ( 4 );
        public const int D3D12_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D12_PS_INPUT_REGISTER_COUNT = ( 32 );
        public const int D3D12_PS_INPUT_REGISTER_READS_PER_INST = ( 2 );
        public const int D3D12_PS_INPUT_REGISTER_READ_PORTS = ( 1 );
        public const float D3D12_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT = ( 0.0f );
        public const int D3D12_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS = ( 1 );
        public const int D3D12_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D12_PS_OUTPUT_DEPTH_REGISTER_COUNT = ( 1 );
        public const int D3D12_PS_OUTPUT_MASK_REGISTER_COMPONENTS = ( 1 );
        public const int D3D12_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D12_PS_OUTPUT_MASK_REGISTER_COUNT = ( 1 );
        public const int D3D12_PS_OUTPUT_REGISTER_COMPONENTS = ( 4 );
        public const int D3D12_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D12_PS_OUTPUT_REGISTER_COUNT = ( 8 );
        public const float D3D12_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT = ( 0.5f );
        public const int D3D12_RAW_UAV_SRV_BYTE_ALIGNMENT = ( 16 );
        public const int D3D12_RAYTRACING_AABB_BYTE_ALIGNMENT = ( 8 );
        public const int D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BYTE_ALIGNMENT = ( 256 );
        public const int D3D12_RAYTRACING_INSTANCE_DESCS_BYTE_ALIGNMENT = ( 16 );
        public const int D3D12_RAYTRACING_MAX_ATTRIBUTE_SIZE_IN_BYTES = ( 32 );
        public const int D3D12_RAYTRACING_MAX_DECLARABLE_TRACE_RECURSION_DEPTH = ( 31 );
        public const int D3D12_RAYTRACING_MAX_GEOMETRIES_PER_BOTTOM_LEVEL_ACCELERATION_STRUCTURE = ( 16777216 );
        public const int D3D12_RAYTRACING_MAX_INSTANCES_PER_TOP_LEVEL_ACCELERATION_STRUCTURE = ( 16777216 );
        public const int D3D12_RAYTRACING_MAX_PRIMITIVES_PER_BOTTOM_LEVEL_ACCELERATION_STRUCTURE = ( 536870912 );
        public const int D3D12_RAYTRACING_MAX_RAY_GENERATION_SHADER_THREADS = ( 1073741824 );
        public const int D3D12_RAYTRACING_MAX_SHADER_RECORD_STRIDE = ( 4096 );
        public const int D3D12_RAYTRACING_SHADER_RECORD_BYTE_ALIGNMENT = ( 32 );
        public const int D3D12_RAYTRACING_SHADER_TABLE_BYTE_ALIGNMENT = ( 64 );
        public const int D3D12_RAYTRACING_TRANSFORM3X4_BYTE_ALIGNMENT = ( 16 );
        public const int D3D12_REQ_BLEND_OBJECT_COUNT_PER_DEVICE = ( 4096 );
        public const int D3D12_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP = ( 27 );
        public const int D3D12_REQ_CONSTANT_BUFFER_ELEMENT_COUNT = ( 4096 );
        public const int D3D12_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE = ( 4096 );
        public const int D3D12_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = ( 32 );
        public const int D3D12_REQ_DRAW_VERTEX_COUNT_2_TO_EXP = ( 32 );
        public const int D3D12_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION = ( 16384 );
        public const int D3D12_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT = ( 1024 );
        public const int D3D12_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT = ( 4096 );
        public const int D3D12_REQ_MAXANISOTROPY = ( 16 );
        public const int D3D12_REQ_MIP_LEVELS = ( 15 );
        public const int D3D12_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES = ( 2048 );
        public const int D3D12_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE = ( 4096 );
        public const int D3D12_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH = ( 16384 );
        public const int D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM = ( 128 );
        public const float D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM = ( 0.25f );
        public const int D3D12_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_C_TERM = ( 2048 );
        public const int D3D12_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP = ( 20 );
        public const int D3D12_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE = ( 4096 );
        public const int D3D12_REQ_SUBRESOURCES = ( 30720 );
        public const int D3D12_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION = ( 2048 );
        public const int D3D12_REQ_TEXTURE1D_U_DIMENSION = ( 16384 );
        public const int D3D12_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION = ( 2048 );
        public const int D3D12_REQ_TEXTURE2D_U_OR_V_DIMENSION = ( 16384 );
        public const int D3D12_REQ_TEXTURE3D_U_V_OR_W_DIMENSION = ( 2048 );
        public const int D3D12_REQ_TEXTURECUBE_DIMENSION = ( 16384 );
        public const int D3D12_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL = ( 0 );
        public const int D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES = unchecked((int)0xffffffff);
        public const int D3D12_RS_SET_SHADING_RATE_COMBINER_COUNT = ( 2 );
        public const int D3D12_SHADER_IDENTIFIER_SIZE_IN_BYTES = ( 32 );
        public const int D3D12_SHADER_MAJOR_VERSION = ( 5 );
        public const int D3D12_SHADER_MAX_INSTANCES = ( 65535 );
        public const int D3D12_SHADER_MAX_INTERFACES = ( 253 );
        public const int D3D12_SHADER_MAX_INTERFACE_CALL_SITES = ( 4096 );
        public const int D3D12_SHADER_MAX_TYPES = ( 65535 );
        public const int D3D12_SHADER_MINOR_VERSION = ( 1 );
        public const int D3D12_SHIFT_INSTRUCTION_PAD_VALUE = ( 0 );
        public const int D3D12_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT = ( 5 );
        public const int D3D12_SIMULTANEOUS_RENDER_TARGET_COUNT = ( 8 );
        public const int D3D12_SMALL_MSAA_RESOURCE_PLACEMENT_ALIGNMENT = ( 65536 );
        public const int D3D12_SMALL_RESOURCE_PLACEMENT_ALIGNMENT = ( 4096 );
        public const int D3D12_SO_BUFFER_MAX_STRIDE_IN_BYTES = ( 2048 );
        public const int D3D12_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = ( 512 );
        public const int D3D12_SO_BUFFER_SLOT_COUNT = ( 4 );
        public const int D3D12_SO_DDI_REGISTER_INDEX_DENOTING_GAP = unchecked((int)0xffffffff);
        public const int D3D12_SO_NO_RASTERIZED_STREAM = unchecked((int)0xffffffff);
        public const int D3D12_SO_OUTPUT_COMPONENT_COUNT = ( 128 );
        public const int D3D12_SO_STREAM_COUNT = ( 4 );
        public const int D3D12_SPEC_DATE_DAY = ( 14 );
        public const int D3D12_SPEC_DATE_MONTH = ( 11 );
        public const int D3D12_SPEC_DATE_YEAR = ( 2014 );
        public const double D3D12_SPEC_VERSION = ( 1.16 );
        public const float D3D12_SRGB_GAMMA = ( 2.2f );
        public const float D3D12_SRGB_TO_FLOAT_DENOMINATOR_1 = ( 12.92f );
        public const float D3D12_SRGB_TO_FLOAT_DENOMINATOR_2 = ( 1.055f );
        public const float D3D12_SRGB_TO_FLOAT_EXPONENT = ( 2.4f );
        public const float D3D12_SRGB_TO_FLOAT_OFFSET = ( 0.055f );
        public const float D3D12_SRGB_TO_FLOAT_THRESHOLD = ( 0.04045f );
        public const float D3D12_SRGB_TO_FLOAT_TOLERANCE_IN_ULP = ( 0.5f );
        public const int D3D12_STANDARD_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D12_STANDARD_COMPONENT_BIT_COUNT_DOUBLED = ( 64 );
        public const int D3D12_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE = ( 4 );
        public const int D3D12_STANDARD_PIXEL_COMPONENT_COUNT = ( 128 );
        public const int D3D12_STANDARD_PIXEL_ELEMENT_COUNT = ( 32 );
        public const int D3D12_STANDARD_VECTOR_SIZE = ( 4 );
        public const int D3D12_STANDARD_VERTEX_ELEMENT_COUNT = ( 32 );
        public const int D3D12_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT = ( 64 );
        public const int D3D12_SUBPIXEL_FRACTIONAL_BIT_COUNT = ( 8 );
        public const int D3D12_SUBTEXEL_FRACTIONAL_BIT_COUNT = ( 8 );
        public const int D3D12_SYSTEM_RESERVED_REGISTER_SPACE_VALUES_END = unchecked((int)0xffffffff);
        public const int D3D12_SYSTEM_RESERVED_REGISTER_SPACE_VALUES_START = unchecked((int)0xfffffff0);
        public const int D3D12_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR = ( 64 );
        public const int D3D12_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR = ( 64 );
        public const int D3D12_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR = ( 63 );
        public const int D3D12_TESSELLATOR_MAX_TESSELLATION_FACTOR = ( 64 );
        public const int D3D12_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR = ( 2 );
        public const int D3D12_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR = ( 1 );
        public const int D3D12_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR = ( 1 );
        public const int D3D12_TEXEL_ADDRESS_RANGE_BIT_COUNT = ( 16 );
        public const int D3D12_TEXTURE_DATA_PITCH_ALIGNMENT = ( 256 );
        public const int D3D12_TEXTURE_DATA_PLACEMENT_ALIGNMENT = ( 512 );
        public const int D3D12_TILED_RESOURCE_TILE_SIZE_IN_BYTES = ( 65536 );
        public const int D3D12_TRACKED_WORKLOAD_MAX_INSTANCES = ( 32 );
        public const int D3D12_UAV_COUNTER_PLACEMENT_ALIGNMENT = ( 4096 );
        public const int D3D12_UAV_SLOT_COUNT = ( 64 );
        public const int D3D12_UNBOUND_MEMORY_ACCESS_RESULT = ( 0 );
        public const int D3D12_VIDEO_DECODE_MAX_ARGUMENTS = ( 10 );
        public const int D3D12_VIDEO_DECODE_MAX_HISTOGRAM_COMPONENTS = ( 4 );
        public const int D3D12_VIDEO_DECODE_MIN_BITSTREAM_OFFSET_ALIGNMENT = ( 256 );
        public const int D3D12_VIDEO_DECODE_MIN_HISTOGRAM_OFFSET_ALIGNMENT = ( 256 );
        public const int D3D12_VIDEO_DECODE_STATUS_MACROBLOCKS_AFFECTED_UNKNOWN = unchecked((int)0xffffffff);
        public const int D3D12_VIDEO_PROCESS_MAX_FILTERS = ( 32 );
        public const int D3D12_VIDEO_PROCESS_STEREO_VIEWS = ( 2 );
        public const int D3D12_VIEWPORT_AND_SCISSORRECT_MAX_INDEX = ( 15 );
        public const int D3D12_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE = ( 16 );
        public const int D3D12_VIEWPORT_BOUNDS_MAX = ( 32767 );
        public const int D3D12_VIEWPORT_BOUNDS_MIN = ( - 32768 );
        public const int D3D12_VS_INPUT_REGISTER_COMPONENTS = ( 4 );
        public const int D3D12_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D12_VS_INPUT_REGISTER_COUNT = ( 32 );
        public const int D3D12_VS_INPUT_REGISTER_READS_PER_INST = ( 2 );
        public const int D3D12_VS_INPUT_REGISTER_READ_PORTS = ( 1 );
        public const int D3D12_VS_OUTPUT_REGISTER_COMPONENTS = ( 4 );
        public const int D3D12_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D12_VS_OUTPUT_REGISTER_COUNT = ( 32 );
        public const int D3D12_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT = ( 10 );
        public const int D3D12_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = ( 25 );
        public const int D3D12_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP = ( 25 );
        public const int D3D12_SHADER_COMPONENT_MAPPING_MASK = unchecked((int)0x7);
        public const int D3D12_SHADER_COMPONENT_MAPPING_SHIFT = 3;
        public const int D3D12_SHADER_COMPONENT_MAPPING_ALWAYS_SET_BIT_AVOIDING_ZEROMEM_MISTAKES = ( 1 << ( D3D12_SHADER_COMPONENT_MAPPING_SHIFT * 4 ) );
        // macro function: D3D12_ENCODE_SHADER_4_COMPONENT_MAPPING ( Src0 , Src1 , Src2 , Src3 ) ( ( ( ( Src0 ) & D3D12_SHADER_COMPONENT_MAPPING_MASK ) | ( ( ( Src1 ) & D3D12_SHADER_COMPONENT_MAPPING_MASK ) << D3D12_SHADER_COMPONENT_MAPPING_SHIFT ) | ( ( ( Src2 ) & D3D12_SHADER_COMPONENT_MAPPING_MASK ) << ( D3D12_SHADER_COMPONENT_MAPPING_SHIFT * 2 ) ) | ( ( ( Src3 ) & D3D12_SHADER_COMPONENT_MAPPING_MASK ) << ( D3D12_SHADER_COMPONENT_MAPPING_SHIFT * 3 ) ) | D3D12_SHADER_COMPONENT_MAPPING_ALWAYS_SET_BIT_AVOIDING_ZEROMEM_MISTAKES ) )
        // macro function: D3D12_DECODE_SHADER_4_COMPONENT_MAPPING ( ComponentToExtract , Mapping ) ( ( D3D12_SHADER_COMPONENT_MAPPING ) ( Mapping >> ( D3D12_SHADER_COMPONENT_MAPPING_SHIFT * ComponentToExtract ) & D3D12_SHADER_COMPONENT_MAPPING_MASK ) )
        // unknown type: D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING D3D12_ENCODE_SHADER_4_COMPONENT_MAPPING ( 0 , 1 , 2 , 3 )
        public const int D3D12_FILTER_REDUCTION_TYPE_MASK = unchecked((int)0x3);
        public const int D3D12_FILTER_REDUCTION_TYPE_SHIFT = ( 7 );
        public const int D3D12_FILTER_TYPE_MASK = unchecked((int)0x3);
        public const int D3D12_MIN_FILTER_SHIFT = ( 4 );
        public const int D3D12_MAG_FILTER_SHIFT = ( 2 );
        public const int D3D12_MIP_FILTER_SHIFT = ( 0 );
        public const int D3D12_ANISOTROPIC_FILTERING_BIT = unchecked((int)0x40);
        // macro function: D3D12_ENCODE_BASIC_FILTER ( min , mag , mip , reduction ) ( ( D3D12_FILTER ) ( ( ( ( min ) & D3D12_FILTER_TYPE_MASK ) << D3D12_MIN_FILTER_SHIFT ) | ( ( ( mag ) & D3D12_FILTER_TYPE_MASK ) << D3D12_MAG_FILTER_SHIFT ) | ( ( ( mip ) & D3D12_FILTER_TYPE_MASK ) << D3D12_MIP_FILTER_SHIFT ) | ( ( ( reduction ) & D3D12_FILTER_REDUCTION_TYPE_MASK ) << D3D12_FILTER_REDUCTION_TYPE_SHIFT ) ) )
        // macro function: D3D12_ENCODE_ANISOTROPIC_FILTER ( reduction ) ( ( D3D12_FILTER ) ( D3D12_ANISOTROPIC_FILTERING_BIT | D3D12_ENCODE_BASIC_FILTER ( D3D12_FILTER_TYPE_LINEAR , D3D12_FILTER_TYPE_LINEAR , D3D12_FILTER_TYPE_LINEAR , reduction ) ) )
        // macro function: D3D12_DECODE_MIN_FILTER ( D3D12Filter ) ( ( D3D12_FILTER_TYPE ) ( ( ( D3D12Filter ) >> D3D12_MIN_FILTER_SHIFT ) & D3D12_FILTER_TYPE_MASK ) )
        // macro function: D3D12_DECODE_MAG_FILTER ( D3D12Filter ) ( ( D3D12_FILTER_TYPE ) ( ( ( D3D12Filter ) >> D3D12_MAG_FILTER_SHIFT ) & D3D12_FILTER_TYPE_MASK ) )
        // macro function: D3D12_DECODE_MIP_FILTER ( D3D12Filter ) ( ( D3D12_FILTER_TYPE ) ( ( ( D3D12Filter ) >> D3D12_MIP_FILTER_SHIFT ) & D3D12_FILTER_TYPE_MASK ) )
        // macro function: D3D12_DECODE_FILTER_REDUCTION ( D3D12Filter ) ( ( D3D12_FILTER_REDUCTION_TYPE ) ( ( ( D3D12Filter ) >> D3D12_FILTER_REDUCTION_TYPE_SHIFT ) & D3D12_FILTER_REDUCTION_TYPE_MASK ) )
        // macro function: D3D12_DECODE_IS_COMPARISON_FILTER ( D3D12Filter ) ( D3D12_DECODE_FILTER_REDUCTION ( D3D12Filter ) == D3D12_FILTER_REDUCTION_TYPE_COMPARISON )
        // macro function: D3D12_DECODE_IS_ANISOTROPIC_FILTER ( D3D12Filter ) ( ( ( D3D12Filter ) & D3D12_ANISOTROPIC_FILTERING_BIT ) && ( D3D12_FILTER_TYPE_LINEAR == D3D12_DECODE_MIN_FILTER ( D3D12Filter ) ) && ( D3D12_FILTER_TYPE_LINEAR == D3D12_DECODE_MAG_FILTER ( D3D12Filter ) ) && ( D3D12_FILTER_TYPE_LINEAR == D3D12_DECODE_MIP_FILTER ( D3D12Filter ) ) )
        public const int D3D12_SHADING_RATE_X_AXIS_SHIFT = 2;
        public const int D3D12_SHADING_RATE_VALID_MASK = 3;
        // macro function: D3D12_MAKE_COARSE_SHADING_RATE ( x , y ) ( ( x ) << D3D12_SHADING_RATE_X_AXIS_SHIFT | ( y ) )
        // macro function: D3D12_GET_COARSE_SHADING_RATE_X_AXIS ( x ) ( ( ( x ) >> D3D12_SHADING_RATE_X_AXIS_SHIFT ) & D3D12_SHADING_RATE_VALID_MASK )
        // macro function: D3D12_GET_COARSE_SHADING_RATE_Y_AXIS ( y ) ( ( y ) & D3D12_SHADING_RATE_VALID_MASK )
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct D3D12_ROOT_PARAMETER__anonymous_14 // 1
    {
        [FieldOffset(0)]
        public D3D12_ROOT_DESCRIPTOR_TABLE DescriptorTable;
        [FieldOffset(0)]
        public D3D12_ROOT_CONSTANTS Constants;
        [FieldOffset(0)]
        public D3D12_ROOT_DESCRIPTOR Descriptor;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct D3D12_VERSIONED_ROOT_SIGNATURE_DESC__anonymous_45 // 1
    {
        [FieldOffset(0)]
        public D3D12_ROOT_SIGNATURE_DESC Desc_1_0;
        [FieldOffset(0)]
        public D3D12_ROOT_SIGNATURE_DESC1 Desc_1_1;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct D3D12_ROOT_PARAMETER1__anonymous_50 // 1
    {
        [FieldOffset(0)]
        public D3D12_ROOT_DESCRIPTOR_TABLE1 DescriptorTable;
        [FieldOffset(0)]
        public D3D12_ROOT_CONSTANTS Constants;
        [FieldOffset(0)]
        public D3D12_ROOT_DESCRIPTOR1 Descriptor;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct D3D12_TEXTURE_COPY_LOCATION__anonymous_128 // 1
    {
        [FieldOffset(0)]
        public D3D12_PLACED_SUBRESOURCE_FOOTPRINT PlacedFootprint;
        [FieldOffset(0)]
        public uint SubresourceIndex;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct D3D12_RESOURCE_BARRIER__anonymous_149 // 1
    {
        [FieldOffset(0)]
        public D3D12_RESOURCE_TRANSITION_BARRIER Transition;
        [FieldOffset(0)]
        public D3D12_RESOURCE_ALIASING_BARRIER Aliasing;
        [FieldOffset(0)]
        public D3D12_RESOURCE_UAV_BARRIER UAV;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct D3D12_SHADER_RESOURCE_VIEW_DESC__anonymous_258 // 1
    {
        [FieldOffset(0)]
        public D3D12_BUFFER_SRV Buffer;
        [FieldOffset(0)]
        public D3D12_TEX1D_SRV Texture1D;
        [FieldOffset(0)]
        public D3D12_TEX1D_ARRAY_SRV Texture1DArray;
        [FieldOffset(0)]
        public D3D12_TEX2D_SRV Texture2D;
        [FieldOffset(0)]
        public D3D12_TEX2D_ARRAY_SRV Texture2DArray;
        [FieldOffset(0)]
        public D3D12_TEX2DMS_SRV Texture2DMS;
        [FieldOffset(0)]
        public D3D12_TEX2DMS_ARRAY_SRV Texture2DMSArray;
        [FieldOffset(0)]
        public D3D12_TEX3D_SRV Texture3D;
        [FieldOffset(0)]
        public D3D12_TEXCUBE_SRV TextureCube;
        [FieldOffset(0)]
        public D3D12_TEXCUBE_ARRAY_SRV TextureCubeArray;
        [FieldOffset(0)]
        public D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV RaytracingAccelerationStructure;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct D3D12_UNORDERED_ACCESS_VIEW_DESC__anonymous_287 // 1
    {
        [FieldOffset(0)]
        public D3D12_BUFFER_UAV Buffer;
        [FieldOffset(0)]
        public D3D12_TEX1D_UAV Texture1D;
        [FieldOffset(0)]
        public D3D12_TEX1D_ARRAY_UAV Texture1DArray;
        [FieldOffset(0)]
        public D3D12_TEX2D_UAV Texture2D;
        [FieldOffset(0)]
        public D3D12_TEX2D_ARRAY_UAV Texture2DArray;
        [FieldOffset(0)]
        public D3D12_TEX3D_UAV Texture3D;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct D3D12_RENDER_TARGET_VIEW_DESC__anonymous_306 // 1
    {
        [FieldOffset(0)]
        public D3D12_BUFFER_RTV Buffer;
        [FieldOffset(0)]
        public D3D12_TEX1D_RTV Texture1D;
        [FieldOffset(0)]
        public D3D12_TEX1D_ARRAY_RTV Texture1DArray;
        [FieldOffset(0)]
        public D3D12_TEX2D_RTV Texture2D;
        [FieldOffset(0)]
        public D3D12_TEX2D_ARRAY_RTV Texture2DArray;
        [FieldOffset(0)]
        public D3D12_TEX2DMS_RTV Texture2DMS;
        [FieldOffset(0)]
        public D3D12_TEX2DMS_ARRAY_RTV Texture2DMSArray;
        [FieldOffset(0)]
        public D3D12_TEX3D_RTV Texture3D;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct D3D12_DEPTH_STENCIL_VIEW_DESC__anonymous_329 // 1
    {
        [FieldOffset(0)]
        public D3D12_TEX1D_DSV Texture1D;
        [FieldOffset(0)]
        public D3D12_TEX1D_ARRAY_DSV Texture1DArray;
        [FieldOffset(0)]
        public D3D12_TEX2D_DSV Texture2D;
        [FieldOffset(0)]
        public D3D12_TEX2D_ARRAY_DSV Texture2DArray;
        [FieldOffset(0)]
        public D3D12_TEX2DMS_DSV Texture2DMS;
        [FieldOffset(0)]
        public D3D12_TEX2DMS_ARRAY_DSV Texture2DMSArray;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct D3D12_CLEAR_VALUE__anonymous_348 // 1
    {
        [FieldOffset(0)]
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=4)]public float[] Color;
        [FieldOffset(0)]
        public D3D12_DEPTH_STENCIL_VALUE DepthStencil;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct D3D12_INDIRECT_ARGUMENT_DESC__anonymous_361 // 1
    {
       // anonymous struct __param__;
       // anonymous struct VertexBuffer;
       // anonymous struct __param__;
       // anonymous struct Constant;
       // anonymous struct __param__;
       // anonymous struct ConstantBufferView;
       // anonymous struct __param__;
       // anonymous struct ShaderResourceView;
       // anonymous struct __param__;
       // anonymous struct UnorderedAccessView;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_INDIRECT_ARGUMENT_DESC___anonymous_362 // 2
    {
        public uint Slot;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_INDIRECT_ARGUMENT_DESC___anonymous_363 // 2
    {
        public uint RootParameterIndex;
        public uint DestOffsetIn32BitValues;
        public uint Num32BitValuesToSet;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_INDIRECT_ARGUMENT_DESC___anonymous_364 // 2
    {
        public uint RootParameterIndex;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_INDIRECT_ARGUMENT_DESC___anonymous_365 // 2
    {
        public uint RootParameterIndex;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_INDIRECT_ARGUMENT_DESC___anonymous_366 // 2
    {
        public uint RootParameterIndex;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS__anonymous_449 // 1
    {
        [FieldOffset(0)]
        public ulong InstanceDescs;
        [FieldOffset(0)]
        public IntPtr pGeometryDescs;
        [FieldOffset(0)]
        public IntPtr ppGeometryDescs;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct D3D12_RAYTRACING_GEOMETRY_DESC__anonymous_456 // 1
    {
        [FieldOffset(0)]
        public D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC Triangles;
        [FieldOffset(0)]
        public D3D12_RAYTRACING_GEOMETRY_AABBS_DESC AABBs;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct D3D12_RENDER_PASS_BEGINNING_ACCESS__anonymous_511 // 1
    {
        [FieldOffset(0)]
        public D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS Clear;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct D3D12_RENDER_PASS_ENDING_ACCESS__anonymous_518 // 1
    {
        [FieldOffset(0)]
        public D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS Resolve;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA__anonymous_1027 // 1
    {
        [FieldOffset(0)]
        public D3D12_DEVICE_REMOVED_EXTENDED_DATA Dred_1_0;
        [FieldOffset(0)]
        public D3D12_DEVICE_REMOVED_EXTENDED_DATA1 Dred_1_1;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_ROOT_SIGNATURE_DESC // 1
    {
        public uint NumParameters;
        public IntPtr pParameters;
        public uint NumStaticSamplers;
        public IntPtr pStaticSamplers;
        public D3D12_ROOT_SIGNATURE_FLAGS Flags;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_ROOT_PARAMETER // 1
    {
        public D3D12_ROOT_PARAMETER_TYPE ParameterType;
        public D3D12_ROOT_PARAMETER__anonymous_14 __param__2;
        public D3D12_SHADER_VISIBILITY ShaderVisibility;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_ROOT_DESCRIPTOR_TABLE // 1
    {
        public uint NumDescriptorRanges;
        public IntPtr pDescriptorRanges;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_DESCRIPTOR_RANGE // 1
    {
        public D3D12_DESCRIPTOR_RANGE_TYPE RangeType;
        public uint NumDescriptors;
        public uint BaseShaderRegister;
        public uint RegisterSpace;
        public uint OffsetInDescriptorsFromTableStart;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_ROOT_CONSTANTS // 1
    {
        public uint ShaderRegister;
        public uint RegisterSpace;
        public uint Num32BitValues;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_ROOT_DESCRIPTOR // 1
    {
        public uint ShaderRegister;
        public uint RegisterSpace;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_STATIC_SAMPLER_DESC // 1
    {
        public D3D12_FILTER Filter;
        public D3D12_TEXTURE_ADDRESS_MODE AddressU;
        public D3D12_TEXTURE_ADDRESS_MODE AddressV;
        public D3D12_TEXTURE_ADDRESS_MODE AddressW;
        public float MipLODBias;
        public uint MaxAnisotropy;
        public D3D12_COMPARISON_FUNC ComparisonFunc;
        public D3D12_STATIC_BORDER_COLOR BorderColor;
        public float MinLOD;
        public float MaxLOD;
        public uint ShaderRegister;
        public uint RegisterSpace;
        public D3D12_SHADER_VISIBILITY ShaderVisibility;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_VERSIONED_ROOT_SIGNATURE_DESC // 1
    {
        public D3D_ROOT_SIGNATURE_VERSION Version;
        public D3D12_VERSIONED_ROOT_SIGNATURE_DESC__anonymous_45 __param__2;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_ROOT_SIGNATURE_DESC1 // 1
    {
        public uint NumParameters;
        public IntPtr pParameters;
        public uint NumStaticSamplers;
        public IntPtr pStaticSamplers;
        public D3D12_ROOT_SIGNATURE_FLAGS Flags;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_ROOT_PARAMETER1 // 1
    {
        public D3D12_ROOT_PARAMETER_TYPE ParameterType;
        public D3D12_ROOT_PARAMETER1__anonymous_50 __param__2;
        public D3D12_SHADER_VISIBILITY ShaderVisibility;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_ROOT_DESCRIPTOR_TABLE1 // 1
    {
        public uint NumDescriptorRanges;
        public IntPtr pDescriptorRanges;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_DESCRIPTOR_RANGE1 // 1
    {
        public D3D12_DESCRIPTOR_RANGE_TYPE RangeType;
        public uint NumDescriptors;
        public uint BaseShaderRegister;
        public uint RegisterSpace;
        public D3D12_DESCRIPTOR_RANGE_FLAGS Flags;
        public uint OffsetInDescriptorsFromTableStart;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_ROOT_DESCRIPTOR1 // 1
    {
        public uint ShaderRegister;
        public uint RegisterSpace;
        public D3D12_ROOT_DESCRIPTOR_FLAGS Flags;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_HEAP_DESC // 1
    {
        public ulong SizeInBytes;
        public D3D12_HEAP_PROPERTIES Properties;
        public ulong Alignment;
        public D3D12_HEAP_FLAGS Flags;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_HEAP_PROPERTIES // 1
    {
        public D3D12_HEAP_TYPE Type;
        public D3D12_CPU_PAGE_PROPERTY CPUPageProperty;
        public D3D12_MEMORY_POOL MemoryPoolPreference;
        public uint CreationNodeMask;
        public uint VisibleNodeMask;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_RANGE // 1
    {
        public ulong Begin;
        public ulong End;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_RESOURCE_DESC // 1
    {
        public D3D12_RESOURCE_DIMENSION Dimension;
        public ulong Alignment;
        public ulong Width;
        public uint Height;
        public ushort DepthOrArraySize;
        public ushort MipLevels;
        public DXGI_FORMAT Format;
        public DXGI_SAMPLE_DESC SampleDesc;
        public D3D12_TEXTURE_LAYOUT Layout;
        public D3D12_RESOURCE_FLAGS Flags;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_BOX // 1
    {
        public uint left;
        public uint top;
        public uint front;
        public uint right;
        public uint bottom;
        public uint back;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_DESCRIPTOR_HEAP_DESC // 1
    {
        public D3D12_DESCRIPTOR_HEAP_TYPE Type;
        public uint NumDescriptors;
        public D3D12_DESCRIPTOR_HEAP_FLAGS Flags;
        public uint NodeMask;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_CPU_DESCRIPTOR_HANDLE // 1
    {
        public ulong ptr;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_GPU_DESCRIPTOR_HANDLE // 1
    {
        public ulong ptr;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_TEXTURE_COPY_LOCATION // 1
    {
        public ID3D12Resource pResource;
        public D3D12_TEXTURE_COPY_TYPE Type;
        public D3D12_TEXTURE_COPY_LOCATION__anonymous_128 __param__3;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_PLACED_SUBRESOURCE_FOOTPRINT // 1
    {
        public ulong Offset;
        public D3D12_SUBRESOURCE_FOOTPRINT Footprint;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_SUBRESOURCE_FOOTPRINT // 1
    {
        public DXGI_FORMAT Format;
        public uint Width;
        public uint Height;
        public uint Depth;
        public uint RowPitch;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_TILED_RESOURCE_COORDINATE // 1
    {
        public uint X;
        public uint Y;
        public uint Z;
        public uint Subresource;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_TILE_REGION_SIZE // 1
    {
        public uint NumTiles;
        public int UseBox;
        public uint Width;
        public ushort Height;
        public ushort Depth;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_VIEWPORT // 1
    {
        public float TopLeftX;
        public float TopLeftY;
        public float Width;
        public float Height;
        public float MinDepth;
        public float MaxDepth;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_RESOURCE_BARRIER // 1
    {
        public D3D12_RESOURCE_BARRIER_TYPE Type;
        public D3D12_RESOURCE_BARRIER_FLAGS Flags;
        public D3D12_RESOURCE_BARRIER__anonymous_149 __param__3;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_RESOURCE_TRANSITION_BARRIER // 1
    {
        public ID3D12Resource pResource;
        public uint Subresource;
        public D3D12_RESOURCE_STATES StateBefore;
        public D3D12_RESOURCE_STATES StateAfter;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_RESOURCE_ALIASING_BARRIER // 1
    {
        public ID3D12Resource pResourceBefore;
        public ID3D12Resource pResourceAfter;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_RESOURCE_UAV_BARRIER // 1
    {
        public ID3D12Resource pResource;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_INDEX_BUFFER_VIEW // 1
    {
        public ulong BufferLocation;
        public uint SizeInBytes;
        public DXGI_FORMAT Format;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_VERTEX_BUFFER_VIEW // 1
    {
        public ulong BufferLocation;
        public uint SizeInBytes;
        public uint StrideInBytes;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_STREAM_OUTPUT_BUFFER_VIEW // 1
    {
        public ulong BufferLocation;
        public ulong SizeInBytes;
        public ulong BufferFilledSizeLocation;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_DISCARD_REGION // 1
    {
        public uint NumRects;
        public IntPtr pRects;
        public uint FirstSubresource;
        public uint NumSubresources;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_SUBRESOURCE_RANGE_UINT64 // 1
    {
        public uint Subresource;
        public D3D12_RANGE_UINT64 Range;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_RANGE_UINT64 // 1
    {
        public ulong Begin;
        public ulong End;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_SAMPLE_POSITION // 1
    {
        public sbyte X;
        public sbyte Y;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_WRITEBUFFERIMMEDIATE_PARAMETER // 1
    {
        public ulong Dest;
        public uint Value;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_COMMAND_QUEUE_DESC // 1
    {
        public D3D12_COMMAND_LIST_TYPE Type;
        public int Priority;
        public D3D12_COMMAND_QUEUE_FLAGS Flags;
        public uint NodeMask;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_GRAPHICS_PIPELINE_STATE_DESC // 1
    {
        public ID3D12RootSignature pRootSignature;
        public D3D12_SHADER_BYTECODE VS;
        public D3D12_SHADER_BYTECODE PS;
        public D3D12_SHADER_BYTECODE DS;
        public D3D12_SHADER_BYTECODE HS;
        public D3D12_SHADER_BYTECODE GS;
        public D3D12_STREAM_OUTPUT_DESC StreamOutput;
        public D3D12_BLEND_DESC BlendState;
        public uint SampleMask;
        public D3D12_RASTERIZER_DESC RasterizerState;
        public D3D12_DEPTH_STENCIL_DESC DepthStencilState;
        public D3D12_INPUT_LAYOUT_DESC InputLayout;
        public D3D12_INDEX_BUFFER_STRIP_CUT_VALUE IBStripCutValue;
        public D3D12_PRIMITIVE_TOPOLOGY_TYPE PrimitiveTopologyType;
        public uint NumRenderTargets;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=8)]public DXGI_FORMAT[] RTVFormats;
        public DXGI_FORMAT DSVFormat;
        public DXGI_SAMPLE_DESC SampleDesc;
        public uint NodeMask;
        public D3D12_CACHED_PIPELINE_STATE CachedPSO;
        public D3D12_PIPELINE_STATE_FLAGS Flags;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_SHADER_BYTECODE // 1
    {
        public IntPtr pShaderBytecode;
        public ulong BytecodeLength;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_STREAM_OUTPUT_DESC // 1
    {
        public IntPtr pSODeclaration;
        public uint NumEntries;
        public IntPtr pBufferStrides;
        public uint NumStrides;
        public uint RasterizedStream;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_SO_DECLARATION_ENTRY // 1
    {
        public uint Stream;
        [MarshalAs(UnmanagedType.LPStr)]public string SemanticName;
        public uint SemanticIndex;
        public byte StartComponent;
        public byte ComponentCount;
        public byte OutputSlot;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_BLEND_DESC // 1
    {
        public int AlphaToCoverageEnable;
        public int IndependentBlendEnable;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=8)]public D3D12_RENDER_TARGET_BLEND_DESC[] RenderTarget;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_RENDER_TARGET_BLEND_DESC // 1
    {
        public int BlendEnable;
        public int LogicOpEnable;
        public D3D12_BLEND SrcBlend;
        public D3D12_BLEND DestBlend;
        public D3D12_BLEND_OP BlendOp;
        public D3D12_BLEND SrcBlendAlpha;
        public D3D12_BLEND DestBlendAlpha;
        public D3D12_BLEND_OP BlendOpAlpha;
        public D3D12_LOGIC_OP LogicOp;
        public byte RenderTargetWriteMask;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_RASTERIZER_DESC // 1
    {
        public D3D12_FILL_MODE FillMode;
        public D3D12_CULL_MODE CullMode;
        public int FrontCounterClockwise;
        public int DepthBias;
        public float DepthBiasClamp;
        public float SlopeScaledDepthBias;
        public int DepthClipEnable;
        public int MultisampleEnable;
        public int AntialiasedLineEnable;
        public uint ForcedSampleCount;
        public D3D12_CONSERVATIVE_RASTERIZATION_MODE ConservativeRaster;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_DEPTH_STENCIL_DESC // 1
    {
        public int DepthEnable;
        public D3D12_DEPTH_WRITE_MASK DepthWriteMask;
        public D3D12_COMPARISON_FUNC DepthFunc;
        public int StencilEnable;
        public byte StencilReadMask;
        public byte StencilWriteMask;
        public D3D12_DEPTH_STENCILOP_DESC FrontFace;
        public D3D12_DEPTH_STENCILOP_DESC BackFace;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_DEPTH_STENCILOP_DESC // 1
    {
        public D3D12_STENCIL_OP StencilFailOp;
        public D3D12_STENCIL_OP StencilDepthFailOp;
        public D3D12_STENCIL_OP StencilPassOp;
        public D3D12_COMPARISON_FUNC StencilFunc;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_INPUT_LAYOUT_DESC // 1
    {
        public IntPtr pInputElementDescs;
        public uint NumElements;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_INPUT_ELEMENT_DESC // 1
    {
        [MarshalAs(UnmanagedType.LPStr)]public string SemanticName;
        public uint SemanticIndex;
        public DXGI_FORMAT Format;
        public uint InputSlot;
        public uint AlignedByteOffset;
        public D3D12_INPUT_CLASSIFICATION InputSlotClass;
        public uint InstanceDataStepRate;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_CACHED_PIPELINE_STATE // 1
    {
        public IntPtr pCachedBlob;
        public ulong CachedBlobSizeInBytes;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_COMPUTE_PIPELINE_STATE_DESC // 1
    {
        public ID3D12RootSignature pRootSignature;
        public D3D12_SHADER_BYTECODE CS;
        public uint NodeMask;
        public D3D12_CACHED_PIPELINE_STATE CachedPSO;
        public D3D12_PIPELINE_STATE_FLAGS Flags;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_CONSTANT_BUFFER_VIEW_DESC // 1
    {
        public ulong BufferLocation;
        public uint SizeInBytes;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_SHADER_RESOURCE_VIEW_DESC // 1
    {
        public DXGI_FORMAT Format;
        public D3D12_SRV_DIMENSION ViewDimension;
        public uint Shader4ComponentMapping;
        public D3D12_SHADER_RESOURCE_VIEW_DESC__anonymous_258 __param__4;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_BUFFER_SRV // 1
    {
        public ulong FirstElement;
        public uint NumElements;
        public uint StructureByteStride;
        public D3D12_BUFFER_SRV_FLAGS Flags;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_TEX1D_SRV // 1
    {
        public uint MostDetailedMip;
        public uint MipLevels;
        public float ResourceMinLODClamp;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_TEX1D_ARRAY_SRV // 1
    {
        public uint MostDetailedMip;
        public uint MipLevels;
        public uint FirstArraySlice;
        public uint ArraySize;
        public float ResourceMinLODClamp;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_TEX2D_SRV // 1
    {
        public uint MostDetailedMip;
        public uint MipLevels;
        public uint PlaneSlice;
        public float ResourceMinLODClamp;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_TEX2D_ARRAY_SRV // 1
    {
        public uint MostDetailedMip;
        public uint MipLevels;
        public uint FirstArraySlice;
        public uint ArraySize;
        public uint PlaneSlice;
        public float ResourceMinLODClamp;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_TEX2DMS_SRV // 1
    {
        public uint UnusedField_NothingToDefine;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_TEX2DMS_ARRAY_SRV // 1
    {
        public uint FirstArraySlice;
        public uint ArraySize;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_TEX3D_SRV // 1
    {
        public uint MostDetailedMip;
        public uint MipLevels;
        public float ResourceMinLODClamp;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_TEXCUBE_SRV // 1
    {
        public uint MostDetailedMip;
        public uint MipLevels;
        public float ResourceMinLODClamp;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_TEXCUBE_ARRAY_SRV // 1
    {
        public uint MostDetailedMip;
        public uint MipLevels;
        public uint First2DArrayFace;
        public uint NumCubes;
        public float ResourceMinLODClamp;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV // 1
    {
        public ulong Location;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_UNORDERED_ACCESS_VIEW_DESC // 1
    {
        public DXGI_FORMAT Format;
        public D3D12_UAV_DIMENSION ViewDimension;
        public D3D12_UNORDERED_ACCESS_VIEW_DESC__anonymous_287 __param__3;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_BUFFER_UAV // 1
    {
        public ulong FirstElement;
        public uint NumElements;
        public uint StructureByteStride;
        public ulong CounterOffsetInBytes;
        public D3D12_BUFFER_UAV_FLAGS Flags;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_TEX1D_UAV // 1
    {
        public uint MipSlice;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_TEX1D_ARRAY_UAV // 1
    {
        public uint MipSlice;
        public uint FirstArraySlice;
        public uint ArraySize;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_TEX2D_UAV // 1
    {
        public uint MipSlice;
        public uint PlaneSlice;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_TEX2D_ARRAY_UAV // 1
    {
        public uint MipSlice;
        public uint FirstArraySlice;
        public uint ArraySize;
        public uint PlaneSlice;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_TEX3D_UAV // 1
    {
        public uint MipSlice;
        public uint FirstWSlice;
        public uint WSize;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_RENDER_TARGET_VIEW_DESC // 1
    {
        public DXGI_FORMAT Format;
        public D3D12_RTV_DIMENSION ViewDimension;
        public D3D12_RENDER_TARGET_VIEW_DESC__anonymous_306 __param__3;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_BUFFER_RTV // 1
    {
        public ulong FirstElement;
        public uint NumElements;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_TEX1D_RTV // 1
    {
        public uint MipSlice;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_TEX1D_ARRAY_RTV // 1
    {
        public uint MipSlice;
        public uint FirstArraySlice;
        public uint ArraySize;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_TEX2D_RTV // 1
    {
        public uint MipSlice;
        public uint PlaneSlice;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_TEX2D_ARRAY_RTV // 1
    {
        public uint MipSlice;
        public uint FirstArraySlice;
        public uint ArraySize;
        public uint PlaneSlice;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_TEX2DMS_RTV // 1
    {
        public uint UnusedField_NothingToDefine;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_TEX2DMS_ARRAY_RTV // 1
    {
        public uint FirstArraySlice;
        public uint ArraySize;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_TEX3D_RTV // 1
    {
        public uint MipSlice;
        public uint FirstWSlice;
        public uint WSize;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_DEPTH_STENCIL_VIEW_DESC // 1
    {
        public DXGI_FORMAT Format;
        public D3D12_DSV_DIMENSION ViewDimension;
        public D3D12_DSV_FLAGS Flags;
        public D3D12_DEPTH_STENCIL_VIEW_DESC__anonymous_329 __param__4;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_TEX1D_DSV // 1
    {
        public uint MipSlice;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_TEX1D_ARRAY_DSV // 1
    {
        public uint MipSlice;
        public uint FirstArraySlice;
        public uint ArraySize;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_TEX2D_DSV // 1
    {
        public uint MipSlice;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_TEX2D_ARRAY_DSV // 1
    {
        public uint MipSlice;
        public uint FirstArraySlice;
        public uint ArraySize;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_TEX2DMS_DSV // 1
    {
        public uint UnusedField_NothingToDefine;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_TEX2DMS_ARRAY_DSV // 1
    {
        public uint FirstArraySlice;
        public uint ArraySize;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_SAMPLER_DESC // 1
    {
        public D3D12_FILTER Filter;
        public D3D12_TEXTURE_ADDRESS_MODE AddressU;
        public D3D12_TEXTURE_ADDRESS_MODE AddressV;
        public D3D12_TEXTURE_ADDRESS_MODE AddressW;
        public float MipLODBias;
        public uint MaxAnisotropy;
        public D3D12_COMPARISON_FUNC ComparisonFunc;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=4)]public float[] BorderColor;
        public float MinLOD;
        public float MaxLOD;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_RESOURCE_ALLOCATION_INFO // 1
    {
        public ulong SizeInBytes;
        public ulong Alignment;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_CLEAR_VALUE // 1
    {
        public DXGI_FORMAT Format;
        public D3D12_CLEAR_VALUE__anonymous_348 __param__2;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_DEPTH_STENCIL_VALUE // 1
    {
        public float Depth;
        public byte Stencil;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_QUERY_HEAP_DESC // 1
    {
        public D3D12_QUERY_HEAP_TYPE Type;
        public uint Count;
        public uint NodeMask;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_COMMAND_SIGNATURE_DESC // 1
    {
        public uint ByteStride;
        public uint NumArgumentDescs;
        public IntPtr pArgumentDescs;
        public uint NodeMask;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_INDIRECT_ARGUMENT_DESC // 1
    {
        public D3D12_INDIRECT_ARGUMENT_TYPE Type;
        public D3D12_INDIRECT_ARGUMENT_DESC__anonymous_361 __param__2;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_PACKED_MIP_INFO // 1
    {
        public byte NumStandardMips;
        public byte NumPackedMips;
        public uint NumTilesForPackedMips;
        public uint StartTileIndexInOverallResource;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_TILE_SHAPE // 1
    {
        public uint WidthInTexels;
        public uint HeightInTexels;
        public uint DepthInTexels;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_SUBRESOURCE_TILING // 1
    {
        public uint WidthInTiles;
        public ushort HeightInTiles;
        public ushort DepthInTiles;
        public uint StartTileIndexInOverallResource;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_PIPELINE_STATE_STREAM_DESC // 1
    {
        public ulong SizeInBytes;
        public IntPtr pPipelineStateSubobjectStream;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_PROTECTED_RESOURCE_SESSION_DESC // 1
    {
        public uint NodeMask;
        public D3D12_PROTECTED_RESOURCE_SESSION_FLAGS Flags;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_RESOURCE_ALLOCATION_INFO1 // 1
    {
        public ulong Offset;
        public ulong Alignment;
        public ulong SizeInBytes;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_META_COMMAND_DESC // 1
    {
        public Guid Id;
        [MarshalAs(UnmanagedType.LPWStr)]public string Name;
        public D3D12_GRAPHICS_STATES InitializationDirtyState;
        public D3D12_GRAPHICS_STATES ExecutionDirtyState;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_META_COMMAND_PARAMETER_DESC // 1
    {
        [MarshalAs(UnmanagedType.LPWStr)]public string Name;
        public D3D12_META_COMMAND_PARAMETER_TYPE Type;
        public D3D12_META_COMMAND_PARAMETER_FLAGS Flags;
        public D3D12_RESOURCE_STATES RequiredResourceState;
        public uint StructureOffset;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_STATE_OBJECT_DESC // 1
    {
        public D3D12_STATE_OBJECT_TYPE Type;
        public uint NumSubobjects;
        public IntPtr pSubobjects;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_STATE_SUBOBJECT // 1
    {
        public D3D12_STATE_SUBOBJECT_TYPE Type;
        public IntPtr pDesc;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS // 1
    {
        public D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE Type;
        public D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS Flags;
        public uint NumDescs;
        public D3D12_ELEMENTS_LAYOUT DescsLayout;
        public D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS__anonymous_449 __param__5;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_RAYTRACING_GEOMETRY_DESC // 1
    {
        public D3D12_RAYTRACING_GEOMETRY_TYPE Type;
        public D3D12_RAYTRACING_GEOMETRY_FLAGS Flags;
        public D3D12_RAYTRACING_GEOMETRY_DESC__anonymous_456 __param__3;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC // 1
    {
        public ulong Transform3x4;
        public DXGI_FORMAT IndexFormat;
        public DXGI_FORMAT VertexFormat;
        public uint IndexCount;
        public uint VertexCount;
        public ulong IndexBuffer;
        public D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE VertexBuffer;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE // 1
    {
        public ulong StartAddress;
        public ulong StrideInBytes;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_RAYTRACING_GEOMETRY_AABBS_DESC // 1
    {
        public ulong AABBCount;
        public D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE AABBs;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO // 1
    {
        public ulong ResultDataMaxSizeInBytes;
        public ulong ScratchDataSizeInBytes;
        public ulong UpdateScratchDataSizeInBytes;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER // 1
    {
        public Guid DriverOpaqueGUID;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=16)]public byte[] DriverOpaqueVersioningData;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT // 1
    {
        public IntPtr pHeadAutoBreadcrumbNode;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_AUTO_BREADCRUMB_NODE // 2
    {
        public IntPtr pCommandListDebugNameA;
        public IntPtr pCommandListDebugNameW;
        public IntPtr pCommandQueueDebugNameA;
        public IntPtr pCommandQueueDebugNameW;
        public ID3D12GraphicsCommandList pCommandList;
        public ID3D12CommandQueue pCommandQueue;
        public uint BreadcrumbCount;
        public IntPtr pLastBreadcrumbValue;
        public IntPtr pCommandHistory;
        public IntPtr pNext;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_DRED_PAGE_FAULT_OUTPUT // 1
    {
        public ulong PageFaultVA;
        public IntPtr pHeadExistingAllocationNode;
        public IntPtr pHeadRecentFreedAllocationNode;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_DRED_ALLOCATION_NODE // 2
    {
        public IntPtr ObjectNameA;
        public IntPtr ObjectNameW;
        public D3D12_DRED_ALLOCATION_TYPE AllocationType;
        public IntPtr pNext;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_RENDER_PASS_RENDER_TARGET_DESC // 1
    {
        public D3D12_CPU_DESCRIPTOR_HANDLE cpuDescriptor;
        public D3D12_RENDER_PASS_BEGINNING_ACCESS BeginningAccess;
        public D3D12_RENDER_PASS_ENDING_ACCESS EndingAccess;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_RENDER_PASS_BEGINNING_ACCESS // 1
    {
        public D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE Type;
        public D3D12_RENDER_PASS_BEGINNING_ACCESS__anonymous_511 __param__2;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS // 1
    {
        public D3D12_CLEAR_VALUE ClearValue;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_RENDER_PASS_ENDING_ACCESS // 1
    {
        public D3D12_RENDER_PASS_ENDING_ACCESS_TYPE Type;
        public D3D12_RENDER_PASS_ENDING_ACCESS__anonymous_518 __param__2;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS // 1
    {
        public ID3D12Resource pSrcResource;
        public ID3D12Resource pDstResource;
        public uint SubresourceCount;
        public IntPtr pSubresourceParameters;
        public DXGI_FORMAT Format;
        public D3D12_RESOLVE_MODE ResolveMode;
        public int PreserveResolveSource;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS // 1
    {
        public uint SrcSubresource;
        public uint DstSubresource;
        public uint DstX;
        public uint DstY;
        public tagRECT SrcRect;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_RENDER_PASS_DEPTH_STENCIL_DESC // 1
    {
        public D3D12_CPU_DESCRIPTOR_HANDLE cpuDescriptor;
        public D3D12_RENDER_PASS_BEGINNING_ACCESS DepthBeginningAccess;
        public D3D12_RENDER_PASS_BEGINNING_ACCESS StencilBeginningAccess;
        public D3D12_RENDER_PASS_ENDING_ACCESS DepthEndingAccess;
        public D3D12_RENDER_PASS_ENDING_ACCESS StencilEndingAccess;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC // 1
    {
        public ulong DestAccelerationStructureData;
        public D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS Inputs;
        public ulong SourceAccelerationStructureData;
        public ulong ScratchAccelerationStructureData;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC // 1
    {
        public ulong DestBuffer;
        public D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE InfoType;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_DISPATCH_RAYS_DESC // 1
    {
        public D3D12_GPU_VIRTUAL_ADDRESS_RANGE RayGenerationShaderRecord;
        public D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE MissShaderTable;
        public D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE HitGroupTable;
        public D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE CallableShaderTable;
        public uint Width;
        public uint Height;
        public uint Depth;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_GPU_VIRTUAL_ADDRESS_RANGE // 1
    {
        public ulong StartAddress;
        public ulong SizeInBytes;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE // 1
    {
        public ulong StartAddress;
        public ulong SizeInBytes;
        public ulong StrideInBytes;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_DEPTH_STENCIL_DESC1 // 1
    {
        public int DepthEnable;
        public D3D12_DEPTH_WRITE_MASK DepthWriteMask;
        public D3D12_COMPARISON_FUNC DepthFunc;
        public int StencilEnable;
        public byte StencilReadMask;
        public byte StencilWriteMask;
        public D3D12_DEPTH_STENCILOP_DESC FrontFace;
        public D3D12_DEPTH_STENCILOP_DESC BackFace;
        public int DepthBoundsTestEnable;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_RT_FORMAT_ARRAY // 0
    {
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=8)]public DXGI_FORMAT[] RTFormats;
        public uint NumRenderTargets;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_FEATURE_DATA_D3D12_OPTIONS // 1
    {
        public int DoublePrecisionFloatShaderOps;
        public int OutputMergerLogicOp;
        public D3D12_SHADER_MIN_PRECISION_SUPPORT MinPrecisionSupport;
        public D3D12_TILED_RESOURCES_TIER TiledResourcesTier;
        public D3D12_RESOURCE_BINDING_TIER ResourceBindingTier;
        public int PSSpecifiedStencilRefSupported;
        public int TypedUAVLoadAdditionalFormats;
        public int ROVsSupported;
        public D3D12_CONSERVATIVE_RASTERIZATION_TIER ConservativeRasterizationTier;
        public uint MaxGPUVirtualAddressBitsPerResource;
        public int StandardSwizzle64KBSupported;
        public D3D12_CROSS_NODE_SHARING_TIER CrossNodeSharingTier;
        public int CrossAdapterRowMajorTextureSupported;
        public int VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation;
        public D3D12_RESOURCE_HEAP_TIER ResourceHeapTier;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_FEATURE_DATA_D3D12_OPTIONS1 // 1
    {
        public int WaveOps;
        public uint WaveLaneCountMin;
        public uint WaveLaneCountMax;
        public uint TotalLaneCount;
        public int ExpandedComputeResourceStates;
        public int Int64ShaderOps;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_FEATURE_DATA_D3D12_OPTIONS2 // 1
    {
        public int DepthBoundsTestSupported;
        public D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER ProgrammableSamplePositionsTier;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_FEATURE_DATA_ROOT_SIGNATURE // 1
    {
        public D3D_ROOT_SIGNATURE_VERSION HighestVersion;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_FEATURE_DATA_ARCHITECTURE // 1
    {
        public uint NodeIndex;
        public int TileBasedRenderer;
        public int UMA;
        public int CacheCoherentUMA;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_FEATURE_DATA_ARCHITECTURE1 // 1
    {
        public uint NodeIndex;
        public int TileBasedRenderer;
        public int UMA;
        public int CacheCoherentUMA;
        public int IsolatedMMU;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_FEATURE_DATA_FEATURE_LEVELS // 1
    {
        public uint NumFeatureLevels;
        public IntPtr pFeatureLevelsRequested;
        public D3D_FEATURE_LEVEL MaxSupportedFeatureLevel;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_FEATURE_DATA_SHADER_MODEL // 1
    {
        public D3D_SHADER_MODEL HighestShaderModel;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_FEATURE_DATA_FORMAT_SUPPORT // 1
    {
        public DXGI_FORMAT Format;
        public D3D12_FORMAT_SUPPORT1 Support1;
        public D3D12_FORMAT_SUPPORT2 Support2;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS // 1
    {
        public DXGI_FORMAT Format;
        public uint SampleCount;
        public D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS Flags;
        public uint NumQualityLevels;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_FEATURE_DATA_FORMAT_INFO // 1
    {
        public DXGI_FORMAT Format;
        public byte PlaneCount;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT // 1
    {
        public uint MaxGPUVirtualAddressBitsPerResource;
        public uint MaxGPUVirtualAddressBitsPerProcess;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_FEATURE_DATA_SHADER_CACHE // 1
    {
        public D3D12_SHADER_CACHE_SUPPORT_FLAGS SupportFlags;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY // 1
    {
        public D3D12_COMMAND_LIST_TYPE CommandListType;
        public uint Priority;
        public int PriorityForTypeIsSupported;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_FEATURE_DATA_D3D12_OPTIONS3 // 1
    {
        public int CopyQueueTimestampQueriesSupported;
        public int CastingFullyTypedFormatSupported;
        public D3D12_COMMAND_LIST_SUPPORT_FLAGS WriteBufferImmediateSupportFlags;
        public D3D12_VIEW_INSTANCING_TIER ViewInstancingTier;
        public int BarycentricsSupported;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_FEATURE_DATA_EXISTING_HEAPS // 1
    {
        public int Supported;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_FEATURE_DATA_D3D12_OPTIONS4 // 1
    {
        public int MSAA64KBAlignedTextureSupported;
        public D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER SharedResourceCompatibilityTier;
        public int Native16BitShaderOpsSupported;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_FEATURE_DATA_SERIALIZATION // 1
    {
        public uint NodeIndex;
        public D3D12_HEAP_SERIALIZATION_TIER HeapSerializationTier;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_FEATURE_DATA_CROSS_NODE // 1
    {
        public D3D12_CROSS_NODE_SHARING_TIER SharingTier;
        public int AtomicShaderInstructions;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_FEATURE_DATA_D3D12_OPTIONS5 // 1
    {
        public int SRVOnlyTiledResourceTier3;
        public D3D12_RENDER_PASS_TIER RenderPassesTier;
        public D3D12_RAYTRACING_TIER RaytracingTier;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_FEATURE_DATA_D3D12_OPTIONS6 // 1
    {
        public int AdditionalShadingRatesSupported;
        public int PerPrimitiveShadingRateSupportedWithViewportIndexing;
        public D3D12_VARIABLE_SHADING_RATE_TIER VariableShadingRateTier;
        public uint ShadingRateImageTileSize;
        public int BackgroundProcessingSupported;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_FEATURE_DATA_QUERY_META_COMMAND // 1
    {
        public Guid CommandId;
        public uint NodeMask;
        public IntPtr pQueryInputData;
        public ulong QueryInputDataSizeInBytes;
        public IntPtr pQueryOutputData;
        public ulong QueryOutputDataSizeInBytes;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_SUBRESOURCE_INFO // 1
    {
        public ulong Offset;
        public uint RowPitch;
        public uint DepthPitch;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_VIEW_INSTANCE_LOCATION // 1
    {
        public uint ViewportArrayIndex;
        public uint RenderTargetArrayIndex;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_VIEW_INSTANCING_DESC // 1
    {
        public uint ViewInstanceCount;
        public IntPtr pViewInstanceLocations;
        public D3D12_VIEW_INSTANCING_FLAGS Flags;
    }
    public delegate int PFN_D3D12_SERIALIZE_ROOT_SIGNATURE(ref D3D12_ROOT_SIGNATURE_DESC pRootSignature, D3D_ROOT_SIGNATURE_VERSION Version, out ID3D10Blob ppBlob, out ID3D10Blob ppErrorBlob);
    public delegate int PFN_D3D12_CREATE_ROOT_SIGNATURE_DESERIALIZER(IntPtr pSrcData, ulong SrcDataSizeInBytes, ref Guid pRootSignatureDeserializerInterface, out IntPtr ppRootSignatureDeserializer);
    public delegate int PFN_D3D12_SERIALIZE_VERSIONED_ROOT_SIGNATURE(ref D3D12_VERSIONED_ROOT_SIGNATURE_DESC pRootSignature, out ID3D10Blob ppBlob, out ID3D10Blob ppErrorBlob);
    public delegate int PFN_D3D12_CREATE_VERSIONED_ROOT_SIGNATURE_DESERIALIZER(IntPtr pSrcData, ulong SrcDataSizeInBytes, ref Guid pRootSignatureDeserializerInterface, out IntPtr ppRootSignatureDeserializer);
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_QUERY_DATA_PIPELINE_STATISTICS // 1
    {
        public ulong IAVertices;
        public ulong IAPrimitives;
        public ulong VSInvocations;
        public ulong GSInvocations;
        public ulong GSPrimitives;
        public ulong CInvocations;
        public ulong CPrimitives;
        public ulong PSInvocations;
        public ulong HSInvocations;
        public ulong DSInvocations;
        public ulong CSInvocations;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_QUERY_DATA_SO_STATISTICS // 1
    {
        public ulong NumPrimitivesWritten;
        public ulong PrimitivesStorageNeeded;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_DRAW_ARGUMENTS // 1
    {
        public uint VertexCountPerInstance;
        public uint InstanceCount;
        public uint StartVertexLocation;
        public uint StartInstanceLocation;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_DRAW_INDEXED_ARGUMENTS // 1
    {
        public uint IndexCountPerInstance;
        public uint InstanceCount;
        public uint StartIndexLocation;
        public int BaseVertexLocation;
        public uint StartInstanceLocation;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_DISPATCH_ARGUMENTS // 1
    {
        public uint ThreadGroupCountX;
        public uint ThreadGroupCountY;
        public uint ThreadGroupCountZ;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT // 1
    {
        public uint NodeIndex;
        public D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS Support;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_STATE_OBJECT_CONFIG // 1
    {
        public D3D12_STATE_OBJECT_FLAGS Flags;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_GLOBAL_ROOT_SIGNATURE // 1
    {
        public ID3D12RootSignature pGlobalRootSignature;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_LOCAL_ROOT_SIGNATURE // 1
    {
        public ID3D12RootSignature pLocalRootSignature;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_NODE_MASK // 1
    {
        public uint NodeMask;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_EXPORT_DESC // 1
    {
        [MarshalAs(UnmanagedType.LPWStr)]public string Name;
        [MarshalAs(UnmanagedType.LPWStr)]public string ExportToRename;
        public D3D12_EXPORT_FLAGS Flags;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_DXIL_LIBRARY_DESC // 1
    {
        public D3D12_SHADER_BYTECODE DXILLibrary;
        public uint NumExports;
        public IntPtr pExports;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_EXISTING_COLLECTION_DESC // 1
    {
        public ID3D12StateObject pExistingCollection;
        public uint NumExports;
        public IntPtr pExports;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION // 1
    {
        public IntPtr pSubobjectToAssociate;
        public uint NumExports;
        [MarshalAs(UnmanagedType.LPWStr)]public IntPtr pExports;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION // 1
    {
        [MarshalAs(UnmanagedType.LPWStr)]public string SubobjectToAssociate;
        public uint NumExports;
        [MarshalAs(UnmanagedType.LPWStr)]public IntPtr pExports;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_HIT_GROUP_DESC // 1
    {
        [MarshalAs(UnmanagedType.LPWStr)]public string HitGroupExport;
        public D3D12_HIT_GROUP_TYPE Type;
        [MarshalAs(UnmanagedType.LPWStr)]public string AnyHitShaderImport;
        [MarshalAs(UnmanagedType.LPWStr)]public string ClosestHitShaderImport;
        [MarshalAs(UnmanagedType.LPWStr)]public string IntersectionShaderImport;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_RAYTRACING_SHADER_CONFIG // 1
    {
        public uint MaxPayloadSizeInBytes;
        public uint MaxAttributeSizeInBytes;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_RAYTRACING_PIPELINE_CONFIG // 1
    {
        public uint MaxTraceRecursionDepth;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_RAYTRACING_AABB // 1
    {
        public float MinX;
        public float MinY;
        public float MinZ;
        public float MaxX;
        public float MaxY;
        public float MaxZ;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC // 1
    {
        public ulong CompactedSizeInBytes;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC // 1
    {
        public ulong DecodedSizeInBytes;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER // 1
    {
        public D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE Type;
        public uint NumDescs;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC // 1
    {
        public ulong SerializedSizeInBytes;
        public ulong NumBottomLevelAccelerationStructurePointers;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER // 1
    {
        public D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER DriverMatchingIdentifier;
        public ulong SerializedSizeInBytesIncludingHeader;
        public ulong DeserializedSizeInBytes;
        public ulong NumBottomLevelAccelerationStructurePointersAfterHeader;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC // 1
    {
        public ulong CurrentSizeInBytes;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_RAYTRACING_INSTANCE_DESC // 1
    {
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=3)]public float[][] Transform;
        public uint InstanceID;
        public uint InstanceMask;
        public uint InstanceContributionToHitGroupIndex;
        public uint Flags;
        public ulong AccelerationStructure;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_DEVICE_REMOVED_EXTENDED_DATA // 1
    {
        public D3D12_DRED_FLAGS Flags;
        public IntPtr pHeadAutoBreadcrumbNode;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_DEVICE_REMOVED_EXTENDED_DATA1 // 1
    {
        public int DeviceRemovedReason;
        public D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT AutoBreadcrumbsOutput;
        public D3D12_DRED_PAGE_FAULT_OUTPUT PageFaultOutput;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA // 1
    {
        public D3D12_DRED_VERSION Version;
        public D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA__anonymous_1027 __param__2;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_SUBRESOURCE_DATA // 1
    {
        public IntPtr pData;
        public long RowPitch;
        public long SlicePitch;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D12_MEMCPY_DEST // 1
    {
        public IntPtr pData;
        public ulong RowPitch;
        public ulong SlicePitch;
    }
    public delegate int PFN_D3D12_CREATE_DEVICE(IUnknown __param__1, D3D_FEATURE_LEVEL __param__2, ref Guid __param__3, out IntPtr __param__4);
    public delegate int PFN_D3D12_GET_DEBUG_INTERFACE(ref Guid __param__1, out IntPtr __param__2);
    public static class d3d12 {
        [DllImport("d3d12.dll")]
        public static extern int D3D12SerializeRootSignature(
            ref D3D12_ROOT_SIGNATURE_DESC pRootSignature,
            D3D_ROOT_SIGNATURE_VERSION Version,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<ID3D10Blob>))]out ID3D10Blob ppBlob,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<ID3D10Blob>))]out ID3D10Blob ppErrorBlob
        );
        [DllImport("d3d12.dll")]
        public static extern int D3D12CreateRootSignatureDeserializer(
            IntPtr pSrcData,
            ulong SrcDataSizeInBytes,
            ref Guid pRootSignatureDeserializerInterface,
            out IntPtr ppRootSignatureDeserializer
        );
        [DllImport("d3d12.dll")]
        public static extern int D3D12SerializeVersionedRootSignature(
            ref D3D12_VERSIONED_ROOT_SIGNATURE_DESC pRootSignature,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<ID3D10Blob>))]out ID3D10Blob ppBlob,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<ID3D10Blob>))]out ID3D10Blob ppErrorBlob
        );
        [DllImport("d3d12.dll")]
        public static extern int D3D12CreateVersionedRootSignatureDeserializer(
            IntPtr pSrcData,
            ulong SrcDataSizeInBytes,
            ref Guid pRootSignatureDeserializerInterface,
            out IntPtr ppRootSignatureDeserializer
        );
        [DllImport("d3d12.dll")]
        public static extern int D3D12CreateDevice(
            IUnknown pAdapter,
            D3D_FEATURE_LEVEL MinimumFeatureLevel,
            ref Guid riid,
            out IntPtr ppDevice
        );
        [DllImport("d3d12.dll")]
        public static extern int D3D12GetDebugInterface(
            ref Guid riid,
            out IntPtr ppvDebug
        );
        [DllImport("d3d12.dll")]
        public static extern int D3D12EnableExperimentalFeatures(
            uint NumFeatures,
            ref Guid pIIDs,
            IntPtr pConfigurationStructs,
            out uint pConfigurationStructSizes
        );
    }
}
