// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class ID3D12GraphicsCommandList: ID3D12CommandList
    {
        static Guid s_uuid = new Guid("5b160d0f-ac1b-4185-8ba8-b3ae42a5a455");
        public static new ref Guid IID =>ref s_uuid;
        public override ref Guid GetIID(){ return ref s_uuid; }
                
        public virtual int Close(
        ){
            var fp = GetFunctionPointer(9);
            if(m_CloseFunc==null) m_CloseFunc = (CloseFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CloseFunc));
            
            return m_CloseFunc(m_ptr);
        }
        delegate int CloseFunc(IntPtr self);
        CloseFunc m_CloseFunc;

        public virtual int Reset(
            ID3D12CommandAllocator pAllocator,
            ID3D12PipelineState pInitialState
        ){
            var fp = GetFunctionPointer(10);
            if(m_ResetFunc==null) m_ResetFunc = (ResetFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ResetFunc));
            
            return m_ResetFunc(m_ptr, pAllocator!=null ? pAllocator.Ptr : IntPtr.Zero, pInitialState!=null ? pInitialState.Ptr : IntPtr.Zero);
        }
        delegate int ResetFunc(IntPtr self, IntPtr pAllocator, IntPtr pInitialState);
        ResetFunc m_ResetFunc;

        public virtual void ClearState(
            ID3D12PipelineState pPipelineState
        ){
            var fp = GetFunctionPointer(11);
            if(m_ClearStateFunc==null) m_ClearStateFunc = (ClearStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ClearStateFunc));
            
            m_ClearStateFunc(m_ptr, pPipelineState!=null ? pPipelineState.Ptr : IntPtr.Zero);
        }
        delegate void ClearStateFunc(IntPtr self, IntPtr pPipelineState);
        ClearStateFunc m_ClearStateFunc;

        public virtual void DrawInstanced(
            uint VertexCountPerInstance,
            uint InstanceCount,
            uint StartVertexLocation,
            uint StartInstanceLocation
        ){
            var fp = GetFunctionPointer(12);
            if(m_DrawInstancedFunc==null) m_DrawInstancedFunc = (DrawInstancedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawInstancedFunc));
            
            m_DrawInstancedFunc(m_ptr, VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation);
        }
        delegate void DrawInstancedFunc(IntPtr self, uint VertexCountPerInstance, uint InstanceCount, uint StartVertexLocation, uint StartInstanceLocation);
        DrawInstancedFunc m_DrawInstancedFunc;

        public virtual void DrawIndexedInstanced(
            uint IndexCountPerInstance,
            uint InstanceCount,
            uint StartIndexLocation,
            int BaseVertexLocation,
            uint StartInstanceLocation
        ){
            var fp = GetFunctionPointer(13);
            if(m_DrawIndexedInstancedFunc==null) m_DrawIndexedInstancedFunc = (DrawIndexedInstancedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawIndexedInstancedFunc));
            
            m_DrawIndexedInstancedFunc(m_ptr, IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation);
        }
        delegate void DrawIndexedInstancedFunc(IntPtr self, uint IndexCountPerInstance, uint InstanceCount, uint StartIndexLocation, int BaseVertexLocation, uint StartInstanceLocation);
        DrawIndexedInstancedFunc m_DrawIndexedInstancedFunc;

        public virtual void Dispatch(
            uint ThreadGroupCountX,
            uint ThreadGroupCountY,
            uint ThreadGroupCountZ
        ){
            var fp = GetFunctionPointer(14);
            if(m_DispatchFunc==null) m_DispatchFunc = (DispatchFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DispatchFunc));
            
            m_DispatchFunc(m_ptr, ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
        }
        delegate void DispatchFunc(IntPtr self, uint ThreadGroupCountX, uint ThreadGroupCountY, uint ThreadGroupCountZ);
        DispatchFunc m_DispatchFunc;

        public virtual void CopyBufferRegion(
            ID3D12Resource pDstBuffer,
            ulong DstOffset,
            ID3D12Resource pSrcBuffer,
            ulong SrcOffset,
            ulong NumBytes
        ){
            var fp = GetFunctionPointer(15);
            if(m_CopyBufferRegionFunc==null) m_CopyBufferRegionFunc = (CopyBufferRegionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopyBufferRegionFunc));
            
            m_CopyBufferRegionFunc(m_ptr, pDstBuffer!=null ? pDstBuffer.Ptr : IntPtr.Zero, DstOffset, pSrcBuffer!=null ? pSrcBuffer.Ptr : IntPtr.Zero, SrcOffset, NumBytes);
        }
        delegate void CopyBufferRegionFunc(IntPtr self, IntPtr pDstBuffer, ulong DstOffset, IntPtr pSrcBuffer, ulong SrcOffset, ulong NumBytes);
        CopyBufferRegionFunc m_CopyBufferRegionFunc;

        public virtual void CopyTextureRegion(
            ref D3D12_TEXTURE_COPY_LOCATION pDst,
            uint DstX,
            uint DstY,
            uint DstZ,
            ref D3D12_TEXTURE_COPY_LOCATION pSrc,
            ref D3D12_BOX pSrcBox
        ){
            var fp = GetFunctionPointer(16);
            if(m_CopyTextureRegionFunc==null) m_CopyTextureRegionFunc = (CopyTextureRegionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopyTextureRegionFunc));
            
            m_CopyTextureRegionFunc(m_ptr, ref pDst, DstX, DstY, DstZ, ref pSrc, ref pSrcBox);
        }
        delegate void CopyTextureRegionFunc(IntPtr self, ref D3D12_TEXTURE_COPY_LOCATION pDst, uint DstX, uint DstY, uint DstZ, ref D3D12_TEXTURE_COPY_LOCATION pSrc, ref D3D12_BOX pSrcBox);
        CopyTextureRegionFunc m_CopyTextureRegionFunc;

        public virtual void CopyResource(
            ID3D12Resource pDstResource,
            ID3D12Resource pSrcResource
        ){
            var fp = GetFunctionPointer(17);
            if(m_CopyResourceFunc==null) m_CopyResourceFunc = (CopyResourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopyResourceFunc));
            
            m_CopyResourceFunc(m_ptr, pDstResource!=null ? pDstResource.Ptr : IntPtr.Zero, pSrcResource!=null ? pSrcResource.Ptr : IntPtr.Zero);
        }
        delegate void CopyResourceFunc(IntPtr self, IntPtr pDstResource, IntPtr pSrcResource);
        CopyResourceFunc m_CopyResourceFunc;

        public virtual void CopyTiles(
            ID3D12Resource pTiledResource,
            ref D3D12_TILED_RESOURCE_COORDINATE pTileRegionStartCoordinate,
            ref D3D12_TILE_REGION_SIZE pTileRegionSize,
            ID3D12Resource pBuffer,
            ulong BufferStartOffsetInBytes,
            D3D12_TILE_COPY_FLAGS Flags
        ){
            var fp = GetFunctionPointer(18);
            if(m_CopyTilesFunc==null) m_CopyTilesFunc = (CopyTilesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopyTilesFunc));
            
            m_CopyTilesFunc(m_ptr, pTiledResource!=null ? pTiledResource.Ptr : IntPtr.Zero, ref pTileRegionStartCoordinate, ref pTileRegionSize, pBuffer!=null ? pBuffer.Ptr : IntPtr.Zero, BufferStartOffsetInBytes, Flags);
        }
        delegate void CopyTilesFunc(IntPtr self, IntPtr pTiledResource, ref D3D12_TILED_RESOURCE_COORDINATE pTileRegionStartCoordinate, ref D3D12_TILE_REGION_SIZE pTileRegionSize, IntPtr pBuffer, ulong BufferStartOffsetInBytes, D3D12_TILE_COPY_FLAGS Flags);
        CopyTilesFunc m_CopyTilesFunc;

        public virtual void ResolveSubresource(
            ID3D12Resource pDstResource,
            uint DstSubresource,
            ID3D12Resource pSrcResource,
            uint SrcSubresource,
            DXGI_FORMAT Format
        ){
            var fp = GetFunctionPointer(19);
            if(m_ResolveSubresourceFunc==null) m_ResolveSubresourceFunc = (ResolveSubresourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ResolveSubresourceFunc));
            
            m_ResolveSubresourceFunc(m_ptr, pDstResource!=null ? pDstResource.Ptr : IntPtr.Zero, DstSubresource, pSrcResource!=null ? pSrcResource.Ptr : IntPtr.Zero, SrcSubresource, Format);
        }
        delegate void ResolveSubresourceFunc(IntPtr self, IntPtr pDstResource, uint DstSubresource, IntPtr pSrcResource, uint SrcSubresource, DXGI_FORMAT Format);
        ResolveSubresourceFunc m_ResolveSubresourceFunc;

        public virtual void IASetPrimitiveTopology(
            D3D_PRIMITIVE_TOPOLOGY PrimitiveTopology
        ){
            var fp = GetFunctionPointer(20);
            if(m_IASetPrimitiveTopologyFunc==null) m_IASetPrimitiveTopologyFunc = (IASetPrimitiveTopologyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IASetPrimitiveTopologyFunc));
            
            m_IASetPrimitiveTopologyFunc(m_ptr, PrimitiveTopology);
        }
        delegate void IASetPrimitiveTopologyFunc(IntPtr self, D3D_PRIMITIVE_TOPOLOGY PrimitiveTopology);
        IASetPrimitiveTopologyFunc m_IASetPrimitiveTopologyFunc;

        public virtual void RSSetViewports(
            uint NumViewports,
            ref D3D12_VIEWPORT pViewports
        ){
            var fp = GetFunctionPointer(21);
            if(m_RSSetViewportsFunc==null) m_RSSetViewportsFunc = (RSSetViewportsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RSSetViewportsFunc));
            
            m_RSSetViewportsFunc(m_ptr, NumViewports, ref pViewports);
        }
        delegate void RSSetViewportsFunc(IntPtr self, uint NumViewports, ref D3D12_VIEWPORT pViewports);
        RSSetViewportsFunc m_RSSetViewportsFunc;

        public virtual void RSSetScissorRects(
            uint NumRects,
            ref tagRECT pRects
        ){
            var fp = GetFunctionPointer(22);
            if(m_RSSetScissorRectsFunc==null) m_RSSetScissorRectsFunc = (RSSetScissorRectsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RSSetScissorRectsFunc));
            
            m_RSSetScissorRectsFunc(m_ptr, NumRects, ref pRects);
        }
        delegate void RSSetScissorRectsFunc(IntPtr self, uint NumRects, ref tagRECT pRects);
        RSSetScissorRectsFunc m_RSSetScissorRectsFunc;

        public virtual void OMSetBlendFactor(
            ref float BlendFactor
        ){
            var fp = GetFunctionPointer(23);
            if(m_OMSetBlendFactorFunc==null) m_OMSetBlendFactorFunc = (OMSetBlendFactorFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMSetBlendFactorFunc));
            
            m_OMSetBlendFactorFunc(m_ptr, ref BlendFactor);
        }
        delegate void OMSetBlendFactorFunc(IntPtr self, ref float BlendFactor);
        OMSetBlendFactorFunc m_OMSetBlendFactorFunc;

        public virtual void OMSetStencilRef(
            uint StencilRef
        ){
            var fp = GetFunctionPointer(24);
            if(m_OMSetStencilRefFunc==null) m_OMSetStencilRefFunc = (OMSetStencilRefFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMSetStencilRefFunc));
            
            m_OMSetStencilRefFunc(m_ptr, StencilRef);
        }
        delegate void OMSetStencilRefFunc(IntPtr self, uint StencilRef);
        OMSetStencilRefFunc m_OMSetStencilRefFunc;

        public virtual void SetPipelineState(
            ID3D12PipelineState pPipelineState
        ){
            var fp = GetFunctionPointer(25);
            if(m_SetPipelineStateFunc==null) m_SetPipelineStateFunc = (SetPipelineStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetPipelineStateFunc));
            
            m_SetPipelineStateFunc(m_ptr, pPipelineState!=null ? pPipelineState.Ptr : IntPtr.Zero);
        }
        delegate void SetPipelineStateFunc(IntPtr self, IntPtr pPipelineState);
        SetPipelineStateFunc m_SetPipelineStateFunc;

        public virtual void ResourceBarrier(
            uint NumBarriers,
            ref D3D12_RESOURCE_BARRIER pBarriers
        ){
            var fp = GetFunctionPointer(26);
            if(m_ResourceBarrierFunc==null) m_ResourceBarrierFunc = (ResourceBarrierFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ResourceBarrierFunc));
            
            m_ResourceBarrierFunc(m_ptr, NumBarriers, ref pBarriers);
        }
        delegate void ResourceBarrierFunc(IntPtr self, uint NumBarriers, ref D3D12_RESOURCE_BARRIER pBarriers);
        ResourceBarrierFunc m_ResourceBarrierFunc;

        public virtual void ExecuteBundle(
            ID3D12GraphicsCommandList pCommandList
        ){
            var fp = GetFunctionPointer(27);
            if(m_ExecuteBundleFunc==null) m_ExecuteBundleFunc = (ExecuteBundleFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ExecuteBundleFunc));
            
            m_ExecuteBundleFunc(m_ptr, pCommandList!=null ? pCommandList.Ptr : IntPtr.Zero);
        }
        delegate void ExecuteBundleFunc(IntPtr self, IntPtr pCommandList);
        ExecuteBundleFunc m_ExecuteBundleFunc;

        public virtual void SetDescriptorHeaps(
            uint NumDescriptorHeaps,
            ref IntPtr ppDescriptorHeaps
        ){
            var fp = GetFunctionPointer(28);
            if(m_SetDescriptorHeapsFunc==null) m_SetDescriptorHeapsFunc = (SetDescriptorHeapsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetDescriptorHeapsFunc));
            
            m_SetDescriptorHeapsFunc(m_ptr, NumDescriptorHeaps, ref ppDescriptorHeaps);
        }
        delegate void SetDescriptorHeapsFunc(IntPtr self, uint NumDescriptorHeaps, ref IntPtr ppDescriptorHeaps);
        SetDescriptorHeapsFunc m_SetDescriptorHeapsFunc;

        public virtual void SetComputeRootSignature(
            ID3D12RootSignature pRootSignature
        ){
            var fp = GetFunctionPointer(29);
            if(m_SetComputeRootSignatureFunc==null) m_SetComputeRootSignatureFunc = (SetComputeRootSignatureFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetComputeRootSignatureFunc));
            
            m_SetComputeRootSignatureFunc(m_ptr, pRootSignature!=null ? pRootSignature.Ptr : IntPtr.Zero);
        }
        delegate void SetComputeRootSignatureFunc(IntPtr self, IntPtr pRootSignature);
        SetComputeRootSignatureFunc m_SetComputeRootSignatureFunc;

        public virtual void SetGraphicsRootSignature(
            ID3D12RootSignature pRootSignature
        ){
            var fp = GetFunctionPointer(30);
            if(m_SetGraphicsRootSignatureFunc==null) m_SetGraphicsRootSignatureFunc = (SetGraphicsRootSignatureFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetGraphicsRootSignatureFunc));
            
            m_SetGraphicsRootSignatureFunc(m_ptr, pRootSignature!=null ? pRootSignature.Ptr : IntPtr.Zero);
        }
        delegate void SetGraphicsRootSignatureFunc(IntPtr self, IntPtr pRootSignature);
        SetGraphicsRootSignatureFunc m_SetGraphicsRootSignatureFunc;

        public virtual void SetComputeRootDescriptorTable(
            uint RootParameterIndex,
            D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor
        ){
            var fp = GetFunctionPointer(31);
            if(m_SetComputeRootDescriptorTableFunc==null) m_SetComputeRootDescriptorTableFunc = (SetComputeRootDescriptorTableFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetComputeRootDescriptorTableFunc));
            
            m_SetComputeRootDescriptorTableFunc(m_ptr, RootParameterIndex, BaseDescriptor);
        }
        delegate void SetComputeRootDescriptorTableFunc(IntPtr self, uint RootParameterIndex, D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor);
        SetComputeRootDescriptorTableFunc m_SetComputeRootDescriptorTableFunc;

        public virtual void SetGraphicsRootDescriptorTable(
            uint RootParameterIndex,
            D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor
        ){
            var fp = GetFunctionPointer(32);
            if(m_SetGraphicsRootDescriptorTableFunc==null) m_SetGraphicsRootDescriptorTableFunc = (SetGraphicsRootDescriptorTableFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetGraphicsRootDescriptorTableFunc));
            
            m_SetGraphicsRootDescriptorTableFunc(m_ptr, RootParameterIndex, BaseDescriptor);
        }
        delegate void SetGraphicsRootDescriptorTableFunc(IntPtr self, uint RootParameterIndex, D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor);
        SetGraphicsRootDescriptorTableFunc m_SetGraphicsRootDescriptorTableFunc;

        public virtual void SetComputeRoot32BitConstant(
            uint RootParameterIndex,
            uint SrcData,
            uint DestOffsetIn32BitValues
        ){
            var fp = GetFunctionPointer(33);
            if(m_SetComputeRoot32BitConstantFunc==null) m_SetComputeRoot32BitConstantFunc = (SetComputeRoot32BitConstantFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetComputeRoot32BitConstantFunc));
            
            m_SetComputeRoot32BitConstantFunc(m_ptr, RootParameterIndex, SrcData, DestOffsetIn32BitValues);
        }
        delegate void SetComputeRoot32BitConstantFunc(IntPtr self, uint RootParameterIndex, uint SrcData, uint DestOffsetIn32BitValues);
        SetComputeRoot32BitConstantFunc m_SetComputeRoot32BitConstantFunc;

        public virtual void SetGraphicsRoot32BitConstant(
            uint RootParameterIndex,
            uint SrcData,
            uint DestOffsetIn32BitValues
        ){
            var fp = GetFunctionPointer(34);
            if(m_SetGraphicsRoot32BitConstantFunc==null) m_SetGraphicsRoot32BitConstantFunc = (SetGraphicsRoot32BitConstantFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetGraphicsRoot32BitConstantFunc));
            
            m_SetGraphicsRoot32BitConstantFunc(m_ptr, RootParameterIndex, SrcData, DestOffsetIn32BitValues);
        }
        delegate void SetGraphicsRoot32BitConstantFunc(IntPtr self, uint RootParameterIndex, uint SrcData, uint DestOffsetIn32BitValues);
        SetGraphicsRoot32BitConstantFunc m_SetGraphicsRoot32BitConstantFunc;

        public virtual void SetComputeRoot32BitConstants(
            uint RootParameterIndex,
            uint Num32BitValuesToSet,
            IntPtr pSrcData,
            uint DestOffsetIn32BitValues
        ){
            var fp = GetFunctionPointer(35);
            if(m_SetComputeRoot32BitConstantsFunc==null) m_SetComputeRoot32BitConstantsFunc = (SetComputeRoot32BitConstantsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetComputeRoot32BitConstantsFunc));
            
            m_SetComputeRoot32BitConstantsFunc(m_ptr, RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
        }
        delegate void SetComputeRoot32BitConstantsFunc(IntPtr self, uint RootParameterIndex, uint Num32BitValuesToSet, IntPtr pSrcData, uint DestOffsetIn32BitValues);
        SetComputeRoot32BitConstantsFunc m_SetComputeRoot32BitConstantsFunc;

        public virtual void SetGraphicsRoot32BitConstants(
            uint RootParameterIndex,
            uint Num32BitValuesToSet,
            IntPtr pSrcData,
            uint DestOffsetIn32BitValues
        ){
            var fp = GetFunctionPointer(36);
            if(m_SetGraphicsRoot32BitConstantsFunc==null) m_SetGraphicsRoot32BitConstantsFunc = (SetGraphicsRoot32BitConstantsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetGraphicsRoot32BitConstantsFunc));
            
            m_SetGraphicsRoot32BitConstantsFunc(m_ptr, RootParameterIndex, Num32BitValuesToSet, pSrcData, DestOffsetIn32BitValues);
        }
        delegate void SetGraphicsRoot32BitConstantsFunc(IntPtr self, uint RootParameterIndex, uint Num32BitValuesToSet, IntPtr pSrcData, uint DestOffsetIn32BitValues);
        SetGraphicsRoot32BitConstantsFunc m_SetGraphicsRoot32BitConstantsFunc;

        public virtual void SetComputeRootConstantBufferView(
            uint RootParameterIndex,
            ulong BufferLocation
        ){
            var fp = GetFunctionPointer(37);
            if(m_SetComputeRootConstantBufferViewFunc==null) m_SetComputeRootConstantBufferViewFunc = (SetComputeRootConstantBufferViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetComputeRootConstantBufferViewFunc));
            
            m_SetComputeRootConstantBufferViewFunc(m_ptr, RootParameterIndex, BufferLocation);
        }
        delegate void SetComputeRootConstantBufferViewFunc(IntPtr self, uint RootParameterIndex, ulong BufferLocation);
        SetComputeRootConstantBufferViewFunc m_SetComputeRootConstantBufferViewFunc;

        public virtual void SetGraphicsRootConstantBufferView(
            uint RootParameterIndex,
            ulong BufferLocation
        ){
            var fp = GetFunctionPointer(38);
            if(m_SetGraphicsRootConstantBufferViewFunc==null) m_SetGraphicsRootConstantBufferViewFunc = (SetGraphicsRootConstantBufferViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetGraphicsRootConstantBufferViewFunc));
            
            m_SetGraphicsRootConstantBufferViewFunc(m_ptr, RootParameterIndex, BufferLocation);
        }
        delegate void SetGraphicsRootConstantBufferViewFunc(IntPtr self, uint RootParameterIndex, ulong BufferLocation);
        SetGraphicsRootConstantBufferViewFunc m_SetGraphicsRootConstantBufferViewFunc;

        public virtual void SetComputeRootShaderResourceView(
            uint RootParameterIndex,
            ulong BufferLocation
        ){
            var fp = GetFunctionPointer(39);
            if(m_SetComputeRootShaderResourceViewFunc==null) m_SetComputeRootShaderResourceViewFunc = (SetComputeRootShaderResourceViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetComputeRootShaderResourceViewFunc));
            
            m_SetComputeRootShaderResourceViewFunc(m_ptr, RootParameterIndex, BufferLocation);
        }
        delegate void SetComputeRootShaderResourceViewFunc(IntPtr self, uint RootParameterIndex, ulong BufferLocation);
        SetComputeRootShaderResourceViewFunc m_SetComputeRootShaderResourceViewFunc;

        public virtual void SetGraphicsRootShaderResourceView(
            uint RootParameterIndex,
            ulong BufferLocation
        ){
            var fp = GetFunctionPointer(40);
            if(m_SetGraphicsRootShaderResourceViewFunc==null) m_SetGraphicsRootShaderResourceViewFunc = (SetGraphicsRootShaderResourceViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetGraphicsRootShaderResourceViewFunc));
            
            m_SetGraphicsRootShaderResourceViewFunc(m_ptr, RootParameterIndex, BufferLocation);
        }
        delegate void SetGraphicsRootShaderResourceViewFunc(IntPtr self, uint RootParameterIndex, ulong BufferLocation);
        SetGraphicsRootShaderResourceViewFunc m_SetGraphicsRootShaderResourceViewFunc;

        public virtual void SetComputeRootUnorderedAccessView(
            uint RootParameterIndex,
            ulong BufferLocation
        ){
            var fp = GetFunctionPointer(41);
            if(m_SetComputeRootUnorderedAccessViewFunc==null) m_SetComputeRootUnorderedAccessViewFunc = (SetComputeRootUnorderedAccessViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetComputeRootUnorderedAccessViewFunc));
            
            m_SetComputeRootUnorderedAccessViewFunc(m_ptr, RootParameterIndex, BufferLocation);
        }
        delegate void SetComputeRootUnorderedAccessViewFunc(IntPtr self, uint RootParameterIndex, ulong BufferLocation);
        SetComputeRootUnorderedAccessViewFunc m_SetComputeRootUnorderedAccessViewFunc;

        public virtual void SetGraphicsRootUnorderedAccessView(
            uint RootParameterIndex,
            ulong BufferLocation
        ){
            var fp = GetFunctionPointer(42);
            if(m_SetGraphicsRootUnorderedAccessViewFunc==null) m_SetGraphicsRootUnorderedAccessViewFunc = (SetGraphicsRootUnorderedAccessViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetGraphicsRootUnorderedAccessViewFunc));
            
            m_SetGraphicsRootUnorderedAccessViewFunc(m_ptr, RootParameterIndex, BufferLocation);
        }
        delegate void SetGraphicsRootUnorderedAccessViewFunc(IntPtr self, uint RootParameterIndex, ulong BufferLocation);
        SetGraphicsRootUnorderedAccessViewFunc m_SetGraphicsRootUnorderedAccessViewFunc;

        public virtual void IASetIndexBuffer(
            ref D3D12_INDEX_BUFFER_VIEW pView
        ){
            var fp = GetFunctionPointer(43);
            if(m_IASetIndexBufferFunc==null) m_IASetIndexBufferFunc = (IASetIndexBufferFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IASetIndexBufferFunc));
            
            m_IASetIndexBufferFunc(m_ptr, ref pView);
        }
        delegate void IASetIndexBufferFunc(IntPtr self, ref D3D12_INDEX_BUFFER_VIEW pView);
        IASetIndexBufferFunc m_IASetIndexBufferFunc;

        public virtual void IASetVertexBuffers(
            uint StartSlot,
            uint NumViews,
            ref D3D12_VERTEX_BUFFER_VIEW pViews
        ){
            var fp = GetFunctionPointer(44);
            if(m_IASetVertexBuffersFunc==null) m_IASetVertexBuffersFunc = (IASetVertexBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IASetVertexBuffersFunc));
            
            m_IASetVertexBuffersFunc(m_ptr, StartSlot, NumViews, ref pViews);
        }
        delegate void IASetVertexBuffersFunc(IntPtr self, uint StartSlot, uint NumViews, ref D3D12_VERTEX_BUFFER_VIEW pViews);
        IASetVertexBuffersFunc m_IASetVertexBuffersFunc;

        public virtual void SOSetTargets(
            uint StartSlot,
            uint NumViews,
            ref D3D12_STREAM_OUTPUT_BUFFER_VIEW pViews
        ){
            var fp = GetFunctionPointer(45);
            if(m_SOSetTargetsFunc==null) m_SOSetTargetsFunc = (SOSetTargetsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SOSetTargetsFunc));
            
            m_SOSetTargetsFunc(m_ptr, StartSlot, NumViews, ref pViews);
        }
        delegate void SOSetTargetsFunc(IntPtr self, uint StartSlot, uint NumViews, ref D3D12_STREAM_OUTPUT_BUFFER_VIEW pViews);
        SOSetTargetsFunc m_SOSetTargetsFunc;

        public virtual void OMSetRenderTargets(
            uint NumRenderTargetDescriptors,
            ref D3D12_CPU_DESCRIPTOR_HANDLE pRenderTargetDescriptors,
            int RTsSingleHandleToDescriptorRange,
            ref D3D12_CPU_DESCRIPTOR_HANDLE pDepthStencilDescriptor
        ){
            var fp = GetFunctionPointer(46);
            if(m_OMSetRenderTargetsFunc==null) m_OMSetRenderTargetsFunc = (OMSetRenderTargetsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMSetRenderTargetsFunc));
            
            m_OMSetRenderTargetsFunc(m_ptr, NumRenderTargetDescriptors, ref pRenderTargetDescriptors, RTsSingleHandleToDescriptorRange, ref pDepthStencilDescriptor);
        }
        delegate void OMSetRenderTargetsFunc(IntPtr self, uint NumRenderTargetDescriptors, ref D3D12_CPU_DESCRIPTOR_HANDLE pRenderTargetDescriptors, int RTsSingleHandleToDescriptorRange, ref D3D12_CPU_DESCRIPTOR_HANDLE pDepthStencilDescriptor);
        OMSetRenderTargetsFunc m_OMSetRenderTargetsFunc;

        public virtual void ClearDepthStencilView(
            D3D12_CPU_DESCRIPTOR_HANDLE DepthStencilView,
            D3D12_CLEAR_FLAGS ClearFlags,
            float Depth,
            byte Stencil,
            uint NumRects,
            ref tagRECT pRects
        ){
            var fp = GetFunctionPointer(47);
            if(m_ClearDepthStencilViewFunc==null) m_ClearDepthStencilViewFunc = (ClearDepthStencilViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ClearDepthStencilViewFunc));
            
            m_ClearDepthStencilViewFunc(m_ptr, DepthStencilView, ClearFlags, Depth, Stencil, NumRects, ref pRects);
        }
        delegate void ClearDepthStencilViewFunc(IntPtr self, D3D12_CPU_DESCRIPTOR_HANDLE DepthStencilView, D3D12_CLEAR_FLAGS ClearFlags, float Depth, byte Stencil, uint NumRects, ref tagRECT pRects);
        ClearDepthStencilViewFunc m_ClearDepthStencilViewFunc;

        public virtual void ClearRenderTargetView(
            D3D12_CPU_DESCRIPTOR_HANDLE RenderTargetView,
            ref float ColorRGBA,
            uint NumRects,
            ref tagRECT pRects
        ){
            var fp = GetFunctionPointer(48);
            if(m_ClearRenderTargetViewFunc==null) m_ClearRenderTargetViewFunc = (ClearRenderTargetViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ClearRenderTargetViewFunc));
            
            m_ClearRenderTargetViewFunc(m_ptr, RenderTargetView, ref ColorRGBA, NumRects, ref pRects);
        }
        delegate void ClearRenderTargetViewFunc(IntPtr self, D3D12_CPU_DESCRIPTOR_HANDLE RenderTargetView, ref float ColorRGBA, uint NumRects, ref tagRECT pRects);
        ClearRenderTargetViewFunc m_ClearRenderTargetViewFunc;

        public virtual void ClearUnorderedAccessViewUint(
            D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap,
            D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle,
            ID3D12Resource pResource,
            ref uint Values,
            uint NumRects,
            ref tagRECT pRects
        ){
            var fp = GetFunctionPointer(49);
            if(m_ClearUnorderedAccessViewUintFunc==null) m_ClearUnorderedAccessViewUintFunc = (ClearUnorderedAccessViewUintFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ClearUnorderedAccessViewUintFunc));
            
            m_ClearUnorderedAccessViewUintFunc(m_ptr, ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource!=null ? pResource.Ptr : IntPtr.Zero, ref Values, NumRects, ref pRects);
        }
        delegate void ClearUnorderedAccessViewUintFunc(IntPtr self, D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, IntPtr pResource, ref uint Values, uint NumRects, ref tagRECT pRects);
        ClearUnorderedAccessViewUintFunc m_ClearUnorderedAccessViewUintFunc;

        public virtual void ClearUnorderedAccessViewFloat(
            D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap,
            D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle,
            ID3D12Resource pResource,
            ref float Values,
            uint NumRects,
            ref tagRECT pRects
        ){
            var fp = GetFunctionPointer(50);
            if(m_ClearUnorderedAccessViewFloatFunc==null) m_ClearUnorderedAccessViewFloatFunc = (ClearUnorderedAccessViewFloatFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ClearUnorderedAccessViewFloatFunc));
            
            m_ClearUnorderedAccessViewFloatFunc(m_ptr, ViewGPUHandleInCurrentHeap, ViewCPUHandle, pResource!=null ? pResource.Ptr : IntPtr.Zero, ref Values, NumRects, ref pRects);
        }
        delegate void ClearUnorderedAccessViewFloatFunc(IntPtr self, D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, IntPtr pResource, ref float Values, uint NumRects, ref tagRECT pRects);
        ClearUnorderedAccessViewFloatFunc m_ClearUnorderedAccessViewFloatFunc;

        public virtual void DiscardResource(
            ID3D12Resource pResource,
            ref D3D12_DISCARD_REGION pRegion
        ){
            var fp = GetFunctionPointer(51);
            if(m_DiscardResourceFunc==null) m_DiscardResourceFunc = (DiscardResourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DiscardResourceFunc));
            
            m_DiscardResourceFunc(m_ptr, pResource!=null ? pResource.Ptr : IntPtr.Zero, ref pRegion);
        }
        delegate void DiscardResourceFunc(IntPtr self, IntPtr pResource, ref D3D12_DISCARD_REGION pRegion);
        DiscardResourceFunc m_DiscardResourceFunc;

        public virtual void BeginQuery(
            ID3D12QueryHeap pQueryHeap,
            D3D12_QUERY_TYPE Type,
            uint Index
        ){
            var fp = GetFunctionPointer(52);
            if(m_BeginQueryFunc==null) m_BeginQueryFunc = (BeginQueryFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(BeginQueryFunc));
            
            m_BeginQueryFunc(m_ptr, pQueryHeap!=null ? pQueryHeap.Ptr : IntPtr.Zero, Type, Index);
        }
        delegate void BeginQueryFunc(IntPtr self, IntPtr pQueryHeap, D3D12_QUERY_TYPE Type, uint Index);
        BeginQueryFunc m_BeginQueryFunc;

        public virtual void EndQuery(
            ID3D12QueryHeap pQueryHeap,
            D3D12_QUERY_TYPE Type,
            uint Index
        ){
            var fp = GetFunctionPointer(53);
            if(m_EndQueryFunc==null) m_EndQueryFunc = (EndQueryFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(EndQueryFunc));
            
            m_EndQueryFunc(m_ptr, pQueryHeap!=null ? pQueryHeap.Ptr : IntPtr.Zero, Type, Index);
        }
        delegate void EndQueryFunc(IntPtr self, IntPtr pQueryHeap, D3D12_QUERY_TYPE Type, uint Index);
        EndQueryFunc m_EndQueryFunc;

        public virtual void ResolveQueryData(
            ID3D12QueryHeap pQueryHeap,
            D3D12_QUERY_TYPE Type,
            uint StartIndex,
            uint NumQueries,
            ID3D12Resource pDestinationBuffer,
            ulong AlignedDestinationBufferOffset
        ){
            var fp = GetFunctionPointer(54);
            if(m_ResolveQueryDataFunc==null) m_ResolveQueryDataFunc = (ResolveQueryDataFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ResolveQueryDataFunc));
            
            m_ResolveQueryDataFunc(m_ptr, pQueryHeap!=null ? pQueryHeap.Ptr : IntPtr.Zero, Type, StartIndex, NumQueries, pDestinationBuffer!=null ? pDestinationBuffer.Ptr : IntPtr.Zero, AlignedDestinationBufferOffset);
        }
        delegate void ResolveQueryDataFunc(IntPtr self, IntPtr pQueryHeap, D3D12_QUERY_TYPE Type, uint StartIndex, uint NumQueries, IntPtr pDestinationBuffer, ulong AlignedDestinationBufferOffset);
        ResolveQueryDataFunc m_ResolveQueryDataFunc;

        public virtual void SetPredication(
            ID3D12Resource pBuffer,
            ulong AlignedBufferOffset,
            D3D12_PREDICATION_OP Operation
        ){
            var fp = GetFunctionPointer(55);
            if(m_SetPredicationFunc==null) m_SetPredicationFunc = (SetPredicationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetPredicationFunc));
            
            m_SetPredicationFunc(m_ptr, pBuffer!=null ? pBuffer.Ptr : IntPtr.Zero, AlignedBufferOffset, Operation);
        }
        delegate void SetPredicationFunc(IntPtr self, IntPtr pBuffer, ulong AlignedBufferOffset, D3D12_PREDICATION_OP Operation);
        SetPredicationFunc m_SetPredicationFunc;

        public virtual void SetMarker(
            uint Metadata,
            IntPtr pData,
            uint Size
        ){
            var fp = GetFunctionPointer(56);
            if(m_SetMarkerFunc==null) m_SetMarkerFunc = (SetMarkerFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetMarkerFunc));
            
            m_SetMarkerFunc(m_ptr, Metadata, pData, Size);
        }
        delegate void SetMarkerFunc(IntPtr self, uint Metadata, IntPtr pData, uint Size);
        SetMarkerFunc m_SetMarkerFunc;

        public virtual void BeginEvent(
            uint Metadata,
            IntPtr pData,
            uint Size
        ){
            var fp = GetFunctionPointer(57);
            if(m_BeginEventFunc==null) m_BeginEventFunc = (BeginEventFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(BeginEventFunc));
            
            m_BeginEventFunc(m_ptr, Metadata, pData, Size);
        }
        delegate void BeginEventFunc(IntPtr self, uint Metadata, IntPtr pData, uint Size);
        BeginEventFunc m_BeginEventFunc;

        public virtual void EndEvent(
        ){
            var fp = GetFunctionPointer(58);
            if(m_EndEventFunc==null) m_EndEventFunc = (EndEventFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(EndEventFunc));
            
            m_EndEventFunc(m_ptr);
        }
        delegate void EndEventFunc(IntPtr self);
        EndEventFunc m_EndEventFunc;

        public virtual void ExecuteIndirect(
            ID3D12CommandSignature pCommandSignature,
            uint MaxCommandCount,
            ID3D12Resource pArgumentBuffer,
            ulong ArgumentBufferOffset,
            ID3D12Resource pCountBuffer,
            ulong CountBufferOffset
        ){
            var fp = GetFunctionPointer(59);
            if(m_ExecuteIndirectFunc==null) m_ExecuteIndirectFunc = (ExecuteIndirectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ExecuteIndirectFunc));
            
            m_ExecuteIndirectFunc(m_ptr, pCommandSignature!=null ? pCommandSignature.Ptr : IntPtr.Zero, MaxCommandCount, pArgumentBuffer!=null ? pArgumentBuffer.Ptr : IntPtr.Zero, ArgumentBufferOffset, pCountBuffer!=null ? pCountBuffer.Ptr : IntPtr.Zero, CountBufferOffset);
        }
        delegate void ExecuteIndirectFunc(IntPtr self, IntPtr pCommandSignature, uint MaxCommandCount, IntPtr pArgumentBuffer, ulong ArgumentBufferOffset, IntPtr pCountBuffer, ulong CountBufferOffset);
        ExecuteIndirectFunc m_ExecuteIndirectFunc;

    }
}
