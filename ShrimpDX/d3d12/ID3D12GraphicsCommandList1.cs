// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class ID3D12GraphicsCommandList1: ID3D12GraphicsCommandList
    {
        static Guid s_uuid = new Guid("553103fb-1fe7-4557-bb38-946d7d0e7ca7");
        public static new ref Guid IID =>ref s_uuid;
        public override ref Guid GetIID(){ return ref s_uuid; }
                
        public virtual void AtomicCopyBufferUINT(
            ID3D12Resource pDstBuffer,
            ulong DstOffset,
            ID3D12Resource pSrcBuffer,
            ulong SrcOffset,
            uint Dependencies,
            ref IntPtr ppDependentResources,
            ref D3D12_SUBRESOURCE_RANGE_UINT64 pDependentSubresourceRanges
        ){
            var fp = GetFunctionPointer(60);
            if(m_AtomicCopyBufferUINTFunc==null) m_AtomicCopyBufferUINTFunc = (AtomicCopyBufferUINTFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AtomicCopyBufferUINTFunc));
            
            m_AtomicCopyBufferUINTFunc(m_ptr, pDstBuffer!=null ? pDstBuffer.Ptr : IntPtr.Zero, DstOffset, pSrcBuffer!=null ? pSrcBuffer.Ptr : IntPtr.Zero, SrcOffset, Dependencies, ref ppDependentResources, ref pDependentSubresourceRanges);
        }
        delegate void AtomicCopyBufferUINTFunc(IntPtr self, IntPtr pDstBuffer, ulong DstOffset, IntPtr pSrcBuffer, ulong SrcOffset, uint Dependencies, ref IntPtr ppDependentResources, ref D3D12_SUBRESOURCE_RANGE_UINT64 pDependentSubresourceRanges);
        AtomicCopyBufferUINTFunc m_AtomicCopyBufferUINTFunc;

        public virtual void AtomicCopyBufferUINT64(
            ID3D12Resource pDstBuffer,
            ulong DstOffset,
            ID3D12Resource pSrcBuffer,
            ulong SrcOffset,
            uint Dependencies,
            ref IntPtr ppDependentResources,
            ref D3D12_SUBRESOURCE_RANGE_UINT64 pDependentSubresourceRanges
        ){
            var fp = GetFunctionPointer(61);
            if(m_AtomicCopyBufferUINT64Func==null) m_AtomicCopyBufferUINT64Func = (AtomicCopyBufferUINT64Func)Marshal.GetDelegateForFunctionPointer(fp, typeof(AtomicCopyBufferUINT64Func));
            
            m_AtomicCopyBufferUINT64Func(m_ptr, pDstBuffer!=null ? pDstBuffer.Ptr : IntPtr.Zero, DstOffset, pSrcBuffer!=null ? pSrcBuffer.Ptr : IntPtr.Zero, SrcOffset, Dependencies, ref ppDependentResources, ref pDependentSubresourceRanges);
        }
        delegate void AtomicCopyBufferUINT64Func(IntPtr self, IntPtr pDstBuffer, ulong DstOffset, IntPtr pSrcBuffer, ulong SrcOffset, uint Dependencies, ref IntPtr ppDependentResources, ref D3D12_SUBRESOURCE_RANGE_UINT64 pDependentSubresourceRanges);
        AtomicCopyBufferUINT64Func m_AtomicCopyBufferUINT64Func;

        public virtual void OMSetDepthBounds(
            float Min,
            float Max
        ){
            var fp = GetFunctionPointer(62);
            if(m_OMSetDepthBoundsFunc==null) m_OMSetDepthBoundsFunc = (OMSetDepthBoundsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMSetDepthBoundsFunc));
            
            m_OMSetDepthBoundsFunc(m_ptr, Min, Max);
        }
        delegate void OMSetDepthBoundsFunc(IntPtr self, float Min, float Max);
        OMSetDepthBoundsFunc m_OMSetDepthBoundsFunc;

        public virtual void SetSamplePositions(
            uint NumSamplesPerPixel,
            uint NumPixels,
            out D3D12_SAMPLE_POSITION pSamplePositions
        ){
            var fp = GetFunctionPointer(63);
            if(m_SetSamplePositionsFunc==null) m_SetSamplePositionsFunc = (SetSamplePositionsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetSamplePositionsFunc));
            
            m_SetSamplePositionsFunc(m_ptr, NumSamplesPerPixel, NumPixels, out pSamplePositions);
        }
        delegate void SetSamplePositionsFunc(IntPtr self, uint NumSamplesPerPixel, uint NumPixels, out D3D12_SAMPLE_POSITION pSamplePositions);
        SetSamplePositionsFunc m_SetSamplePositionsFunc;

        public virtual void ResolveSubresourceRegion(
            ID3D12Resource pDstResource,
            uint DstSubresource,
            uint DstX,
            uint DstY,
            ID3D12Resource pSrcResource,
            uint SrcSubresource,
            out tagRECT pSrcRect,
            DXGI_FORMAT Format,
            D3D12_RESOLVE_MODE ResolveMode
        ){
            var fp = GetFunctionPointer(64);
            if(m_ResolveSubresourceRegionFunc==null) m_ResolveSubresourceRegionFunc = (ResolveSubresourceRegionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ResolveSubresourceRegionFunc));
            
            m_ResolveSubresourceRegionFunc(m_ptr, pDstResource!=null ? pDstResource.Ptr : IntPtr.Zero, DstSubresource, DstX, DstY, pSrcResource!=null ? pSrcResource.Ptr : IntPtr.Zero, SrcSubresource, out pSrcRect, Format, ResolveMode);
        }
        delegate void ResolveSubresourceRegionFunc(IntPtr self, IntPtr pDstResource, uint DstSubresource, uint DstX, uint DstY, IntPtr pSrcResource, uint SrcSubresource, out tagRECT pSrcRect, DXGI_FORMAT Format, D3D12_RESOLVE_MODE ResolveMode);
        ResolveSubresourceRegionFunc m_ResolveSubresourceRegionFunc;

        public virtual void SetViewInstanceMask(
            uint Mask
        ){
            var fp = GetFunctionPointer(65);
            if(m_SetViewInstanceMaskFunc==null) m_SetViewInstanceMaskFunc = (SetViewInstanceMaskFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetViewInstanceMaskFunc));
            
            m_SetViewInstanceMaskFunc(m_ptr, Mask);
        }
        delegate void SetViewInstanceMaskFunc(IntPtr self, uint Mask);
        SetViewInstanceMaskFunc m_SetViewInstanceMaskFunc;

    }
}
