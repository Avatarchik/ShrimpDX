// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class ID3D12SwapChainAssistant: IUnknown
    {
        static Guid s_uuid = new Guid("f1df64b6-57fd-49cd-8807-c0eb88b45c8f");
        public static new ref Guid IID =>ref s_uuid;
        public override ref Guid GetIID(){ return ref s_uuid; }
                
        public virtual _LUID GetLUID(
        ){
            var fp = GetFunctionPointer(3);
            if(m_GetLUIDFunc==null) m_GetLUIDFunc = (GetLUIDFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetLUIDFunc));
            
            return m_GetLUIDFunc(m_ptr);
        }
        delegate _LUID GetLUIDFunc(IntPtr self);
        GetLUIDFunc m_GetLUIDFunc;

        public virtual int GetSwapChainObject(
            ref Guid riid,
            out IntPtr ppv
        ){
            var fp = GetFunctionPointer(4);
            if(m_GetSwapChainObjectFunc==null) m_GetSwapChainObjectFunc = (GetSwapChainObjectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetSwapChainObjectFunc));
            
            return m_GetSwapChainObjectFunc(m_ptr, ref riid, out ppv);
        }
        delegate int GetSwapChainObjectFunc(IntPtr self, ref Guid riid, out IntPtr ppv);
        GetSwapChainObjectFunc m_GetSwapChainObjectFunc;

        public virtual int GetCurrentResourceAndCommandQueue(
            ref Guid riidResource,
            out IntPtr ppvResource,
            ref Guid riidQueue,
            out IntPtr ppvQueue
        ){
            var fp = GetFunctionPointer(5);
            if(m_GetCurrentResourceAndCommandQueueFunc==null) m_GetCurrentResourceAndCommandQueueFunc = (GetCurrentResourceAndCommandQueueFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetCurrentResourceAndCommandQueueFunc));
            
            return m_GetCurrentResourceAndCommandQueueFunc(m_ptr, ref riidResource, out ppvResource, ref riidQueue, out ppvQueue);
        }
        delegate int GetCurrentResourceAndCommandQueueFunc(IntPtr self, ref Guid riidResource, out IntPtr ppvResource, ref Guid riidQueue, out IntPtr ppvQueue);
        GetCurrentResourceAndCommandQueueFunc m_GetCurrentResourceAndCommandQueueFunc;

        public virtual int InsertImplicitSync(
        ){
            var fp = GetFunctionPointer(6);
            if(m_InsertImplicitSyncFunc==null) m_InsertImplicitSyncFunc = (InsertImplicitSyncFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(InsertImplicitSyncFunc));
            
            return m_InsertImplicitSyncFunc(m_ptr);
        }
        delegate int InsertImplicitSyncFunc(IntPtr self);
        InsertImplicitSyncFunc m_InsertImplicitSyncFunc;

    }
}
