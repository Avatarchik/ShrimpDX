// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class ID3D12PipelineLibrary: ID3D12DeviceChild
    {
        static Guid s_uuid = new Guid("c64226a8-9201-46af-b4cc-53fb9ff7414f");
        public static new ref Guid IID =>ref s_uuid;
        public override ref Guid GetIID(){ return ref s_uuid; }
                
        public virtual int StorePipeline(
            ref ushort pName,
            ID3D12PipelineState pPipeline
        ){
            var fp = GetFunctionPointer(8);
            if(m_StorePipelineFunc==null) m_StorePipelineFunc = (StorePipelineFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(StorePipelineFunc));
            
            return m_StorePipelineFunc(m_ptr, ref pName, pPipeline!=null ? pPipeline.Ptr : IntPtr.Zero);
        }
        delegate int StorePipelineFunc(IntPtr self, ref ushort pName, IntPtr pPipeline);
        StorePipelineFunc m_StorePipelineFunc;

        public virtual int LoadGraphicsPipeline(
            ref ushort pName,
            ref D3D12_GRAPHICS_PIPELINE_STATE_DESC pDesc,
            ref Guid riid,
            out IntPtr ppPipelineState
        ){
            var fp = GetFunctionPointer(9);
            if(m_LoadGraphicsPipelineFunc==null) m_LoadGraphicsPipelineFunc = (LoadGraphicsPipelineFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(LoadGraphicsPipelineFunc));
            
            return m_LoadGraphicsPipelineFunc(m_ptr, ref pName, ref pDesc, ref riid, out ppPipelineState);
        }
        delegate int LoadGraphicsPipelineFunc(IntPtr self, ref ushort pName, ref D3D12_GRAPHICS_PIPELINE_STATE_DESC pDesc, ref Guid riid, out IntPtr ppPipelineState);
        LoadGraphicsPipelineFunc m_LoadGraphicsPipelineFunc;

        public virtual int LoadComputePipeline(
            ref ushort pName,
            ref D3D12_COMPUTE_PIPELINE_STATE_DESC pDesc,
            ref Guid riid,
            out IntPtr ppPipelineState
        ){
            var fp = GetFunctionPointer(10);
            if(m_LoadComputePipelineFunc==null) m_LoadComputePipelineFunc = (LoadComputePipelineFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(LoadComputePipelineFunc));
            
            return m_LoadComputePipelineFunc(m_ptr, ref pName, ref pDesc, ref riid, out ppPipelineState);
        }
        delegate int LoadComputePipelineFunc(IntPtr self, ref ushort pName, ref D3D12_COMPUTE_PIPELINE_STATE_DESC pDesc, ref Guid riid, out IntPtr ppPipelineState);
        LoadComputePipelineFunc m_LoadComputePipelineFunc;

        public virtual ulong GetSerializedSize(
        ){
            var fp = GetFunctionPointer(11);
            if(m_GetSerializedSizeFunc==null) m_GetSerializedSizeFunc = (GetSerializedSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetSerializedSizeFunc));
            
            return m_GetSerializedSizeFunc(m_ptr);
        }
        delegate ulong GetSerializedSizeFunc(IntPtr self);
        GetSerializedSizeFunc m_GetSerializedSizeFunc;

        public virtual int Serialize(
            IntPtr pData,
            ulong DataSizeInBytes
        ){
            var fp = GetFunctionPointer(12);
            if(m_SerializeFunc==null) m_SerializeFunc = (SerializeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SerializeFunc));
            
            return m_SerializeFunc(m_ptr, pData, DataSizeInBytes);
        }
        delegate int SerializeFunc(IntPtr self, IntPtr pData, ulong DataSizeInBytes);
        SerializeFunc m_SerializeFunc;

    }
}
