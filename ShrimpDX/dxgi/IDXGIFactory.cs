// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class IDXGIFactory: IDXGIObject
    {
        static Guid s_uuid = new Guid("7b7166ec-21c7-44ae-b21a-c9ae321ae369");
        public static new ref Guid IID =>ref s_uuid;
        public override ref Guid GetIID(){ return ref s_uuid; }
                
        public virtual int EnumAdapters(
            uint Adapter,
            out IDXGIAdapter ppAdapter
        ){
            var fp = GetFunctionPointer(7);
            if(m_EnumAdaptersFunc==null) m_EnumAdaptersFunc = (EnumAdaptersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(EnumAdaptersFunc));
            ppAdapter = new IDXGIAdapter();
            return m_EnumAdaptersFunc(m_ptr, Adapter, out ppAdapter.PtrForNew);
        }
        delegate int EnumAdaptersFunc(IntPtr self, uint Adapter, out IntPtr ppAdapter);
        EnumAdaptersFunc m_EnumAdaptersFunc;

        public virtual int MakeWindowAssociation(
            IntPtr WindowHandle,
            uint Flags
        ){
            var fp = GetFunctionPointer(8);
            if(m_MakeWindowAssociationFunc==null) m_MakeWindowAssociationFunc = (MakeWindowAssociationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(MakeWindowAssociationFunc));
            
            return m_MakeWindowAssociationFunc(m_ptr, WindowHandle, Flags);
        }
        delegate int MakeWindowAssociationFunc(IntPtr self, IntPtr WindowHandle, uint Flags);
        MakeWindowAssociationFunc m_MakeWindowAssociationFunc;

        public virtual int GetWindowAssociation(
            out IntPtr pWindowHandle
        ){
            var fp = GetFunctionPointer(9);
            if(m_GetWindowAssociationFunc==null) m_GetWindowAssociationFunc = (GetWindowAssociationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetWindowAssociationFunc));
            
            return m_GetWindowAssociationFunc(m_ptr, out pWindowHandle);
        }
        delegate int GetWindowAssociationFunc(IntPtr self, out IntPtr pWindowHandle);
        GetWindowAssociationFunc m_GetWindowAssociationFunc;

        public virtual int CreateSwapChain(
            IUnknown pDevice,
            out DXGI_SWAP_CHAIN_DESC pDesc,
            out IDXGISwapChain ppSwapChain
        ){
            var fp = GetFunctionPointer(10);
            if(m_CreateSwapChainFunc==null) m_CreateSwapChainFunc = (CreateSwapChainFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateSwapChainFunc));
            ppSwapChain = new IDXGISwapChain();
            return m_CreateSwapChainFunc(m_ptr, pDevice!=null ? pDevice.Ptr : IntPtr.Zero, out pDesc, out ppSwapChain.PtrForNew);
        }
        delegate int CreateSwapChainFunc(IntPtr self, IntPtr pDevice, out DXGI_SWAP_CHAIN_DESC pDesc, out IntPtr ppSwapChain);
        CreateSwapChainFunc m_CreateSwapChainFunc;

        public virtual int CreateSoftwareAdapter(
            IntPtr Module,
            out IDXGIAdapter ppAdapter
        ){
            var fp = GetFunctionPointer(11);
            if(m_CreateSoftwareAdapterFunc==null) m_CreateSoftwareAdapterFunc = (CreateSoftwareAdapterFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateSoftwareAdapterFunc));
            ppAdapter = new IDXGIAdapter();
            return m_CreateSoftwareAdapterFunc(m_ptr, Module, out ppAdapter.PtrForNew);
        }
        delegate int CreateSoftwareAdapterFunc(IntPtr self, IntPtr Module, out IntPtr ppAdapter);
        CreateSoftwareAdapterFunc m_CreateSoftwareAdapterFunc;

    }
}
