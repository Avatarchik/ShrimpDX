// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class ID2D1DeviceContext: ID2D1RenderTarget
    {
        static Guid s_uuid = new Guid("e8f7fe7a-191c-466d-ad95-975678bda998");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int CreateBitmap(
            D2D_SIZE_U size,
            IntPtr sourceData,
            uint pitch,
            ref D2D1_BITMAP_PROPERTIES1 bitmapProperties,
            out ID2D1Bitmap1 bitmap
        ){
            var fp = GetFunctionPointer(57);
            if(m_CreateBitmapFunc==null) m_CreateBitmapFunc = (CreateBitmapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateBitmapFunc));
            bitmap = new ID2D1Bitmap1();
            return m_CreateBitmapFunc(m_ptr, size, sourceData, pitch, ref bitmapProperties, out bitmap.PtrForNew);
        }
        delegate int CreateBitmapFunc(IntPtr self, D2D_SIZE_U size, IntPtr sourceData, uint pitch, ref D2D1_BITMAP_PROPERTIES1 bitmapProperties, out IntPtr bitmap);
        CreateBitmapFunc m_CreateBitmapFunc;

        public virtual int CreateBitmapFromWicBitmap(
            IWICBitmapSource wicBitmapSource,
            ref D2D1_BITMAP_PROPERTIES1 bitmapProperties,
            out ID2D1Bitmap1 bitmap
        ){
            var fp = GetFunctionPointer(58);
            if(m_CreateBitmapFromWicBitmapFunc==null) m_CreateBitmapFromWicBitmapFunc = (CreateBitmapFromWicBitmapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateBitmapFromWicBitmapFunc));
            bitmap = new ID2D1Bitmap1();
            return m_CreateBitmapFromWicBitmapFunc(m_ptr, wicBitmapSource!=null ? wicBitmapSource.Ptr : IntPtr.Zero, ref bitmapProperties, out bitmap.PtrForNew);
        }
        delegate int CreateBitmapFromWicBitmapFunc(IntPtr self, IntPtr wicBitmapSource, ref D2D1_BITMAP_PROPERTIES1 bitmapProperties, out IntPtr bitmap);
        CreateBitmapFromWicBitmapFunc m_CreateBitmapFromWicBitmapFunc;

        public virtual int CreateColorContext(
            D2D1_COLOR_SPACE space,
            ref byte profile,
            uint profileSize,
            out ID2D1ColorContext colorContext
        ){
            var fp = GetFunctionPointer(59);
            if(m_CreateColorContextFunc==null) m_CreateColorContextFunc = (CreateColorContextFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateColorContextFunc));
            colorContext = new ID2D1ColorContext();
            return m_CreateColorContextFunc(m_ptr, space, ref profile, profileSize, out colorContext.PtrForNew);
        }
        delegate int CreateColorContextFunc(IntPtr self, D2D1_COLOR_SPACE space, ref byte profile, uint profileSize, out IntPtr colorContext);
        CreateColorContextFunc m_CreateColorContextFunc;

        public virtual int CreateColorContextFromFilename(
            ref ushort filename,
            out ID2D1ColorContext colorContext
        ){
            var fp = GetFunctionPointer(60);
            if(m_CreateColorContextFromFilenameFunc==null) m_CreateColorContextFromFilenameFunc = (CreateColorContextFromFilenameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateColorContextFromFilenameFunc));
            colorContext = new ID2D1ColorContext();
            return m_CreateColorContextFromFilenameFunc(m_ptr, ref filename, out colorContext.PtrForNew);
        }
        delegate int CreateColorContextFromFilenameFunc(IntPtr self, ref ushort filename, out IntPtr colorContext);
        CreateColorContextFromFilenameFunc m_CreateColorContextFromFilenameFunc;

        public virtual int CreateColorContextFromWicColorContext(
            IWICColorContext wicColorContext,
            out ID2D1ColorContext colorContext
        ){
            var fp = GetFunctionPointer(61);
            if(m_CreateColorContextFromWicColorContextFunc==null) m_CreateColorContextFromWicColorContextFunc = (CreateColorContextFromWicColorContextFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateColorContextFromWicColorContextFunc));
            colorContext = new ID2D1ColorContext();
            return m_CreateColorContextFromWicColorContextFunc(m_ptr, wicColorContext!=null ? wicColorContext.Ptr : IntPtr.Zero, out colorContext.PtrForNew);
        }
        delegate int CreateColorContextFromWicColorContextFunc(IntPtr self, IntPtr wicColorContext, out IntPtr colorContext);
        CreateColorContextFromWicColorContextFunc m_CreateColorContextFromWicColorContextFunc;

        public virtual int CreateBitmapFromDxgiSurface(
            IDXGISurface surface,
            ref D2D1_BITMAP_PROPERTIES1 bitmapProperties,
            out ID2D1Bitmap1 bitmap
        ){
            var fp = GetFunctionPointer(62);
            if(m_CreateBitmapFromDxgiSurfaceFunc==null) m_CreateBitmapFromDxgiSurfaceFunc = (CreateBitmapFromDxgiSurfaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateBitmapFromDxgiSurfaceFunc));
            bitmap = new ID2D1Bitmap1();
            return m_CreateBitmapFromDxgiSurfaceFunc(m_ptr, surface!=null ? surface.Ptr : IntPtr.Zero, ref bitmapProperties, out bitmap.PtrForNew);
        }
        delegate int CreateBitmapFromDxgiSurfaceFunc(IntPtr self, IntPtr surface, ref D2D1_BITMAP_PROPERTIES1 bitmapProperties, out IntPtr bitmap);
        CreateBitmapFromDxgiSurfaceFunc m_CreateBitmapFromDxgiSurfaceFunc;

        public virtual int CreateEffect(
            ref Guid effectId,
            out ID2D1Effect effect
        ){
            var fp = GetFunctionPointer(63);
            if(m_CreateEffectFunc==null) m_CreateEffectFunc = (CreateEffectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateEffectFunc));
            effect = new ID2D1Effect();
            return m_CreateEffectFunc(m_ptr, ref effectId, out effect.PtrForNew);
        }
        delegate int CreateEffectFunc(IntPtr self, ref Guid effectId, out IntPtr effect);
        CreateEffectFunc m_CreateEffectFunc;

        public virtual int CreateGradientStopCollection(
            ref D2D1_GRADIENT_STOP straightAlphaGradientStops,
            uint straightAlphaGradientStopsCount,
            D2D1_COLOR_SPACE preInterpolationSpace,
            D2D1_COLOR_SPACE postInterpolationSpace,
            D2D1_BUFFER_PRECISION bufferPrecision,
            D2D1_EXTEND_MODE extendMode,
            D2D1_COLOR_INTERPOLATION_MODE colorInterpolationMode,
            out ID2D1GradientStopCollection1 gradientStopCollection1
        ){
            var fp = GetFunctionPointer(64);
            if(m_CreateGradientStopCollectionFunc==null) m_CreateGradientStopCollectionFunc = (CreateGradientStopCollectionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateGradientStopCollectionFunc));
            gradientStopCollection1 = new ID2D1GradientStopCollection1();
            return m_CreateGradientStopCollectionFunc(m_ptr, ref straightAlphaGradientStops, straightAlphaGradientStopsCount, preInterpolationSpace, postInterpolationSpace, bufferPrecision, extendMode, colorInterpolationMode, out gradientStopCollection1.PtrForNew);
        }
        delegate int CreateGradientStopCollectionFunc(IntPtr self, ref D2D1_GRADIENT_STOP straightAlphaGradientStops, uint straightAlphaGradientStopsCount, D2D1_COLOR_SPACE preInterpolationSpace, D2D1_COLOR_SPACE postInterpolationSpace, D2D1_BUFFER_PRECISION bufferPrecision, D2D1_EXTEND_MODE extendMode, D2D1_COLOR_INTERPOLATION_MODE colorInterpolationMode, out IntPtr gradientStopCollection1);
        CreateGradientStopCollectionFunc m_CreateGradientStopCollectionFunc;

        public virtual int CreateImageBrush(
            ID2D1Image image,
            ref D2D1_IMAGE_BRUSH_PROPERTIES imageBrushProperties,
            ref D2D1_BRUSH_PROPERTIES brushProperties,
            out ID2D1ImageBrush imageBrush
        ){
            var fp = GetFunctionPointer(65);
            if(m_CreateImageBrushFunc==null) m_CreateImageBrushFunc = (CreateImageBrushFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateImageBrushFunc));
            imageBrush = new ID2D1ImageBrush();
            return m_CreateImageBrushFunc(m_ptr, image!=null ? image.Ptr : IntPtr.Zero, ref imageBrushProperties, ref brushProperties, out imageBrush.PtrForNew);
        }
        delegate int CreateImageBrushFunc(IntPtr self, IntPtr image, ref D2D1_IMAGE_BRUSH_PROPERTIES imageBrushProperties, ref D2D1_BRUSH_PROPERTIES brushProperties, out IntPtr imageBrush);
        CreateImageBrushFunc m_CreateImageBrushFunc;

        public virtual int CreateBitmapBrush(
            ID2D1Bitmap bitmap,
            ref D2D1_BITMAP_BRUSH_PROPERTIES1 bitmapBrushProperties,
            ref D2D1_BRUSH_PROPERTIES brushProperties,
            out ID2D1BitmapBrush1 bitmapBrush
        ){
            var fp = GetFunctionPointer(66);
            if(m_CreateBitmapBrushFunc==null) m_CreateBitmapBrushFunc = (CreateBitmapBrushFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateBitmapBrushFunc));
            bitmapBrush = new ID2D1BitmapBrush1();
            return m_CreateBitmapBrushFunc(m_ptr, bitmap!=null ? bitmap.Ptr : IntPtr.Zero, ref bitmapBrushProperties, ref brushProperties, out bitmapBrush.PtrForNew);
        }
        delegate int CreateBitmapBrushFunc(IntPtr self, IntPtr bitmap, ref D2D1_BITMAP_BRUSH_PROPERTIES1 bitmapBrushProperties, ref D2D1_BRUSH_PROPERTIES brushProperties, out IntPtr bitmapBrush);
        CreateBitmapBrushFunc m_CreateBitmapBrushFunc;

        public virtual int CreateCommandList(
            out ID2D1CommandList commandList
        ){
            var fp = GetFunctionPointer(67);
            if(m_CreateCommandListFunc==null) m_CreateCommandListFunc = (CreateCommandListFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateCommandListFunc));
            commandList = new ID2D1CommandList();
            return m_CreateCommandListFunc(m_ptr, out commandList.PtrForNew);
        }
        delegate int CreateCommandListFunc(IntPtr self, out IntPtr commandList);
        CreateCommandListFunc m_CreateCommandListFunc;

        public virtual int IsDxgiFormatSupported(
            DXGI_FORMAT format
        ){
            var fp = GetFunctionPointer(68);
            if(m_IsDxgiFormatSupportedFunc==null) m_IsDxgiFormatSupportedFunc = (IsDxgiFormatSupportedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsDxgiFormatSupportedFunc));
            
            return m_IsDxgiFormatSupportedFunc(m_ptr, format);
        }
        delegate int IsDxgiFormatSupportedFunc(IntPtr self, DXGI_FORMAT format);
        IsDxgiFormatSupportedFunc m_IsDxgiFormatSupportedFunc;

        public virtual int IsBufferPrecisionSupported(
            D2D1_BUFFER_PRECISION bufferPrecision
        ){
            var fp = GetFunctionPointer(69);
            if(m_IsBufferPrecisionSupportedFunc==null) m_IsBufferPrecisionSupportedFunc = (IsBufferPrecisionSupportedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsBufferPrecisionSupportedFunc));
            
            return m_IsBufferPrecisionSupportedFunc(m_ptr, bufferPrecision);
        }
        delegate int IsBufferPrecisionSupportedFunc(IntPtr self, D2D1_BUFFER_PRECISION bufferPrecision);
        IsBufferPrecisionSupportedFunc m_IsBufferPrecisionSupportedFunc;

        public virtual int GetImageLocalBounds(
            ID2D1Image image,
            out System.Numerics.Vector4 localBounds
        ){
            var fp = GetFunctionPointer(70);
            if(m_GetImageLocalBoundsFunc==null) m_GetImageLocalBoundsFunc = (GetImageLocalBoundsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetImageLocalBoundsFunc));
            
            return m_GetImageLocalBoundsFunc(m_ptr, image!=null ? image.Ptr : IntPtr.Zero, out localBounds);
        }
        delegate int GetImageLocalBoundsFunc(IntPtr self, IntPtr image, out System.Numerics.Vector4 localBounds);
        GetImageLocalBoundsFunc m_GetImageLocalBoundsFunc;

        public virtual int GetImageWorldBounds(
            ID2D1Image image,
            out System.Numerics.Vector4 worldBounds
        ){
            var fp = GetFunctionPointer(71);
            if(m_GetImageWorldBoundsFunc==null) m_GetImageWorldBoundsFunc = (GetImageWorldBoundsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetImageWorldBoundsFunc));
            
            return m_GetImageWorldBoundsFunc(m_ptr, image!=null ? image.Ptr : IntPtr.Zero, out worldBounds);
        }
        delegate int GetImageWorldBoundsFunc(IntPtr self, IntPtr image, out System.Numerics.Vector4 worldBounds);
        GetImageWorldBoundsFunc m_GetImageWorldBoundsFunc;

        public virtual int GetGlyphRunWorldBounds(
            System.Numerics.Vector2 baselineOrigin,
            ref DWRITE_GLYPH_RUN glyphRun,
            DWRITE_MEASURING_MODE measuringMode,
            out System.Numerics.Vector4 bounds
        ){
            var fp = GetFunctionPointer(72);
            if(m_GetGlyphRunWorldBoundsFunc==null) m_GetGlyphRunWorldBoundsFunc = (GetGlyphRunWorldBoundsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetGlyphRunWorldBoundsFunc));
            
            return m_GetGlyphRunWorldBoundsFunc(m_ptr, baselineOrigin, ref glyphRun, measuringMode, out bounds);
        }
        delegate int GetGlyphRunWorldBoundsFunc(IntPtr self, System.Numerics.Vector2 baselineOrigin, ref DWRITE_GLYPH_RUN glyphRun, DWRITE_MEASURING_MODE measuringMode, out System.Numerics.Vector4 bounds);
        GetGlyphRunWorldBoundsFunc m_GetGlyphRunWorldBoundsFunc;

        public virtual void GetDevice(
            out ID2D1Device device
        ){
            var fp = GetFunctionPointer(73);
            if(m_GetDeviceFunc==null) m_GetDeviceFunc = (GetDeviceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDeviceFunc));
            device = new ID2D1Device();
            m_GetDeviceFunc(m_ptr, out device.PtrForNew);
        }
        delegate void GetDeviceFunc(IntPtr self, out IntPtr device);
        GetDeviceFunc m_GetDeviceFunc;

        public virtual void SetTarget(
            ID2D1Image image
        ){
            var fp = GetFunctionPointer(74);
            if(m_SetTargetFunc==null) m_SetTargetFunc = (SetTargetFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetTargetFunc));
            
            m_SetTargetFunc(m_ptr, image!=null ? image.Ptr : IntPtr.Zero);
        }
        delegate void SetTargetFunc(IntPtr self, IntPtr image);
        SetTargetFunc m_SetTargetFunc;

        public virtual void GetTarget(
            out ID2D1Image image
        ){
            var fp = GetFunctionPointer(75);
            if(m_GetTargetFunc==null) m_GetTargetFunc = (GetTargetFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTargetFunc));
            image = new ID2D1Image();
            m_GetTargetFunc(m_ptr, out image.PtrForNew);
        }
        delegate void GetTargetFunc(IntPtr self, out IntPtr image);
        GetTargetFunc m_GetTargetFunc;

        public virtual void SetRenderingControls(
            ref D2D1_RENDERING_CONTROLS renderingControls
        ){
            var fp = GetFunctionPointer(76);
            if(m_SetRenderingControlsFunc==null) m_SetRenderingControlsFunc = (SetRenderingControlsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetRenderingControlsFunc));
            
            m_SetRenderingControlsFunc(m_ptr, ref renderingControls);
        }
        delegate void SetRenderingControlsFunc(IntPtr self, ref D2D1_RENDERING_CONTROLS renderingControls);
        SetRenderingControlsFunc m_SetRenderingControlsFunc;

        public virtual void GetRenderingControls(
            out D2D1_RENDERING_CONTROLS renderingControls
        ){
            var fp = GetFunctionPointer(77);
            if(m_GetRenderingControlsFunc==null) m_GetRenderingControlsFunc = (GetRenderingControlsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetRenderingControlsFunc));
            
            m_GetRenderingControlsFunc(m_ptr, out renderingControls);
        }
        delegate void GetRenderingControlsFunc(IntPtr self, out D2D1_RENDERING_CONTROLS renderingControls);
        GetRenderingControlsFunc m_GetRenderingControlsFunc;

        public virtual void SetPrimitiveBlend(
            D2D1_PRIMITIVE_BLEND primitiveBlend
        ){
            var fp = GetFunctionPointer(78);
            if(m_SetPrimitiveBlendFunc==null) m_SetPrimitiveBlendFunc = (SetPrimitiveBlendFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetPrimitiveBlendFunc));
            
            m_SetPrimitiveBlendFunc(m_ptr, primitiveBlend);
        }
        delegate void SetPrimitiveBlendFunc(IntPtr self, D2D1_PRIMITIVE_BLEND primitiveBlend);
        SetPrimitiveBlendFunc m_SetPrimitiveBlendFunc;

        public virtual D2D1_PRIMITIVE_BLEND GetPrimitiveBlend(
        ){
            var fp = GetFunctionPointer(79);
            if(m_GetPrimitiveBlendFunc==null) m_GetPrimitiveBlendFunc = (GetPrimitiveBlendFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPrimitiveBlendFunc));
            
            return m_GetPrimitiveBlendFunc(m_ptr);
        }
        delegate D2D1_PRIMITIVE_BLEND GetPrimitiveBlendFunc(IntPtr self);
        GetPrimitiveBlendFunc m_GetPrimitiveBlendFunc;

        public virtual void SetUnitMode(
            D2D1_UNIT_MODE unitMode
        ){
            var fp = GetFunctionPointer(80);
            if(m_SetUnitModeFunc==null) m_SetUnitModeFunc = (SetUnitModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetUnitModeFunc));
            
            m_SetUnitModeFunc(m_ptr, unitMode);
        }
        delegate void SetUnitModeFunc(IntPtr self, D2D1_UNIT_MODE unitMode);
        SetUnitModeFunc m_SetUnitModeFunc;

        public virtual D2D1_UNIT_MODE GetUnitMode(
        ){
            var fp = GetFunctionPointer(81);
            if(m_GetUnitModeFunc==null) m_GetUnitModeFunc = (GetUnitModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetUnitModeFunc));
            
            return m_GetUnitModeFunc(m_ptr);
        }
        delegate D2D1_UNIT_MODE GetUnitModeFunc(IntPtr self);
        GetUnitModeFunc m_GetUnitModeFunc;

        public virtual void DrawGlyphRun(
            System.Numerics.Vector2 baselineOrigin,
            ref DWRITE_GLYPH_RUN glyphRun,
            ref DWRITE_GLYPH_RUN_DESCRIPTION glyphRunDescription,
            ID2D1Brush foregroundBrush,
            DWRITE_MEASURING_MODE measuringMode
        ){
            var fp = GetFunctionPointer(82);
            if(m_DrawGlyphRunFunc==null) m_DrawGlyphRunFunc = (DrawGlyphRunFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawGlyphRunFunc));
            
            m_DrawGlyphRunFunc(m_ptr, baselineOrigin, ref glyphRun, ref glyphRunDescription, foregroundBrush!=null ? foregroundBrush.Ptr : IntPtr.Zero, measuringMode);
        }
        delegate void DrawGlyphRunFunc(IntPtr self, System.Numerics.Vector2 baselineOrigin, ref DWRITE_GLYPH_RUN glyphRun, ref DWRITE_GLYPH_RUN_DESCRIPTION glyphRunDescription, IntPtr foregroundBrush, DWRITE_MEASURING_MODE measuringMode);
        DrawGlyphRunFunc m_DrawGlyphRunFunc;

        public virtual void DrawImage(
            ID2D1Image image,
            ref System.Numerics.Vector2 targetOffset,
            ref System.Numerics.Vector4 imageRectangle,
            D2D1_INTERPOLATION_MODE interpolationMode,
            D2D1_COMPOSITE_MODE compositeMode
        ){
            var fp = GetFunctionPointer(83);
            if(m_DrawImageFunc==null) m_DrawImageFunc = (DrawImageFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawImageFunc));
            
            m_DrawImageFunc(m_ptr, image!=null ? image.Ptr : IntPtr.Zero, ref targetOffset, ref imageRectangle, interpolationMode, compositeMode);
        }
        delegate void DrawImageFunc(IntPtr self, IntPtr image, ref System.Numerics.Vector2 targetOffset, ref System.Numerics.Vector4 imageRectangle, D2D1_INTERPOLATION_MODE interpolationMode, D2D1_COMPOSITE_MODE compositeMode);
        DrawImageFunc m_DrawImageFunc;

        public virtual void DrawGdiMetafile(
            ID2D1GdiMetafile gdiMetafile,
            ref System.Numerics.Vector2 targetOffset
        ){
            var fp = GetFunctionPointer(84);
            if(m_DrawGdiMetafileFunc==null) m_DrawGdiMetafileFunc = (DrawGdiMetafileFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawGdiMetafileFunc));
            
            m_DrawGdiMetafileFunc(m_ptr, gdiMetafile!=null ? gdiMetafile.Ptr : IntPtr.Zero, ref targetOffset);
        }
        delegate void DrawGdiMetafileFunc(IntPtr self, IntPtr gdiMetafile, ref System.Numerics.Vector2 targetOffset);
        DrawGdiMetafileFunc m_DrawGdiMetafileFunc;

        public virtual void DrawBitmap(
            ID2D1Bitmap bitmap,
            ref System.Numerics.Vector4 destinationRectangle,
            float opacity,
            D2D1_INTERPOLATION_MODE interpolationMode,
            ref System.Numerics.Vector4 sourceRectangle,
            ref D2D_MATRIX_4X4_F perspectiveTransform
        ){
            var fp = GetFunctionPointer(85);
            if(m_DrawBitmapFunc==null) m_DrawBitmapFunc = (DrawBitmapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawBitmapFunc));
            
            m_DrawBitmapFunc(m_ptr, bitmap!=null ? bitmap.Ptr : IntPtr.Zero, ref destinationRectangle, opacity, interpolationMode, ref sourceRectangle, ref perspectiveTransform);
        }
        delegate void DrawBitmapFunc(IntPtr self, IntPtr bitmap, ref System.Numerics.Vector4 destinationRectangle, float opacity, D2D1_INTERPOLATION_MODE interpolationMode, ref System.Numerics.Vector4 sourceRectangle, ref D2D_MATRIX_4X4_F perspectiveTransform);
        DrawBitmapFunc m_DrawBitmapFunc;

        public virtual void PushLayer(
            ref D2D1_LAYER_PARAMETERS1 layerParameters,
            ID2D1Layer layer
        ){
            var fp = GetFunctionPointer(86);
            if(m_PushLayerFunc==null) m_PushLayerFunc = (PushLayerFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PushLayerFunc));
            
            m_PushLayerFunc(m_ptr, ref layerParameters, layer!=null ? layer.Ptr : IntPtr.Zero);
        }
        delegate void PushLayerFunc(IntPtr self, ref D2D1_LAYER_PARAMETERS1 layerParameters, IntPtr layer);
        PushLayerFunc m_PushLayerFunc;

        public virtual int InvalidateEffectInputRectangle(
            ID2D1Effect effect,
            uint input,
            ref System.Numerics.Vector4 inputRectangle
        ){
            var fp = GetFunctionPointer(87);
            if(m_InvalidateEffectInputRectangleFunc==null) m_InvalidateEffectInputRectangleFunc = (InvalidateEffectInputRectangleFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(InvalidateEffectInputRectangleFunc));
            
            return m_InvalidateEffectInputRectangleFunc(m_ptr, effect!=null ? effect.Ptr : IntPtr.Zero, input, ref inputRectangle);
        }
        delegate int InvalidateEffectInputRectangleFunc(IntPtr self, IntPtr effect, uint input, ref System.Numerics.Vector4 inputRectangle);
        InvalidateEffectInputRectangleFunc m_InvalidateEffectInputRectangleFunc;

        public virtual int GetEffectInvalidRectangleCount(
            ID2D1Effect effect,
            out uint rectangleCount
        ){
            var fp = GetFunctionPointer(88);
            if(m_GetEffectInvalidRectangleCountFunc==null) m_GetEffectInvalidRectangleCountFunc = (GetEffectInvalidRectangleCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetEffectInvalidRectangleCountFunc));
            
            return m_GetEffectInvalidRectangleCountFunc(m_ptr, effect!=null ? effect.Ptr : IntPtr.Zero, out rectangleCount);
        }
        delegate int GetEffectInvalidRectangleCountFunc(IntPtr self, IntPtr effect, out uint rectangleCount);
        GetEffectInvalidRectangleCountFunc m_GetEffectInvalidRectangleCountFunc;

        public virtual int GetEffectInvalidRectangles(
            ID2D1Effect effect,
            out System.Numerics.Vector4 rectangles,
            uint rectanglesCount
        ){
            var fp = GetFunctionPointer(89);
            if(m_GetEffectInvalidRectanglesFunc==null) m_GetEffectInvalidRectanglesFunc = (GetEffectInvalidRectanglesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetEffectInvalidRectanglesFunc));
            
            return m_GetEffectInvalidRectanglesFunc(m_ptr, effect!=null ? effect.Ptr : IntPtr.Zero, out rectangles, rectanglesCount);
        }
        delegate int GetEffectInvalidRectanglesFunc(IntPtr self, IntPtr effect, out System.Numerics.Vector4 rectangles, uint rectanglesCount);
        GetEffectInvalidRectanglesFunc m_GetEffectInvalidRectanglesFunc;

        public virtual int GetEffectRequiredInputRectangles(
            ID2D1Effect renderEffect,
            ref System.Numerics.Vector4 renderImageRectangle,
            ref D2D1_EFFECT_INPUT_DESCRIPTION inputDescriptions,
            out System.Numerics.Vector4 requiredInputRects,
            uint inputCount
        ){
            var fp = GetFunctionPointer(90);
            if(m_GetEffectRequiredInputRectanglesFunc==null) m_GetEffectRequiredInputRectanglesFunc = (GetEffectRequiredInputRectanglesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetEffectRequiredInputRectanglesFunc));
            
            return m_GetEffectRequiredInputRectanglesFunc(m_ptr, renderEffect!=null ? renderEffect.Ptr : IntPtr.Zero, ref renderImageRectangle, ref inputDescriptions, out requiredInputRects, inputCount);
        }
        delegate int GetEffectRequiredInputRectanglesFunc(IntPtr self, IntPtr renderEffect, ref System.Numerics.Vector4 renderImageRectangle, ref D2D1_EFFECT_INPUT_DESCRIPTION inputDescriptions, out System.Numerics.Vector4 requiredInputRects, uint inputCount);
        GetEffectRequiredInputRectanglesFunc m_GetEffectRequiredInputRectanglesFunc;

        public virtual void FillOpacityMask(
            ID2D1Bitmap opacityMask,
            ID2D1Brush brush,
            ref System.Numerics.Vector4 destinationRectangle,
            ref System.Numerics.Vector4 sourceRectangle
        ){
            var fp = GetFunctionPointer(91);
            if(m_FillOpacityMaskFunc==null) m_FillOpacityMaskFunc = (FillOpacityMaskFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FillOpacityMaskFunc));
            
            m_FillOpacityMaskFunc(m_ptr, opacityMask!=null ? opacityMask.Ptr : IntPtr.Zero, brush!=null ? brush.Ptr : IntPtr.Zero, ref destinationRectangle, ref sourceRectangle);
        }
        delegate void FillOpacityMaskFunc(IntPtr self, IntPtr opacityMask, IntPtr brush, ref System.Numerics.Vector4 destinationRectangle, ref System.Numerics.Vector4 sourceRectangle);
        FillOpacityMaskFunc m_FillOpacityMaskFunc;

    }
}
