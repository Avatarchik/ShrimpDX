// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class ID2D1Multithread: IUnknown
    {
        static Guid s_uuid = new Guid("31e6e7bc-e0ff-4d46-8c64-a0a8c41c15d3");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int GetMultithreadProtected(
        ){
            var fp = GetFunctionPointer(3);
            if(m_GetMultithreadProtectedFunc==null) m_GetMultithreadProtectedFunc = (GetMultithreadProtectedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMultithreadProtectedFunc));
            
            return m_GetMultithreadProtectedFunc(m_ptr);
        }
        delegate int GetMultithreadProtectedFunc(IntPtr self);
        GetMultithreadProtectedFunc m_GetMultithreadProtectedFunc;

        public virtual void Enter(
        ){
            var fp = GetFunctionPointer(4);
            if(m_EnterFunc==null) m_EnterFunc = (EnterFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(EnterFunc));
            
            m_EnterFunc(m_ptr);
        }
        delegate void EnterFunc(IntPtr self);
        EnterFunc m_EnterFunc;

        public virtual void Leave(
        ){
            var fp = GetFunctionPointer(5);
            if(m_LeaveFunc==null) m_LeaveFunc = (LeaveFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(LeaveFunc));
            
            m_LeaveFunc(m_ptr);
        }
        delegate void LeaveFunc(IntPtr self);
        LeaveFunc m_LeaveFunc;

    }
}
