// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class ID3D10Device: IUnknown
    {
        static Guid s_uuid = new Guid("9b7e4c0f-342c-4106-a19f-4f2704f689f0");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual void VSSetConstantBuffers(
            uint StartSlot,
            uint NumBuffers,
            ref IntPtr ppConstantBuffers
        ){
            var fp = GetFunctionPointer(3);
            if(m_VSSetConstantBuffersFunc==null) m_VSSetConstantBuffersFunc = (VSSetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSSetConstantBuffersFunc));
            
            m_VSSetConstantBuffersFunc(m_ptr, StartSlot, NumBuffers, ref ppConstantBuffers);
        }
        delegate void VSSetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers);
        VSSetConstantBuffersFunc m_VSSetConstantBuffersFunc;

        public virtual void PSSetShaderResources(
            uint StartSlot,
            uint NumViews,
            ref IntPtr ppShaderResourceViews
        ){
            var fp = GetFunctionPointer(4);
            if(m_PSSetShaderResourcesFunc==null) m_PSSetShaderResourcesFunc = (PSSetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSSetShaderResourcesFunc));
            
            m_PSSetShaderResourcesFunc(m_ptr, StartSlot, NumViews, ref ppShaderResourceViews);
        }
        delegate void PSSetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews);
        PSSetShaderResourcesFunc m_PSSetShaderResourcesFunc;

        public virtual void PSSetShader(
            ID3D10PixelShader pPixelShader
        ){
            var fp = GetFunctionPointer(5);
            if(m_PSSetShaderFunc==null) m_PSSetShaderFunc = (PSSetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSSetShaderFunc));
            
            m_PSSetShaderFunc(m_ptr, pPixelShader!=null ? pPixelShader.Ptr : IntPtr.Zero);
        }
        delegate void PSSetShaderFunc(IntPtr self, IntPtr pPixelShader);
        PSSetShaderFunc m_PSSetShaderFunc;

        public virtual void PSSetSamplers(
            uint StartSlot,
            uint NumSamplers,
            ref IntPtr ppSamplers
        ){
            var fp = GetFunctionPointer(6);
            if(m_PSSetSamplersFunc==null) m_PSSetSamplersFunc = (PSSetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSSetSamplersFunc));
            
            m_PSSetSamplersFunc(m_ptr, StartSlot, NumSamplers, ref ppSamplers);
        }
        delegate void PSSetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers);
        PSSetSamplersFunc m_PSSetSamplersFunc;

        public virtual void VSSetShader(
            ID3D10VertexShader pVertexShader
        ){
            var fp = GetFunctionPointer(7);
            if(m_VSSetShaderFunc==null) m_VSSetShaderFunc = (VSSetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSSetShaderFunc));
            
            m_VSSetShaderFunc(m_ptr, pVertexShader!=null ? pVertexShader.Ptr : IntPtr.Zero);
        }
        delegate void VSSetShaderFunc(IntPtr self, IntPtr pVertexShader);
        VSSetShaderFunc m_VSSetShaderFunc;

        public virtual void DrawIndexed(
            uint IndexCount,
            uint StartIndexLocation,
            int BaseVertexLocation
        ){
            var fp = GetFunctionPointer(8);
            if(m_DrawIndexedFunc==null) m_DrawIndexedFunc = (DrawIndexedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawIndexedFunc));
            
            m_DrawIndexedFunc(m_ptr, IndexCount, StartIndexLocation, BaseVertexLocation);
        }
        delegate void DrawIndexedFunc(IntPtr self, uint IndexCount, uint StartIndexLocation, int BaseVertexLocation);
        DrawIndexedFunc m_DrawIndexedFunc;

        public virtual void Draw(
            uint VertexCount,
            uint StartVertexLocation
        ){
            var fp = GetFunctionPointer(9);
            if(m_DrawFunc==null) m_DrawFunc = (DrawFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawFunc));
            
            m_DrawFunc(m_ptr, VertexCount, StartVertexLocation);
        }
        delegate void DrawFunc(IntPtr self, uint VertexCount, uint StartVertexLocation);
        DrawFunc m_DrawFunc;

        public virtual void PSSetConstantBuffers(
            uint StartSlot,
            uint NumBuffers,
            ref IntPtr ppConstantBuffers
        ){
            var fp = GetFunctionPointer(10);
            if(m_PSSetConstantBuffersFunc==null) m_PSSetConstantBuffersFunc = (PSSetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSSetConstantBuffersFunc));
            
            m_PSSetConstantBuffersFunc(m_ptr, StartSlot, NumBuffers, ref ppConstantBuffers);
        }
        delegate void PSSetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers);
        PSSetConstantBuffersFunc m_PSSetConstantBuffersFunc;

        public virtual void IASetInputLayout(
            ID3D10InputLayout pInputLayout
        ){
            var fp = GetFunctionPointer(11);
            if(m_IASetInputLayoutFunc==null) m_IASetInputLayoutFunc = (IASetInputLayoutFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IASetInputLayoutFunc));
            
            m_IASetInputLayoutFunc(m_ptr, pInputLayout!=null ? pInputLayout.Ptr : IntPtr.Zero);
        }
        delegate void IASetInputLayoutFunc(IntPtr self, IntPtr pInputLayout);
        IASetInputLayoutFunc m_IASetInputLayoutFunc;

        public virtual void IASetVertexBuffers(
            uint StartSlot,
            uint NumBuffers,
            ref IntPtr ppVertexBuffers,
            ref uint pStrides,
            ref uint pOffsets
        ){
            var fp = GetFunctionPointer(12);
            if(m_IASetVertexBuffersFunc==null) m_IASetVertexBuffersFunc = (IASetVertexBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IASetVertexBuffersFunc));
            
            m_IASetVertexBuffersFunc(m_ptr, StartSlot, NumBuffers, ref ppVertexBuffers, ref pStrides, ref pOffsets);
        }
        delegate void IASetVertexBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppVertexBuffers, ref uint pStrides, ref uint pOffsets);
        IASetVertexBuffersFunc m_IASetVertexBuffersFunc;

        public virtual void IASetIndexBuffer(
            ID3D10Buffer pIndexBuffer,
            DXGI_FORMAT Format,
            uint Offset
        ){
            var fp = GetFunctionPointer(13);
            if(m_IASetIndexBufferFunc==null) m_IASetIndexBufferFunc = (IASetIndexBufferFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IASetIndexBufferFunc));
            
            m_IASetIndexBufferFunc(m_ptr, pIndexBuffer!=null ? pIndexBuffer.Ptr : IntPtr.Zero, Format, Offset);
        }
        delegate void IASetIndexBufferFunc(IntPtr self, IntPtr pIndexBuffer, DXGI_FORMAT Format, uint Offset);
        IASetIndexBufferFunc m_IASetIndexBufferFunc;

        public virtual void DrawIndexedInstanced(
            uint IndexCountPerInstance,
            uint InstanceCount,
            uint StartIndexLocation,
            int BaseVertexLocation,
            uint StartInstanceLocation
        ){
            var fp = GetFunctionPointer(14);
            if(m_DrawIndexedInstancedFunc==null) m_DrawIndexedInstancedFunc = (DrawIndexedInstancedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawIndexedInstancedFunc));
            
            m_DrawIndexedInstancedFunc(m_ptr, IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation);
        }
        delegate void DrawIndexedInstancedFunc(IntPtr self, uint IndexCountPerInstance, uint InstanceCount, uint StartIndexLocation, int BaseVertexLocation, uint StartInstanceLocation);
        DrawIndexedInstancedFunc m_DrawIndexedInstancedFunc;

        public virtual void DrawInstanced(
            uint VertexCountPerInstance,
            uint InstanceCount,
            uint StartVertexLocation,
            uint StartInstanceLocation
        ){
            var fp = GetFunctionPointer(15);
            if(m_DrawInstancedFunc==null) m_DrawInstancedFunc = (DrawInstancedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawInstancedFunc));
            
            m_DrawInstancedFunc(m_ptr, VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation);
        }
        delegate void DrawInstancedFunc(IntPtr self, uint VertexCountPerInstance, uint InstanceCount, uint StartVertexLocation, uint StartInstanceLocation);
        DrawInstancedFunc m_DrawInstancedFunc;

        public virtual void GSSetConstantBuffers(
            uint StartSlot,
            uint NumBuffers,
            ref IntPtr ppConstantBuffers
        ){
            var fp = GetFunctionPointer(16);
            if(m_GSSetConstantBuffersFunc==null) m_GSSetConstantBuffersFunc = (GSSetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSSetConstantBuffersFunc));
            
            m_GSSetConstantBuffersFunc(m_ptr, StartSlot, NumBuffers, ref ppConstantBuffers);
        }
        delegate void GSSetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers);
        GSSetConstantBuffersFunc m_GSSetConstantBuffersFunc;

        public virtual void GSSetShader(
            ID3D10GeometryShader pShader
        ){
            var fp = GetFunctionPointer(17);
            if(m_GSSetShaderFunc==null) m_GSSetShaderFunc = (GSSetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSSetShaderFunc));
            
            m_GSSetShaderFunc(m_ptr, pShader!=null ? pShader.Ptr : IntPtr.Zero);
        }
        delegate void GSSetShaderFunc(IntPtr self, IntPtr pShader);
        GSSetShaderFunc m_GSSetShaderFunc;

        public virtual void IASetPrimitiveTopology(
            D3D_PRIMITIVE_TOPOLOGY Topology
        ){
            var fp = GetFunctionPointer(18);
            if(m_IASetPrimitiveTopologyFunc==null) m_IASetPrimitiveTopologyFunc = (IASetPrimitiveTopologyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IASetPrimitiveTopologyFunc));
            
            m_IASetPrimitiveTopologyFunc(m_ptr, Topology);
        }
        delegate void IASetPrimitiveTopologyFunc(IntPtr self, D3D_PRIMITIVE_TOPOLOGY Topology);
        IASetPrimitiveTopologyFunc m_IASetPrimitiveTopologyFunc;

        public virtual void VSSetShaderResources(
            uint StartSlot,
            uint NumViews,
            ref IntPtr ppShaderResourceViews
        ){
            var fp = GetFunctionPointer(19);
            if(m_VSSetShaderResourcesFunc==null) m_VSSetShaderResourcesFunc = (VSSetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSSetShaderResourcesFunc));
            
            m_VSSetShaderResourcesFunc(m_ptr, StartSlot, NumViews, ref ppShaderResourceViews);
        }
        delegate void VSSetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews);
        VSSetShaderResourcesFunc m_VSSetShaderResourcesFunc;

        public virtual void VSSetSamplers(
            uint StartSlot,
            uint NumSamplers,
            ref IntPtr ppSamplers
        ){
            var fp = GetFunctionPointer(20);
            if(m_VSSetSamplersFunc==null) m_VSSetSamplersFunc = (VSSetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSSetSamplersFunc));
            
            m_VSSetSamplersFunc(m_ptr, StartSlot, NumSamplers, ref ppSamplers);
        }
        delegate void VSSetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers);
        VSSetSamplersFunc m_VSSetSamplersFunc;

        public virtual void SetPredication(
            ID3D10Predicate pPredicate,
            int PredicateValue
        ){
            var fp = GetFunctionPointer(21);
            if(m_SetPredicationFunc==null) m_SetPredicationFunc = (SetPredicationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetPredicationFunc));
            
            m_SetPredicationFunc(m_ptr, pPredicate!=null ? pPredicate.Ptr : IntPtr.Zero, PredicateValue);
        }
        delegate void SetPredicationFunc(IntPtr self, IntPtr pPredicate, int PredicateValue);
        SetPredicationFunc m_SetPredicationFunc;

        public virtual void GSSetShaderResources(
            uint StartSlot,
            uint NumViews,
            ref IntPtr ppShaderResourceViews
        ){
            var fp = GetFunctionPointer(22);
            if(m_GSSetShaderResourcesFunc==null) m_GSSetShaderResourcesFunc = (GSSetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSSetShaderResourcesFunc));
            
            m_GSSetShaderResourcesFunc(m_ptr, StartSlot, NumViews, ref ppShaderResourceViews);
        }
        delegate void GSSetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews);
        GSSetShaderResourcesFunc m_GSSetShaderResourcesFunc;

        public virtual void GSSetSamplers(
            uint StartSlot,
            uint NumSamplers,
            ref IntPtr ppSamplers
        ){
            var fp = GetFunctionPointer(23);
            if(m_GSSetSamplersFunc==null) m_GSSetSamplersFunc = (GSSetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSSetSamplersFunc));
            
            m_GSSetSamplersFunc(m_ptr, StartSlot, NumSamplers, ref ppSamplers);
        }
        delegate void GSSetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers);
        GSSetSamplersFunc m_GSSetSamplersFunc;

        public virtual void OMSetRenderTargets(
            uint NumViews,
            ref IntPtr ppRenderTargetViews,
            ID3D10DepthStencilView pDepthStencilView
        ){
            var fp = GetFunctionPointer(24);
            if(m_OMSetRenderTargetsFunc==null) m_OMSetRenderTargetsFunc = (OMSetRenderTargetsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMSetRenderTargetsFunc));
            
            m_OMSetRenderTargetsFunc(m_ptr, NumViews, ref ppRenderTargetViews, pDepthStencilView!=null ? pDepthStencilView.Ptr : IntPtr.Zero);
        }
        delegate void OMSetRenderTargetsFunc(IntPtr self, uint NumViews, ref IntPtr ppRenderTargetViews, IntPtr pDepthStencilView);
        OMSetRenderTargetsFunc m_OMSetRenderTargetsFunc;

        public virtual void OMSetBlendState(
            ID3D10BlendState pBlendState,
            ref float BlendFactor,
            uint SampleMask
        ){
            var fp = GetFunctionPointer(25);
            if(m_OMSetBlendStateFunc==null) m_OMSetBlendStateFunc = (OMSetBlendStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMSetBlendStateFunc));
            
            m_OMSetBlendStateFunc(m_ptr, pBlendState!=null ? pBlendState.Ptr : IntPtr.Zero, ref BlendFactor, SampleMask);
        }
        delegate void OMSetBlendStateFunc(IntPtr self, IntPtr pBlendState, ref float BlendFactor, uint SampleMask);
        OMSetBlendStateFunc m_OMSetBlendStateFunc;

        public virtual void OMSetDepthStencilState(
            ID3D10DepthStencilState pDepthStencilState,
            uint StencilRef
        ){
            var fp = GetFunctionPointer(26);
            if(m_OMSetDepthStencilStateFunc==null) m_OMSetDepthStencilStateFunc = (OMSetDepthStencilStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMSetDepthStencilStateFunc));
            
            m_OMSetDepthStencilStateFunc(m_ptr, pDepthStencilState!=null ? pDepthStencilState.Ptr : IntPtr.Zero, StencilRef);
        }
        delegate void OMSetDepthStencilStateFunc(IntPtr self, IntPtr pDepthStencilState, uint StencilRef);
        OMSetDepthStencilStateFunc m_OMSetDepthStencilStateFunc;

        public virtual void SOSetTargets(
            uint NumBuffers,
            ref IntPtr ppSOTargets,
            ref uint pOffsets
        ){
            var fp = GetFunctionPointer(27);
            if(m_SOSetTargetsFunc==null) m_SOSetTargetsFunc = (SOSetTargetsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SOSetTargetsFunc));
            
            m_SOSetTargetsFunc(m_ptr, NumBuffers, ref ppSOTargets, ref pOffsets);
        }
        delegate void SOSetTargetsFunc(IntPtr self, uint NumBuffers, ref IntPtr ppSOTargets, ref uint pOffsets);
        SOSetTargetsFunc m_SOSetTargetsFunc;

        public virtual void DrawAuto(
        ){
            var fp = GetFunctionPointer(28);
            if(m_DrawAutoFunc==null) m_DrawAutoFunc = (DrawAutoFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawAutoFunc));
            
            m_DrawAutoFunc(m_ptr);
        }
        delegate void DrawAutoFunc(IntPtr self);
        DrawAutoFunc m_DrawAutoFunc;

        public virtual void RSSetState(
            ID3D10RasterizerState pRasterizerState
        ){
            var fp = GetFunctionPointer(29);
            if(m_RSSetStateFunc==null) m_RSSetStateFunc = (RSSetStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RSSetStateFunc));
            
            m_RSSetStateFunc(m_ptr, pRasterizerState!=null ? pRasterizerState.Ptr : IntPtr.Zero);
        }
        delegate void RSSetStateFunc(IntPtr self, IntPtr pRasterizerState);
        RSSetStateFunc m_RSSetStateFunc;

        public virtual void RSSetViewports(
            uint NumViewports,
            ref D3D10_VIEWPORT pViewports
        ){
            var fp = GetFunctionPointer(30);
            if(m_RSSetViewportsFunc==null) m_RSSetViewportsFunc = (RSSetViewportsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RSSetViewportsFunc));
            
            m_RSSetViewportsFunc(m_ptr, NumViewports, ref pViewports);
        }
        delegate void RSSetViewportsFunc(IntPtr self, uint NumViewports, ref D3D10_VIEWPORT pViewports);
        RSSetViewportsFunc m_RSSetViewportsFunc;

        public virtual void RSSetScissorRects(
            uint NumRects,
            ref tagRECT pRects
        ){
            var fp = GetFunctionPointer(31);
            if(m_RSSetScissorRectsFunc==null) m_RSSetScissorRectsFunc = (RSSetScissorRectsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RSSetScissorRectsFunc));
            
            m_RSSetScissorRectsFunc(m_ptr, NumRects, ref pRects);
        }
        delegate void RSSetScissorRectsFunc(IntPtr self, uint NumRects, ref tagRECT pRects);
        RSSetScissorRectsFunc m_RSSetScissorRectsFunc;

        public virtual void CopySubresourceRegion(
            ID3D10Resource pDstResource,
            uint DstSubresource,
            uint DstX,
            uint DstY,
            uint DstZ,
            ID3D10Resource pSrcResource,
            uint SrcSubresource,
            ref D3D10_BOX pSrcBox
        ){
            var fp = GetFunctionPointer(32);
            if(m_CopySubresourceRegionFunc==null) m_CopySubresourceRegionFunc = (CopySubresourceRegionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopySubresourceRegionFunc));
            
            m_CopySubresourceRegionFunc(m_ptr, pDstResource!=null ? pDstResource.Ptr : IntPtr.Zero, DstSubresource, DstX, DstY, DstZ, pSrcResource!=null ? pSrcResource.Ptr : IntPtr.Zero, SrcSubresource, ref pSrcBox);
        }
        delegate void CopySubresourceRegionFunc(IntPtr self, IntPtr pDstResource, uint DstSubresource, uint DstX, uint DstY, uint DstZ, IntPtr pSrcResource, uint SrcSubresource, ref D3D10_BOX pSrcBox);
        CopySubresourceRegionFunc m_CopySubresourceRegionFunc;

        public virtual void CopyResource(
            ID3D10Resource pDstResource,
            ID3D10Resource pSrcResource
        ){
            var fp = GetFunctionPointer(33);
            if(m_CopyResourceFunc==null) m_CopyResourceFunc = (CopyResourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopyResourceFunc));
            
            m_CopyResourceFunc(m_ptr, pDstResource!=null ? pDstResource.Ptr : IntPtr.Zero, pSrcResource!=null ? pSrcResource.Ptr : IntPtr.Zero);
        }
        delegate void CopyResourceFunc(IntPtr self, IntPtr pDstResource, IntPtr pSrcResource);
        CopyResourceFunc m_CopyResourceFunc;

        public virtual void UpdateSubresource(
            ID3D10Resource pDstResource,
            uint DstSubresource,
            ref D3D10_BOX pDstBox,
            IntPtr pSrcData,
            uint SrcRowPitch,
            uint SrcDepthPitch
        ){
            var fp = GetFunctionPointer(34);
            if(m_UpdateSubresourceFunc==null) m_UpdateSubresourceFunc = (UpdateSubresourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(UpdateSubresourceFunc));
            
            m_UpdateSubresourceFunc(m_ptr, pDstResource!=null ? pDstResource.Ptr : IntPtr.Zero, DstSubresource, ref pDstBox, pSrcData, SrcRowPitch, SrcDepthPitch);
        }
        delegate void UpdateSubresourceFunc(IntPtr self, IntPtr pDstResource, uint DstSubresource, ref D3D10_BOX pDstBox, IntPtr pSrcData, uint SrcRowPitch, uint SrcDepthPitch);
        UpdateSubresourceFunc m_UpdateSubresourceFunc;

        public virtual void ClearRenderTargetView(
            ID3D10RenderTargetView pRenderTargetView,
            ref float ColorRGBA
        ){
            var fp = GetFunctionPointer(35);
            if(m_ClearRenderTargetViewFunc==null) m_ClearRenderTargetViewFunc = (ClearRenderTargetViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ClearRenderTargetViewFunc));
            
            m_ClearRenderTargetViewFunc(m_ptr, pRenderTargetView!=null ? pRenderTargetView.Ptr : IntPtr.Zero, ref ColorRGBA);
        }
        delegate void ClearRenderTargetViewFunc(IntPtr self, IntPtr pRenderTargetView, ref float ColorRGBA);
        ClearRenderTargetViewFunc m_ClearRenderTargetViewFunc;

        public virtual void ClearDepthStencilView(
            ID3D10DepthStencilView pDepthStencilView,
            uint ClearFlags,
            float Depth,
            byte Stencil
        ){
            var fp = GetFunctionPointer(36);
            if(m_ClearDepthStencilViewFunc==null) m_ClearDepthStencilViewFunc = (ClearDepthStencilViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ClearDepthStencilViewFunc));
            
            m_ClearDepthStencilViewFunc(m_ptr, pDepthStencilView!=null ? pDepthStencilView.Ptr : IntPtr.Zero, ClearFlags, Depth, Stencil);
        }
        delegate void ClearDepthStencilViewFunc(IntPtr self, IntPtr pDepthStencilView, uint ClearFlags, float Depth, byte Stencil);
        ClearDepthStencilViewFunc m_ClearDepthStencilViewFunc;

        public virtual void GenerateMips(
            ID3D10ShaderResourceView pShaderResourceView
        ){
            var fp = GetFunctionPointer(37);
            if(m_GenerateMipsFunc==null) m_GenerateMipsFunc = (GenerateMipsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GenerateMipsFunc));
            
            m_GenerateMipsFunc(m_ptr, pShaderResourceView!=null ? pShaderResourceView.Ptr : IntPtr.Zero);
        }
        delegate void GenerateMipsFunc(IntPtr self, IntPtr pShaderResourceView);
        GenerateMipsFunc m_GenerateMipsFunc;

        public virtual void ResolveSubresource(
            ID3D10Resource pDstResource,
            uint DstSubresource,
            ID3D10Resource pSrcResource,
            uint SrcSubresource,
            DXGI_FORMAT Format
        ){
            var fp = GetFunctionPointer(38);
            if(m_ResolveSubresourceFunc==null) m_ResolveSubresourceFunc = (ResolveSubresourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ResolveSubresourceFunc));
            
            m_ResolveSubresourceFunc(m_ptr, pDstResource!=null ? pDstResource.Ptr : IntPtr.Zero, DstSubresource, pSrcResource!=null ? pSrcResource.Ptr : IntPtr.Zero, SrcSubresource, Format);
        }
        delegate void ResolveSubresourceFunc(IntPtr self, IntPtr pDstResource, uint DstSubresource, IntPtr pSrcResource, uint SrcSubresource, DXGI_FORMAT Format);
        ResolveSubresourceFunc m_ResolveSubresourceFunc;

        public virtual void VSGetConstantBuffers(
            uint StartSlot,
            uint NumBuffers,
            out ID3D10Buffer ppConstantBuffers
        ){
            var fp = GetFunctionPointer(39);
            if(m_VSGetConstantBuffersFunc==null) m_VSGetConstantBuffersFunc = (VSGetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSGetConstantBuffersFunc));
            ppConstantBuffers = new ID3D10Buffer();
            m_VSGetConstantBuffersFunc(m_ptr, StartSlot, NumBuffers, out ppConstantBuffers.PtrForNew);
        }
        delegate void VSGetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, out IntPtr ppConstantBuffers);
        VSGetConstantBuffersFunc m_VSGetConstantBuffersFunc;

        public virtual void PSGetShaderResources(
            uint StartSlot,
            uint NumViews,
            out ID3D10ShaderResourceView ppShaderResourceViews
        ){
            var fp = GetFunctionPointer(40);
            if(m_PSGetShaderResourcesFunc==null) m_PSGetShaderResourcesFunc = (PSGetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSGetShaderResourcesFunc));
            ppShaderResourceViews = new ID3D10ShaderResourceView();
            m_PSGetShaderResourcesFunc(m_ptr, StartSlot, NumViews, out ppShaderResourceViews.PtrForNew);
        }
        delegate void PSGetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, out IntPtr ppShaderResourceViews);
        PSGetShaderResourcesFunc m_PSGetShaderResourcesFunc;

        public virtual void PSGetShader(
            out ID3D10PixelShader ppPixelShader
        ){
            var fp = GetFunctionPointer(41);
            if(m_PSGetShaderFunc==null) m_PSGetShaderFunc = (PSGetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSGetShaderFunc));
            ppPixelShader = new ID3D10PixelShader();
            m_PSGetShaderFunc(m_ptr, out ppPixelShader.PtrForNew);
        }
        delegate void PSGetShaderFunc(IntPtr self, out IntPtr ppPixelShader);
        PSGetShaderFunc m_PSGetShaderFunc;

        public virtual void PSGetSamplers(
            uint StartSlot,
            uint NumSamplers,
            out ID3D10SamplerState ppSamplers
        ){
            var fp = GetFunctionPointer(42);
            if(m_PSGetSamplersFunc==null) m_PSGetSamplersFunc = (PSGetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSGetSamplersFunc));
            ppSamplers = new ID3D10SamplerState();
            m_PSGetSamplersFunc(m_ptr, StartSlot, NumSamplers, out ppSamplers.PtrForNew);
        }
        delegate void PSGetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, out IntPtr ppSamplers);
        PSGetSamplersFunc m_PSGetSamplersFunc;

        public virtual void VSGetShader(
            out ID3D10VertexShader ppVertexShader
        ){
            var fp = GetFunctionPointer(43);
            if(m_VSGetShaderFunc==null) m_VSGetShaderFunc = (VSGetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSGetShaderFunc));
            ppVertexShader = new ID3D10VertexShader();
            m_VSGetShaderFunc(m_ptr, out ppVertexShader.PtrForNew);
        }
        delegate void VSGetShaderFunc(IntPtr self, out IntPtr ppVertexShader);
        VSGetShaderFunc m_VSGetShaderFunc;

        public virtual void PSGetConstantBuffers(
            uint StartSlot,
            uint NumBuffers,
            out ID3D10Buffer ppConstantBuffers
        ){
            var fp = GetFunctionPointer(44);
            if(m_PSGetConstantBuffersFunc==null) m_PSGetConstantBuffersFunc = (PSGetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSGetConstantBuffersFunc));
            ppConstantBuffers = new ID3D10Buffer();
            m_PSGetConstantBuffersFunc(m_ptr, StartSlot, NumBuffers, out ppConstantBuffers.PtrForNew);
        }
        delegate void PSGetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, out IntPtr ppConstantBuffers);
        PSGetConstantBuffersFunc m_PSGetConstantBuffersFunc;

        public virtual void IAGetInputLayout(
            out ID3D10InputLayout ppInputLayout
        ){
            var fp = GetFunctionPointer(45);
            if(m_IAGetInputLayoutFunc==null) m_IAGetInputLayoutFunc = (IAGetInputLayoutFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IAGetInputLayoutFunc));
            ppInputLayout = new ID3D10InputLayout();
            m_IAGetInputLayoutFunc(m_ptr, out ppInputLayout.PtrForNew);
        }
        delegate void IAGetInputLayoutFunc(IntPtr self, out IntPtr ppInputLayout);
        IAGetInputLayoutFunc m_IAGetInputLayoutFunc;

        public virtual void IAGetVertexBuffers(
            uint StartSlot,
            uint NumBuffers,
            out ID3D10Buffer ppVertexBuffers,
            out uint pStrides,
            out uint pOffsets
        ){
            var fp = GetFunctionPointer(46);
            if(m_IAGetVertexBuffersFunc==null) m_IAGetVertexBuffersFunc = (IAGetVertexBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IAGetVertexBuffersFunc));
            ppVertexBuffers = new ID3D10Buffer();
            m_IAGetVertexBuffersFunc(m_ptr, StartSlot, NumBuffers, out ppVertexBuffers.PtrForNew, out pStrides, out pOffsets);
        }
        delegate void IAGetVertexBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, out IntPtr ppVertexBuffers, out uint pStrides, out uint pOffsets);
        IAGetVertexBuffersFunc m_IAGetVertexBuffersFunc;

        public virtual void IAGetIndexBuffer(
            out ID3D10Buffer pIndexBuffer,
            out DXGI_FORMAT Format,
            out uint Offset
        ){
            var fp = GetFunctionPointer(47);
            if(m_IAGetIndexBufferFunc==null) m_IAGetIndexBufferFunc = (IAGetIndexBufferFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IAGetIndexBufferFunc));
            pIndexBuffer = new ID3D10Buffer();
            m_IAGetIndexBufferFunc(m_ptr, out pIndexBuffer.PtrForNew, out Format, out Offset);
        }
        delegate void IAGetIndexBufferFunc(IntPtr self, out IntPtr pIndexBuffer, out DXGI_FORMAT Format, out uint Offset);
        IAGetIndexBufferFunc m_IAGetIndexBufferFunc;

        public virtual void GSGetConstantBuffers(
            uint StartSlot,
            uint NumBuffers,
            out ID3D10Buffer ppConstantBuffers
        ){
            var fp = GetFunctionPointer(48);
            if(m_GSGetConstantBuffersFunc==null) m_GSGetConstantBuffersFunc = (GSGetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSGetConstantBuffersFunc));
            ppConstantBuffers = new ID3D10Buffer();
            m_GSGetConstantBuffersFunc(m_ptr, StartSlot, NumBuffers, out ppConstantBuffers.PtrForNew);
        }
        delegate void GSGetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, out IntPtr ppConstantBuffers);
        GSGetConstantBuffersFunc m_GSGetConstantBuffersFunc;

        public virtual void GSGetShader(
            out ID3D10GeometryShader ppGeometryShader
        ){
            var fp = GetFunctionPointer(49);
            if(m_GSGetShaderFunc==null) m_GSGetShaderFunc = (GSGetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSGetShaderFunc));
            ppGeometryShader = new ID3D10GeometryShader();
            m_GSGetShaderFunc(m_ptr, out ppGeometryShader.PtrForNew);
        }
        delegate void GSGetShaderFunc(IntPtr self, out IntPtr ppGeometryShader);
        GSGetShaderFunc m_GSGetShaderFunc;

        public virtual void IAGetPrimitiveTopology(
            out D3D_PRIMITIVE_TOPOLOGY pTopology
        ){
            var fp = GetFunctionPointer(50);
            if(m_IAGetPrimitiveTopologyFunc==null) m_IAGetPrimitiveTopologyFunc = (IAGetPrimitiveTopologyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IAGetPrimitiveTopologyFunc));
            
            m_IAGetPrimitiveTopologyFunc(m_ptr, out pTopology);
        }
        delegate void IAGetPrimitiveTopologyFunc(IntPtr self, out D3D_PRIMITIVE_TOPOLOGY pTopology);
        IAGetPrimitiveTopologyFunc m_IAGetPrimitiveTopologyFunc;

        public virtual void VSGetShaderResources(
            uint StartSlot,
            uint NumViews,
            out ID3D10ShaderResourceView ppShaderResourceViews
        ){
            var fp = GetFunctionPointer(51);
            if(m_VSGetShaderResourcesFunc==null) m_VSGetShaderResourcesFunc = (VSGetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSGetShaderResourcesFunc));
            ppShaderResourceViews = new ID3D10ShaderResourceView();
            m_VSGetShaderResourcesFunc(m_ptr, StartSlot, NumViews, out ppShaderResourceViews.PtrForNew);
        }
        delegate void VSGetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, out IntPtr ppShaderResourceViews);
        VSGetShaderResourcesFunc m_VSGetShaderResourcesFunc;

        public virtual void VSGetSamplers(
            uint StartSlot,
            uint NumSamplers,
            out ID3D10SamplerState ppSamplers
        ){
            var fp = GetFunctionPointer(52);
            if(m_VSGetSamplersFunc==null) m_VSGetSamplersFunc = (VSGetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSGetSamplersFunc));
            ppSamplers = new ID3D10SamplerState();
            m_VSGetSamplersFunc(m_ptr, StartSlot, NumSamplers, out ppSamplers.PtrForNew);
        }
        delegate void VSGetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, out IntPtr ppSamplers);
        VSGetSamplersFunc m_VSGetSamplersFunc;

        public virtual void GetPredication(
            out ID3D10Predicate ppPredicate,
            out int pPredicateValue
        ){
            var fp = GetFunctionPointer(53);
            if(m_GetPredicationFunc==null) m_GetPredicationFunc = (GetPredicationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPredicationFunc));
            ppPredicate = new ID3D10Predicate();
            m_GetPredicationFunc(m_ptr, out ppPredicate.PtrForNew, out pPredicateValue);
        }
        delegate void GetPredicationFunc(IntPtr self, out IntPtr ppPredicate, out int pPredicateValue);
        GetPredicationFunc m_GetPredicationFunc;

        public virtual void GSGetShaderResources(
            uint StartSlot,
            uint NumViews,
            out ID3D10ShaderResourceView ppShaderResourceViews
        ){
            var fp = GetFunctionPointer(54);
            if(m_GSGetShaderResourcesFunc==null) m_GSGetShaderResourcesFunc = (GSGetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSGetShaderResourcesFunc));
            ppShaderResourceViews = new ID3D10ShaderResourceView();
            m_GSGetShaderResourcesFunc(m_ptr, StartSlot, NumViews, out ppShaderResourceViews.PtrForNew);
        }
        delegate void GSGetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, out IntPtr ppShaderResourceViews);
        GSGetShaderResourcesFunc m_GSGetShaderResourcesFunc;

        public virtual void GSGetSamplers(
            uint StartSlot,
            uint NumSamplers,
            out ID3D10SamplerState ppSamplers
        ){
            var fp = GetFunctionPointer(55);
            if(m_GSGetSamplersFunc==null) m_GSGetSamplersFunc = (GSGetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSGetSamplersFunc));
            ppSamplers = new ID3D10SamplerState();
            m_GSGetSamplersFunc(m_ptr, StartSlot, NumSamplers, out ppSamplers.PtrForNew);
        }
        delegate void GSGetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, out IntPtr ppSamplers);
        GSGetSamplersFunc m_GSGetSamplersFunc;

        public virtual void OMGetRenderTargets(
            uint NumViews,
            out ID3D10RenderTargetView ppRenderTargetViews,
            out ID3D10DepthStencilView ppDepthStencilView
        ){
            var fp = GetFunctionPointer(56);
            if(m_OMGetRenderTargetsFunc==null) m_OMGetRenderTargetsFunc = (OMGetRenderTargetsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMGetRenderTargetsFunc));
            ppRenderTargetViews = new ID3D10RenderTargetView();ppDepthStencilView = new ID3D10DepthStencilView();
            m_OMGetRenderTargetsFunc(m_ptr, NumViews, out ppRenderTargetViews.PtrForNew, out ppDepthStencilView.PtrForNew);
        }
        delegate void OMGetRenderTargetsFunc(IntPtr self, uint NumViews, out IntPtr ppRenderTargetViews, out IntPtr ppDepthStencilView);
        OMGetRenderTargetsFunc m_OMGetRenderTargetsFunc;

        public virtual void OMGetBlendState(
            out ID3D10BlendState ppBlendState,
            ref float BlendFactor,
            out uint pSampleMask
        ){
            var fp = GetFunctionPointer(57);
            if(m_OMGetBlendStateFunc==null) m_OMGetBlendStateFunc = (OMGetBlendStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMGetBlendStateFunc));
            ppBlendState = new ID3D10BlendState();
            m_OMGetBlendStateFunc(m_ptr, out ppBlendState.PtrForNew, ref BlendFactor, out pSampleMask);
        }
        delegate void OMGetBlendStateFunc(IntPtr self, out IntPtr ppBlendState, ref float BlendFactor, out uint pSampleMask);
        OMGetBlendStateFunc m_OMGetBlendStateFunc;

        public virtual void OMGetDepthStencilState(
            out ID3D10DepthStencilState ppDepthStencilState,
            out uint pStencilRef
        ){
            var fp = GetFunctionPointer(58);
            if(m_OMGetDepthStencilStateFunc==null) m_OMGetDepthStencilStateFunc = (OMGetDepthStencilStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMGetDepthStencilStateFunc));
            ppDepthStencilState = new ID3D10DepthStencilState();
            m_OMGetDepthStencilStateFunc(m_ptr, out ppDepthStencilState.PtrForNew, out pStencilRef);
        }
        delegate void OMGetDepthStencilStateFunc(IntPtr self, out IntPtr ppDepthStencilState, out uint pStencilRef);
        OMGetDepthStencilStateFunc m_OMGetDepthStencilStateFunc;

        public virtual void SOGetTargets(
            uint NumBuffers,
            out ID3D10Buffer ppSOTargets,
            out uint pOffsets
        ){
            var fp = GetFunctionPointer(59);
            if(m_SOGetTargetsFunc==null) m_SOGetTargetsFunc = (SOGetTargetsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SOGetTargetsFunc));
            ppSOTargets = new ID3D10Buffer();
            m_SOGetTargetsFunc(m_ptr, NumBuffers, out ppSOTargets.PtrForNew, out pOffsets);
        }
        delegate void SOGetTargetsFunc(IntPtr self, uint NumBuffers, out IntPtr ppSOTargets, out uint pOffsets);
        SOGetTargetsFunc m_SOGetTargetsFunc;

        public virtual void RSGetState(
            out ID3D10RasterizerState ppRasterizerState
        ){
            var fp = GetFunctionPointer(60);
            if(m_RSGetStateFunc==null) m_RSGetStateFunc = (RSGetStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RSGetStateFunc));
            ppRasterizerState = new ID3D10RasterizerState();
            m_RSGetStateFunc(m_ptr, out ppRasterizerState.PtrForNew);
        }
        delegate void RSGetStateFunc(IntPtr self, out IntPtr ppRasterizerState);
        RSGetStateFunc m_RSGetStateFunc;

        public virtual void RSGetViewports(
            out uint NumViewports,
            out D3D10_VIEWPORT pViewports
        ){
            var fp = GetFunctionPointer(61);
            if(m_RSGetViewportsFunc==null) m_RSGetViewportsFunc = (RSGetViewportsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RSGetViewportsFunc));
            
            m_RSGetViewportsFunc(m_ptr, out NumViewports, out pViewports);
        }
        delegate void RSGetViewportsFunc(IntPtr self, out uint NumViewports, out D3D10_VIEWPORT pViewports);
        RSGetViewportsFunc m_RSGetViewportsFunc;

        public virtual void RSGetScissorRects(
            out uint NumRects,
            out tagRECT pRects
        ){
            var fp = GetFunctionPointer(62);
            if(m_RSGetScissorRectsFunc==null) m_RSGetScissorRectsFunc = (RSGetScissorRectsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RSGetScissorRectsFunc));
            
            m_RSGetScissorRectsFunc(m_ptr, out NumRects, out pRects);
        }
        delegate void RSGetScissorRectsFunc(IntPtr self, out uint NumRects, out tagRECT pRects);
        RSGetScissorRectsFunc m_RSGetScissorRectsFunc;

        public virtual int GetDeviceRemovedReason(
        ){
            var fp = GetFunctionPointer(63);
            if(m_GetDeviceRemovedReasonFunc==null) m_GetDeviceRemovedReasonFunc = (GetDeviceRemovedReasonFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDeviceRemovedReasonFunc));
            
            return m_GetDeviceRemovedReasonFunc(m_ptr);
        }
        delegate int GetDeviceRemovedReasonFunc(IntPtr self);
        GetDeviceRemovedReasonFunc m_GetDeviceRemovedReasonFunc;

        public virtual int SetExceptionMode(
            uint RaiseFlags
        ){
            var fp = GetFunctionPointer(64);
            if(m_SetExceptionModeFunc==null) m_SetExceptionModeFunc = (SetExceptionModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetExceptionModeFunc));
            
            return m_SetExceptionModeFunc(m_ptr, RaiseFlags);
        }
        delegate int SetExceptionModeFunc(IntPtr self, uint RaiseFlags);
        SetExceptionModeFunc m_SetExceptionModeFunc;

        public virtual uint GetExceptionMode(
        ){
            var fp = GetFunctionPointer(65);
            if(m_GetExceptionModeFunc==null) m_GetExceptionModeFunc = (GetExceptionModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetExceptionModeFunc));
            
            return m_GetExceptionModeFunc(m_ptr);
        }
        delegate uint GetExceptionModeFunc(IntPtr self);
        GetExceptionModeFunc m_GetExceptionModeFunc;

        public virtual int GetPrivateData(
            ref Guid guid,
            out uint pDataSize,
            IntPtr pData
        ){
            var fp = GetFunctionPointer(66);
            if(m_GetPrivateDataFunc==null) m_GetPrivateDataFunc = (GetPrivateDataFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPrivateDataFunc));
            
            return m_GetPrivateDataFunc(m_ptr, ref guid, out pDataSize, pData);
        }
        delegate int GetPrivateDataFunc(IntPtr self, ref Guid guid, out uint pDataSize, IntPtr pData);
        GetPrivateDataFunc m_GetPrivateDataFunc;

        public virtual int SetPrivateData(
            ref Guid guid,
            uint DataSize,
            IntPtr pData
        ){
            var fp = GetFunctionPointer(67);
            if(m_SetPrivateDataFunc==null) m_SetPrivateDataFunc = (SetPrivateDataFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetPrivateDataFunc));
            
            return m_SetPrivateDataFunc(m_ptr, ref guid, DataSize, pData);
        }
        delegate int SetPrivateDataFunc(IntPtr self, ref Guid guid, uint DataSize, IntPtr pData);
        SetPrivateDataFunc m_SetPrivateDataFunc;

        public virtual int SetPrivateDataInterface(
            ref Guid guid,
            IUnknown pData
        ){
            var fp = GetFunctionPointer(68);
            if(m_SetPrivateDataInterfaceFunc==null) m_SetPrivateDataInterfaceFunc = (SetPrivateDataInterfaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetPrivateDataInterfaceFunc));
            
            return m_SetPrivateDataInterfaceFunc(m_ptr, ref guid, pData!=null ? pData.Ptr : IntPtr.Zero);
        }
        delegate int SetPrivateDataInterfaceFunc(IntPtr self, ref Guid guid, IntPtr pData);
        SetPrivateDataInterfaceFunc m_SetPrivateDataInterfaceFunc;

        public virtual void ClearState(
        ){
            var fp = GetFunctionPointer(69);
            if(m_ClearStateFunc==null) m_ClearStateFunc = (ClearStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ClearStateFunc));
            
            m_ClearStateFunc(m_ptr);
        }
        delegate void ClearStateFunc(IntPtr self);
        ClearStateFunc m_ClearStateFunc;

        public virtual void Flush(
        ){
            var fp = GetFunctionPointer(70);
            if(m_FlushFunc==null) m_FlushFunc = (FlushFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FlushFunc));
            
            m_FlushFunc(m_ptr);
        }
        delegate void FlushFunc(IntPtr self);
        FlushFunc m_FlushFunc;

        public virtual int CreateBuffer(
            ref D3D10_BUFFER_DESC pDesc,
            ref D3D10_SUBRESOURCE_DATA pInitialData,
            out ID3D10Buffer ppBuffer
        ){
            var fp = GetFunctionPointer(71);
            if(m_CreateBufferFunc==null) m_CreateBufferFunc = (CreateBufferFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateBufferFunc));
            ppBuffer = new ID3D10Buffer();
            return m_CreateBufferFunc(m_ptr, ref pDesc, ref pInitialData, out ppBuffer.PtrForNew);
        }
        delegate int CreateBufferFunc(IntPtr self, ref D3D10_BUFFER_DESC pDesc, ref D3D10_SUBRESOURCE_DATA pInitialData, out IntPtr ppBuffer);
        CreateBufferFunc m_CreateBufferFunc;

        public virtual int CreateTexture1D(
            ref D3D10_TEXTURE1D_DESC pDesc,
            ref D3D10_SUBRESOURCE_DATA pInitialData,
            out ID3D10Texture1D ppTexture1D
        ){
            var fp = GetFunctionPointer(72);
            if(m_CreateTexture1DFunc==null) m_CreateTexture1DFunc = (CreateTexture1DFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateTexture1DFunc));
            ppTexture1D = new ID3D10Texture1D();
            return m_CreateTexture1DFunc(m_ptr, ref pDesc, ref pInitialData, out ppTexture1D.PtrForNew);
        }
        delegate int CreateTexture1DFunc(IntPtr self, ref D3D10_TEXTURE1D_DESC pDesc, ref D3D10_SUBRESOURCE_DATA pInitialData, out IntPtr ppTexture1D);
        CreateTexture1DFunc m_CreateTexture1DFunc;

        public virtual int CreateTexture2D(
            ref D3D10_TEXTURE2D_DESC pDesc,
            ref D3D10_SUBRESOURCE_DATA pInitialData,
            out ID3D10Texture2D ppTexture2D
        ){
            var fp = GetFunctionPointer(73);
            if(m_CreateTexture2DFunc==null) m_CreateTexture2DFunc = (CreateTexture2DFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateTexture2DFunc));
            ppTexture2D = new ID3D10Texture2D();
            return m_CreateTexture2DFunc(m_ptr, ref pDesc, ref pInitialData, out ppTexture2D.PtrForNew);
        }
        delegate int CreateTexture2DFunc(IntPtr self, ref D3D10_TEXTURE2D_DESC pDesc, ref D3D10_SUBRESOURCE_DATA pInitialData, out IntPtr ppTexture2D);
        CreateTexture2DFunc m_CreateTexture2DFunc;

        public virtual int CreateTexture3D(
            ref D3D10_TEXTURE3D_DESC pDesc,
            ref D3D10_SUBRESOURCE_DATA pInitialData,
            out ID3D10Texture3D ppTexture3D
        ){
            var fp = GetFunctionPointer(74);
            if(m_CreateTexture3DFunc==null) m_CreateTexture3DFunc = (CreateTexture3DFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateTexture3DFunc));
            ppTexture3D = new ID3D10Texture3D();
            return m_CreateTexture3DFunc(m_ptr, ref pDesc, ref pInitialData, out ppTexture3D.PtrForNew);
        }
        delegate int CreateTexture3DFunc(IntPtr self, ref D3D10_TEXTURE3D_DESC pDesc, ref D3D10_SUBRESOURCE_DATA pInitialData, out IntPtr ppTexture3D);
        CreateTexture3DFunc m_CreateTexture3DFunc;

        public virtual int CreateShaderResourceView(
            ID3D10Resource pResource,
            ref D3D10_SHADER_RESOURCE_VIEW_DESC pDesc,
            out ID3D10ShaderResourceView ppSRView
        ){
            var fp = GetFunctionPointer(75);
            if(m_CreateShaderResourceViewFunc==null) m_CreateShaderResourceViewFunc = (CreateShaderResourceViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateShaderResourceViewFunc));
            ppSRView = new ID3D10ShaderResourceView();
            return m_CreateShaderResourceViewFunc(m_ptr, pResource!=null ? pResource.Ptr : IntPtr.Zero, ref pDesc, out ppSRView.PtrForNew);
        }
        delegate int CreateShaderResourceViewFunc(IntPtr self, IntPtr pResource, ref D3D10_SHADER_RESOURCE_VIEW_DESC pDesc, out IntPtr ppSRView);
        CreateShaderResourceViewFunc m_CreateShaderResourceViewFunc;

        public virtual int CreateRenderTargetView(
            ID3D10Resource pResource,
            ref D3D10_RENDER_TARGET_VIEW_DESC pDesc,
            out ID3D10RenderTargetView ppRTView
        ){
            var fp = GetFunctionPointer(76);
            if(m_CreateRenderTargetViewFunc==null) m_CreateRenderTargetViewFunc = (CreateRenderTargetViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateRenderTargetViewFunc));
            ppRTView = new ID3D10RenderTargetView();
            return m_CreateRenderTargetViewFunc(m_ptr, pResource!=null ? pResource.Ptr : IntPtr.Zero, ref pDesc, out ppRTView.PtrForNew);
        }
        delegate int CreateRenderTargetViewFunc(IntPtr self, IntPtr pResource, ref D3D10_RENDER_TARGET_VIEW_DESC pDesc, out IntPtr ppRTView);
        CreateRenderTargetViewFunc m_CreateRenderTargetViewFunc;

        public virtual int CreateDepthStencilView(
            ID3D10Resource pResource,
            ref D3D10_DEPTH_STENCIL_VIEW_DESC pDesc,
            out ID3D10DepthStencilView ppDepthStencilView
        ){
            var fp = GetFunctionPointer(77);
            if(m_CreateDepthStencilViewFunc==null) m_CreateDepthStencilViewFunc = (CreateDepthStencilViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateDepthStencilViewFunc));
            ppDepthStencilView = new ID3D10DepthStencilView();
            return m_CreateDepthStencilViewFunc(m_ptr, pResource!=null ? pResource.Ptr : IntPtr.Zero, ref pDesc, out ppDepthStencilView.PtrForNew);
        }
        delegate int CreateDepthStencilViewFunc(IntPtr self, IntPtr pResource, ref D3D10_DEPTH_STENCIL_VIEW_DESC pDesc, out IntPtr ppDepthStencilView);
        CreateDepthStencilViewFunc m_CreateDepthStencilViewFunc;

        public virtual int CreateInputLayout(
            ref D3D10_INPUT_ELEMENT_DESC pInputElementDescs,
            uint NumElements,
            IntPtr pShaderBytecodeWithInputSignature,
            ulong BytecodeLength,
            out ID3D10InputLayout ppInputLayout
        ){
            var fp = GetFunctionPointer(78);
            if(m_CreateInputLayoutFunc==null) m_CreateInputLayoutFunc = (CreateInputLayoutFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateInputLayoutFunc));
            ppInputLayout = new ID3D10InputLayout();
            return m_CreateInputLayoutFunc(m_ptr, ref pInputElementDescs, NumElements, pShaderBytecodeWithInputSignature, BytecodeLength, out ppInputLayout.PtrForNew);
        }
        delegate int CreateInputLayoutFunc(IntPtr self, ref D3D10_INPUT_ELEMENT_DESC pInputElementDescs, uint NumElements, IntPtr pShaderBytecodeWithInputSignature, ulong BytecodeLength, out IntPtr ppInputLayout);
        CreateInputLayoutFunc m_CreateInputLayoutFunc;

        public virtual int CreateVertexShader(
            IntPtr pShaderBytecode,
            ulong BytecodeLength,
            out ID3D10VertexShader ppVertexShader
        ){
            var fp = GetFunctionPointer(79);
            if(m_CreateVertexShaderFunc==null) m_CreateVertexShaderFunc = (CreateVertexShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateVertexShaderFunc));
            ppVertexShader = new ID3D10VertexShader();
            return m_CreateVertexShaderFunc(m_ptr, pShaderBytecode, BytecodeLength, out ppVertexShader.PtrForNew);
        }
        delegate int CreateVertexShaderFunc(IntPtr self, IntPtr pShaderBytecode, ulong BytecodeLength, out IntPtr ppVertexShader);
        CreateVertexShaderFunc m_CreateVertexShaderFunc;

        public virtual int CreateGeometryShader(
            IntPtr pShaderBytecode,
            ulong BytecodeLength,
            out ID3D10GeometryShader ppGeometryShader
        ){
            var fp = GetFunctionPointer(80);
            if(m_CreateGeometryShaderFunc==null) m_CreateGeometryShaderFunc = (CreateGeometryShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateGeometryShaderFunc));
            ppGeometryShader = new ID3D10GeometryShader();
            return m_CreateGeometryShaderFunc(m_ptr, pShaderBytecode, BytecodeLength, out ppGeometryShader.PtrForNew);
        }
        delegate int CreateGeometryShaderFunc(IntPtr self, IntPtr pShaderBytecode, ulong BytecodeLength, out IntPtr ppGeometryShader);
        CreateGeometryShaderFunc m_CreateGeometryShaderFunc;

        public virtual int CreateGeometryShaderWithStreamOutput(
            IntPtr pShaderBytecode,
            ulong BytecodeLength,
            ref D3D10_SO_DECLARATION_ENTRY pSODeclaration,
            uint NumEntries,
            uint OutputStreamStride,
            out ID3D10GeometryShader ppGeometryShader
        ){
            var fp = GetFunctionPointer(81);
            if(m_CreateGeometryShaderWithStreamOutputFunc==null) m_CreateGeometryShaderWithStreamOutputFunc = (CreateGeometryShaderWithStreamOutputFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateGeometryShaderWithStreamOutputFunc));
            ppGeometryShader = new ID3D10GeometryShader();
            return m_CreateGeometryShaderWithStreamOutputFunc(m_ptr, pShaderBytecode, BytecodeLength, ref pSODeclaration, NumEntries, OutputStreamStride, out ppGeometryShader.PtrForNew);
        }
        delegate int CreateGeometryShaderWithStreamOutputFunc(IntPtr self, IntPtr pShaderBytecode, ulong BytecodeLength, ref D3D10_SO_DECLARATION_ENTRY pSODeclaration, uint NumEntries, uint OutputStreamStride, out IntPtr ppGeometryShader);
        CreateGeometryShaderWithStreamOutputFunc m_CreateGeometryShaderWithStreamOutputFunc;

        public virtual int CreatePixelShader(
            IntPtr pShaderBytecode,
            ulong BytecodeLength,
            out ID3D10PixelShader ppPixelShader
        ){
            var fp = GetFunctionPointer(82);
            if(m_CreatePixelShaderFunc==null) m_CreatePixelShaderFunc = (CreatePixelShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreatePixelShaderFunc));
            ppPixelShader = new ID3D10PixelShader();
            return m_CreatePixelShaderFunc(m_ptr, pShaderBytecode, BytecodeLength, out ppPixelShader.PtrForNew);
        }
        delegate int CreatePixelShaderFunc(IntPtr self, IntPtr pShaderBytecode, ulong BytecodeLength, out IntPtr ppPixelShader);
        CreatePixelShaderFunc m_CreatePixelShaderFunc;

        public virtual int CreateBlendState(
            ref D3D10_BLEND_DESC pBlendStateDesc,
            out ID3D10BlendState ppBlendState
        ){
            var fp = GetFunctionPointer(83);
            if(m_CreateBlendStateFunc==null) m_CreateBlendStateFunc = (CreateBlendStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateBlendStateFunc));
            ppBlendState = new ID3D10BlendState();
            return m_CreateBlendStateFunc(m_ptr, ref pBlendStateDesc, out ppBlendState.PtrForNew);
        }
        delegate int CreateBlendStateFunc(IntPtr self, ref D3D10_BLEND_DESC pBlendStateDesc, out IntPtr ppBlendState);
        CreateBlendStateFunc m_CreateBlendStateFunc;

        public virtual int CreateDepthStencilState(
            ref D3D10_DEPTH_STENCIL_DESC pDepthStencilDesc,
            out ID3D10DepthStencilState ppDepthStencilState
        ){
            var fp = GetFunctionPointer(84);
            if(m_CreateDepthStencilStateFunc==null) m_CreateDepthStencilStateFunc = (CreateDepthStencilStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateDepthStencilStateFunc));
            ppDepthStencilState = new ID3D10DepthStencilState();
            return m_CreateDepthStencilStateFunc(m_ptr, ref pDepthStencilDesc, out ppDepthStencilState.PtrForNew);
        }
        delegate int CreateDepthStencilStateFunc(IntPtr self, ref D3D10_DEPTH_STENCIL_DESC pDepthStencilDesc, out IntPtr ppDepthStencilState);
        CreateDepthStencilStateFunc m_CreateDepthStencilStateFunc;

        public virtual int CreateRasterizerState(
            ref D3D10_RASTERIZER_DESC pRasterizerDesc,
            out ID3D10RasterizerState ppRasterizerState
        ){
            var fp = GetFunctionPointer(85);
            if(m_CreateRasterizerStateFunc==null) m_CreateRasterizerStateFunc = (CreateRasterizerStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateRasterizerStateFunc));
            ppRasterizerState = new ID3D10RasterizerState();
            return m_CreateRasterizerStateFunc(m_ptr, ref pRasterizerDesc, out ppRasterizerState.PtrForNew);
        }
        delegate int CreateRasterizerStateFunc(IntPtr self, ref D3D10_RASTERIZER_DESC pRasterizerDesc, out IntPtr ppRasterizerState);
        CreateRasterizerStateFunc m_CreateRasterizerStateFunc;

        public virtual int CreateSamplerState(
            ref D3D10_SAMPLER_DESC pSamplerDesc,
            out ID3D10SamplerState ppSamplerState
        ){
            var fp = GetFunctionPointer(86);
            if(m_CreateSamplerStateFunc==null) m_CreateSamplerStateFunc = (CreateSamplerStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateSamplerStateFunc));
            ppSamplerState = new ID3D10SamplerState();
            return m_CreateSamplerStateFunc(m_ptr, ref pSamplerDesc, out ppSamplerState.PtrForNew);
        }
        delegate int CreateSamplerStateFunc(IntPtr self, ref D3D10_SAMPLER_DESC pSamplerDesc, out IntPtr ppSamplerState);
        CreateSamplerStateFunc m_CreateSamplerStateFunc;

        public virtual int CreateQuery(
            ref D3D10_QUERY_DESC pQueryDesc,
            out ID3D10Query ppQuery
        ){
            var fp = GetFunctionPointer(87);
            if(m_CreateQueryFunc==null) m_CreateQueryFunc = (CreateQueryFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateQueryFunc));
            ppQuery = new ID3D10Query();
            return m_CreateQueryFunc(m_ptr, ref pQueryDesc, out ppQuery.PtrForNew);
        }
        delegate int CreateQueryFunc(IntPtr self, ref D3D10_QUERY_DESC pQueryDesc, out IntPtr ppQuery);
        CreateQueryFunc m_CreateQueryFunc;

        public virtual int CreatePredicate(
            ref D3D10_QUERY_DESC pPredicateDesc,
            out ID3D10Predicate ppPredicate
        ){
            var fp = GetFunctionPointer(88);
            if(m_CreatePredicateFunc==null) m_CreatePredicateFunc = (CreatePredicateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreatePredicateFunc));
            ppPredicate = new ID3D10Predicate();
            return m_CreatePredicateFunc(m_ptr, ref pPredicateDesc, out ppPredicate.PtrForNew);
        }
        delegate int CreatePredicateFunc(IntPtr self, ref D3D10_QUERY_DESC pPredicateDesc, out IntPtr ppPredicate);
        CreatePredicateFunc m_CreatePredicateFunc;

        public virtual int CreateCounter(
            ref D3D10_COUNTER_DESC pCounterDesc,
            out ID3D10Counter ppCounter
        ){
            var fp = GetFunctionPointer(89);
            if(m_CreateCounterFunc==null) m_CreateCounterFunc = (CreateCounterFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateCounterFunc));
            ppCounter = new ID3D10Counter();
            return m_CreateCounterFunc(m_ptr, ref pCounterDesc, out ppCounter.PtrForNew);
        }
        delegate int CreateCounterFunc(IntPtr self, ref D3D10_COUNTER_DESC pCounterDesc, out IntPtr ppCounter);
        CreateCounterFunc m_CreateCounterFunc;

        public virtual int CheckFormatSupport(
            DXGI_FORMAT Format,
            out uint pFormatSupport
        ){
            var fp = GetFunctionPointer(90);
            if(m_CheckFormatSupportFunc==null) m_CheckFormatSupportFunc = (CheckFormatSupportFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CheckFormatSupportFunc));
            
            return m_CheckFormatSupportFunc(m_ptr, Format, out pFormatSupport);
        }
        delegate int CheckFormatSupportFunc(IntPtr self, DXGI_FORMAT Format, out uint pFormatSupport);
        CheckFormatSupportFunc m_CheckFormatSupportFunc;

        public virtual int CheckMultisampleQualityLevels(
            DXGI_FORMAT Format,
            uint SampleCount,
            out uint pNumQualityLevels
        ){
            var fp = GetFunctionPointer(91);
            if(m_CheckMultisampleQualityLevelsFunc==null) m_CheckMultisampleQualityLevelsFunc = (CheckMultisampleQualityLevelsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CheckMultisampleQualityLevelsFunc));
            
            return m_CheckMultisampleQualityLevelsFunc(m_ptr, Format, SampleCount, out pNumQualityLevels);
        }
        delegate int CheckMultisampleQualityLevelsFunc(IntPtr self, DXGI_FORMAT Format, uint SampleCount, out uint pNumQualityLevels);
        CheckMultisampleQualityLevelsFunc m_CheckMultisampleQualityLevelsFunc;

        public virtual void CheckCounterInfo(
            out D3D10_COUNTER_INFO pCounterInfo
        ){
            var fp = GetFunctionPointer(92);
            if(m_CheckCounterInfoFunc==null) m_CheckCounterInfoFunc = (CheckCounterInfoFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CheckCounterInfoFunc));
            
            m_CheckCounterInfoFunc(m_ptr, out pCounterInfo);
        }
        delegate void CheckCounterInfoFunc(IntPtr self, out D3D10_COUNTER_INFO pCounterInfo);
        CheckCounterInfoFunc m_CheckCounterInfoFunc;

        public virtual int CheckCounter(
            ref D3D10_COUNTER_DESC pDesc,
            out D3D10_COUNTER_TYPE pType,
            out uint pActiveCounters,
            out sbyte szName,
            out uint pNameLength,
            out sbyte szUnits,
            out uint pUnitsLength,
            out sbyte szDescription,
            out uint pDescriptionLength
        ){
            var fp = GetFunctionPointer(93);
            if(m_CheckCounterFunc==null) m_CheckCounterFunc = (CheckCounterFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CheckCounterFunc));
            
            return m_CheckCounterFunc(m_ptr, ref pDesc, out pType, out pActiveCounters, out szName, out pNameLength, out szUnits, out pUnitsLength, out szDescription, out pDescriptionLength);
        }
        delegate int CheckCounterFunc(IntPtr self, ref D3D10_COUNTER_DESC pDesc, out D3D10_COUNTER_TYPE pType, out uint pActiveCounters, out sbyte szName, out uint pNameLength, out sbyte szUnits, out uint pUnitsLength, out sbyte szDescription, out uint pDescriptionLength);
        CheckCounterFunc m_CheckCounterFunc;

        public virtual uint GetCreationFlags(
        ){
            var fp = GetFunctionPointer(94);
            if(m_GetCreationFlagsFunc==null) m_GetCreationFlagsFunc = (GetCreationFlagsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetCreationFlagsFunc));
            
            return m_GetCreationFlagsFunc(m_ptr);
        }
        delegate uint GetCreationFlagsFunc(IntPtr self);
        GetCreationFlagsFunc m_GetCreationFlagsFunc;

        public virtual int OpenSharedResource(
            IntPtr hResource,
            ref Guid ReturnedInterface,
            out IntPtr ppResource
        ){
            var fp = GetFunctionPointer(95);
            if(m_OpenSharedResourceFunc==null) m_OpenSharedResourceFunc = (OpenSharedResourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OpenSharedResourceFunc));
            
            return m_OpenSharedResourceFunc(m_ptr, hResource, ref ReturnedInterface, out ppResource);
        }
        delegate int OpenSharedResourceFunc(IntPtr self, IntPtr hResource, ref Guid ReturnedInterface, out IntPtr ppResource);
        OpenSharedResourceFunc m_OpenSharedResourceFunc;

        public virtual void SetTextFilterSize(
            uint Width,
            uint Height
        ){
            var fp = GetFunctionPointer(96);
            if(m_SetTextFilterSizeFunc==null) m_SetTextFilterSizeFunc = (SetTextFilterSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetTextFilterSizeFunc));
            
            m_SetTextFilterSizeFunc(m_ptr, Width, Height);
        }
        delegate void SetTextFilterSizeFunc(IntPtr self, uint Width, uint Height);
        SetTextFilterSizeFunc m_SetTextFilterSizeFunc;

        public virtual void GetTextFilterSize(
            out uint pWidth,
            out uint pHeight
        ){
            var fp = GetFunctionPointer(97);
            if(m_GetTextFilterSizeFunc==null) m_GetTextFilterSizeFunc = (GetTextFilterSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTextFilterSizeFunc));
            
            m_GetTextFilterSizeFunc(m_ptr, out pWidth, out pHeight);
        }
        delegate void GetTextFilterSizeFunc(IntPtr self, out uint pWidth, out uint pHeight);
        GetTextFilterSizeFunc m_GetTextFilterSizeFunc;

    }
}
