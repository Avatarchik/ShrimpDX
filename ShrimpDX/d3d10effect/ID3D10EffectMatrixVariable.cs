// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class ID3D10EffectMatrixVariable: ID3D10EffectVariable
    {
        static Guid s_uuid = new Guid("50666c24-b82f-4eed-a172-5b6e7e8522e0");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int SetMatrix(
            out float pData
        ){
            var fp = GetFunctionPointer(25);
            if(m_SetMatrixFunc==null) m_SetMatrixFunc = (SetMatrixFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetMatrixFunc));
            
            return m_SetMatrixFunc(m_ptr, out pData);
        }
        delegate int SetMatrixFunc(IntPtr self, out float pData);
        SetMatrixFunc m_SetMatrixFunc;

        public virtual int GetMatrix(
            out float pData
        ){
            var fp = GetFunctionPointer(26);
            if(m_GetMatrixFunc==null) m_GetMatrixFunc = (GetMatrixFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMatrixFunc));
            
            return m_GetMatrixFunc(m_ptr, out pData);
        }
        delegate int GetMatrixFunc(IntPtr self, out float pData);
        GetMatrixFunc m_GetMatrixFunc;

        public virtual int SetMatrixArray(
            out float pData,
            uint Offset,
            uint Count
        ){
            var fp = GetFunctionPointer(27);
            if(m_SetMatrixArrayFunc==null) m_SetMatrixArrayFunc = (SetMatrixArrayFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetMatrixArrayFunc));
            
            return m_SetMatrixArrayFunc(m_ptr, out pData, Offset, Count);
        }
        delegate int SetMatrixArrayFunc(IntPtr self, out float pData, uint Offset, uint Count);
        SetMatrixArrayFunc m_SetMatrixArrayFunc;

        public virtual int GetMatrixArray(
            out float pData,
            uint Offset,
            uint Count
        ){
            var fp = GetFunctionPointer(28);
            if(m_GetMatrixArrayFunc==null) m_GetMatrixArrayFunc = (GetMatrixArrayFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMatrixArrayFunc));
            
            return m_GetMatrixArrayFunc(m_ptr, out pData, Offset, Count);
        }
        delegate int GetMatrixArrayFunc(IntPtr self, out float pData, uint Offset, uint Count);
        GetMatrixArrayFunc m_GetMatrixArrayFunc;

        public virtual int SetMatrixTranspose(
            out float pData
        ){
            var fp = GetFunctionPointer(29);
            if(m_SetMatrixTransposeFunc==null) m_SetMatrixTransposeFunc = (SetMatrixTransposeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetMatrixTransposeFunc));
            
            return m_SetMatrixTransposeFunc(m_ptr, out pData);
        }
        delegate int SetMatrixTransposeFunc(IntPtr self, out float pData);
        SetMatrixTransposeFunc m_SetMatrixTransposeFunc;

        public virtual int GetMatrixTranspose(
            out float pData
        ){
            var fp = GetFunctionPointer(30);
            if(m_GetMatrixTransposeFunc==null) m_GetMatrixTransposeFunc = (GetMatrixTransposeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMatrixTransposeFunc));
            
            return m_GetMatrixTransposeFunc(m_ptr, out pData);
        }
        delegate int GetMatrixTransposeFunc(IntPtr self, out float pData);
        GetMatrixTransposeFunc m_GetMatrixTransposeFunc;

        public virtual int SetMatrixTransposeArray(
            out float pData,
            uint Offset,
            uint Count
        ){
            var fp = GetFunctionPointer(31);
            if(m_SetMatrixTransposeArrayFunc==null) m_SetMatrixTransposeArrayFunc = (SetMatrixTransposeArrayFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetMatrixTransposeArrayFunc));
            
            return m_SetMatrixTransposeArrayFunc(m_ptr, out pData, Offset, Count);
        }
        delegate int SetMatrixTransposeArrayFunc(IntPtr self, out float pData, uint Offset, uint Count);
        SetMatrixTransposeArrayFunc m_SetMatrixTransposeArrayFunc;

        public virtual int GetMatrixTransposeArray(
            out float pData,
            uint Offset,
            uint Count
        ){
            var fp = GetFunctionPointer(32);
            if(m_GetMatrixTransposeArrayFunc==null) m_GetMatrixTransposeArrayFunc = (GetMatrixTransposeArrayFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMatrixTransposeArrayFunc));
            
            return m_GetMatrixTransposeArrayFunc(m_ptr, out pData, Offset, Count);
        }
        delegate int GetMatrixTransposeArrayFunc(IntPtr self, out float pData, uint Offset, uint Count);
        GetMatrixTransposeArrayFunc m_GetMatrixTransposeArrayFunc;

    }
}
