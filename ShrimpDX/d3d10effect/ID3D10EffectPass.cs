// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class ID3D10EffectPass: ComPtr
    {
        static Guid s_uuid = new Guid("5cfbeb89-1a06-46e0-b282-e3f9bfa36a54");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int IsValid(
        ){
            var fp = GetFunctionPointer(0);
            if(m_IsValidFunc==null) m_IsValidFunc = (IsValidFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsValidFunc));
            
            return m_IsValidFunc(m_ptr);
        }
        delegate int IsValidFunc(IntPtr self);
        IsValidFunc m_IsValidFunc;

        public virtual int GetDesc(
            out _D3D10_PASS_DESC pDesc
        ){
            var fp = GetFunctionPointer(1);
            if(m_GetDescFunc==null) m_GetDescFunc = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            return m_GetDescFunc(m_ptr, out pDesc);
        }
        delegate int GetDescFunc(IntPtr self, out _D3D10_PASS_DESC pDesc);
        GetDescFunc m_GetDescFunc;

        public virtual int GetVertexShaderDesc(
            out _D3D10_PASS_SHADER_DESC pDesc
        ){
            var fp = GetFunctionPointer(2);
            if(m_GetVertexShaderDescFunc==null) m_GetVertexShaderDescFunc = (GetVertexShaderDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetVertexShaderDescFunc));
            
            return m_GetVertexShaderDescFunc(m_ptr, out pDesc);
        }
        delegate int GetVertexShaderDescFunc(IntPtr self, out _D3D10_PASS_SHADER_DESC pDesc);
        GetVertexShaderDescFunc m_GetVertexShaderDescFunc;

        public virtual int GetGeometryShaderDesc(
            out _D3D10_PASS_SHADER_DESC pDesc
        ){
            var fp = GetFunctionPointer(3);
            if(m_GetGeometryShaderDescFunc==null) m_GetGeometryShaderDescFunc = (GetGeometryShaderDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetGeometryShaderDescFunc));
            
            return m_GetGeometryShaderDescFunc(m_ptr, out pDesc);
        }
        delegate int GetGeometryShaderDescFunc(IntPtr self, out _D3D10_PASS_SHADER_DESC pDesc);
        GetGeometryShaderDescFunc m_GetGeometryShaderDescFunc;

        public virtual int GetPixelShaderDesc(
            out _D3D10_PASS_SHADER_DESC pDesc
        ){
            var fp = GetFunctionPointer(4);
            if(m_GetPixelShaderDescFunc==null) m_GetPixelShaderDescFunc = (GetPixelShaderDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPixelShaderDescFunc));
            
            return m_GetPixelShaderDescFunc(m_ptr, out pDesc);
        }
        delegate int GetPixelShaderDescFunc(IntPtr self, out _D3D10_PASS_SHADER_DESC pDesc);
        GetPixelShaderDescFunc m_GetPixelShaderDescFunc;

        public virtual ID3D10EffectVariable GetAnnotationByIndex(
            uint Index
        ){
            var fp = GetFunctionPointer(5);
            if(m_GetAnnotationByIndexFunc==null) m_GetAnnotationByIndexFunc = (GetAnnotationByIndexFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetAnnotationByIndexFunc));
            
            return m_GetAnnotationByIndexFunc(m_ptr, Index);
        }
        delegate ID3D10EffectVariable GetAnnotationByIndexFunc(IntPtr self, uint Index);
        GetAnnotationByIndexFunc m_GetAnnotationByIndexFunc;

        public virtual ID3D10EffectVariable GetAnnotationByName(
            string Name
        ){
            var fp = GetFunctionPointer(6);
            if(m_GetAnnotationByNameFunc==null) m_GetAnnotationByNameFunc = (GetAnnotationByNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetAnnotationByNameFunc));
            
            return m_GetAnnotationByNameFunc(m_ptr, Name);
        }
        delegate ID3D10EffectVariable GetAnnotationByNameFunc(IntPtr self, string Name);
        GetAnnotationByNameFunc m_GetAnnotationByNameFunc;

        public virtual int Apply(
            uint Flags
        ){
            var fp = GetFunctionPointer(7);
            if(m_ApplyFunc==null) m_ApplyFunc = (ApplyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ApplyFunc));
            
            return m_ApplyFunc(m_ptr, Flags);
        }
        delegate int ApplyFunc(IntPtr self, uint Flags);
        ApplyFunc m_ApplyFunc;

        public virtual int ComputeStateBlockMask(
            out _D3D10_STATE_BLOCK_MASK pStateBlockMask
        ){
            var fp = GetFunctionPointer(8);
            if(m_ComputeStateBlockMaskFunc==null) m_ComputeStateBlockMaskFunc = (ComputeStateBlockMaskFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ComputeStateBlockMaskFunc));
            
            return m_ComputeStateBlockMaskFunc(m_ptr, out pStateBlockMask);
        }
        delegate int ComputeStateBlockMaskFunc(IntPtr self, out _D3D10_STATE_BLOCK_MASK pStateBlockMask);
        ComputeStateBlockMaskFunc m_ComputeStateBlockMaskFunc;

    }
}
