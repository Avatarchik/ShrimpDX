// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class ID3D10Effect: IUnknown
    {
        static Guid s_uuid = new Guid("51b0ca8b-ec0b-4519-870d-8ee1cb5017c7");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int IsValid(
        ){
            var fp = GetFunctionPointer(3);
            if(m_IsValidFunc==null) m_IsValidFunc = (IsValidFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsValidFunc));
            
            return m_IsValidFunc(m_ptr);
        }
        delegate int IsValidFunc(IntPtr self);
        IsValidFunc m_IsValidFunc;

        public virtual int IsPool(
        ){
            var fp = GetFunctionPointer(4);
            if(m_IsPoolFunc==null) m_IsPoolFunc = (IsPoolFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsPoolFunc));
            
            return m_IsPoolFunc(m_ptr);
        }
        delegate int IsPoolFunc(IntPtr self);
        IsPoolFunc m_IsPoolFunc;

        public virtual int GetDevice(
            out ID3D10Device ppDevice
        ){
            var fp = GetFunctionPointer(5);
            if(m_GetDeviceFunc==null) m_GetDeviceFunc = (GetDeviceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDeviceFunc));
            ppDevice = new ID3D10Device();
            return m_GetDeviceFunc(m_ptr, out ppDevice.PtrForNew);
        }
        delegate int GetDeviceFunc(IntPtr self, out IntPtr ppDevice);
        GetDeviceFunc m_GetDeviceFunc;

        public virtual int GetDesc(
            out _D3D10_EFFECT_DESC pDesc
        ){
            var fp = GetFunctionPointer(6);
            if(m_GetDescFunc==null) m_GetDescFunc = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            return m_GetDescFunc(m_ptr, out pDesc);
        }
        delegate int GetDescFunc(IntPtr self, out _D3D10_EFFECT_DESC pDesc);
        GetDescFunc m_GetDescFunc;

        public virtual ID3D10EffectConstantBuffer GetConstantBufferByIndex(
            uint Index
        ){
            var fp = GetFunctionPointer(7);
            if(m_GetConstantBufferByIndexFunc==null) m_GetConstantBufferByIndexFunc = (GetConstantBufferByIndexFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetConstantBufferByIndexFunc));
            
            return m_GetConstantBufferByIndexFunc(m_ptr, Index);
        }
        delegate ID3D10EffectConstantBuffer GetConstantBufferByIndexFunc(IntPtr self, uint Index);
        GetConstantBufferByIndexFunc m_GetConstantBufferByIndexFunc;

        public virtual ID3D10EffectConstantBuffer GetConstantBufferByName(
            string Name
        ){
            var fp = GetFunctionPointer(8);
            if(m_GetConstantBufferByNameFunc==null) m_GetConstantBufferByNameFunc = (GetConstantBufferByNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetConstantBufferByNameFunc));
            
            return m_GetConstantBufferByNameFunc(m_ptr, Name);
        }
        delegate ID3D10EffectConstantBuffer GetConstantBufferByNameFunc(IntPtr self, string Name);
        GetConstantBufferByNameFunc m_GetConstantBufferByNameFunc;

        public virtual ID3D10EffectVariable GetVariableByIndex(
            uint Index
        ){
            var fp = GetFunctionPointer(9);
            if(m_GetVariableByIndexFunc==null) m_GetVariableByIndexFunc = (GetVariableByIndexFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetVariableByIndexFunc));
            
            return m_GetVariableByIndexFunc(m_ptr, Index);
        }
        delegate ID3D10EffectVariable GetVariableByIndexFunc(IntPtr self, uint Index);
        GetVariableByIndexFunc m_GetVariableByIndexFunc;

        public virtual ID3D10EffectVariable GetVariableByName(
            string Name
        ){
            var fp = GetFunctionPointer(10);
            if(m_GetVariableByNameFunc==null) m_GetVariableByNameFunc = (GetVariableByNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetVariableByNameFunc));
            
            return m_GetVariableByNameFunc(m_ptr, Name);
        }
        delegate ID3D10EffectVariable GetVariableByNameFunc(IntPtr self, string Name);
        GetVariableByNameFunc m_GetVariableByNameFunc;

        public virtual ID3D10EffectVariable GetVariableBySemantic(
            string Semantic
        ){
            var fp = GetFunctionPointer(11);
            if(m_GetVariableBySemanticFunc==null) m_GetVariableBySemanticFunc = (GetVariableBySemanticFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetVariableBySemanticFunc));
            
            return m_GetVariableBySemanticFunc(m_ptr, Semantic);
        }
        delegate ID3D10EffectVariable GetVariableBySemanticFunc(IntPtr self, string Semantic);
        GetVariableBySemanticFunc m_GetVariableBySemanticFunc;

        public virtual ID3D10EffectTechnique GetTechniqueByIndex(
            uint Index
        ){
            var fp = GetFunctionPointer(12);
            if(m_GetTechniqueByIndexFunc==null) m_GetTechniqueByIndexFunc = (GetTechniqueByIndexFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTechniqueByIndexFunc));
            
            return m_GetTechniqueByIndexFunc(m_ptr, Index);
        }
        delegate ID3D10EffectTechnique GetTechniqueByIndexFunc(IntPtr self, uint Index);
        GetTechniqueByIndexFunc m_GetTechniqueByIndexFunc;

        public virtual ID3D10EffectTechnique GetTechniqueByName(
            string Name
        ){
            var fp = GetFunctionPointer(13);
            if(m_GetTechniqueByNameFunc==null) m_GetTechniqueByNameFunc = (GetTechniqueByNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTechniqueByNameFunc));
            
            return m_GetTechniqueByNameFunc(m_ptr, Name);
        }
        delegate ID3D10EffectTechnique GetTechniqueByNameFunc(IntPtr self, string Name);
        GetTechniqueByNameFunc m_GetTechniqueByNameFunc;

        public virtual int Optimize(
        ){
            var fp = GetFunctionPointer(14);
            if(m_OptimizeFunc==null) m_OptimizeFunc = (OptimizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OptimizeFunc));
            
            return m_OptimizeFunc(m_ptr);
        }
        delegate int OptimizeFunc(IntPtr self);
        OptimizeFunc m_OptimizeFunc;

        public virtual int IsOptimized(
        ){
            var fp = GetFunctionPointer(15);
            if(m_IsOptimizedFunc==null) m_IsOptimizedFunc = (IsOptimizedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsOptimizedFunc));
            
            return m_IsOptimizedFunc(m_ptr);
        }
        delegate int IsOptimizedFunc(IntPtr self);
        IsOptimizedFunc m_IsOptimizedFunc;

    }
}
