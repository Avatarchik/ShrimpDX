// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class IDXGIOutput1: IDXGIOutput
    {
        static Guid s_uuid = new Guid("00cddea8-939b-4b83-a340-a685226666cc");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int GetDisplayModeList1(
            DXGI_FORMAT EnumFormat,
            uint Flags,
            out uint pNumModes,
            out DXGI_MODE_DESC1 pDesc
        ){
            var fp = GetFunctionPointer(19);
            if(m_GetDisplayModeList1Func==null) m_GetDisplayModeList1Func = (GetDisplayModeList1Func)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDisplayModeList1Func));
            
            return m_GetDisplayModeList1Func(m_ptr, EnumFormat, Flags, out pNumModes, out pDesc);
        }
        delegate int GetDisplayModeList1Func(IntPtr self, DXGI_FORMAT EnumFormat, uint Flags, out uint pNumModes, out DXGI_MODE_DESC1 pDesc);
        GetDisplayModeList1Func m_GetDisplayModeList1Func;

        public virtual int FindClosestMatchingMode1(
            ref DXGI_MODE_DESC1 pModeToMatch,
            out DXGI_MODE_DESC1 pClosestMatch,
            IUnknown pConcernedDevice
        ){
            var fp = GetFunctionPointer(20);
            if(m_FindClosestMatchingMode1Func==null) m_FindClosestMatchingMode1Func = (FindClosestMatchingMode1Func)Marshal.GetDelegateForFunctionPointer(fp, typeof(FindClosestMatchingMode1Func));
            
            return m_FindClosestMatchingMode1Func(m_ptr, ref pModeToMatch, out pClosestMatch, pConcernedDevice!=null ? pConcernedDevice.Ptr : IntPtr.Zero);
        }
        delegate int FindClosestMatchingMode1Func(IntPtr self, ref DXGI_MODE_DESC1 pModeToMatch, out DXGI_MODE_DESC1 pClosestMatch, IntPtr pConcernedDevice);
        FindClosestMatchingMode1Func m_FindClosestMatchingMode1Func;

        public virtual int GetDisplaySurfaceData1(
            IDXGIResource pDestination
        ){
            var fp = GetFunctionPointer(21);
            if(m_GetDisplaySurfaceData1Func==null) m_GetDisplaySurfaceData1Func = (GetDisplaySurfaceData1Func)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDisplaySurfaceData1Func));
            
            return m_GetDisplaySurfaceData1Func(m_ptr, pDestination!=null ? pDestination.Ptr : IntPtr.Zero);
        }
        delegate int GetDisplaySurfaceData1Func(IntPtr self, IntPtr pDestination);
        GetDisplaySurfaceData1Func m_GetDisplaySurfaceData1Func;

        public virtual int DuplicateOutput(
            IUnknown pDevice,
            out IDXGIOutputDuplication ppOutputDuplication
        ){
            var fp = GetFunctionPointer(22);
            if(m_DuplicateOutputFunc==null) m_DuplicateOutputFunc = (DuplicateOutputFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DuplicateOutputFunc));
            ppOutputDuplication = new IDXGIOutputDuplication();
            return m_DuplicateOutputFunc(m_ptr, pDevice!=null ? pDevice.Ptr : IntPtr.Zero, out ppOutputDuplication.PtrForNew);
        }
        delegate int DuplicateOutputFunc(IntPtr self, IntPtr pDevice, out IntPtr ppOutputDuplication);
        DuplicateOutputFunc m_DuplicateOutputFunc;

    }
}
