// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class IDXGIOutputDuplication: IDXGIObject
    {
        static Guid s_uuid = new Guid("191cfac3-a341-470d-b26e-a864f428319c");
        public static new ref Guid IID =>ref s_uuid;
        public override ref Guid GetIID(){ return ref s_uuid; }
                
        public virtual void GetDesc(
            out DXGI_OUTDUPL_DESC pDesc
        ){
            var fp = GetFunctionPointer(7);
            if(m_GetDescFunc==null) m_GetDescFunc = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            m_GetDescFunc(m_ptr, out pDesc);
        }
        delegate void GetDescFunc(IntPtr self, out DXGI_OUTDUPL_DESC pDesc);
        GetDescFunc m_GetDescFunc;

        public virtual int AcquireNextFrame(
            uint TimeoutInMilliseconds,
            out DXGI_OUTDUPL_FRAME_INFO pFrameInfo,
            out IDXGIResource ppDesktopResource
        ){
            var fp = GetFunctionPointer(8);
            if(m_AcquireNextFrameFunc==null) m_AcquireNextFrameFunc = (AcquireNextFrameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AcquireNextFrameFunc));
            ppDesktopResource = new IDXGIResource();
            return m_AcquireNextFrameFunc(m_ptr, TimeoutInMilliseconds, out pFrameInfo, out ppDesktopResource.PtrForNew);
        }
        delegate int AcquireNextFrameFunc(IntPtr self, uint TimeoutInMilliseconds, out DXGI_OUTDUPL_FRAME_INFO pFrameInfo, out IntPtr ppDesktopResource);
        AcquireNextFrameFunc m_AcquireNextFrameFunc;

        public virtual int GetFrameDirtyRects(
            uint DirtyRectsBufferSize,
            out tagRECT pDirtyRectsBuffer,
            out uint pDirtyRectsBufferSizeRequired
        ){
            var fp = GetFunctionPointer(9);
            if(m_GetFrameDirtyRectsFunc==null) m_GetFrameDirtyRectsFunc = (GetFrameDirtyRectsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFrameDirtyRectsFunc));
            
            return m_GetFrameDirtyRectsFunc(m_ptr, DirtyRectsBufferSize, out pDirtyRectsBuffer, out pDirtyRectsBufferSizeRequired);
        }
        delegate int GetFrameDirtyRectsFunc(IntPtr self, uint DirtyRectsBufferSize, out tagRECT pDirtyRectsBuffer, out uint pDirtyRectsBufferSizeRequired);
        GetFrameDirtyRectsFunc m_GetFrameDirtyRectsFunc;

        public virtual int GetFrameMoveRects(
            uint MoveRectsBufferSize,
            out DXGI_OUTDUPL_MOVE_RECT pMoveRectBuffer,
            out uint pMoveRectsBufferSizeRequired
        ){
            var fp = GetFunctionPointer(10);
            if(m_GetFrameMoveRectsFunc==null) m_GetFrameMoveRectsFunc = (GetFrameMoveRectsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFrameMoveRectsFunc));
            
            return m_GetFrameMoveRectsFunc(m_ptr, MoveRectsBufferSize, out pMoveRectBuffer, out pMoveRectsBufferSizeRequired);
        }
        delegate int GetFrameMoveRectsFunc(IntPtr self, uint MoveRectsBufferSize, out DXGI_OUTDUPL_MOVE_RECT pMoveRectBuffer, out uint pMoveRectsBufferSizeRequired);
        GetFrameMoveRectsFunc m_GetFrameMoveRectsFunc;

        public virtual int GetFramePointerShape(
            uint PointerShapeBufferSize,
            IntPtr pPointerShapeBuffer,
            out uint pPointerShapeBufferSizeRequired,
            out DXGI_OUTDUPL_POINTER_SHAPE_INFO pPointerShapeInfo
        ){
            var fp = GetFunctionPointer(11);
            if(m_GetFramePointerShapeFunc==null) m_GetFramePointerShapeFunc = (GetFramePointerShapeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFramePointerShapeFunc));
            
            return m_GetFramePointerShapeFunc(m_ptr, PointerShapeBufferSize, pPointerShapeBuffer, out pPointerShapeBufferSizeRequired, out pPointerShapeInfo);
        }
        delegate int GetFramePointerShapeFunc(IntPtr self, uint PointerShapeBufferSize, IntPtr pPointerShapeBuffer, out uint pPointerShapeBufferSizeRequired, out DXGI_OUTDUPL_POINTER_SHAPE_INFO pPointerShapeInfo);
        GetFramePointerShapeFunc m_GetFramePointerShapeFunc;

        public virtual int MapDesktopSurface(
            out DXGI_MAPPED_RECT pLockedRect
        ){
            var fp = GetFunctionPointer(12);
            if(m_MapDesktopSurfaceFunc==null) m_MapDesktopSurfaceFunc = (MapDesktopSurfaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(MapDesktopSurfaceFunc));
            
            return m_MapDesktopSurfaceFunc(m_ptr, out pLockedRect);
        }
        delegate int MapDesktopSurfaceFunc(IntPtr self, out DXGI_MAPPED_RECT pLockedRect);
        MapDesktopSurfaceFunc m_MapDesktopSurfaceFunc;

        public virtual int UnMapDesktopSurface(
        ){
            var fp = GetFunctionPointer(13);
            if(m_UnMapDesktopSurfaceFunc==null) m_UnMapDesktopSurfaceFunc = (UnMapDesktopSurfaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(UnMapDesktopSurfaceFunc));
            
            return m_UnMapDesktopSurfaceFunc(m_ptr);
        }
        delegate int UnMapDesktopSurfaceFunc(IntPtr self);
        UnMapDesktopSurfaceFunc m_UnMapDesktopSurfaceFunc;

        public virtual int ReleaseFrame(
        ){
            var fp = GetFunctionPointer(14);
            if(m_ReleaseFrameFunc==null) m_ReleaseFrameFunc = (ReleaseFrameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ReleaseFrameFunc));
            
            return m_ReleaseFrameFunc(m_ptr);
        }
        delegate int ReleaseFrameFunc(IntPtr self);
        ReleaseFrameFunc m_ReleaseFrameFunc;

    }
}
