// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class ITypeLib: IUnknown
    {
        static Guid s_uuid = new Guid("00020402-0000-0000-c000-000000000046");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual uint GetTypeInfoCount(
        ){
            var fp = GetFunctionPointer(3);
            if(m_GetTypeInfoCountFunc==null) m_GetTypeInfoCountFunc = (GetTypeInfoCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypeInfoCountFunc));
            
            return m_GetTypeInfoCountFunc(m_ptr);
        }
        delegate uint GetTypeInfoCountFunc(IntPtr self);
        GetTypeInfoCountFunc m_GetTypeInfoCountFunc;

        public virtual int GetTypeInfo(
            uint index,
            out ITypeInfo ppTInfo
        ){
            var fp = GetFunctionPointer(4);
            if(m_GetTypeInfoFunc==null) m_GetTypeInfoFunc = (GetTypeInfoFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypeInfoFunc));
            ppTInfo = new ITypeInfo();
            return m_GetTypeInfoFunc(m_ptr, index, out ppTInfo.PtrForNew);
        }
        delegate int GetTypeInfoFunc(IntPtr self, uint index, out IntPtr ppTInfo);
        GetTypeInfoFunc m_GetTypeInfoFunc;

        public virtual int GetTypeInfoType(
            uint index,
            out tagTYPEKIND pTKind
        ){
            var fp = GetFunctionPointer(5);
            if(m_GetTypeInfoTypeFunc==null) m_GetTypeInfoTypeFunc = (GetTypeInfoTypeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypeInfoTypeFunc));
            
            return m_GetTypeInfoTypeFunc(m_ptr, index, out pTKind);
        }
        delegate int GetTypeInfoTypeFunc(IntPtr self, uint index, out tagTYPEKIND pTKind);
        GetTypeInfoTypeFunc m_GetTypeInfoTypeFunc;

        public virtual int GetTypeInfoOfGuid(
            ref Guid guid,
            out ITypeInfo ppTinfo
        ){
            var fp = GetFunctionPointer(6);
            if(m_GetTypeInfoOfGuidFunc==null) m_GetTypeInfoOfGuidFunc = (GetTypeInfoOfGuidFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypeInfoOfGuidFunc));
            ppTinfo = new ITypeInfo();
            return m_GetTypeInfoOfGuidFunc(m_ptr, ref guid, out ppTinfo.PtrForNew);
        }
        delegate int GetTypeInfoOfGuidFunc(IntPtr self, ref Guid guid, out IntPtr ppTinfo);
        GetTypeInfoOfGuidFunc m_GetTypeInfoOfGuidFunc;

        public virtual int GetLibAttr(
            out IntPtr ppTLibAttr
        ){
            var fp = GetFunctionPointer(7);
            if(m_GetLibAttrFunc==null) m_GetLibAttrFunc = (GetLibAttrFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetLibAttrFunc));
            
            return m_GetLibAttrFunc(m_ptr, out ppTLibAttr);
        }
        delegate int GetLibAttrFunc(IntPtr self, out IntPtr ppTLibAttr);
        GetLibAttrFunc m_GetLibAttrFunc;

        public virtual int GetTypeComp(
            out ITypeComp ppTComp
        ){
            var fp = GetFunctionPointer(8);
            if(m_GetTypeCompFunc==null) m_GetTypeCompFunc = (GetTypeCompFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypeCompFunc));
            ppTComp = new ITypeComp();
            return m_GetTypeCompFunc(m_ptr, out ppTComp.PtrForNew);
        }
        delegate int GetTypeCompFunc(IntPtr self, out IntPtr ppTComp);
        GetTypeCompFunc m_GetTypeCompFunc;

        public virtual int GetDocumentation(
            int index,
            out IntPtr pBstrName,
            out IntPtr pBstrDocString,
            out uint pdwHelpContext,
            out IntPtr pBstrHelpFile
        ){
            var fp = GetFunctionPointer(9);
            if(m_GetDocumentationFunc==null) m_GetDocumentationFunc = (GetDocumentationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDocumentationFunc));
            
            return m_GetDocumentationFunc(m_ptr, index, out pBstrName, out pBstrDocString, out pdwHelpContext, out pBstrHelpFile);
        }
        delegate int GetDocumentationFunc(IntPtr self, int index, out IntPtr pBstrName, out IntPtr pBstrDocString, out uint pdwHelpContext, out IntPtr pBstrHelpFile);
        GetDocumentationFunc m_GetDocumentationFunc;

        public virtual int IsName(
            out ushort szNameBuf,
            uint lHashVal,
            out int pfName
        ){
            var fp = GetFunctionPointer(10);
            if(m_IsNameFunc==null) m_IsNameFunc = (IsNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsNameFunc));
            
            return m_IsNameFunc(m_ptr, out szNameBuf, lHashVal, out pfName);
        }
        delegate int IsNameFunc(IntPtr self, out ushort szNameBuf, uint lHashVal, out int pfName);
        IsNameFunc m_IsNameFunc;

        public virtual int FindName(
            out ushort szNameBuf,
            uint lHashVal,
            out ITypeInfo ppTInfo,
            out int rgMemId,
            out ushort pcFound
        ){
            var fp = GetFunctionPointer(11);
            if(m_FindNameFunc==null) m_FindNameFunc = (FindNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FindNameFunc));
            ppTInfo = new ITypeInfo();
            return m_FindNameFunc(m_ptr, out szNameBuf, lHashVal, out ppTInfo.PtrForNew, out rgMemId, out pcFound);
        }
        delegate int FindNameFunc(IntPtr self, out ushort szNameBuf, uint lHashVal, out IntPtr ppTInfo, out int rgMemId, out ushort pcFound);
        FindNameFunc m_FindNameFunc;

        public virtual void ReleaseTLibAttr(
            out tagTLIBATTR pTLibAttr
        ){
            var fp = GetFunctionPointer(12);
            if(m_ReleaseTLibAttrFunc==null) m_ReleaseTLibAttrFunc = (ReleaseTLibAttrFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ReleaseTLibAttrFunc));
            
            m_ReleaseTLibAttrFunc(m_ptr, out pTLibAttr);
        }
        delegate void ReleaseTLibAttrFunc(IntPtr self, out tagTLIBATTR pTLibAttr);
        ReleaseTLibAttrFunc m_ReleaseTLibAttrFunc;

    }
}
