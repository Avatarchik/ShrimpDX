// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class ITypeInfo: IUnknown
    {
        static Guid s_uuid = new Guid("00020401-0000-0000-c000-000000000046");
        public static new ref Guid IID =>ref s_uuid;
        public override ref Guid GetIID(){ return ref s_uuid; }
                
        public virtual int GetTypeAttr(
            out IntPtr ppTypeAttr
        ){
            var fp = GetFunctionPointer(3);
            if(m_GetTypeAttrFunc==null) m_GetTypeAttrFunc = (GetTypeAttrFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypeAttrFunc));
            
            return m_GetTypeAttrFunc(m_ptr, out ppTypeAttr);
        }
        delegate int GetTypeAttrFunc(IntPtr self, out IntPtr ppTypeAttr);
        GetTypeAttrFunc m_GetTypeAttrFunc;

        public virtual int GetTypeComp(
            out ITypeComp ppTComp
        ){
            var fp = GetFunctionPointer(4);
            if(m_GetTypeCompFunc==null) m_GetTypeCompFunc = (GetTypeCompFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypeCompFunc));
            ppTComp = new ITypeComp();
            return m_GetTypeCompFunc(m_ptr, out ppTComp.PtrForNew);
        }
        delegate int GetTypeCompFunc(IntPtr self, out IntPtr ppTComp);
        GetTypeCompFunc m_GetTypeCompFunc;

        public virtual int GetFuncDesc(
            uint index,
            out IntPtr ppFuncDesc
        ){
            var fp = GetFunctionPointer(5);
            if(m_GetFuncDescFunc==null) m_GetFuncDescFunc = (GetFuncDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFuncDescFunc));
            
            return m_GetFuncDescFunc(m_ptr, index, out ppFuncDesc);
        }
        delegate int GetFuncDescFunc(IntPtr self, uint index, out IntPtr ppFuncDesc);
        GetFuncDescFunc m_GetFuncDescFunc;

        public virtual int GetVarDesc(
            uint index,
            out IntPtr ppVarDesc
        ){
            var fp = GetFunctionPointer(6);
            if(m_GetVarDescFunc==null) m_GetVarDescFunc = (GetVarDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetVarDescFunc));
            
            return m_GetVarDescFunc(m_ptr, index, out ppVarDesc);
        }
        delegate int GetVarDescFunc(IntPtr self, uint index, out IntPtr ppVarDesc);
        GetVarDescFunc m_GetVarDescFunc;

        public virtual int GetNames(
            int memid,
            out IntPtr rgBstrNames,
            uint cMaxNames,
            out uint pcNames
        ){
            var fp = GetFunctionPointer(7);
            if(m_GetNamesFunc==null) m_GetNamesFunc = (GetNamesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetNamesFunc));
            
            return m_GetNamesFunc(m_ptr, memid, out rgBstrNames, cMaxNames, out pcNames);
        }
        delegate int GetNamesFunc(IntPtr self, int memid, out IntPtr rgBstrNames, uint cMaxNames, out uint pcNames);
        GetNamesFunc m_GetNamesFunc;

        public virtual int GetRefTypeOfImplType(
            uint index,
            out uint pRefType
        ){
            var fp = GetFunctionPointer(8);
            if(m_GetRefTypeOfImplTypeFunc==null) m_GetRefTypeOfImplTypeFunc = (GetRefTypeOfImplTypeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetRefTypeOfImplTypeFunc));
            
            return m_GetRefTypeOfImplTypeFunc(m_ptr, index, out pRefType);
        }
        delegate int GetRefTypeOfImplTypeFunc(IntPtr self, uint index, out uint pRefType);
        GetRefTypeOfImplTypeFunc m_GetRefTypeOfImplTypeFunc;

        public virtual int GetImplTypeFlags(
            uint index,
            out int pImplTypeFlags
        ){
            var fp = GetFunctionPointer(9);
            if(m_GetImplTypeFlagsFunc==null) m_GetImplTypeFlagsFunc = (GetImplTypeFlagsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetImplTypeFlagsFunc));
            
            return m_GetImplTypeFlagsFunc(m_ptr, index, out pImplTypeFlags);
        }
        delegate int GetImplTypeFlagsFunc(IntPtr self, uint index, out int pImplTypeFlags);
        GetImplTypeFlagsFunc m_GetImplTypeFlagsFunc;

        public virtual int GetIDsOfNames(
            out IntPtr rgszNames,
            uint cNames,
            out int pMemId
        ){
            var fp = GetFunctionPointer(10);
            if(m_GetIDsOfNamesFunc==null) m_GetIDsOfNamesFunc = (GetIDsOfNamesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetIDsOfNamesFunc));
            
            return m_GetIDsOfNamesFunc(m_ptr, out rgszNames, cNames, out pMemId);
        }
        delegate int GetIDsOfNamesFunc(IntPtr self, out IntPtr rgszNames, uint cNames, out int pMemId);
        GetIDsOfNamesFunc m_GetIDsOfNamesFunc;

        public virtual int Invoke(
            IntPtr pvInstance,
            int memid,
            ushort wFlags,
            out tagDISPPARAMS pDispParams,
            out tagVARIANT pVarResult,
            out tagEXCEPINFO pExcepInfo,
            out uint puArgErr
        ){
            var fp = GetFunctionPointer(11);
            if(m_InvokeFunc==null) m_InvokeFunc = (InvokeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(InvokeFunc));
            
            return m_InvokeFunc(m_ptr, pvInstance, memid, wFlags, out pDispParams, out pVarResult, out pExcepInfo, out puArgErr);
        }
        delegate int InvokeFunc(IntPtr self, IntPtr pvInstance, int memid, ushort wFlags, out tagDISPPARAMS pDispParams, out tagVARIANT pVarResult, out tagEXCEPINFO pExcepInfo, out uint puArgErr);
        InvokeFunc m_InvokeFunc;

        public virtual int GetDocumentation(
            int memid,
            out IntPtr pBstrName,
            out IntPtr pBstrDocString,
            out uint pdwHelpContext,
            out IntPtr pBstrHelpFile
        ){
            var fp = GetFunctionPointer(12);
            if(m_GetDocumentationFunc==null) m_GetDocumentationFunc = (GetDocumentationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDocumentationFunc));
            
            return m_GetDocumentationFunc(m_ptr, memid, out pBstrName, out pBstrDocString, out pdwHelpContext, out pBstrHelpFile);
        }
        delegate int GetDocumentationFunc(IntPtr self, int memid, out IntPtr pBstrName, out IntPtr pBstrDocString, out uint pdwHelpContext, out IntPtr pBstrHelpFile);
        GetDocumentationFunc m_GetDocumentationFunc;

        public virtual int GetDllEntry(
            int memid,
            tagINVOKEKIND invKind,
            out IntPtr pBstrDllName,
            out IntPtr pBstrName,
            out ushort pwOrdinal
        ){
            var fp = GetFunctionPointer(13);
            if(m_GetDllEntryFunc==null) m_GetDllEntryFunc = (GetDllEntryFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDllEntryFunc));
            
            return m_GetDllEntryFunc(m_ptr, memid, invKind, out pBstrDllName, out pBstrName, out pwOrdinal);
        }
        delegate int GetDllEntryFunc(IntPtr self, int memid, tagINVOKEKIND invKind, out IntPtr pBstrDllName, out IntPtr pBstrName, out ushort pwOrdinal);
        GetDllEntryFunc m_GetDllEntryFunc;

        public virtual int GetRefTypeInfo(
            uint hRefType,
            out ITypeInfo ppTInfo
        ){
            var fp = GetFunctionPointer(14);
            if(m_GetRefTypeInfoFunc==null) m_GetRefTypeInfoFunc = (GetRefTypeInfoFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetRefTypeInfoFunc));
            ppTInfo = new ITypeInfo();
            return m_GetRefTypeInfoFunc(m_ptr, hRefType, out ppTInfo.PtrForNew);
        }
        delegate int GetRefTypeInfoFunc(IntPtr self, uint hRefType, out IntPtr ppTInfo);
        GetRefTypeInfoFunc m_GetRefTypeInfoFunc;

        public virtual int AddressOfMember(
            int memid,
            tagINVOKEKIND invKind,
            out IntPtr ppv
        ){
            var fp = GetFunctionPointer(15);
            if(m_AddressOfMemberFunc==null) m_AddressOfMemberFunc = (AddressOfMemberFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AddressOfMemberFunc));
            
            return m_AddressOfMemberFunc(m_ptr, memid, invKind, out ppv);
        }
        delegate int AddressOfMemberFunc(IntPtr self, int memid, tagINVOKEKIND invKind, out IntPtr ppv);
        AddressOfMemberFunc m_AddressOfMemberFunc;

        public virtual int CreateInstance(
            IUnknown pUnkOuter,
            ref Guid riid,
            out IntPtr ppvObj
        ){
            var fp = GetFunctionPointer(16);
            if(m_CreateInstanceFunc==null) m_CreateInstanceFunc = (CreateInstanceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateInstanceFunc));
            
            return m_CreateInstanceFunc(m_ptr, pUnkOuter!=null ? pUnkOuter.Ptr : IntPtr.Zero, ref riid, out ppvObj);
        }
        delegate int CreateInstanceFunc(IntPtr self, IntPtr pUnkOuter, ref Guid riid, out IntPtr ppvObj);
        CreateInstanceFunc m_CreateInstanceFunc;

        public virtual int GetMops(
            int memid,
            out IntPtr pBstrMops
        ){
            var fp = GetFunctionPointer(17);
            if(m_GetMopsFunc==null) m_GetMopsFunc = (GetMopsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMopsFunc));
            
            return m_GetMopsFunc(m_ptr, memid, out pBstrMops);
        }
        delegate int GetMopsFunc(IntPtr self, int memid, out IntPtr pBstrMops);
        GetMopsFunc m_GetMopsFunc;

        public virtual int GetContainingTypeLib(
            out ITypeLib ppTLib,
            out uint pIndex
        ){
            var fp = GetFunctionPointer(18);
            if(m_GetContainingTypeLibFunc==null) m_GetContainingTypeLibFunc = (GetContainingTypeLibFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetContainingTypeLibFunc));
            ppTLib = new ITypeLib();
            return m_GetContainingTypeLibFunc(m_ptr, out ppTLib.PtrForNew, out pIndex);
        }
        delegate int GetContainingTypeLibFunc(IntPtr self, out IntPtr ppTLib, out uint pIndex);
        GetContainingTypeLibFunc m_GetContainingTypeLibFunc;

        public virtual void ReleaseTypeAttr(
            out tagTYPEATTR pTypeAttr
        ){
            var fp = GetFunctionPointer(19);
            if(m_ReleaseTypeAttrFunc==null) m_ReleaseTypeAttrFunc = (ReleaseTypeAttrFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ReleaseTypeAttrFunc));
            
            m_ReleaseTypeAttrFunc(m_ptr, out pTypeAttr);
        }
        delegate void ReleaseTypeAttrFunc(IntPtr self, out tagTYPEATTR pTypeAttr);
        ReleaseTypeAttrFunc m_ReleaseTypeAttrFunc;

        public virtual void ReleaseFuncDesc(
            out tagFUNCDESC pFuncDesc
        ){
            var fp = GetFunctionPointer(20);
            if(m_ReleaseFuncDescFunc==null) m_ReleaseFuncDescFunc = (ReleaseFuncDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ReleaseFuncDescFunc));
            
            m_ReleaseFuncDescFunc(m_ptr, out pFuncDesc);
        }
        delegate void ReleaseFuncDescFunc(IntPtr self, out tagFUNCDESC pFuncDesc);
        ReleaseFuncDescFunc m_ReleaseFuncDescFunc;

        public virtual void ReleaseVarDesc(
            out tagVARDESC pVarDesc
        ){
            var fp = GetFunctionPointer(21);
            if(m_ReleaseVarDescFunc==null) m_ReleaseVarDescFunc = (ReleaseVarDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ReleaseVarDescFunc));
            
            m_ReleaseVarDescFunc(m_ptr, out pVarDesc);
        }
        delegate void ReleaseVarDescFunc(IntPtr self, out tagVARDESC pVarDesc);
        ReleaseVarDescFunc m_ReleaseVarDescFunc;

    }
}
