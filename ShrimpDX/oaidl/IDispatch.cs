// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class IDispatch: IUnknown
    {
        static Guid s_uuid = new Guid("00020400-0000-0000-c000-000000000046");
        public static new ref Guid IID =>ref s_uuid;
        public override ref Guid GetIID(){ return ref s_uuid; }
                
        public virtual int GetTypeInfoCount(
            out uint pctinfo
        ){
            var fp = GetFunctionPointer(3);
            if(m_GetTypeInfoCountFunc==null) m_GetTypeInfoCountFunc = (GetTypeInfoCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypeInfoCountFunc));
            
            return m_GetTypeInfoCountFunc(m_ptr, out pctinfo);
        }
        delegate int GetTypeInfoCountFunc(IntPtr self, out uint pctinfo);
        GetTypeInfoCountFunc m_GetTypeInfoCountFunc;

        public virtual int GetTypeInfo(
            uint iTInfo,
            uint lcid,
            out ITypeInfo ppTInfo
        ){
            var fp = GetFunctionPointer(4);
            if(m_GetTypeInfoFunc==null) m_GetTypeInfoFunc = (GetTypeInfoFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypeInfoFunc));
            ppTInfo = new ITypeInfo();
            return m_GetTypeInfoFunc(m_ptr, iTInfo, lcid, out ppTInfo.PtrForNew);
        }
        delegate int GetTypeInfoFunc(IntPtr self, uint iTInfo, uint lcid, out IntPtr ppTInfo);
        GetTypeInfoFunc m_GetTypeInfoFunc;

        public virtual int GetIDsOfNames(
            ref Guid riid,
            out IntPtr rgszNames,
            uint cNames,
            uint lcid,
            out int rgDispId
        ){
            var fp = GetFunctionPointer(5);
            if(m_GetIDsOfNamesFunc==null) m_GetIDsOfNamesFunc = (GetIDsOfNamesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetIDsOfNamesFunc));
            
            return m_GetIDsOfNamesFunc(m_ptr, ref riid, out rgszNames, cNames, lcid, out rgDispId);
        }
        delegate int GetIDsOfNamesFunc(IntPtr self, ref Guid riid, out IntPtr rgszNames, uint cNames, uint lcid, out int rgDispId);
        GetIDsOfNamesFunc m_GetIDsOfNamesFunc;

        public virtual int Invoke(
            int dispIdMember,
            ref Guid riid,
            uint lcid,
            ushort wFlags,
            out tagDISPPARAMS pDispParams,
            out tagVARIANT pVarResult,
            out tagEXCEPINFO pExcepInfo,
            out uint puArgErr
        ){
            var fp = GetFunctionPointer(6);
            if(m_InvokeFunc==null) m_InvokeFunc = (InvokeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(InvokeFunc));
            
            return m_InvokeFunc(m_ptr, dispIdMember, ref riid, lcid, wFlags, out pDispParams, out pVarResult, out pExcepInfo, out puArgErr);
        }
        delegate int InvokeFunc(IntPtr self, int dispIdMember, ref Guid riid, uint lcid, ushort wFlags, out tagDISPPARAMS pDispParams, out tagVARIANT pVarResult, out tagEXCEPINFO pExcepInfo, out uint puArgErr);
        InvokeFunc m_InvokeFunc;

    }
}
