// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class ID2D1EffectContext: IUnknown
    {
        static Guid s_uuid = new Guid("3d9f916b-27dc-4ad7-b4f1-64945340f563");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual void GetDpi(
            out float dpiX,
            out float dpiY
        ){
            var fp = GetFunctionPointer(3);
            if(m_GetDpiFunc==null) m_GetDpiFunc = (GetDpiFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDpiFunc));
            
            m_GetDpiFunc(m_ptr, out dpiX, out dpiY);
        }
        delegate void GetDpiFunc(IntPtr self, out float dpiX, out float dpiY);
        GetDpiFunc m_GetDpiFunc;

        public virtual int CreateEffect(
            ref Guid effectId,
            out ID2D1Effect effect
        ){
            var fp = GetFunctionPointer(4);
            if(m_CreateEffectFunc==null) m_CreateEffectFunc = (CreateEffectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateEffectFunc));
            effect = new ID2D1Effect();
            return m_CreateEffectFunc(m_ptr, ref effectId, out effect.PtrForNew);
        }
        delegate int CreateEffectFunc(IntPtr self, ref Guid effectId, out IntPtr effect);
        CreateEffectFunc m_CreateEffectFunc;

        public virtual int GetMaximumSupportedFeatureLevel(
            ref D3D_FEATURE_LEVEL featureLevels,
            uint featureLevelsCount,
            out D3D_FEATURE_LEVEL maximumSupportedFeatureLevel
        ){
            var fp = GetFunctionPointer(5);
            if(m_GetMaximumSupportedFeatureLevelFunc==null) m_GetMaximumSupportedFeatureLevelFunc = (GetMaximumSupportedFeatureLevelFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMaximumSupportedFeatureLevelFunc));
            
            return m_GetMaximumSupportedFeatureLevelFunc(m_ptr, ref featureLevels, featureLevelsCount, out maximumSupportedFeatureLevel);
        }
        delegate int GetMaximumSupportedFeatureLevelFunc(IntPtr self, ref D3D_FEATURE_LEVEL featureLevels, uint featureLevelsCount, out D3D_FEATURE_LEVEL maximumSupportedFeatureLevel);
        GetMaximumSupportedFeatureLevelFunc m_GetMaximumSupportedFeatureLevelFunc;

        public virtual int CreateTransformNodeFromEffect(
            ID2D1Effect effect,
            out ID2D1TransformNode transformNode
        ){
            var fp = GetFunctionPointer(6);
            if(m_CreateTransformNodeFromEffectFunc==null) m_CreateTransformNodeFromEffectFunc = (CreateTransformNodeFromEffectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateTransformNodeFromEffectFunc));
            transformNode = new ID2D1TransformNode();
            return m_CreateTransformNodeFromEffectFunc(m_ptr, effect!=null ? effect.Ptr : IntPtr.Zero, out transformNode.PtrForNew);
        }
        delegate int CreateTransformNodeFromEffectFunc(IntPtr self, IntPtr effect, out IntPtr transformNode);
        CreateTransformNodeFromEffectFunc m_CreateTransformNodeFromEffectFunc;

        public virtual int CreateBlendTransform(
            uint numInputs,
            ref D2D1_BLEND_DESCRIPTION blendDescription,
            out ID2D1BlendTransform transform
        ){
            var fp = GetFunctionPointer(7);
            if(m_CreateBlendTransformFunc==null) m_CreateBlendTransformFunc = (CreateBlendTransformFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateBlendTransformFunc));
            transform = new ID2D1BlendTransform();
            return m_CreateBlendTransformFunc(m_ptr, numInputs, ref blendDescription, out transform.PtrForNew);
        }
        delegate int CreateBlendTransformFunc(IntPtr self, uint numInputs, ref D2D1_BLEND_DESCRIPTION blendDescription, out IntPtr transform);
        CreateBlendTransformFunc m_CreateBlendTransformFunc;

        public virtual int CreateBorderTransform(
            D2D1_EXTEND_MODE extendModeX,
            D2D1_EXTEND_MODE extendModeY,
            out ID2D1BorderTransform transform
        ){
            var fp = GetFunctionPointer(8);
            if(m_CreateBorderTransformFunc==null) m_CreateBorderTransformFunc = (CreateBorderTransformFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateBorderTransformFunc));
            transform = new ID2D1BorderTransform();
            return m_CreateBorderTransformFunc(m_ptr, extendModeX, extendModeY, out transform.PtrForNew);
        }
        delegate int CreateBorderTransformFunc(IntPtr self, D2D1_EXTEND_MODE extendModeX, D2D1_EXTEND_MODE extendModeY, out IntPtr transform);
        CreateBorderTransformFunc m_CreateBorderTransformFunc;

        public virtual int CreateOffsetTransform(
            tagPOINT offset,
            out ID2D1OffsetTransform transform
        ){
            var fp = GetFunctionPointer(9);
            if(m_CreateOffsetTransformFunc==null) m_CreateOffsetTransformFunc = (CreateOffsetTransformFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateOffsetTransformFunc));
            transform = new ID2D1OffsetTransform();
            return m_CreateOffsetTransformFunc(m_ptr, offset, out transform.PtrForNew);
        }
        delegate int CreateOffsetTransformFunc(IntPtr self, tagPOINT offset, out IntPtr transform);
        CreateOffsetTransformFunc m_CreateOffsetTransformFunc;

        public virtual int CreateBoundsAdjustmentTransform(
            ref tagRECT outputRectangle,
            out ID2D1BoundsAdjustmentTransform transform
        ){
            var fp = GetFunctionPointer(10);
            if(m_CreateBoundsAdjustmentTransformFunc==null) m_CreateBoundsAdjustmentTransformFunc = (CreateBoundsAdjustmentTransformFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateBoundsAdjustmentTransformFunc));
            transform = new ID2D1BoundsAdjustmentTransform();
            return m_CreateBoundsAdjustmentTransformFunc(m_ptr, ref outputRectangle, out transform.PtrForNew);
        }
        delegate int CreateBoundsAdjustmentTransformFunc(IntPtr self, ref tagRECT outputRectangle, out IntPtr transform);
        CreateBoundsAdjustmentTransformFunc m_CreateBoundsAdjustmentTransformFunc;

        public virtual int LoadPixelShader(
            ref Guid shaderId,
            ref byte shaderBuffer,
            uint shaderBufferCount
        ){
            var fp = GetFunctionPointer(11);
            if(m_LoadPixelShaderFunc==null) m_LoadPixelShaderFunc = (LoadPixelShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(LoadPixelShaderFunc));
            
            return m_LoadPixelShaderFunc(m_ptr, ref shaderId, ref shaderBuffer, shaderBufferCount);
        }
        delegate int LoadPixelShaderFunc(IntPtr self, ref Guid shaderId, ref byte shaderBuffer, uint shaderBufferCount);
        LoadPixelShaderFunc m_LoadPixelShaderFunc;

        public virtual int LoadVertexShader(
            ref Guid resourceId,
            ref byte shaderBuffer,
            uint shaderBufferCount
        ){
            var fp = GetFunctionPointer(12);
            if(m_LoadVertexShaderFunc==null) m_LoadVertexShaderFunc = (LoadVertexShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(LoadVertexShaderFunc));
            
            return m_LoadVertexShaderFunc(m_ptr, ref resourceId, ref shaderBuffer, shaderBufferCount);
        }
        delegate int LoadVertexShaderFunc(IntPtr self, ref Guid resourceId, ref byte shaderBuffer, uint shaderBufferCount);
        LoadVertexShaderFunc m_LoadVertexShaderFunc;

        public virtual int LoadComputeShader(
            ref Guid resourceId,
            ref byte shaderBuffer,
            uint shaderBufferCount
        ){
            var fp = GetFunctionPointer(13);
            if(m_LoadComputeShaderFunc==null) m_LoadComputeShaderFunc = (LoadComputeShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(LoadComputeShaderFunc));
            
            return m_LoadComputeShaderFunc(m_ptr, ref resourceId, ref shaderBuffer, shaderBufferCount);
        }
        delegate int LoadComputeShaderFunc(IntPtr self, ref Guid resourceId, ref byte shaderBuffer, uint shaderBufferCount);
        LoadComputeShaderFunc m_LoadComputeShaderFunc;

        public virtual int IsShaderLoaded(
            ref Guid shaderId
        ){
            var fp = GetFunctionPointer(14);
            if(m_IsShaderLoadedFunc==null) m_IsShaderLoadedFunc = (IsShaderLoadedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsShaderLoadedFunc));
            
            return m_IsShaderLoadedFunc(m_ptr, ref shaderId);
        }
        delegate int IsShaderLoadedFunc(IntPtr self, ref Guid shaderId);
        IsShaderLoadedFunc m_IsShaderLoadedFunc;

        public virtual int CreateResourceTexture(
            ref Guid resourceId,
            ref D2D1_RESOURCE_TEXTURE_PROPERTIES resourceTextureProperties,
            ref byte data,
            ref uint strides,
            uint dataSize,
            out ID2D1ResourceTexture resourceTexture
        ){
            var fp = GetFunctionPointer(15);
            if(m_CreateResourceTextureFunc==null) m_CreateResourceTextureFunc = (CreateResourceTextureFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateResourceTextureFunc));
            resourceTexture = new ID2D1ResourceTexture();
            return m_CreateResourceTextureFunc(m_ptr, ref resourceId, ref resourceTextureProperties, ref data, ref strides, dataSize, out resourceTexture.PtrForNew);
        }
        delegate int CreateResourceTextureFunc(IntPtr self, ref Guid resourceId, ref D2D1_RESOURCE_TEXTURE_PROPERTIES resourceTextureProperties, ref byte data, ref uint strides, uint dataSize, out IntPtr resourceTexture);
        CreateResourceTextureFunc m_CreateResourceTextureFunc;

        public virtual int FindResourceTexture(
            ref Guid resourceId,
            out ID2D1ResourceTexture resourceTexture
        ){
            var fp = GetFunctionPointer(16);
            if(m_FindResourceTextureFunc==null) m_FindResourceTextureFunc = (FindResourceTextureFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FindResourceTextureFunc));
            resourceTexture = new ID2D1ResourceTexture();
            return m_FindResourceTextureFunc(m_ptr, ref resourceId, out resourceTexture.PtrForNew);
        }
        delegate int FindResourceTextureFunc(IntPtr self, ref Guid resourceId, out IntPtr resourceTexture);
        FindResourceTextureFunc m_FindResourceTextureFunc;

        public virtual int CreateVertexBuffer(
            ref D2D1_VERTEX_BUFFER_PROPERTIES vertexBufferProperties,
            ref Guid resourceId,
            ref D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES customVertexBufferProperties,
            out ID2D1VertexBuffer buffer
        ){
            var fp = GetFunctionPointer(17);
            if(m_CreateVertexBufferFunc==null) m_CreateVertexBufferFunc = (CreateVertexBufferFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateVertexBufferFunc));
            buffer = new ID2D1VertexBuffer();
            return m_CreateVertexBufferFunc(m_ptr, ref vertexBufferProperties, ref resourceId, ref customVertexBufferProperties, out buffer.PtrForNew);
        }
        delegate int CreateVertexBufferFunc(IntPtr self, ref D2D1_VERTEX_BUFFER_PROPERTIES vertexBufferProperties, ref Guid resourceId, ref D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES customVertexBufferProperties, out IntPtr buffer);
        CreateVertexBufferFunc m_CreateVertexBufferFunc;

        public virtual int FindVertexBuffer(
            ref Guid resourceId,
            out ID2D1VertexBuffer buffer
        ){
            var fp = GetFunctionPointer(18);
            if(m_FindVertexBufferFunc==null) m_FindVertexBufferFunc = (FindVertexBufferFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FindVertexBufferFunc));
            buffer = new ID2D1VertexBuffer();
            return m_FindVertexBufferFunc(m_ptr, ref resourceId, out buffer.PtrForNew);
        }
        delegate int FindVertexBufferFunc(IntPtr self, ref Guid resourceId, out IntPtr buffer);
        FindVertexBufferFunc m_FindVertexBufferFunc;

        public virtual int CreateColorContext(
            D2D1_COLOR_SPACE space,
            ref byte profile,
            uint profileSize,
            out ID2D1ColorContext colorContext
        ){
            var fp = GetFunctionPointer(19);
            if(m_CreateColorContextFunc==null) m_CreateColorContextFunc = (CreateColorContextFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateColorContextFunc));
            colorContext = new ID2D1ColorContext();
            return m_CreateColorContextFunc(m_ptr, space, ref profile, profileSize, out colorContext.PtrForNew);
        }
        delegate int CreateColorContextFunc(IntPtr self, D2D1_COLOR_SPACE space, ref byte profile, uint profileSize, out IntPtr colorContext);
        CreateColorContextFunc m_CreateColorContextFunc;

        public virtual int CreateColorContextFromFilename(
            ref ushort filename,
            out ID2D1ColorContext colorContext
        ){
            var fp = GetFunctionPointer(20);
            if(m_CreateColorContextFromFilenameFunc==null) m_CreateColorContextFromFilenameFunc = (CreateColorContextFromFilenameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateColorContextFromFilenameFunc));
            colorContext = new ID2D1ColorContext();
            return m_CreateColorContextFromFilenameFunc(m_ptr, ref filename, out colorContext.PtrForNew);
        }
        delegate int CreateColorContextFromFilenameFunc(IntPtr self, ref ushort filename, out IntPtr colorContext);
        CreateColorContextFromFilenameFunc m_CreateColorContextFromFilenameFunc;

        public virtual int CreateColorContextFromWicColorContext(
            IWICColorContext wicColorContext,
            out ID2D1ColorContext colorContext
        ){
            var fp = GetFunctionPointer(21);
            if(m_CreateColorContextFromWicColorContextFunc==null) m_CreateColorContextFromWicColorContextFunc = (CreateColorContextFromWicColorContextFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateColorContextFromWicColorContextFunc));
            colorContext = new ID2D1ColorContext();
            return m_CreateColorContextFromWicColorContextFunc(m_ptr, wicColorContext!=null ? wicColorContext.Ptr : IntPtr.Zero, out colorContext.PtrForNew);
        }
        delegate int CreateColorContextFromWicColorContextFunc(IntPtr self, IntPtr wicColorContext, out IntPtr colorContext);
        CreateColorContextFromWicColorContextFunc m_CreateColorContextFromWicColorContextFunc;

        public virtual int CheckFeatureSupport(
            D2D1_FEATURE feature,
            IntPtr featureSupportData,
            uint featureSupportDataSize
        ){
            var fp = GetFunctionPointer(22);
            if(m_CheckFeatureSupportFunc==null) m_CheckFeatureSupportFunc = (CheckFeatureSupportFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CheckFeatureSupportFunc));
            
            return m_CheckFeatureSupportFunc(m_ptr, feature, featureSupportData, featureSupportDataSize);
        }
        delegate int CheckFeatureSupportFunc(IntPtr self, D2D1_FEATURE feature, IntPtr featureSupportData, uint featureSupportDataSize);
        CheckFeatureSupportFunc m_CheckFeatureSupportFunc;

        public virtual int IsBufferPrecisionSupported(
            D2D1_BUFFER_PRECISION bufferPrecision
        ){
            var fp = GetFunctionPointer(23);
            if(m_IsBufferPrecisionSupportedFunc==null) m_IsBufferPrecisionSupportedFunc = (IsBufferPrecisionSupportedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsBufferPrecisionSupportedFunc));
            
            return m_IsBufferPrecisionSupportedFunc(m_ptr, bufferPrecision);
        }
        delegate int IsBufferPrecisionSupportedFunc(IntPtr self, D2D1_BUFFER_PRECISION bufferPrecision);
        IsBufferPrecisionSupportedFunc m_IsBufferPrecisionSupportedFunc;

    }
}
