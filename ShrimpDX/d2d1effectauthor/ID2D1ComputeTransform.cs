// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class ID2D1ComputeTransform: ID2D1Transform
    {
        static Guid s_uuid = new Guid("0d85573c-01e3-4f7d-bfd9-0d60608bf3c3");
        public static new ref Guid IID =>ref s_uuid;
        public override ref Guid GetIID(){ return ref s_uuid; }
                
        public virtual int SetComputeInfo(
            ID2D1ComputeInfo computeInfo
        ){
            var fp = GetFunctionPointer(7);
            if(m_SetComputeInfoFunc==null) m_SetComputeInfoFunc = (SetComputeInfoFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetComputeInfoFunc));
            
            return m_SetComputeInfoFunc(m_ptr, computeInfo!=null ? computeInfo.Ptr : IntPtr.Zero);
        }
        delegate int SetComputeInfoFunc(IntPtr self, IntPtr computeInfo);
        SetComputeInfoFunc m_SetComputeInfoFunc;

        public virtual int CalculateThreadgroups(
            ref tagRECT outputRect,
            out uint dimensionX,
            out uint dimensionY,
            out uint dimensionZ
        ){
            var fp = GetFunctionPointer(8);
            if(m_CalculateThreadgroupsFunc==null) m_CalculateThreadgroupsFunc = (CalculateThreadgroupsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CalculateThreadgroupsFunc));
            
            return m_CalculateThreadgroupsFunc(m_ptr, ref outputRect, out dimensionX, out dimensionY, out dimensionZ);
        }
        delegate int CalculateThreadgroupsFunc(IntPtr self, ref tagRECT outputRect, out uint dimensionX, out uint dimensionY, out uint dimensionZ);
        CalculateThreadgroupsFunc m_CalculateThreadgroupsFunc;

    }
}
