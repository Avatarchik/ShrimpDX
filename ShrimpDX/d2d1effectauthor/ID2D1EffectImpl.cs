// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class ID2D1EffectImpl: IUnknown
    {
        static Guid s_uuid = new Guid("a248fd3f-3e6c-4e63-9f03-7f68ecc91db9");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int Initialize(
            ID2D1EffectContext effectContext,
            ID2D1TransformGraph transformGraph
        ){
            var fp = GetFunctionPointer(3);
            if(m_InitializeFunc==null) m_InitializeFunc = (InitializeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(InitializeFunc));
            
            return m_InitializeFunc(m_ptr, effectContext!=null ? effectContext.Ptr : IntPtr.Zero, transformGraph!=null ? transformGraph.Ptr : IntPtr.Zero);
        }
        delegate int InitializeFunc(IntPtr self, IntPtr effectContext, IntPtr transformGraph);
        InitializeFunc m_InitializeFunc;

        public virtual int PrepareForRender(
            D2D1_CHANGE_TYPE changeType
        ){
            var fp = GetFunctionPointer(4);
            if(m_PrepareForRenderFunc==null) m_PrepareForRenderFunc = (PrepareForRenderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PrepareForRenderFunc));
            
            return m_PrepareForRenderFunc(m_ptr, changeType);
        }
        delegate int PrepareForRenderFunc(IntPtr self, D2D1_CHANGE_TYPE changeType);
        PrepareForRenderFunc m_PrepareForRenderFunc;

        public virtual int SetGraph(
            ID2D1TransformGraph transformGraph
        ){
            var fp = GetFunctionPointer(5);
            if(m_SetGraphFunc==null) m_SetGraphFunc = (SetGraphFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetGraphFunc));
            
            return m_SetGraphFunc(m_ptr, transformGraph!=null ? transformGraph.Ptr : IntPtr.Zero);
        }
        delegate int SetGraphFunc(IntPtr self, IntPtr transformGraph);
        SetGraphFunc m_SetGraphFunc;

    }
}
