// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class ID2D1TransformGraph: IUnknown
    {
        static Guid s_uuid = new Guid("13d29038-c3e6-4034-9081-13b53a417992");
        public static new ref Guid IID =>ref s_uuid;
        public override ref Guid GetIID(){ return ref s_uuid; }
                
        public virtual uint GetInputCount(
        ){
            var fp = GetFunctionPointer(3);
            if(m_GetInputCountFunc==null) m_GetInputCountFunc = (GetInputCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetInputCountFunc));
            
            return m_GetInputCountFunc(m_ptr);
        }
        delegate uint GetInputCountFunc(IntPtr self);
        GetInputCountFunc m_GetInputCountFunc;

        public virtual int SetSingleTransformNode(
            ID2D1TransformNode node
        ){
            var fp = GetFunctionPointer(4);
            if(m_SetSingleTransformNodeFunc==null) m_SetSingleTransformNodeFunc = (SetSingleTransformNodeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetSingleTransformNodeFunc));
            
            return m_SetSingleTransformNodeFunc(m_ptr, node!=null ? node.Ptr : IntPtr.Zero);
        }
        delegate int SetSingleTransformNodeFunc(IntPtr self, IntPtr node);
        SetSingleTransformNodeFunc m_SetSingleTransformNodeFunc;

        public virtual int AddNode(
            ID2D1TransformNode node
        ){
            var fp = GetFunctionPointer(5);
            if(m_AddNodeFunc==null) m_AddNodeFunc = (AddNodeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AddNodeFunc));
            
            return m_AddNodeFunc(m_ptr, node!=null ? node.Ptr : IntPtr.Zero);
        }
        delegate int AddNodeFunc(IntPtr self, IntPtr node);
        AddNodeFunc m_AddNodeFunc;

        public virtual int RemoveNode(
            ID2D1TransformNode node
        ){
            var fp = GetFunctionPointer(6);
            if(m_RemoveNodeFunc==null) m_RemoveNodeFunc = (RemoveNodeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RemoveNodeFunc));
            
            return m_RemoveNodeFunc(m_ptr, node!=null ? node.Ptr : IntPtr.Zero);
        }
        delegate int RemoveNodeFunc(IntPtr self, IntPtr node);
        RemoveNodeFunc m_RemoveNodeFunc;

        public virtual int SetOutputNode(
            ID2D1TransformNode node
        ){
            var fp = GetFunctionPointer(7);
            if(m_SetOutputNodeFunc==null) m_SetOutputNodeFunc = (SetOutputNodeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetOutputNodeFunc));
            
            return m_SetOutputNodeFunc(m_ptr, node!=null ? node.Ptr : IntPtr.Zero);
        }
        delegate int SetOutputNodeFunc(IntPtr self, IntPtr node);
        SetOutputNodeFunc m_SetOutputNodeFunc;

        public virtual int ConnectNode(
            ID2D1TransformNode fromNode,
            ID2D1TransformNode toNode,
            uint toNodeInputIndex
        ){
            var fp = GetFunctionPointer(8);
            if(m_ConnectNodeFunc==null) m_ConnectNodeFunc = (ConnectNodeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ConnectNodeFunc));
            
            return m_ConnectNodeFunc(m_ptr, fromNode!=null ? fromNode.Ptr : IntPtr.Zero, toNode!=null ? toNode.Ptr : IntPtr.Zero, toNodeInputIndex);
        }
        delegate int ConnectNodeFunc(IntPtr self, IntPtr fromNode, IntPtr toNode, uint toNodeInputIndex);
        ConnectNodeFunc m_ConnectNodeFunc;

        public virtual int ConnectToEffectInput(
            uint toEffectInputIndex,
            ID2D1TransformNode node,
            uint toNodeInputIndex
        ){
            var fp = GetFunctionPointer(9);
            if(m_ConnectToEffectInputFunc==null) m_ConnectToEffectInputFunc = (ConnectToEffectInputFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ConnectToEffectInputFunc));
            
            return m_ConnectToEffectInputFunc(m_ptr, toEffectInputIndex, node!=null ? node.Ptr : IntPtr.Zero, toNodeInputIndex);
        }
        delegate int ConnectToEffectInputFunc(IntPtr self, uint toEffectInputIndex, IntPtr node, uint toNodeInputIndex);
        ConnectToEffectInputFunc m_ConnectToEffectInputFunc;

        public virtual void Clear(
        ){
            var fp = GetFunctionPointer(10);
            if(m_ClearFunc==null) m_ClearFunc = (ClearFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ClearFunc));
            
            m_ClearFunc(m_ptr);
        }
        delegate void ClearFunc(IntPtr self);
        ClearFunc m_ClearFunc;

        public virtual int SetPassthroughGraph(
            uint effectInputIndex
        ){
            var fp = GetFunctionPointer(11);
            if(m_SetPassthroughGraphFunc==null) m_SetPassthroughGraphFunc = (SetPassthroughGraphFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetPassthroughGraphFunc));
            
            return m_SetPassthroughGraphFunc(m_ptr, effectInputIndex);
        }
        delegate int SetPassthroughGraphFunc(IntPtr self, uint effectInputIndex);
        SetPassthroughGraphFunc m_SetPassthroughGraphFunc;

    }
}
