// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class ID2D1DrawInfo: ID2D1RenderInfo
    {
        static Guid s_uuid = new Guid("693ce632-7f2f-45de-93fe-18d88b37aa21");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int SetPixelShaderConstantBuffer(
            ref byte buffer,
            uint bufferCount
        ){
            var fp = GetFunctionPointer(7);
            if(m_SetPixelShaderConstantBufferFunc==null) m_SetPixelShaderConstantBufferFunc = (SetPixelShaderConstantBufferFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetPixelShaderConstantBufferFunc));
            
            return m_SetPixelShaderConstantBufferFunc(m_ptr, ref buffer, bufferCount);
        }
        delegate int SetPixelShaderConstantBufferFunc(IntPtr self, ref byte buffer, uint bufferCount);
        SetPixelShaderConstantBufferFunc m_SetPixelShaderConstantBufferFunc;

        public virtual int SetResourceTexture(
            uint textureIndex,
            ID2D1ResourceTexture resourceTexture
        ){
            var fp = GetFunctionPointer(8);
            if(m_SetResourceTextureFunc==null) m_SetResourceTextureFunc = (SetResourceTextureFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetResourceTextureFunc));
            
            return m_SetResourceTextureFunc(m_ptr, textureIndex, resourceTexture!=null ? resourceTexture.Ptr : IntPtr.Zero);
        }
        delegate int SetResourceTextureFunc(IntPtr self, uint textureIndex, IntPtr resourceTexture);
        SetResourceTextureFunc m_SetResourceTextureFunc;

        public virtual int SetVertexShaderConstantBuffer(
            ref byte buffer,
            uint bufferCount
        ){
            var fp = GetFunctionPointer(9);
            if(m_SetVertexShaderConstantBufferFunc==null) m_SetVertexShaderConstantBufferFunc = (SetVertexShaderConstantBufferFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetVertexShaderConstantBufferFunc));
            
            return m_SetVertexShaderConstantBufferFunc(m_ptr, ref buffer, bufferCount);
        }
        delegate int SetVertexShaderConstantBufferFunc(IntPtr self, ref byte buffer, uint bufferCount);
        SetVertexShaderConstantBufferFunc m_SetVertexShaderConstantBufferFunc;

        public virtual int SetPixelShader(
            ref Guid shaderId,
            D2D1_PIXEL_OPTIONS pixelOptions
        ){
            var fp = GetFunctionPointer(10);
            if(m_SetPixelShaderFunc==null) m_SetPixelShaderFunc = (SetPixelShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetPixelShaderFunc));
            
            return m_SetPixelShaderFunc(m_ptr, ref shaderId, pixelOptions);
        }
        delegate int SetPixelShaderFunc(IntPtr self, ref Guid shaderId, D2D1_PIXEL_OPTIONS pixelOptions);
        SetPixelShaderFunc m_SetPixelShaderFunc;

        public virtual int SetVertexProcessing(
            ID2D1VertexBuffer vertexBuffer,
            D2D1_VERTEX_OPTIONS vertexOptions,
            ref D2D1_BLEND_DESCRIPTION blendDescription,
            ref D2D1_VERTEX_RANGE vertexRange,
            ref Guid vertexShader
        ){
            var fp = GetFunctionPointer(11);
            if(m_SetVertexProcessingFunc==null) m_SetVertexProcessingFunc = (SetVertexProcessingFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetVertexProcessingFunc));
            
            return m_SetVertexProcessingFunc(m_ptr, vertexBuffer!=null ? vertexBuffer.Ptr : IntPtr.Zero, vertexOptions, ref blendDescription, ref vertexRange, ref vertexShader);
        }
        delegate int SetVertexProcessingFunc(IntPtr self, IntPtr vertexBuffer, D2D1_VERTEX_OPTIONS vertexOptions, ref D2D1_BLEND_DESCRIPTION blendDescription, ref D2D1_VERTEX_RANGE vertexRange, ref Guid vertexShader);
        SetVertexProcessingFunc m_SetVertexProcessingFunc;

    }
}
