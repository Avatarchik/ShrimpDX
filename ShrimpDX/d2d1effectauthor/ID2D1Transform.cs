// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class ID2D1Transform: ID2D1TransformNode
    {
        static Guid s_uuid = new Guid("ef1a287d-342a-4f76-8fdb-da0d6ea9f92b");
        public static new ref Guid IID =>ref s_uuid;
        public override ref Guid GetIID(){ return ref s_uuid; }
                
        public virtual int MapOutputRectToInputRects(
            ref tagRECT outputRect,
            out tagRECT inputRects,
            uint inputRectsCount
        ){
            var fp = GetFunctionPointer(4);
            if(m_MapOutputRectToInputRectsFunc==null) m_MapOutputRectToInputRectsFunc = (MapOutputRectToInputRectsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(MapOutputRectToInputRectsFunc));
            
            return m_MapOutputRectToInputRectsFunc(m_ptr, ref outputRect, out inputRects, inputRectsCount);
        }
        delegate int MapOutputRectToInputRectsFunc(IntPtr self, ref tagRECT outputRect, out tagRECT inputRects, uint inputRectsCount);
        MapOutputRectToInputRectsFunc m_MapOutputRectToInputRectsFunc;

        public virtual int MapInputRectsToOutputRect(
            ref tagRECT inputRects,
            ref tagRECT inputOpaqueSubRects,
            uint inputRectCount,
            out tagRECT outputRect,
            out tagRECT outputOpaqueSubRect
        ){
            var fp = GetFunctionPointer(5);
            if(m_MapInputRectsToOutputRectFunc==null) m_MapInputRectsToOutputRectFunc = (MapInputRectsToOutputRectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(MapInputRectsToOutputRectFunc));
            
            return m_MapInputRectsToOutputRectFunc(m_ptr, ref inputRects, ref inputOpaqueSubRects, inputRectCount, out outputRect, out outputOpaqueSubRect);
        }
        delegate int MapInputRectsToOutputRectFunc(IntPtr self, ref tagRECT inputRects, ref tagRECT inputOpaqueSubRects, uint inputRectCount, out tagRECT outputRect, out tagRECT outputOpaqueSubRect);
        MapInputRectsToOutputRectFunc m_MapInputRectsToOutputRectFunc;

        public virtual int MapInvalidRect(
            uint inputIndex,
            tagRECT invalidInputRect,
            out tagRECT invalidOutputRect
        ){
            var fp = GetFunctionPointer(6);
            if(m_MapInvalidRectFunc==null) m_MapInvalidRectFunc = (MapInvalidRectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(MapInvalidRectFunc));
            
            return m_MapInvalidRectFunc(m_ptr, inputIndex, invalidInputRect, out invalidOutputRect);
        }
        delegate int MapInvalidRectFunc(IntPtr self, uint inputIndex, tagRECT invalidInputRect, out tagRECT invalidOutputRect);
        MapInvalidRectFunc m_MapInvalidRectFunc;

    }
}
