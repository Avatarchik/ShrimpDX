// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public static partial class Constants {
        public const int D2D1_APPEND_ALIGNED_ELEMENT = unchecked((int)0xffffffff);
    }
    public delegate int PD2D1_PROPERTY_SET_FUNCTION(IUnknown effect, ref byte data, uint dataSize);
    public delegate int PD2D1_PROPERTY_GET_FUNCTION(IUnknown effect, out byte data, uint dataSize, out uint actualSize);
    public class ID2D1EffectContext: IUnknown
    {
        static Guid s_uuid = new Guid("3d9f916b-27dc-4ad7-b4f1-64945340f563");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual void GetDpi(
            out float dpiX,
            out float dpiY
        ){
            var fp = GetFunctionPointer(3);
            var callback = (GetDpiFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDpiFunc));
            
            callback(m_ptr, out dpiX, out dpiY);
        }
        delegate void GetDpiFunc(IntPtr self, out float dpiX, out float dpiY);

        public virtual int CreateEffect(
            ref Guid effectId,
            out ID2D1Effect effect
        ){
            var fp = GetFunctionPointer(4);
            var callback = (CreateEffectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateEffectFunc));
            effect = new ID2D1Effect();
            return callback(m_ptr, ref effectId, out effect.PtrForNew);
        }
        delegate int CreateEffectFunc(IntPtr self, ref Guid effectId, out IntPtr effect);

        public virtual int GetMaximumSupportedFeatureLevel(
            ref D3D_FEATURE_LEVEL featureLevels,
            uint featureLevelsCount,
            out D3D_FEATURE_LEVEL maximumSupportedFeatureLevel
        ){
            var fp = GetFunctionPointer(5);
            var callback = (GetMaximumSupportedFeatureLevelFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMaximumSupportedFeatureLevelFunc));
            
            return callback(m_ptr, ref featureLevels, featureLevelsCount, out maximumSupportedFeatureLevel);
        }
        delegate int GetMaximumSupportedFeatureLevelFunc(IntPtr self, ref D3D_FEATURE_LEVEL featureLevels, uint featureLevelsCount, out D3D_FEATURE_LEVEL maximumSupportedFeatureLevel);

        public virtual int CreateTransformNodeFromEffect(
            ID2D1Effect effect,
            out ID2D1TransformNode transformNode
        ){
            var fp = GetFunctionPointer(6);
            var callback = (CreateTransformNodeFromEffectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateTransformNodeFromEffectFunc));
            transformNode = new ID2D1TransformNode();
            return callback(m_ptr, effect!=null ? effect.Ptr : IntPtr.Zero, out transformNode.PtrForNew);
        }
        delegate int CreateTransformNodeFromEffectFunc(IntPtr self, IntPtr effect, out IntPtr transformNode);

        public virtual int CreateBlendTransform(
            uint numInputs,
            ref D2D1_BLEND_DESCRIPTION blendDescription,
            out ID2D1BlendTransform transform
        ){
            var fp = GetFunctionPointer(7);
            var callback = (CreateBlendTransformFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateBlendTransformFunc));
            transform = new ID2D1BlendTransform();
            return callback(m_ptr, numInputs, ref blendDescription, out transform.PtrForNew);
        }
        delegate int CreateBlendTransformFunc(IntPtr self, uint numInputs, ref D2D1_BLEND_DESCRIPTION blendDescription, out IntPtr transform);

        public virtual int CreateBorderTransform(
            D2D1_EXTEND_MODE extendModeX,
            D2D1_EXTEND_MODE extendModeY,
            out ID2D1BorderTransform transform
        ){
            var fp = GetFunctionPointer(8);
            var callback = (CreateBorderTransformFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateBorderTransformFunc));
            transform = new ID2D1BorderTransform();
            return callback(m_ptr, extendModeX, extendModeY, out transform.PtrForNew);
        }
        delegate int CreateBorderTransformFunc(IntPtr self, D2D1_EXTEND_MODE extendModeX, D2D1_EXTEND_MODE extendModeY, out IntPtr transform);

        public virtual int CreateOffsetTransform(
            tagPOINT offset,
            out ID2D1OffsetTransform transform
        ){
            var fp = GetFunctionPointer(9);
            var callback = (CreateOffsetTransformFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateOffsetTransformFunc));
            transform = new ID2D1OffsetTransform();
            return callback(m_ptr, offset, out transform.PtrForNew);
        }
        delegate int CreateOffsetTransformFunc(IntPtr self, tagPOINT offset, out IntPtr transform);

        public virtual int CreateBoundsAdjustmentTransform(
            ref tagRECT outputRectangle,
            out ID2D1BoundsAdjustmentTransform transform
        ){
            var fp = GetFunctionPointer(10);
            var callback = (CreateBoundsAdjustmentTransformFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateBoundsAdjustmentTransformFunc));
            transform = new ID2D1BoundsAdjustmentTransform();
            return callback(m_ptr, ref outputRectangle, out transform.PtrForNew);
        }
        delegate int CreateBoundsAdjustmentTransformFunc(IntPtr self, ref tagRECT outputRectangle, out IntPtr transform);

        public virtual int LoadPixelShader(
            ref Guid shaderId,
            ref byte shaderBuffer,
            uint shaderBufferCount
        ){
            var fp = GetFunctionPointer(11);
            var callback = (LoadPixelShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(LoadPixelShaderFunc));
            
            return callback(m_ptr, ref shaderId, ref shaderBuffer, shaderBufferCount);
        }
        delegate int LoadPixelShaderFunc(IntPtr self, ref Guid shaderId, ref byte shaderBuffer, uint shaderBufferCount);

        public virtual int LoadVertexShader(
            ref Guid resourceId,
            ref byte shaderBuffer,
            uint shaderBufferCount
        ){
            var fp = GetFunctionPointer(12);
            var callback = (LoadVertexShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(LoadVertexShaderFunc));
            
            return callback(m_ptr, ref resourceId, ref shaderBuffer, shaderBufferCount);
        }
        delegate int LoadVertexShaderFunc(IntPtr self, ref Guid resourceId, ref byte shaderBuffer, uint shaderBufferCount);

        public virtual int LoadComputeShader(
            ref Guid resourceId,
            ref byte shaderBuffer,
            uint shaderBufferCount
        ){
            var fp = GetFunctionPointer(13);
            var callback = (LoadComputeShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(LoadComputeShaderFunc));
            
            return callback(m_ptr, ref resourceId, ref shaderBuffer, shaderBufferCount);
        }
        delegate int LoadComputeShaderFunc(IntPtr self, ref Guid resourceId, ref byte shaderBuffer, uint shaderBufferCount);

        public virtual int IsShaderLoaded(
            ref Guid shaderId
        ){
            var fp = GetFunctionPointer(14);
            var callback = (IsShaderLoadedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsShaderLoadedFunc));
            
            return callback(m_ptr, ref shaderId);
        }
        delegate int IsShaderLoadedFunc(IntPtr self, ref Guid shaderId);

        public virtual int CreateResourceTexture(
            ref Guid resourceId,
            ref D2D1_RESOURCE_TEXTURE_PROPERTIES resourceTextureProperties,
            ref byte data,
            ref uint strides,
            uint dataSize,
            out ID2D1ResourceTexture resourceTexture
        ){
            var fp = GetFunctionPointer(15);
            var callback = (CreateResourceTextureFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateResourceTextureFunc));
            resourceTexture = new ID2D1ResourceTexture();
            return callback(m_ptr, ref resourceId, ref resourceTextureProperties, ref data, ref strides, dataSize, out resourceTexture.PtrForNew);
        }
        delegate int CreateResourceTextureFunc(IntPtr self, ref Guid resourceId, ref D2D1_RESOURCE_TEXTURE_PROPERTIES resourceTextureProperties, ref byte data, ref uint strides, uint dataSize, out IntPtr resourceTexture);

        public virtual int FindResourceTexture(
            ref Guid resourceId,
            out ID2D1ResourceTexture resourceTexture
        ){
            var fp = GetFunctionPointer(16);
            var callback = (FindResourceTextureFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FindResourceTextureFunc));
            resourceTexture = new ID2D1ResourceTexture();
            return callback(m_ptr, ref resourceId, out resourceTexture.PtrForNew);
        }
        delegate int FindResourceTextureFunc(IntPtr self, ref Guid resourceId, out IntPtr resourceTexture);

        public virtual int CreateVertexBuffer(
            ref D2D1_VERTEX_BUFFER_PROPERTIES vertexBufferProperties,
            ref Guid resourceId,
            ref D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES customVertexBufferProperties,
            out ID2D1VertexBuffer buffer
        ){
            var fp = GetFunctionPointer(17);
            var callback = (CreateVertexBufferFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateVertexBufferFunc));
            buffer = new ID2D1VertexBuffer();
            return callback(m_ptr, ref vertexBufferProperties, ref resourceId, ref customVertexBufferProperties, out buffer.PtrForNew);
        }
        delegate int CreateVertexBufferFunc(IntPtr self, ref D2D1_VERTEX_BUFFER_PROPERTIES vertexBufferProperties, ref Guid resourceId, ref D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES customVertexBufferProperties, out IntPtr buffer);

        public virtual int FindVertexBuffer(
            ref Guid resourceId,
            out ID2D1VertexBuffer buffer
        ){
            var fp = GetFunctionPointer(18);
            var callback = (FindVertexBufferFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FindVertexBufferFunc));
            buffer = new ID2D1VertexBuffer();
            return callback(m_ptr, ref resourceId, out buffer.PtrForNew);
        }
        delegate int FindVertexBufferFunc(IntPtr self, ref Guid resourceId, out IntPtr buffer);

        public virtual int CreateColorContext(
            D2D1_COLOR_SPACE space,
            ref byte profile,
            uint profileSize,
            out ID2D1ColorContext colorContext
        ){
            var fp = GetFunctionPointer(19);
            var callback = (CreateColorContextFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateColorContextFunc));
            colorContext = new ID2D1ColorContext();
            return callback(m_ptr, space, ref profile, profileSize, out colorContext.PtrForNew);
        }
        delegate int CreateColorContextFunc(IntPtr self, D2D1_COLOR_SPACE space, ref byte profile, uint profileSize, out IntPtr colorContext);

        public virtual int CreateColorContextFromFilename(
            ref ushort filename,
            out ID2D1ColorContext colorContext
        ){
            var fp = GetFunctionPointer(20);
            var callback = (CreateColorContextFromFilenameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateColorContextFromFilenameFunc));
            colorContext = new ID2D1ColorContext();
            return callback(m_ptr, ref filename, out colorContext.PtrForNew);
        }
        delegate int CreateColorContextFromFilenameFunc(IntPtr self, ref ushort filename, out IntPtr colorContext);

        public virtual int CreateColorContextFromWicColorContext(
            IWICColorContext wicColorContext,
            out ID2D1ColorContext colorContext
        ){
            var fp = GetFunctionPointer(21);
            var callback = (CreateColorContextFromWicColorContextFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateColorContextFromWicColorContextFunc));
            colorContext = new ID2D1ColorContext();
            return callback(m_ptr, wicColorContext!=null ? wicColorContext.Ptr : IntPtr.Zero, out colorContext.PtrForNew);
        }
        delegate int CreateColorContextFromWicColorContextFunc(IntPtr self, IntPtr wicColorContext, out IntPtr colorContext);

        public virtual int CheckFeatureSupport(
            D2D1_FEATURE feature,
            IntPtr featureSupportData,
            uint featureSupportDataSize
        ){
            var fp = GetFunctionPointer(22);
            var callback = (CheckFeatureSupportFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CheckFeatureSupportFunc));
            
            return callback(m_ptr, feature, featureSupportData, featureSupportDataSize);
        }
        delegate int CheckFeatureSupportFunc(IntPtr self, D2D1_FEATURE feature, IntPtr featureSupportData, uint featureSupportDataSize);

        public virtual int IsBufferPrecisionSupported(
            D2D1_BUFFER_PRECISION bufferPrecision
        ){
            var fp = GetFunctionPointer(23);
            var callback = (IsBufferPrecisionSupportedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsBufferPrecisionSupportedFunc));
            
            return callback(m_ptr, bufferPrecision);
        }
        delegate int IsBufferPrecisionSupportedFunc(IntPtr self, D2D1_BUFFER_PRECISION bufferPrecision);

    }
    public class ID2D1TransformNode: IUnknown
    {
        static Guid s_uuid = new Guid("b2efe1e7-729f-4102-949f-505fa21bf666");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual uint GetInputCount(
        ){
            var fp = GetFunctionPointer(3);
            var callback = (GetInputCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetInputCountFunc));
            
            return callback(m_ptr);
        }
        delegate uint GetInputCountFunc(IntPtr self);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_BLEND_DESCRIPTION // 1
    {
        public D2D1_BLEND sourceBlend;
        public D2D1_BLEND destinationBlend;
        public D2D1_BLEND_OPERATION blendOperation;
        public D2D1_BLEND sourceBlendAlpha;
        public D2D1_BLEND destinationBlendAlpha;
        public D2D1_BLEND_OPERATION blendOperationAlpha;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=4)]public float[] blendFactor;
    }
    public enum D2D1_BLEND // 1
    {
        _ZERO = 0x1,
        _ONE = 0x2,
        _SRC_COLOR = 0x3,
        _INV_SRC_COLOR = 0x4,
        _SRC_ALPHA = 0x5,
        _INV_SRC_ALPHA = 0x6,
        _DEST_ALPHA = 0x7,
        _INV_DEST_ALPHA = 0x8,
        _DEST_COLOR = 0x9,
        _INV_DEST_COLOR = 0xa,
        _SRC_ALPHA_SAT = 0xb,
        _BLEND_FACTOR = 0xe,
        _INV_BLEND_FACTOR = 0xf,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public enum D2D1_BLEND_OPERATION // 1
    {
        _ADD = 0x1,
        _SUBTRACT = 0x2,
        _REV_SUBTRACT = 0x3,
        _MIN = 0x4,
        _MAX = 0x5,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public class ID2D1BlendTransform: ID2D1ConcreteTransform
    {
        static Guid s_uuid = new Guid("63ac0b32-ba44-450f-8806-7f4ca1ff2f1b");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual void SetDescription(
            ref D2D1_BLEND_DESCRIPTION description
        ){
            var fp = GetFunctionPointer(6);
            var callback = (SetDescriptionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetDescriptionFunc));
            
            callback(m_ptr, ref description);
        }
        delegate void SetDescriptionFunc(IntPtr self, ref D2D1_BLEND_DESCRIPTION description);

        public virtual void GetDescription(
            out D2D1_BLEND_DESCRIPTION description
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetDescriptionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescriptionFunc));
            
            callback(m_ptr, out description);
        }
        delegate void GetDescriptionFunc(IntPtr self, out D2D1_BLEND_DESCRIPTION description);

    }
    public class ID2D1ConcreteTransform: ID2D1TransformNode
    {
        static Guid s_uuid = new Guid("1a799d8a-69f7-4e4c-9fed-437ccc6684cc");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int SetOutputBuffer(
            D2D1_BUFFER_PRECISION bufferPrecision,
            D2D1_CHANNEL_DEPTH channelDepth
        ){
            var fp = GetFunctionPointer(4);
            var callback = (SetOutputBufferFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetOutputBufferFunc));
            
            return callback(m_ptr, bufferPrecision, channelDepth);
        }
        delegate int SetOutputBufferFunc(IntPtr self, D2D1_BUFFER_PRECISION bufferPrecision, D2D1_CHANNEL_DEPTH channelDepth);

        public virtual void SetCached(
            int isCached
        ){
            var fp = GetFunctionPointer(5);
            var callback = (SetCachedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetCachedFunc));
            
            callback(m_ptr, isCached);
        }
        delegate void SetCachedFunc(IntPtr self, int isCached);

    }
    public enum D2D1_CHANNEL_DEPTH // 1
    {
        _DEFAULT = 0x0,
        _1 = 0x1,
        _4 = 0x4,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public class ID2D1BorderTransform: ID2D1ConcreteTransform
    {
        static Guid s_uuid = new Guid("4998735c-3a19-473c-9781-656847e3a347");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual void SetExtendModeX(
            D2D1_EXTEND_MODE extendMode
        ){
            var fp = GetFunctionPointer(6);
            var callback = (SetExtendModeXFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetExtendModeXFunc));
            
            callback(m_ptr, extendMode);
        }
        delegate void SetExtendModeXFunc(IntPtr self, D2D1_EXTEND_MODE extendMode);

        public virtual void SetExtendModeY(
            D2D1_EXTEND_MODE extendMode
        ){
            var fp = GetFunctionPointer(7);
            var callback = (SetExtendModeYFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetExtendModeYFunc));
            
            callback(m_ptr, extendMode);
        }
        delegate void SetExtendModeYFunc(IntPtr self, D2D1_EXTEND_MODE extendMode);

        public virtual D2D1_EXTEND_MODE GetExtendModeX(
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetExtendModeXFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetExtendModeXFunc));
            
            return callback(m_ptr);
        }
        delegate D2D1_EXTEND_MODE GetExtendModeXFunc(IntPtr self);

        public virtual D2D1_EXTEND_MODE GetExtendModeY(
        ){
            var fp = GetFunctionPointer(9);
            var callback = (GetExtendModeYFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetExtendModeYFunc));
            
            return callback(m_ptr);
        }
        delegate D2D1_EXTEND_MODE GetExtendModeYFunc(IntPtr self);

    }
    public class ID2D1OffsetTransform: ID2D1TransformNode
    {
        static Guid s_uuid = new Guid("3fe6adea-7643-4f53-bd14-a0ce63f24042");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual void SetOffset(
            tagPOINT offset
        ){
            var fp = GetFunctionPointer(4);
            var callback = (SetOffsetFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetOffsetFunc));
            
            callback(m_ptr, offset);
        }
        delegate void SetOffsetFunc(IntPtr self, tagPOINT offset);

        public virtual tagPOINT GetOffset(
        ){
            var fp = GetFunctionPointer(5);
            var callback = (GetOffsetFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetOffsetFunc));
            
            return callback(m_ptr);
        }
        delegate tagPOINT GetOffsetFunc(IntPtr self);

    }
    public class ID2D1BoundsAdjustmentTransform: ID2D1TransformNode
    {
        static Guid s_uuid = new Guid("90f732e2-5092-4606-a819-8651970baccd");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual void SetOutputBounds(
            ref tagRECT outputBounds
        ){
            var fp = GetFunctionPointer(4);
            var callback = (SetOutputBoundsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetOutputBoundsFunc));
            
            callback(m_ptr, ref outputBounds);
        }
        delegate void SetOutputBoundsFunc(IntPtr self, ref tagRECT outputBounds);

        public virtual void GetOutputBounds(
            out tagRECT outputBounds
        ){
            var fp = GetFunctionPointer(5);
            var callback = (GetOutputBoundsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetOutputBoundsFunc));
            
            callback(m_ptr, out outputBounds);
        }
        delegate void GetOutputBoundsFunc(IntPtr self, out tagRECT outputBounds);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_RESOURCE_TEXTURE_PROPERTIES // 1
    {
        public IntPtr extents;
        public uint dimensions;
        public D2D1_BUFFER_PRECISION bufferPrecision;
        public D2D1_CHANNEL_DEPTH channelDepth;
        public D2D1_FILTER filter;
        public IntPtr extendModes;
    }
    public enum D2D1_FILTER // 1
    {
        _MIN_MAG_MIP_POINT = 0x0,
        _MIN_MAG_POINT_MIP_LINEAR = 0x1,
        _MIN_POINT_MAG_LINEAR_MIP_POINT = 0x4,
        _MIN_POINT_MAG_MIP_LINEAR = 0x5,
        _MIN_LINEAR_MAG_MIP_POINT = 0x10,
        _MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x11,
        _MIN_MAG_LINEAR_MIP_POINT = 0x14,
        _MIN_MAG_MIP_LINEAR = 0x15,
        _ANISOTROPIC = 0x55,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public class ID2D1ResourceTexture: IUnknown
    {
        static Guid s_uuid = new Guid("688d15c3-02b0-438d-b13a-d1b44c32c39a");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int Update(
            ref uint minimumExtents,
            ref uint maximimumExtents,
            ref uint strides,
            uint dimensions,
            ref byte data,
            uint dataCount
        ){
            var fp = GetFunctionPointer(3);
            var callback = (UpdateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(UpdateFunc));
            
            return callback(m_ptr, ref minimumExtents, ref maximimumExtents, ref strides, dimensions, ref data, dataCount);
        }
        delegate int UpdateFunc(IntPtr self, ref uint minimumExtents, ref uint maximimumExtents, ref uint strides, uint dimensions, ref byte data, uint dataCount);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_VERTEX_BUFFER_PROPERTIES // 1
    {
        public uint inputCount;
        public D2D1_VERTEX_USAGE usage;
        public IntPtr data;
        public uint byteWidth;
    }
    public enum D2D1_VERTEX_USAGE // 1
    {
        _STATIC = 0x0,
        _DYNAMIC = 0x1,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_CUSTOM_VERTEX_BUFFER_PROPERTIES // 1
    {
        public IntPtr shaderBufferWithInputSignature;
        public uint shaderBufferSize;
        public IntPtr inputElements;
        public uint elementCount;
        public uint stride;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_INPUT_ELEMENT_DESC // 1
    {
        public IntPtr semanticName;
        public uint semanticIndex;
        public DXGI_FORMAT format;
        public uint inputSlot;
        public uint alignedByteOffset;
    }
    public class ID2D1VertexBuffer: IUnknown
    {
        static Guid s_uuid = new Guid("9b8b1336-00a5-4668-92b7-ced5d8bf9b7b");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int Map(
            out IntPtr data,
            uint bufferSize
        ){
            var fp = GetFunctionPointer(3);
            var callback = (MapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(MapFunc));
            
            return callback(m_ptr, out data, bufferSize);
        }
        delegate int MapFunc(IntPtr self, out IntPtr data, uint bufferSize);

        public virtual int Unmap(
        ){
            var fp = GetFunctionPointer(4);
            var callback = (UnmapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(UnmapFunc));
            
            return callback(m_ptr);
        }
        delegate int UnmapFunc(IntPtr self);

    }
    public enum D2D1_FEATURE // 1
    {
        _DOUBLES = 0x0,
        _D3D10_X_HARDWARE_OPTIONS = 0x1,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public enum D2D1_CHANGE_TYPE // 1
    {
        _NONE = 0x0,
        _PROPERTIES = 0x1,
        _CONTEXT = 0x2,
        _GRAPH = 0x3,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public enum D2D1_PIXEL_OPTIONS // 1
    {
        _NONE = 0x0,
        _TRIVIAL_SAMPLING = 0x1,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public enum D2D1_VERTEX_OPTIONS // 1
    {
        _NONE = 0x0,
        _DO_NOT_CLEAR = 0x1,
        _USE_DEPTH_BUFFER = 0x2,
        _ASSUME_NO_OVERLAP = 0x4,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_PROPERTY_BINDING // 1
    {
        public IntPtr propertyName;
        public PD2D1_PROPERTY_SET_FUNCTION setFunction;
        public PD2D1_PROPERTY_GET_FUNCTION getFunction;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_VERTEX_RANGE // 1
    {
        public uint startVertex;
        public uint vertexCount;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_INPUT_DESCRIPTION // 1
    {
        public D2D1_FILTER filter;
        public uint levelOfDetailCount;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_FEATURE_DATA_DOUBLES // 1
    {
        public int doublePrecisionFloatShaderOps;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS // 1
    {
        public int computeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x;
    }
    public class ID2D1RenderInfo: IUnknown
    {
        static Guid s_uuid = new Guid("519ae1bd-d19a-420d-b849-364f594776b7");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int SetInputDescription(
            uint inputIndex,
            D2D1_INPUT_DESCRIPTION inputDescription
        ){
            var fp = GetFunctionPointer(3);
            var callback = (SetInputDescriptionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetInputDescriptionFunc));
            
            return callback(m_ptr, inputIndex, inputDescription);
        }
        delegate int SetInputDescriptionFunc(IntPtr self, uint inputIndex, D2D1_INPUT_DESCRIPTION inputDescription);

        public virtual int SetOutputBuffer(
            D2D1_BUFFER_PRECISION bufferPrecision,
            D2D1_CHANNEL_DEPTH channelDepth
        ){
            var fp = GetFunctionPointer(4);
            var callback = (SetOutputBufferFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetOutputBufferFunc));
            
            return callback(m_ptr, bufferPrecision, channelDepth);
        }
        delegate int SetOutputBufferFunc(IntPtr self, D2D1_BUFFER_PRECISION bufferPrecision, D2D1_CHANNEL_DEPTH channelDepth);

        public virtual void SetCached(
            int isCached
        ){
            var fp = GetFunctionPointer(5);
            var callback = (SetCachedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetCachedFunc));
            
            callback(m_ptr, isCached);
        }
        delegate void SetCachedFunc(IntPtr self, int isCached);

        public virtual void SetInstructionCountHint(
            uint instructionCount
        ){
            var fp = GetFunctionPointer(6);
            var callback = (SetInstructionCountHintFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetInstructionCountHintFunc));
            
            callback(m_ptr, instructionCount);
        }
        delegate void SetInstructionCountHintFunc(IntPtr self, uint instructionCount);

    }
    public class ID2D1DrawInfo: ID2D1RenderInfo
    {
        static Guid s_uuid = new Guid("693ce632-7f2f-45de-93fe-18d88b37aa21");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int SetPixelShaderConstantBuffer(
            ref byte buffer,
            uint bufferCount
        ){
            var fp = GetFunctionPointer(7);
            var callback = (SetPixelShaderConstantBufferFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetPixelShaderConstantBufferFunc));
            
            return callback(m_ptr, ref buffer, bufferCount);
        }
        delegate int SetPixelShaderConstantBufferFunc(IntPtr self, ref byte buffer, uint bufferCount);

        public virtual int SetResourceTexture(
            uint textureIndex,
            ID2D1ResourceTexture resourceTexture
        ){
            var fp = GetFunctionPointer(8);
            var callback = (SetResourceTextureFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetResourceTextureFunc));
            
            return callback(m_ptr, textureIndex, resourceTexture!=null ? resourceTexture.Ptr : IntPtr.Zero);
        }
        delegate int SetResourceTextureFunc(IntPtr self, uint textureIndex, IntPtr resourceTexture);

        public virtual int SetVertexShaderConstantBuffer(
            ref byte buffer,
            uint bufferCount
        ){
            var fp = GetFunctionPointer(9);
            var callback = (SetVertexShaderConstantBufferFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetVertexShaderConstantBufferFunc));
            
            return callback(m_ptr, ref buffer, bufferCount);
        }
        delegate int SetVertexShaderConstantBufferFunc(IntPtr self, ref byte buffer, uint bufferCount);

        public virtual int SetPixelShader(
            ref Guid shaderId,
            D2D1_PIXEL_OPTIONS pixelOptions
        ){
            var fp = GetFunctionPointer(10);
            var callback = (SetPixelShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetPixelShaderFunc));
            
            return callback(m_ptr, ref shaderId, pixelOptions);
        }
        delegate int SetPixelShaderFunc(IntPtr self, ref Guid shaderId, D2D1_PIXEL_OPTIONS pixelOptions);

        public virtual int SetVertexProcessing(
            ID2D1VertexBuffer vertexBuffer,
            D2D1_VERTEX_OPTIONS vertexOptions,
            ref D2D1_BLEND_DESCRIPTION blendDescription,
            ref D2D1_VERTEX_RANGE vertexRange,
            ref Guid vertexShader
        ){
            var fp = GetFunctionPointer(11);
            var callback = (SetVertexProcessingFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetVertexProcessingFunc));
            
            return callback(m_ptr, vertexBuffer!=null ? vertexBuffer.Ptr : IntPtr.Zero, vertexOptions, ref blendDescription, ref vertexRange, ref vertexShader);
        }
        delegate int SetVertexProcessingFunc(IntPtr self, IntPtr vertexBuffer, D2D1_VERTEX_OPTIONS vertexOptions, ref D2D1_BLEND_DESCRIPTION blendDescription, ref D2D1_VERTEX_RANGE vertexRange, ref Guid vertexShader);

    }
    public class ID2D1ComputeInfo: ID2D1RenderInfo
    {
        static Guid s_uuid = new Guid("5598b14b-9fd7-48b7-9bdb-8f0964eb38bc");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int SetComputeShaderConstantBuffer(
            ref byte buffer,
            uint bufferCount
        ){
            var fp = GetFunctionPointer(7);
            var callback = (SetComputeShaderConstantBufferFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetComputeShaderConstantBufferFunc));
            
            return callback(m_ptr, ref buffer, bufferCount);
        }
        delegate int SetComputeShaderConstantBufferFunc(IntPtr self, ref byte buffer, uint bufferCount);

        public virtual int SetComputeShader(
            ref Guid shaderId
        ){
            var fp = GetFunctionPointer(8);
            var callback = (SetComputeShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetComputeShaderFunc));
            
            return callback(m_ptr, ref shaderId);
        }
        delegate int SetComputeShaderFunc(IntPtr self, ref Guid shaderId);

        public virtual int SetResourceTexture(
            uint textureIndex,
            ID2D1ResourceTexture resourceTexture
        ){
            var fp = GetFunctionPointer(9);
            var callback = (SetResourceTextureFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetResourceTextureFunc));
            
            return callback(m_ptr, textureIndex, resourceTexture!=null ? resourceTexture.Ptr : IntPtr.Zero);
        }
        delegate int SetResourceTextureFunc(IntPtr self, uint textureIndex, IntPtr resourceTexture);

    }
    public class ID2D1TransformGraph: IUnknown
    {
        static Guid s_uuid = new Guid("13d29038-c3e6-4034-9081-13b53a417992");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual uint GetInputCount(
        ){
            var fp = GetFunctionPointer(3);
            var callback = (GetInputCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetInputCountFunc));
            
            return callback(m_ptr);
        }
        delegate uint GetInputCountFunc(IntPtr self);

        public virtual int SetSingleTransformNode(
            ID2D1TransformNode node
        ){
            var fp = GetFunctionPointer(4);
            var callback = (SetSingleTransformNodeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetSingleTransformNodeFunc));
            
            return callback(m_ptr, node!=null ? node.Ptr : IntPtr.Zero);
        }
        delegate int SetSingleTransformNodeFunc(IntPtr self, IntPtr node);

        public virtual int AddNode(
            ID2D1TransformNode node
        ){
            var fp = GetFunctionPointer(5);
            var callback = (AddNodeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AddNodeFunc));
            
            return callback(m_ptr, node!=null ? node.Ptr : IntPtr.Zero);
        }
        delegate int AddNodeFunc(IntPtr self, IntPtr node);

        public virtual int RemoveNode(
            ID2D1TransformNode node
        ){
            var fp = GetFunctionPointer(6);
            var callback = (RemoveNodeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RemoveNodeFunc));
            
            return callback(m_ptr, node!=null ? node.Ptr : IntPtr.Zero);
        }
        delegate int RemoveNodeFunc(IntPtr self, IntPtr node);

        public virtual int SetOutputNode(
            ID2D1TransformNode node
        ){
            var fp = GetFunctionPointer(7);
            var callback = (SetOutputNodeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetOutputNodeFunc));
            
            return callback(m_ptr, node!=null ? node.Ptr : IntPtr.Zero);
        }
        delegate int SetOutputNodeFunc(IntPtr self, IntPtr node);

        public virtual int ConnectNode(
            ID2D1TransformNode fromNode,
            ID2D1TransformNode toNode,
            uint toNodeInputIndex
        ){
            var fp = GetFunctionPointer(8);
            var callback = (ConnectNodeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ConnectNodeFunc));
            
            return callback(m_ptr, fromNode!=null ? fromNode.Ptr : IntPtr.Zero, toNode!=null ? toNode.Ptr : IntPtr.Zero, toNodeInputIndex);
        }
        delegate int ConnectNodeFunc(IntPtr self, IntPtr fromNode, IntPtr toNode, uint toNodeInputIndex);

        public virtual int ConnectToEffectInput(
            uint toEffectInputIndex,
            ID2D1TransformNode node,
            uint toNodeInputIndex
        ){
            var fp = GetFunctionPointer(9);
            var callback = (ConnectToEffectInputFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ConnectToEffectInputFunc));
            
            return callback(m_ptr, toEffectInputIndex, node!=null ? node.Ptr : IntPtr.Zero, toNodeInputIndex);
        }
        delegate int ConnectToEffectInputFunc(IntPtr self, uint toEffectInputIndex, IntPtr node, uint toNodeInputIndex);

        public virtual void Clear(
        ){
            var fp = GetFunctionPointer(10);
            var callback = (ClearFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ClearFunc));
            
            callback(m_ptr);
        }
        delegate void ClearFunc(IntPtr self);

        public virtual int SetPassthroughGraph(
            uint effectInputIndex
        ){
            var fp = GetFunctionPointer(11);
            var callback = (SetPassthroughGraphFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetPassthroughGraphFunc));
            
            return callback(m_ptr, effectInputIndex);
        }
        delegate int SetPassthroughGraphFunc(IntPtr self, uint effectInputIndex);

    }
    public class ID2D1Transform: ID2D1TransformNode
    {
        static Guid s_uuid = new Guid("ef1a287d-342a-4f76-8fdb-da0d6ea9f92b");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int MapOutputRectToInputRects(
            ref tagRECT outputRect,
            out tagRECT inputRects,
            uint inputRectsCount
        ){
            var fp = GetFunctionPointer(4);
            var callback = (MapOutputRectToInputRectsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(MapOutputRectToInputRectsFunc));
            
            return callback(m_ptr, ref outputRect, out inputRects, inputRectsCount);
        }
        delegate int MapOutputRectToInputRectsFunc(IntPtr self, ref tagRECT outputRect, out tagRECT inputRects, uint inputRectsCount);

        public virtual int MapInputRectsToOutputRect(
            ref tagRECT inputRects,
            ref tagRECT inputOpaqueSubRects,
            uint inputRectCount,
            out tagRECT outputRect,
            out tagRECT outputOpaqueSubRect
        ){
            var fp = GetFunctionPointer(5);
            var callback = (MapInputRectsToOutputRectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(MapInputRectsToOutputRectFunc));
            
            return callback(m_ptr, ref inputRects, ref inputOpaqueSubRects, inputRectCount, out outputRect, out outputOpaqueSubRect);
        }
        delegate int MapInputRectsToOutputRectFunc(IntPtr self, ref tagRECT inputRects, ref tagRECT inputOpaqueSubRects, uint inputRectCount, out tagRECT outputRect, out tagRECT outputOpaqueSubRect);

        public virtual int MapInvalidRect(
            uint inputIndex,
            tagRECT invalidInputRect,
            out tagRECT invalidOutputRect
        ){
            var fp = GetFunctionPointer(6);
            var callback = (MapInvalidRectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(MapInvalidRectFunc));
            
            return callback(m_ptr, inputIndex, invalidInputRect, out invalidOutputRect);
        }
        delegate int MapInvalidRectFunc(IntPtr self, uint inputIndex, tagRECT invalidInputRect, out tagRECT invalidOutputRect);

    }
    public class ID2D1DrawTransform: ID2D1Transform
    {
        static Guid s_uuid = new Guid("36bfdcb6-9739-435d-a30d-a653beff6a6f");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int SetDrawInfo(
            ID2D1DrawInfo drawInfo
        ){
            var fp = GetFunctionPointer(7);
            var callback = (SetDrawInfoFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetDrawInfoFunc));
            
            return callback(m_ptr, drawInfo!=null ? drawInfo.Ptr : IntPtr.Zero);
        }
        delegate int SetDrawInfoFunc(IntPtr self, IntPtr drawInfo);

    }
    public class ID2D1ComputeTransform: ID2D1Transform
    {
        static Guid s_uuid = new Guid("0d85573c-01e3-4f7d-bfd9-0d60608bf3c3");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int SetComputeInfo(
            ID2D1ComputeInfo computeInfo
        ){
            var fp = GetFunctionPointer(7);
            var callback = (SetComputeInfoFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetComputeInfoFunc));
            
            return callback(m_ptr, computeInfo!=null ? computeInfo.Ptr : IntPtr.Zero);
        }
        delegate int SetComputeInfoFunc(IntPtr self, IntPtr computeInfo);

        public virtual int CalculateThreadgroups(
            ref tagRECT outputRect,
            out uint dimensionX,
            out uint dimensionY,
            out uint dimensionZ
        ){
            var fp = GetFunctionPointer(8);
            var callback = (CalculateThreadgroupsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CalculateThreadgroupsFunc));
            
            return callback(m_ptr, ref outputRect, out dimensionX, out dimensionY, out dimensionZ);
        }
        delegate int CalculateThreadgroupsFunc(IntPtr self, ref tagRECT outputRect, out uint dimensionX, out uint dimensionY, out uint dimensionZ);

    }
    public class ID2D1AnalysisTransform: IUnknown
    {
        static Guid s_uuid = new Guid("0359dc30-95e6-4568-9055-27720d130e93");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int ProcessAnalysisResults(
            ref byte analysisData,
            uint analysisDataCount
        ){
            var fp = GetFunctionPointer(3);
            var callback = (ProcessAnalysisResultsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ProcessAnalysisResultsFunc));
            
            return callback(m_ptr, ref analysisData, analysisDataCount);
        }
        delegate int ProcessAnalysisResultsFunc(IntPtr self, ref byte analysisData, uint analysisDataCount);

    }
    public class ID2D1SourceTransform: ID2D1Transform
    {
        static Guid s_uuid = new Guid("db1800dd-0c34-4cf9-be90-31cc0a5653e1");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int SetRenderInfo(
            ID2D1RenderInfo renderInfo
        ){
            var fp = GetFunctionPointer(7);
            var callback = (SetRenderInfoFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetRenderInfoFunc));
            
            return callback(m_ptr, renderInfo!=null ? renderInfo.Ptr : IntPtr.Zero);
        }
        delegate int SetRenderInfoFunc(IntPtr self, IntPtr renderInfo);

        public virtual int Draw(
            ID2D1Bitmap1 target,
            ref tagRECT drawRect,
            D2D_POINT_2U targetOrigin
        ){
            var fp = GetFunctionPointer(8);
            var callback = (DrawFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawFunc));
            
            return callback(m_ptr, target!=null ? target.Ptr : IntPtr.Zero, ref drawRect, targetOrigin);
        }
        delegate int DrawFunc(IntPtr self, IntPtr target, ref tagRECT drawRect, D2D_POINT_2U targetOrigin);

    }
    public class ID2D1EffectImpl: IUnknown
    {
        static Guid s_uuid = new Guid("a248fd3f-3e6c-4e63-9f03-7f68ecc91db9");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int Initialize(
            ID2D1EffectContext effectContext,
            ID2D1TransformGraph transformGraph
        ){
            var fp = GetFunctionPointer(3);
            var callback = (InitializeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(InitializeFunc));
            
            return callback(m_ptr, effectContext!=null ? effectContext.Ptr : IntPtr.Zero, transformGraph!=null ? transformGraph.Ptr : IntPtr.Zero);
        }
        delegate int InitializeFunc(IntPtr self, IntPtr effectContext, IntPtr transformGraph);

        public virtual int PrepareForRender(
            D2D1_CHANGE_TYPE changeType
        ){
            var fp = GetFunctionPointer(4);
            var callback = (PrepareForRenderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PrepareForRenderFunc));
            
            return callback(m_ptr, changeType);
        }
        delegate int PrepareForRenderFunc(IntPtr self, D2D1_CHANGE_TYPE changeType);

        public virtual int SetGraph(
            ID2D1TransformGraph transformGraph
        ){
            var fp = GetFunctionPointer(5);
            var callback = (SetGraphFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetGraphFunc));
            
            return callback(m_ptr, transformGraph!=null ? transformGraph.Ptr : IntPtr.Zero);
        }
        delegate int SetGraphFunc(IntPtr self, IntPtr transformGraph);

    }
}
