// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class IStorage: IUnknown
    {
        static Guid s_uuid = new Guid("0000000b-0000-0000-c000-000000000046");
        public static new ref Guid IID =>ref s_uuid;
        public override ref Guid GetIID(){ return ref s_uuid; }
                
        public virtual int CreateStream(
            ref ushort pwcsName,
            uint grfMode,
            uint reserved1,
            uint reserved2,
            out IStream ppstm
        ){
            var fp = GetFunctionPointer(3);
            if(m_CreateStreamFunc==null) m_CreateStreamFunc = (CreateStreamFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateStreamFunc));
            ppstm = new IStream();
            return m_CreateStreamFunc(m_ptr, ref pwcsName, grfMode, reserved1, reserved2, out ppstm.PtrForNew);
        }
        delegate int CreateStreamFunc(IntPtr self, ref ushort pwcsName, uint grfMode, uint reserved1, uint reserved2, out IntPtr ppstm);
        CreateStreamFunc m_CreateStreamFunc;

        public virtual int OpenStream(
            ref ushort pwcsName,
            IntPtr reserved1,
            uint grfMode,
            uint reserved2,
            out IStream ppstm
        ){
            var fp = GetFunctionPointer(4);
            if(m_OpenStreamFunc==null) m_OpenStreamFunc = (OpenStreamFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OpenStreamFunc));
            ppstm = new IStream();
            return m_OpenStreamFunc(m_ptr, ref pwcsName, reserved1, grfMode, reserved2, out ppstm.PtrForNew);
        }
        delegate int OpenStreamFunc(IntPtr self, ref ushort pwcsName, IntPtr reserved1, uint grfMode, uint reserved2, out IntPtr ppstm);
        OpenStreamFunc m_OpenStreamFunc;

        public virtual int CreateStorage(
            ref ushort pwcsName,
            uint grfMode,
            uint reserved1,
            uint reserved2,
            out IStorage ppstg
        ){
            var fp = GetFunctionPointer(5);
            if(m_CreateStorageFunc==null) m_CreateStorageFunc = (CreateStorageFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateStorageFunc));
            ppstg = new IStorage();
            return m_CreateStorageFunc(m_ptr, ref pwcsName, grfMode, reserved1, reserved2, out ppstg.PtrForNew);
        }
        delegate int CreateStorageFunc(IntPtr self, ref ushort pwcsName, uint grfMode, uint reserved1, uint reserved2, out IntPtr ppstg);
        CreateStorageFunc m_CreateStorageFunc;

        public virtual int OpenStorage(
            ref ushort pwcsName,
            IStorage pstgPriority,
            uint grfMode,
            out IntPtr snbExclude,
            uint reserved,
            out IStorage ppstg
        ){
            var fp = GetFunctionPointer(6);
            if(m_OpenStorageFunc==null) m_OpenStorageFunc = (OpenStorageFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OpenStorageFunc));
            ppstg = new IStorage();
            return m_OpenStorageFunc(m_ptr, ref pwcsName, pstgPriority!=null ? pstgPriority.Ptr : IntPtr.Zero, grfMode, out snbExclude, reserved, out ppstg.PtrForNew);
        }
        delegate int OpenStorageFunc(IntPtr self, ref ushort pwcsName, IntPtr pstgPriority, uint grfMode, out IntPtr snbExclude, uint reserved, out IntPtr ppstg);
        OpenStorageFunc m_OpenStorageFunc;

        public virtual int CopyTo(
            uint ciidExclude,
            ref Guid rgiidExclude,
            out IntPtr snbExclude,
            IStorage pstgDest
        ){
            var fp = GetFunctionPointer(7);
            if(m_CopyToFunc==null) m_CopyToFunc = (CopyToFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopyToFunc));
            
            return m_CopyToFunc(m_ptr, ciidExclude, ref rgiidExclude, out snbExclude, pstgDest!=null ? pstgDest.Ptr : IntPtr.Zero);
        }
        delegate int CopyToFunc(IntPtr self, uint ciidExclude, ref Guid rgiidExclude, out IntPtr snbExclude, IntPtr pstgDest);
        CopyToFunc m_CopyToFunc;

        public virtual int MoveElementTo(
            ref ushort pwcsName,
            IStorage pstgDest,
            ref ushort pwcsNewName,
            uint grfFlags
        ){
            var fp = GetFunctionPointer(8);
            if(m_MoveElementToFunc==null) m_MoveElementToFunc = (MoveElementToFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(MoveElementToFunc));
            
            return m_MoveElementToFunc(m_ptr, ref pwcsName, pstgDest!=null ? pstgDest.Ptr : IntPtr.Zero, ref pwcsNewName, grfFlags);
        }
        delegate int MoveElementToFunc(IntPtr self, ref ushort pwcsName, IntPtr pstgDest, ref ushort pwcsNewName, uint grfFlags);
        MoveElementToFunc m_MoveElementToFunc;

        public virtual int Commit(
            uint grfCommitFlags
        ){
            var fp = GetFunctionPointer(9);
            if(m_CommitFunc==null) m_CommitFunc = (CommitFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CommitFunc));
            
            return m_CommitFunc(m_ptr, grfCommitFlags);
        }
        delegate int CommitFunc(IntPtr self, uint grfCommitFlags);
        CommitFunc m_CommitFunc;

        public virtual int Revert(
        ){
            var fp = GetFunctionPointer(10);
            if(m_RevertFunc==null) m_RevertFunc = (RevertFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RevertFunc));
            
            return m_RevertFunc(m_ptr);
        }
        delegate int RevertFunc(IntPtr self);
        RevertFunc m_RevertFunc;

        public virtual int EnumElements(
            uint reserved1,
            IntPtr reserved2,
            uint reserved3,
            out IEnumSTATSTG ppenum
        ){
            var fp = GetFunctionPointer(11);
            if(m_EnumElementsFunc==null) m_EnumElementsFunc = (EnumElementsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(EnumElementsFunc));
            ppenum = new IEnumSTATSTG();
            return m_EnumElementsFunc(m_ptr, reserved1, reserved2, reserved3, out ppenum.PtrForNew);
        }
        delegate int EnumElementsFunc(IntPtr self, uint reserved1, IntPtr reserved2, uint reserved3, out IntPtr ppenum);
        EnumElementsFunc m_EnumElementsFunc;

        public virtual int DestroyElement(
            ref ushort pwcsName
        ){
            var fp = GetFunctionPointer(12);
            if(m_DestroyElementFunc==null) m_DestroyElementFunc = (DestroyElementFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DestroyElementFunc));
            
            return m_DestroyElementFunc(m_ptr, ref pwcsName);
        }
        delegate int DestroyElementFunc(IntPtr self, ref ushort pwcsName);
        DestroyElementFunc m_DestroyElementFunc;

        public virtual int RenameElement(
            ref ushort pwcsOldName,
            ref ushort pwcsNewName
        ){
            var fp = GetFunctionPointer(13);
            if(m_RenameElementFunc==null) m_RenameElementFunc = (RenameElementFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RenameElementFunc));
            
            return m_RenameElementFunc(m_ptr, ref pwcsOldName, ref pwcsNewName);
        }
        delegate int RenameElementFunc(IntPtr self, ref ushort pwcsOldName, ref ushort pwcsNewName);
        RenameElementFunc m_RenameElementFunc;

        public virtual int SetElementTimes(
            ref ushort pwcsName,
            ref _FILETIME pctime,
            ref _FILETIME patime,
            ref _FILETIME pmtime
        ){
            var fp = GetFunctionPointer(14);
            if(m_SetElementTimesFunc==null) m_SetElementTimesFunc = (SetElementTimesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetElementTimesFunc));
            
            return m_SetElementTimesFunc(m_ptr, ref pwcsName, ref pctime, ref patime, ref pmtime);
        }
        delegate int SetElementTimesFunc(IntPtr self, ref ushort pwcsName, ref _FILETIME pctime, ref _FILETIME patime, ref _FILETIME pmtime);
        SetElementTimesFunc m_SetElementTimesFunc;

        public virtual int SetClass(
            ref Guid clsid
        ){
            var fp = GetFunctionPointer(15);
            if(m_SetClassFunc==null) m_SetClassFunc = (SetClassFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetClassFunc));
            
            return m_SetClassFunc(m_ptr, ref clsid);
        }
        delegate int SetClassFunc(IntPtr self, ref Guid clsid);
        SetClassFunc m_SetClassFunc;

        public virtual int SetStateBits(
            uint grfStateBits,
            uint grfMask
        ){
            var fp = GetFunctionPointer(16);
            if(m_SetStateBitsFunc==null) m_SetStateBitsFunc = (SetStateBitsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetStateBitsFunc));
            
            return m_SetStateBitsFunc(m_ptr, grfStateBits, grfMask);
        }
        delegate int SetStateBitsFunc(IntPtr self, uint grfStateBits, uint grfMask);
        SetStateBitsFunc m_SetStateBitsFunc;

        public virtual int Stat(
            out tagSTATSTG pstatstg,
            uint grfStatFlag
        ){
            var fp = GetFunctionPointer(17);
            if(m_StatFunc==null) m_StatFunc = (StatFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(StatFunc));
            
            return m_StatFunc(m_ptr, out pstatstg, grfStatFlag);
        }
        delegate int StatFunc(IntPtr self, out tagSTATSTG pstatstg, uint grfStatFlag);
        StatFunc m_StatFunc;

    }
}
