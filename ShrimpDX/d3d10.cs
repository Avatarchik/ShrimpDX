// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;
using HRESULT = System.Int32;

namespace ShrimpDX {
    public static partial class Constants {
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct D3D10_SHADER_RESOURCE_VIEW_DESC__anonymous_24
    {
        [FieldOffset(0)]
        public D3D10_BUFFER_SRV Buffer;
        [FieldOffset(0)]
        public D3D10_TEX1D_SRV Texture1D;
        [FieldOffset(0)]
        public D3D10_TEX1D_ARRAY_SRV Texture1DArray;
        [FieldOffset(0)]
        public D3D10_TEX2D_SRV Texture2D;
        [FieldOffset(0)]
        public D3D10_TEX2D_ARRAY_SRV Texture2DArray;
        [FieldOffset(0)]
        public D3D10_TEX2DMS_SRV Texture2DMS;
        [FieldOffset(0)]
        public D3D10_TEX2DMS_ARRAY_SRV Texture2DMSArray;
        [FieldOffset(0)]
        public D3D10_TEX3D_SRV Texture3D;
        [FieldOffset(0)]
        public D3D10_TEXCUBE_SRV TextureCube;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct D3D10_BUFFER_SRV__anonymous_27
    {
        [FieldOffset(0)]
        public uint FirstElement;
        [FieldOffset(0)]
        public uint ElementOffset;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct D3D10_BUFFER_SRV__anonymous_28
    {
        [FieldOffset(0)]
        public uint NumElements;
        [FieldOffset(0)]
        public uint ElementWidth;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct D3D10_RENDER_TARGET_VIEW_DESC__anonymous_80
    {
        [FieldOffset(0)]
        public D3D10_BUFFER_RTV Buffer;
        [FieldOffset(0)]
        public D3D10_TEX1D_RTV Texture1D;
        [FieldOffset(0)]
        public D3D10_TEX1D_ARRAY_RTV Texture1DArray;
        [FieldOffset(0)]
        public D3D10_TEX2D_RTV Texture2D;
        [FieldOffset(0)]
        public D3D10_TEX2D_ARRAY_RTV Texture2DArray;
        [FieldOffset(0)]
        public D3D10_TEX2DMS_RTV Texture2DMS;
        [FieldOffset(0)]
        public D3D10_TEX2DMS_ARRAY_RTV Texture2DMSArray;
        [FieldOffset(0)]
        public D3D10_TEX3D_RTV Texture3D;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct D3D10_BUFFER_RTV__anonymous_83
    {
        [FieldOffset(0)]
        public uint FirstElement;
        [FieldOffset(0)]
        public uint ElementOffset;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct D3D10_BUFFER_RTV__anonymous_84
    {
        [FieldOffset(0)]
        public uint NumElements;
        [FieldOffset(0)]
        public uint ElementWidth;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct D3D10_DEPTH_STENCIL_VIEW_DESC__anonymous_105
    {
        [FieldOffset(0)]
        public D3D10_TEX1D_DSV Texture1D;
        [FieldOffset(0)]
        public D3D10_TEX1D_ARRAY_DSV Texture1DArray;
        [FieldOffset(0)]
        public D3D10_TEX2D_DSV Texture2D;
        [FieldOffset(0)]
        public D3D10_TEX2D_ARRAY_DSV Texture2DArray;
        [FieldOffset(0)]
        public D3D10_TEX2DMS_DSV Texture2DMS;
        [FieldOffset(0)]
        public D3D10_TEX2DMS_ARRAY_DSV Texture2DMSArray;
    }
    public class ID3D10Device: IUnknown
    {
        static /*readonly*/ Guid s_uuid = new Guid("9b7e4c0f-342c-4106-a19f-4f2704f689f0");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public void VSSetConstantBuffers(
            uint StartSlot,
            uint NumBuffers,
            ref IntPtr ppConstantBuffers
        ){
            var fp = GetFunctionPointer(3);
            var callback = (VSSetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSSetConstantBuffersFunc));
            
            callback(Self, StartSlot, NumBuffers, ref ppConstantBuffers);
        }
        delegate void VSSetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers);

        public void PSSetShaderResources(
            uint StartSlot,
            uint NumViews,
            ref IntPtr ppShaderResourceViews
        ){
            var fp = GetFunctionPointer(4);
            var callback = (PSSetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSSetShaderResourcesFunc));
            
            callback(Self, StartSlot, NumViews, ref ppShaderResourceViews);
        }
        delegate void PSSetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews);

        public void PSSetShader(
            ID3D10PixelShader pPixelShader
        ){
            var fp = GetFunctionPointer(5);
            var callback = (PSSetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSSetShaderFunc));
            
            callback(Self, pPixelShader.Ptr);
        }
        delegate void PSSetShaderFunc(IntPtr self, IntPtr pPixelShader);

        public void PSSetSamplers(
            uint StartSlot,
            uint NumSamplers,
            ref IntPtr ppSamplers
        ){
            var fp = GetFunctionPointer(6);
            var callback = (PSSetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSSetSamplersFunc));
            
            callback(Self, StartSlot, NumSamplers, ref ppSamplers);
        }
        delegate void PSSetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers);

        public void VSSetShader(
            ID3D10VertexShader pVertexShader
        ){
            var fp = GetFunctionPointer(7);
            var callback = (VSSetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSSetShaderFunc));
            
            callback(Self, pVertexShader.Ptr);
        }
        delegate void VSSetShaderFunc(IntPtr self, IntPtr pVertexShader);

        public void DrawIndexed(
            uint IndexCount,
            uint StartIndexLocation,
            int BaseVertexLocation
        ){
            var fp = GetFunctionPointer(8);
            var callback = (DrawIndexedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawIndexedFunc));
            
            callback(Self, IndexCount, StartIndexLocation, BaseVertexLocation);
        }
        delegate void DrawIndexedFunc(IntPtr self, uint IndexCount, uint StartIndexLocation, int BaseVertexLocation);

        public void Draw(
            uint VertexCount,
            uint StartVertexLocation
        ){
            var fp = GetFunctionPointer(9);
            var callback = (DrawFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawFunc));
            
            callback(Self, VertexCount, StartVertexLocation);
        }
        delegate void DrawFunc(IntPtr self, uint VertexCount, uint StartVertexLocation);

        public void PSSetConstantBuffers(
            uint StartSlot,
            uint NumBuffers,
            ref IntPtr ppConstantBuffers
        ){
            var fp = GetFunctionPointer(10);
            var callback = (PSSetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSSetConstantBuffersFunc));
            
            callback(Self, StartSlot, NumBuffers, ref ppConstantBuffers);
        }
        delegate void PSSetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers);

        public void IASetInputLayout(
            ID3D10InputLayout pInputLayout
        ){
            var fp = GetFunctionPointer(11);
            var callback = (IASetInputLayoutFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IASetInputLayoutFunc));
            
            callback(Self, pInputLayout.Ptr);
        }
        delegate void IASetInputLayoutFunc(IntPtr self, IntPtr pInputLayout);

        public void IASetVertexBuffers(
            uint StartSlot,
            uint NumBuffers,
            ref IntPtr ppVertexBuffers,
            ref uint pStrides,
            ref uint pOffsets
        ){
            var fp = GetFunctionPointer(12);
            var callback = (IASetVertexBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IASetVertexBuffersFunc));
            
            callback(Self, StartSlot, NumBuffers, ref ppVertexBuffers, ref pStrides, ref pOffsets);
        }
        delegate void IASetVertexBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppVertexBuffers, ref uint pStrides, ref uint pOffsets);

        public void IASetIndexBuffer(
            ID3D10Buffer pIndexBuffer,
            DXGI_FORMAT Format,
            uint Offset
        ){
            var fp = GetFunctionPointer(13);
            var callback = (IASetIndexBufferFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IASetIndexBufferFunc));
            
            callback(Self, pIndexBuffer.Ptr, Format, Offset);
        }
        delegate void IASetIndexBufferFunc(IntPtr self, IntPtr pIndexBuffer, DXGI_FORMAT Format, uint Offset);

        public void DrawIndexedInstanced(
            uint IndexCountPerInstance,
            uint InstanceCount,
            uint StartIndexLocation,
            int BaseVertexLocation,
            uint StartInstanceLocation
        ){
            var fp = GetFunctionPointer(14);
            var callback = (DrawIndexedInstancedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawIndexedInstancedFunc));
            
            callback(Self, IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation);
        }
        delegate void DrawIndexedInstancedFunc(IntPtr self, uint IndexCountPerInstance, uint InstanceCount, uint StartIndexLocation, int BaseVertexLocation, uint StartInstanceLocation);

        public void DrawInstanced(
            uint VertexCountPerInstance,
            uint InstanceCount,
            uint StartVertexLocation,
            uint StartInstanceLocation
        ){
            var fp = GetFunctionPointer(15);
            var callback = (DrawInstancedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawInstancedFunc));
            
            callback(Self, VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation);
        }
        delegate void DrawInstancedFunc(IntPtr self, uint VertexCountPerInstance, uint InstanceCount, uint StartVertexLocation, uint StartInstanceLocation);

        public void GSSetConstantBuffers(
            uint StartSlot,
            uint NumBuffers,
            ref IntPtr ppConstantBuffers
        ){
            var fp = GetFunctionPointer(16);
            var callback = (GSSetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSSetConstantBuffersFunc));
            
            callback(Self, StartSlot, NumBuffers, ref ppConstantBuffers);
        }
        delegate void GSSetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers);

        public void GSSetShader(
            ID3D10GeometryShader pShader
        ){
            var fp = GetFunctionPointer(17);
            var callback = (GSSetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSSetShaderFunc));
            
            callback(Self, pShader.Ptr);
        }
        delegate void GSSetShaderFunc(IntPtr self, IntPtr pShader);

        public void IASetPrimitiveTopology(
            D3D10_PRIMITIVE_TOPOLOGY Topology
        ){
            var fp = GetFunctionPointer(18);
            var callback = (IASetPrimitiveTopologyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IASetPrimitiveTopologyFunc));
            
            callback(Self, Topology);
        }
        delegate void IASetPrimitiveTopologyFunc(IntPtr self, D3D10_PRIMITIVE_TOPOLOGY Topology);

        public void VSSetShaderResources(
            uint StartSlot,
            uint NumViews,
            ref IntPtr ppShaderResourceViews
        ){
            var fp = GetFunctionPointer(19);
            var callback = (VSSetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSSetShaderResourcesFunc));
            
            callback(Self, StartSlot, NumViews, ref ppShaderResourceViews);
        }
        delegate void VSSetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews);

        public void VSSetSamplers(
            uint StartSlot,
            uint NumSamplers,
            ref IntPtr ppSamplers
        ){
            var fp = GetFunctionPointer(20);
            var callback = (VSSetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSSetSamplersFunc));
            
            callback(Self, StartSlot, NumSamplers, ref ppSamplers);
        }
        delegate void VSSetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers);

        public void SetPredication(
            ID3D10Predicate pPredicate,
            int PredicateValue
        ){
            var fp = GetFunctionPointer(21);
            var callback = (SetPredicationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetPredicationFunc));
            
            callback(Self, pPredicate.Ptr, PredicateValue);
        }
        delegate void SetPredicationFunc(IntPtr self, IntPtr pPredicate, int PredicateValue);

        public void GSSetShaderResources(
            uint StartSlot,
            uint NumViews,
            ref IntPtr ppShaderResourceViews
        ){
            var fp = GetFunctionPointer(22);
            var callback = (GSSetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSSetShaderResourcesFunc));
            
            callback(Self, StartSlot, NumViews, ref ppShaderResourceViews);
        }
        delegate void GSSetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews);

        public void GSSetSamplers(
            uint StartSlot,
            uint NumSamplers,
            ref IntPtr ppSamplers
        ){
            var fp = GetFunctionPointer(23);
            var callback = (GSSetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSSetSamplersFunc));
            
            callback(Self, StartSlot, NumSamplers, ref ppSamplers);
        }
        delegate void GSSetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers);

        public void OMSetRenderTargets(
            uint NumViews,
            ref IntPtr ppRenderTargetViews,
            ID3D10DepthStencilView pDepthStencilView
        ){
            var fp = GetFunctionPointer(24);
            var callback = (OMSetRenderTargetsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMSetRenderTargetsFunc));
            
            callback(Self, NumViews, ref ppRenderTargetViews, pDepthStencilView.Ptr);
        }
        delegate void OMSetRenderTargetsFunc(IntPtr self, uint NumViews, ref IntPtr ppRenderTargetViews, IntPtr pDepthStencilView);

        public void OMSetBlendState(
            ID3D10BlendState pBlendState,
            ref float BlendFactor,
            uint SampleMask
        ){
            var fp = GetFunctionPointer(25);
            var callback = (OMSetBlendStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMSetBlendStateFunc));
            
            callback(Self, pBlendState.Ptr, ref BlendFactor, SampleMask);
        }
        delegate void OMSetBlendStateFunc(IntPtr self, IntPtr pBlendState, ref float BlendFactor, uint SampleMask);

        public void OMSetDepthStencilState(
            ID3D10DepthStencilState pDepthStencilState,
            uint StencilRef
        ){
            var fp = GetFunctionPointer(26);
            var callback = (OMSetDepthStencilStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMSetDepthStencilStateFunc));
            
            callback(Self, pDepthStencilState.Ptr, StencilRef);
        }
        delegate void OMSetDepthStencilStateFunc(IntPtr self, IntPtr pDepthStencilState, uint StencilRef);

        public void SOSetTargets(
            uint NumBuffers,
            ref IntPtr ppSOTargets,
            ref uint pOffsets
        ){
            var fp = GetFunctionPointer(27);
            var callback = (SOSetTargetsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SOSetTargetsFunc));
            
            callback(Self, NumBuffers, ref ppSOTargets, ref pOffsets);
        }
        delegate void SOSetTargetsFunc(IntPtr self, uint NumBuffers, ref IntPtr ppSOTargets, ref uint pOffsets);

        public void DrawAuto(
        ){
            var fp = GetFunctionPointer(28);
            var callback = (DrawAutoFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawAutoFunc));
            
            callback(Self);
        }
        delegate void DrawAutoFunc(IntPtr self);

        public void RSSetState(
            ID3D10RasterizerState pRasterizerState
        ){
            var fp = GetFunctionPointer(29);
            var callback = (RSSetStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RSSetStateFunc));
            
            callback(Self, pRasterizerState.Ptr);
        }
        delegate void RSSetStateFunc(IntPtr self, IntPtr pRasterizerState);

        public void RSSetViewports(
            uint NumViewports,
            ref D3D10_VIEWPORT pViewports
        ){
            var fp = GetFunctionPointer(30);
            var callback = (RSSetViewportsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RSSetViewportsFunc));
            
            callback(Self, NumViewports, ref pViewports);
        }
        delegate void RSSetViewportsFunc(IntPtr self, uint NumViewports, ref D3D10_VIEWPORT pViewports);

        public void RSSetScissorRects(
            uint NumRects,
            ref D3D10_RECT pRects
        ){
            var fp = GetFunctionPointer(31);
            var callback = (RSSetScissorRectsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RSSetScissorRectsFunc));
            
            callback(Self, NumRects, ref pRects);
        }
        delegate void RSSetScissorRectsFunc(IntPtr self, uint NumRects, ref D3D10_RECT pRects);

        public void CopySubresourceRegion(
            ID3D10Resource pDstResource,
            uint DstSubresource,
            uint DstX,
            uint DstY,
            uint DstZ,
            ID3D10Resource pSrcResource,
            uint SrcSubresource,
            ref D3D10_BOX pSrcBox
        ){
            var fp = GetFunctionPointer(32);
            var callback = (CopySubresourceRegionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopySubresourceRegionFunc));
            
            callback(Self, pDstResource.Ptr, DstSubresource, DstX, DstY, DstZ, pSrcResource.Ptr, SrcSubresource, ref pSrcBox);
        }
        delegate void CopySubresourceRegionFunc(IntPtr self, IntPtr pDstResource, uint DstSubresource, uint DstX, uint DstY, uint DstZ, IntPtr pSrcResource, uint SrcSubresource, ref D3D10_BOX pSrcBox);

        public void CopyResource(
            ID3D10Resource pDstResource,
            ID3D10Resource pSrcResource
        ){
            var fp = GetFunctionPointer(33);
            var callback = (CopyResourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopyResourceFunc));
            
            callback(Self, pDstResource.Ptr, pSrcResource.Ptr);
        }
        delegate void CopyResourceFunc(IntPtr self, IntPtr pDstResource, IntPtr pSrcResource);

        public void UpdateSubresource(
            ID3D10Resource pDstResource,
            uint DstSubresource,
            ref D3D10_BOX pDstBox,
            IntPtr pSrcData,
            uint SrcRowPitch,
            uint SrcDepthPitch
        ){
            var fp = GetFunctionPointer(34);
            var callback = (UpdateSubresourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(UpdateSubresourceFunc));
            
            callback(Self, pDstResource.Ptr, DstSubresource, ref pDstBox, pSrcData, SrcRowPitch, SrcDepthPitch);
        }
        delegate void UpdateSubresourceFunc(IntPtr self, IntPtr pDstResource, uint DstSubresource, ref D3D10_BOX pDstBox, IntPtr pSrcData, uint SrcRowPitch, uint SrcDepthPitch);

        public void ClearRenderTargetView(
            ID3D10RenderTargetView pRenderTargetView,
            ref float ColorRGBA
        ){
            var fp = GetFunctionPointer(35);
            var callback = (ClearRenderTargetViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ClearRenderTargetViewFunc));
            
            callback(Self, pRenderTargetView.Ptr, ref ColorRGBA);
        }
        delegate void ClearRenderTargetViewFunc(IntPtr self, IntPtr pRenderTargetView, ref float ColorRGBA);

        public void ClearDepthStencilView(
            ID3D10DepthStencilView pDepthStencilView,
            uint ClearFlags,
            float Depth,
            UINT8 Stencil
        ){
            var fp = GetFunctionPointer(36);
            var callback = (ClearDepthStencilViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ClearDepthStencilViewFunc));
            
            callback(Self, pDepthStencilView.Ptr, ClearFlags, Depth, Stencil);
        }
        delegate void ClearDepthStencilViewFunc(IntPtr self, IntPtr pDepthStencilView, uint ClearFlags, float Depth, UINT8 Stencil);

        public void GenerateMips(
            ID3D10ShaderResourceView pShaderResourceView
        ){
            var fp = GetFunctionPointer(37);
            var callback = (GenerateMipsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GenerateMipsFunc));
            
            callback(Self, pShaderResourceView.Ptr);
        }
        delegate void GenerateMipsFunc(IntPtr self, IntPtr pShaderResourceView);

        public void ResolveSubresource(
            ID3D10Resource pDstResource,
            uint DstSubresource,
            ID3D10Resource pSrcResource,
            uint SrcSubresource,
            DXGI_FORMAT Format
        ){
            var fp = GetFunctionPointer(38);
            var callback = (ResolveSubresourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ResolveSubresourceFunc));
            
            callback(Self, pDstResource.Ptr, DstSubresource, pSrcResource.Ptr, SrcSubresource, Format);
        }
        delegate void ResolveSubresourceFunc(IntPtr self, IntPtr pDstResource, uint DstSubresource, IntPtr pSrcResource, uint SrcSubresource, DXGI_FORMAT Format);

        public void VSGetConstantBuffers(
            uint StartSlot,
            uint NumBuffers,
            out ID3D10Buffer ppConstantBuffers
        ){
            var fp = GetFunctionPointer(39);
            var callback = (VSGetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSGetConstantBuffersFunc));
            ppConstantBuffers = new ID3D10Buffer();
            callback(Self, StartSlot, NumBuffers, out ppConstantBuffers.PtrForNew);
        }
        delegate void VSGetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, out IntPtr ppConstantBuffers);

        public void PSGetShaderResources(
            uint StartSlot,
            uint NumViews,
            out ID3D10ShaderResourceView ppShaderResourceViews
        ){
            var fp = GetFunctionPointer(40);
            var callback = (PSGetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSGetShaderResourcesFunc));
            ppShaderResourceViews = new ID3D10ShaderResourceView();
            callback(Self, StartSlot, NumViews, out ppShaderResourceViews.PtrForNew);
        }
        delegate void PSGetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, out IntPtr ppShaderResourceViews);

        public void PSGetShader(
            out ID3D10PixelShader ppPixelShader
        ){
            var fp = GetFunctionPointer(41);
            var callback = (PSGetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSGetShaderFunc));
            ppPixelShader = new ID3D10PixelShader();
            callback(Self, out ppPixelShader.PtrForNew);
        }
        delegate void PSGetShaderFunc(IntPtr self, out IntPtr ppPixelShader);

        public void PSGetSamplers(
            uint StartSlot,
            uint NumSamplers,
            out ID3D10SamplerState ppSamplers
        ){
            var fp = GetFunctionPointer(42);
            var callback = (PSGetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSGetSamplersFunc));
            ppSamplers = new ID3D10SamplerState();
            callback(Self, StartSlot, NumSamplers, out ppSamplers.PtrForNew);
        }
        delegate void PSGetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, out IntPtr ppSamplers);

        public void VSGetShader(
            out ID3D10VertexShader ppVertexShader
        ){
            var fp = GetFunctionPointer(43);
            var callback = (VSGetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSGetShaderFunc));
            ppVertexShader = new ID3D10VertexShader();
            callback(Self, out ppVertexShader.PtrForNew);
        }
        delegate void VSGetShaderFunc(IntPtr self, out IntPtr ppVertexShader);

        public void PSGetConstantBuffers(
            uint StartSlot,
            uint NumBuffers,
            out ID3D10Buffer ppConstantBuffers
        ){
            var fp = GetFunctionPointer(44);
            var callback = (PSGetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSGetConstantBuffersFunc));
            ppConstantBuffers = new ID3D10Buffer();
            callback(Self, StartSlot, NumBuffers, out ppConstantBuffers.PtrForNew);
        }
        delegate void PSGetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, out IntPtr ppConstantBuffers);

        public void IAGetInputLayout(
            out ID3D10InputLayout ppInputLayout
        ){
            var fp = GetFunctionPointer(45);
            var callback = (IAGetInputLayoutFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IAGetInputLayoutFunc));
            ppInputLayout = new ID3D10InputLayout();
            callback(Self, out ppInputLayout.PtrForNew);
        }
        delegate void IAGetInputLayoutFunc(IntPtr self, out IntPtr ppInputLayout);

        public void IAGetVertexBuffers(
            uint StartSlot,
            uint NumBuffers,
            out ID3D10Buffer ppVertexBuffers,
            out uint pStrides,
            out uint pOffsets
        ){
            var fp = GetFunctionPointer(46);
            var callback = (IAGetVertexBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IAGetVertexBuffersFunc));
            ppVertexBuffers = new ID3D10Buffer();
            callback(Self, StartSlot, NumBuffers, out ppVertexBuffers.PtrForNew, out pStrides, out pOffsets);
        }
        delegate void IAGetVertexBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, out IntPtr ppVertexBuffers, out uint pStrides, out uint pOffsets);

        public void IAGetIndexBuffer(
            out ID3D10Buffer pIndexBuffer,
            out DXGI_FORMAT Format,
            out uint Offset
        ){
            var fp = GetFunctionPointer(47);
            var callback = (IAGetIndexBufferFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IAGetIndexBufferFunc));
            pIndexBuffer = new ID3D10Buffer();
            callback(Self, out pIndexBuffer.PtrForNew, out Format, out Offset);
        }
        delegate void IAGetIndexBufferFunc(IntPtr self, out IntPtr pIndexBuffer, out DXGI_FORMAT Format, out uint Offset);

        public void GSGetConstantBuffers(
            uint StartSlot,
            uint NumBuffers,
            out ID3D10Buffer ppConstantBuffers
        ){
            var fp = GetFunctionPointer(48);
            var callback = (GSGetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSGetConstantBuffersFunc));
            ppConstantBuffers = new ID3D10Buffer();
            callback(Self, StartSlot, NumBuffers, out ppConstantBuffers.PtrForNew);
        }
        delegate void GSGetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, out IntPtr ppConstantBuffers);

        public void GSGetShader(
            out ID3D10GeometryShader ppGeometryShader
        ){
            var fp = GetFunctionPointer(49);
            var callback = (GSGetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSGetShaderFunc));
            ppGeometryShader = new ID3D10GeometryShader();
            callback(Self, out ppGeometryShader.PtrForNew);
        }
        delegate void GSGetShaderFunc(IntPtr self, out IntPtr ppGeometryShader);

        public void IAGetPrimitiveTopology(
            out D3D10_PRIMITIVE_TOPOLOGY pTopology
        ){
            var fp = GetFunctionPointer(50);
            var callback = (IAGetPrimitiveTopologyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IAGetPrimitiveTopologyFunc));
            
            callback(Self, out pTopology);
        }
        delegate void IAGetPrimitiveTopologyFunc(IntPtr self, out D3D10_PRIMITIVE_TOPOLOGY pTopology);

        public void VSGetShaderResources(
            uint StartSlot,
            uint NumViews,
            out ID3D10ShaderResourceView ppShaderResourceViews
        ){
            var fp = GetFunctionPointer(51);
            var callback = (VSGetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSGetShaderResourcesFunc));
            ppShaderResourceViews = new ID3D10ShaderResourceView();
            callback(Self, StartSlot, NumViews, out ppShaderResourceViews.PtrForNew);
        }
        delegate void VSGetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, out IntPtr ppShaderResourceViews);

        public void VSGetSamplers(
            uint StartSlot,
            uint NumSamplers,
            out ID3D10SamplerState ppSamplers
        ){
            var fp = GetFunctionPointer(52);
            var callback = (VSGetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSGetSamplersFunc));
            ppSamplers = new ID3D10SamplerState();
            callback(Self, StartSlot, NumSamplers, out ppSamplers.PtrForNew);
        }
        delegate void VSGetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, out IntPtr ppSamplers);

        public void GetPredication(
            out ID3D10Predicate ppPredicate,
            out int pPredicateValue
        ){
            var fp = GetFunctionPointer(53);
            var callback = (GetPredicationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPredicationFunc));
            ppPredicate = new ID3D10Predicate();
            callback(Self, out ppPredicate.PtrForNew, out pPredicateValue);
        }
        delegate void GetPredicationFunc(IntPtr self, out IntPtr ppPredicate, out int pPredicateValue);

        public void GSGetShaderResources(
            uint StartSlot,
            uint NumViews,
            out ID3D10ShaderResourceView ppShaderResourceViews
        ){
            var fp = GetFunctionPointer(54);
            var callback = (GSGetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSGetShaderResourcesFunc));
            ppShaderResourceViews = new ID3D10ShaderResourceView();
            callback(Self, StartSlot, NumViews, out ppShaderResourceViews.PtrForNew);
        }
        delegate void GSGetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, out IntPtr ppShaderResourceViews);

        public void GSGetSamplers(
            uint StartSlot,
            uint NumSamplers,
            out ID3D10SamplerState ppSamplers
        ){
            var fp = GetFunctionPointer(55);
            var callback = (GSGetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSGetSamplersFunc));
            ppSamplers = new ID3D10SamplerState();
            callback(Self, StartSlot, NumSamplers, out ppSamplers.PtrForNew);
        }
        delegate void GSGetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, out IntPtr ppSamplers);

        public void OMGetRenderTargets(
            uint NumViews,
            out ID3D10RenderTargetView ppRenderTargetViews,
            out ID3D10DepthStencilView ppDepthStencilView
        ){
            var fp = GetFunctionPointer(56);
            var callback = (OMGetRenderTargetsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMGetRenderTargetsFunc));
            ppRenderTargetViews = new ID3D10RenderTargetView();ppDepthStencilView = new ID3D10DepthStencilView();
            callback(Self, NumViews, out ppRenderTargetViews.PtrForNew, out ppDepthStencilView.PtrForNew);
        }
        delegate void OMGetRenderTargetsFunc(IntPtr self, uint NumViews, out IntPtr ppRenderTargetViews, out IntPtr ppDepthStencilView);

        public void OMGetBlendState(
            out ID3D10BlendState ppBlendState,
            ref float BlendFactor,
            out uint pSampleMask
        ){
            var fp = GetFunctionPointer(57);
            var callback = (OMGetBlendStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMGetBlendStateFunc));
            ppBlendState = new ID3D10BlendState();
            callback(Self, out ppBlendState.PtrForNew, ref BlendFactor, out pSampleMask);
        }
        delegate void OMGetBlendStateFunc(IntPtr self, out IntPtr ppBlendState, ref float BlendFactor, out uint pSampleMask);

        public void OMGetDepthStencilState(
            out ID3D10DepthStencilState ppDepthStencilState,
            out uint pStencilRef
        ){
            var fp = GetFunctionPointer(58);
            var callback = (OMGetDepthStencilStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMGetDepthStencilStateFunc));
            ppDepthStencilState = new ID3D10DepthStencilState();
            callback(Self, out ppDepthStencilState.PtrForNew, out pStencilRef);
        }
        delegate void OMGetDepthStencilStateFunc(IntPtr self, out IntPtr ppDepthStencilState, out uint pStencilRef);

        public void SOGetTargets(
            uint NumBuffers,
            out ID3D10Buffer ppSOTargets,
            out uint pOffsets
        ){
            var fp = GetFunctionPointer(59);
            var callback = (SOGetTargetsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SOGetTargetsFunc));
            ppSOTargets = new ID3D10Buffer();
            callback(Self, NumBuffers, out ppSOTargets.PtrForNew, out pOffsets);
        }
        delegate void SOGetTargetsFunc(IntPtr self, uint NumBuffers, out IntPtr ppSOTargets, out uint pOffsets);

        public void RSGetState(
            out ID3D10RasterizerState ppRasterizerState
        ){
            var fp = GetFunctionPointer(60);
            var callback = (RSGetStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RSGetStateFunc));
            ppRasterizerState = new ID3D10RasterizerState();
            callback(Self, out ppRasterizerState.PtrForNew);
        }
        delegate void RSGetStateFunc(IntPtr self, out IntPtr ppRasterizerState);

        public void RSGetViewports(
            out uint NumViewports,
            out D3D10_VIEWPORT pViewports
        ){
            var fp = GetFunctionPointer(61);
            var callback = (RSGetViewportsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RSGetViewportsFunc));
            
            callback(Self, out NumViewports, out pViewports);
        }
        delegate void RSGetViewportsFunc(IntPtr self, out uint NumViewports, out D3D10_VIEWPORT pViewports);

        public void RSGetScissorRects(
            out uint NumRects,
            out D3D10_RECT pRects
        ){
            var fp = GetFunctionPointer(62);
            var callback = (RSGetScissorRectsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RSGetScissorRectsFunc));
            
            callback(Self, out NumRects, out pRects);
        }
        delegate void RSGetScissorRectsFunc(IntPtr self, out uint NumRects, out D3D10_RECT pRects);

        public HRESULT GetDeviceRemovedReason(
        ){
            var fp = GetFunctionPointer(63);
            var callback = (GetDeviceRemovedReasonFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDeviceRemovedReasonFunc));
            
            return callback(Self);
        }
        delegate HRESULT GetDeviceRemovedReasonFunc(IntPtr self);

        public HRESULT SetExceptionMode(
            uint RaiseFlags
        ){
            var fp = GetFunctionPointer(64);
            var callback = (SetExceptionModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetExceptionModeFunc));
            
            return callback(Self, RaiseFlags);
        }
        delegate HRESULT SetExceptionModeFunc(IntPtr self, uint RaiseFlags);

        public uint GetExceptionMode(
        ){
            var fp = GetFunctionPointer(65);
            var callback = (GetExceptionModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetExceptionModeFunc));
            
            return callback(Self);
        }
        delegate uint GetExceptionModeFunc(IntPtr self);

        public HRESULT GetPrivateData(
            ref Guid guid,
            out uint pDataSize,
            IntPtr pData
        ){
            var fp = GetFunctionPointer(66);
            var callback = (GetPrivateDataFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPrivateDataFunc));
            
            return callback(Self, ref guid, out pDataSize, pData);
        }
        delegate HRESULT GetPrivateDataFunc(IntPtr self, ref Guid guid, out uint pDataSize, IntPtr pData);

        public HRESULT SetPrivateData(
            ref Guid guid,
            uint DataSize,
            IntPtr pData
        ){
            var fp = GetFunctionPointer(67);
            var callback = (SetPrivateDataFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetPrivateDataFunc));
            
            return callback(Self, ref guid, DataSize, pData);
        }
        delegate HRESULT SetPrivateDataFunc(IntPtr self, ref Guid guid, uint DataSize, IntPtr pData);

        public HRESULT SetPrivateDataInterface(
            ref Guid guid,
            IUnknown pData
        ){
            var fp = GetFunctionPointer(68);
            var callback = (SetPrivateDataInterfaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetPrivateDataInterfaceFunc));
            
            return callback(Self, ref guid, pData.Ptr);
        }
        delegate HRESULT SetPrivateDataInterfaceFunc(IntPtr self, ref Guid guid, IntPtr pData);

        public void ClearState(
        ){
            var fp = GetFunctionPointer(69);
            var callback = (ClearStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ClearStateFunc));
            
            callback(Self);
        }
        delegate void ClearStateFunc(IntPtr self);

        public void Flush(
        ){
            var fp = GetFunctionPointer(70);
            var callback = (FlushFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FlushFunc));
            
            callback(Self);
        }
        delegate void FlushFunc(IntPtr self);

        public HRESULT CreateBuffer(
            ref D3D10_BUFFER_DESC pDesc,
            ref D3D10_SUBRESOURCE_DATA pInitialData,
            out ID3D10Buffer ppBuffer
        ){
            var fp = GetFunctionPointer(71);
            var callback = (CreateBufferFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateBufferFunc));
            ppBuffer = new ID3D10Buffer();
            return callback(Self, ref pDesc, ref pInitialData, out ppBuffer.PtrForNew);
        }
        delegate HRESULT CreateBufferFunc(IntPtr self, ref D3D10_BUFFER_DESC pDesc, ref D3D10_SUBRESOURCE_DATA pInitialData, out IntPtr ppBuffer);

        public HRESULT CreateTexture1D(
            ref D3D10_TEXTURE1D_DESC pDesc,
            ref D3D10_SUBRESOURCE_DATA pInitialData,
            out ID3D10Texture1D ppTexture1D
        ){
            var fp = GetFunctionPointer(72);
            var callback = (CreateTexture1DFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateTexture1DFunc));
            ppTexture1D = new ID3D10Texture1D();
            return callback(Self, ref pDesc, ref pInitialData, out ppTexture1D.PtrForNew);
        }
        delegate HRESULT CreateTexture1DFunc(IntPtr self, ref D3D10_TEXTURE1D_DESC pDesc, ref D3D10_SUBRESOURCE_DATA pInitialData, out IntPtr ppTexture1D);

        public HRESULT CreateTexture2D(
            ref D3D10_TEXTURE2D_DESC pDesc,
            ref D3D10_SUBRESOURCE_DATA pInitialData,
            out ID3D10Texture2D ppTexture2D
        ){
            var fp = GetFunctionPointer(73);
            var callback = (CreateTexture2DFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateTexture2DFunc));
            ppTexture2D = new ID3D10Texture2D();
            return callback(Self, ref pDesc, ref pInitialData, out ppTexture2D.PtrForNew);
        }
        delegate HRESULT CreateTexture2DFunc(IntPtr self, ref D3D10_TEXTURE2D_DESC pDesc, ref D3D10_SUBRESOURCE_DATA pInitialData, out IntPtr ppTexture2D);

        public HRESULT CreateTexture3D(
            ref D3D10_TEXTURE3D_DESC pDesc,
            ref D3D10_SUBRESOURCE_DATA pInitialData,
            out ID3D10Texture3D ppTexture3D
        ){
            var fp = GetFunctionPointer(74);
            var callback = (CreateTexture3DFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateTexture3DFunc));
            ppTexture3D = new ID3D10Texture3D();
            return callback(Self, ref pDesc, ref pInitialData, out ppTexture3D.PtrForNew);
        }
        delegate HRESULT CreateTexture3DFunc(IntPtr self, ref D3D10_TEXTURE3D_DESC pDesc, ref D3D10_SUBRESOURCE_DATA pInitialData, out IntPtr ppTexture3D);

        public HRESULT CreateShaderResourceView(
            ID3D10Resource pResource,
            ref D3D10_SHADER_RESOURCE_VIEW_DESC pDesc,
            out ID3D10ShaderResourceView ppSRView
        ){
            var fp = GetFunctionPointer(75);
            var callback = (CreateShaderResourceViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateShaderResourceViewFunc));
            ppSRView = new ID3D10ShaderResourceView();
            return callback(Self, pResource.Ptr, ref pDesc, out ppSRView.PtrForNew);
        }
        delegate HRESULT CreateShaderResourceViewFunc(IntPtr self, IntPtr pResource, ref D3D10_SHADER_RESOURCE_VIEW_DESC pDesc, out IntPtr ppSRView);

        public HRESULT CreateRenderTargetView(
            ID3D10Resource pResource,
            ref D3D10_RENDER_TARGET_VIEW_DESC pDesc,
            out ID3D10RenderTargetView ppRTView
        ){
            var fp = GetFunctionPointer(76);
            var callback = (CreateRenderTargetViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateRenderTargetViewFunc));
            ppRTView = new ID3D10RenderTargetView();
            return callback(Self, pResource.Ptr, ref pDesc, out ppRTView.PtrForNew);
        }
        delegate HRESULT CreateRenderTargetViewFunc(IntPtr self, IntPtr pResource, ref D3D10_RENDER_TARGET_VIEW_DESC pDesc, out IntPtr ppRTView);

        public HRESULT CreateDepthStencilView(
            ID3D10Resource pResource,
            ref D3D10_DEPTH_STENCIL_VIEW_DESC pDesc,
            out ID3D10DepthStencilView ppDepthStencilView
        ){
            var fp = GetFunctionPointer(77);
            var callback = (CreateDepthStencilViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateDepthStencilViewFunc));
            ppDepthStencilView = new ID3D10DepthStencilView();
            return callback(Self, pResource.Ptr, ref pDesc, out ppDepthStencilView.PtrForNew);
        }
        delegate HRESULT CreateDepthStencilViewFunc(IntPtr self, IntPtr pResource, ref D3D10_DEPTH_STENCIL_VIEW_DESC pDesc, out IntPtr ppDepthStencilView);

        public HRESULT CreateInputLayout(
            ref D3D10_INPUT_ELEMENT_DESC pInputElementDescs,
            uint NumElements,
            IntPtr pShaderBytecodeWithInputSignature,
            SIZE_T BytecodeLength,
            out ID3D10InputLayout ppInputLayout
        ){
            var fp = GetFunctionPointer(78);
            var callback = (CreateInputLayoutFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateInputLayoutFunc));
            ppInputLayout = new ID3D10InputLayout();
            return callback(Self, ref pInputElementDescs, NumElements, pShaderBytecodeWithInputSignature, BytecodeLength, out ppInputLayout.PtrForNew);
        }
        delegate HRESULT CreateInputLayoutFunc(IntPtr self, ref D3D10_INPUT_ELEMENT_DESC pInputElementDescs, uint NumElements, IntPtr pShaderBytecodeWithInputSignature, SIZE_T BytecodeLength, out IntPtr ppInputLayout);

        public HRESULT CreateVertexShader(
            IntPtr pShaderBytecode,
            SIZE_T BytecodeLength,
            out ID3D10VertexShader ppVertexShader
        ){
            var fp = GetFunctionPointer(79);
            var callback = (CreateVertexShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateVertexShaderFunc));
            ppVertexShader = new ID3D10VertexShader();
            return callback(Self, pShaderBytecode, BytecodeLength, out ppVertexShader.PtrForNew);
        }
        delegate HRESULT CreateVertexShaderFunc(IntPtr self, IntPtr pShaderBytecode, SIZE_T BytecodeLength, out IntPtr ppVertexShader);

        public HRESULT CreateGeometryShader(
            IntPtr pShaderBytecode,
            SIZE_T BytecodeLength,
            out ID3D10GeometryShader ppGeometryShader
        ){
            var fp = GetFunctionPointer(80);
            var callback = (CreateGeometryShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateGeometryShaderFunc));
            ppGeometryShader = new ID3D10GeometryShader();
            return callback(Self, pShaderBytecode, BytecodeLength, out ppGeometryShader.PtrForNew);
        }
        delegate HRESULT CreateGeometryShaderFunc(IntPtr self, IntPtr pShaderBytecode, SIZE_T BytecodeLength, out IntPtr ppGeometryShader);

        public HRESULT CreateGeometryShaderWithStreamOutput(
            IntPtr pShaderBytecode,
            SIZE_T BytecodeLength,
            ref D3D10_SO_DECLARATION_ENTRY pSODeclaration,
            uint NumEntries,
            uint OutputStreamStride,
            out ID3D10GeometryShader ppGeometryShader
        ){
            var fp = GetFunctionPointer(81);
            var callback = (CreateGeometryShaderWithStreamOutputFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateGeometryShaderWithStreamOutputFunc));
            ppGeometryShader = new ID3D10GeometryShader();
            return callback(Self, pShaderBytecode, BytecodeLength, ref pSODeclaration, NumEntries, OutputStreamStride, out ppGeometryShader.PtrForNew);
        }
        delegate HRESULT CreateGeometryShaderWithStreamOutputFunc(IntPtr self, IntPtr pShaderBytecode, SIZE_T BytecodeLength, ref D3D10_SO_DECLARATION_ENTRY pSODeclaration, uint NumEntries, uint OutputStreamStride, out IntPtr ppGeometryShader);

        public HRESULT CreatePixelShader(
            IntPtr pShaderBytecode,
            SIZE_T BytecodeLength,
            out ID3D10PixelShader ppPixelShader
        ){
            var fp = GetFunctionPointer(82);
            var callback = (CreatePixelShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreatePixelShaderFunc));
            ppPixelShader = new ID3D10PixelShader();
            return callback(Self, pShaderBytecode, BytecodeLength, out ppPixelShader.PtrForNew);
        }
        delegate HRESULT CreatePixelShaderFunc(IntPtr self, IntPtr pShaderBytecode, SIZE_T BytecodeLength, out IntPtr ppPixelShader);

        public HRESULT CreateBlendState(
            ref D3D10_BLEND_DESC pBlendStateDesc,
            out ID3D10BlendState ppBlendState
        ){
            var fp = GetFunctionPointer(83);
            var callback = (CreateBlendStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateBlendStateFunc));
            ppBlendState = new ID3D10BlendState();
            return callback(Self, ref pBlendStateDesc, out ppBlendState.PtrForNew);
        }
        delegate HRESULT CreateBlendStateFunc(IntPtr self, ref D3D10_BLEND_DESC pBlendStateDesc, out IntPtr ppBlendState);

        public HRESULT CreateDepthStencilState(
            ref D3D10_DEPTH_STENCIL_DESC pDepthStencilDesc,
            out ID3D10DepthStencilState ppDepthStencilState
        ){
            var fp = GetFunctionPointer(84);
            var callback = (CreateDepthStencilStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateDepthStencilStateFunc));
            ppDepthStencilState = new ID3D10DepthStencilState();
            return callback(Self, ref pDepthStencilDesc, out ppDepthStencilState.PtrForNew);
        }
        delegate HRESULT CreateDepthStencilStateFunc(IntPtr self, ref D3D10_DEPTH_STENCIL_DESC pDepthStencilDesc, out IntPtr ppDepthStencilState);

        public HRESULT CreateRasterizerState(
            ref D3D10_RASTERIZER_DESC pRasterizerDesc,
            out ID3D10RasterizerState ppRasterizerState
        ){
            var fp = GetFunctionPointer(85);
            var callback = (CreateRasterizerStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateRasterizerStateFunc));
            ppRasterizerState = new ID3D10RasterizerState();
            return callback(Self, ref pRasterizerDesc, out ppRasterizerState.PtrForNew);
        }
        delegate HRESULT CreateRasterizerStateFunc(IntPtr self, ref D3D10_RASTERIZER_DESC pRasterizerDesc, out IntPtr ppRasterizerState);

        public HRESULT CreateSamplerState(
            ref D3D10_SAMPLER_DESC pSamplerDesc,
            out ID3D10SamplerState ppSamplerState
        ){
            var fp = GetFunctionPointer(86);
            var callback = (CreateSamplerStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateSamplerStateFunc));
            ppSamplerState = new ID3D10SamplerState();
            return callback(Self, ref pSamplerDesc, out ppSamplerState.PtrForNew);
        }
        delegate HRESULT CreateSamplerStateFunc(IntPtr self, ref D3D10_SAMPLER_DESC pSamplerDesc, out IntPtr ppSamplerState);

        public HRESULT CreateQuery(
            ref D3D10_QUERY_DESC pQueryDesc,
            out ID3D10Query ppQuery
        ){
            var fp = GetFunctionPointer(87);
            var callback = (CreateQueryFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateQueryFunc));
            ppQuery = new ID3D10Query();
            return callback(Self, ref pQueryDesc, out ppQuery.PtrForNew);
        }
        delegate HRESULT CreateQueryFunc(IntPtr self, ref D3D10_QUERY_DESC pQueryDesc, out IntPtr ppQuery);

        public HRESULT CreatePredicate(
            ref D3D10_QUERY_DESC pPredicateDesc,
            out ID3D10Predicate ppPredicate
        ){
            var fp = GetFunctionPointer(88);
            var callback = (CreatePredicateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreatePredicateFunc));
            ppPredicate = new ID3D10Predicate();
            return callback(Self, ref pPredicateDesc, out ppPredicate.PtrForNew);
        }
        delegate HRESULT CreatePredicateFunc(IntPtr self, ref D3D10_QUERY_DESC pPredicateDesc, out IntPtr ppPredicate);

        public HRESULT CreateCounter(
            ref D3D10_COUNTER_DESC pCounterDesc,
            out ID3D10Counter ppCounter
        ){
            var fp = GetFunctionPointer(89);
            var callback = (CreateCounterFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateCounterFunc));
            ppCounter = new ID3D10Counter();
            return callback(Self, ref pCounterDesc, out ppCounter.PtrForNew);
        }
        delegate HRESULT CreateCounterFunc(IntPtr self, ref D3D10_COUNTER_DESC pCounterDesc, out IntPtr ppCounter);

        public HRESULT CheckFormatSupport(
            DXGI_FORMAT Format,
            out uint pFormatSupport
        ){
            var fp = GetFunctionPointer(90);
            var callback = (CheckFormatSupportFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CheckFormatSupportFunc));
            
            return callback(Self, Format, out pFormatSupport);
        }
        delegate HRESULT CheckFormatSupportFunc(IntPtr self, DXGI_FORMAT Format, out uint pFormatSupport);

        public HRESULT CheckMultisampleQualityLevels(
            DXGI_FORMAT Format,
            uint SampleCount,
            out uint pNumQualityLevels
        ){
            var fp = GetFunctionPointer(91);
            var callback = (CheckMultisampleQualityLevelsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CheckMultisampleQualityLevelsFunc));
            
            return callback(Self, Format, SampleCount, out pNumQualityLevels);
        }
        delegate HRESULT CheckMultisampleQualityLevelsFunc(IntPtr self, DXGI_FORMAT Format, uint SampleCount, out uint pNumQualityLevels);

        public void CheckCounterInfo(
            out D3D10_COUNTER_INFO pCounterInfo
        ){
            var fp = GetFunctionPointer(92);
            var callback = (CheckCounterInfoFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CheckCounterInfoFunc));
            
            callback(Self, out pCounterInfo);
        }
        delegate void CheckCounterInfoFunc(IntPtr self, out D3D10_COUNTER_INFO pCounterInfo);

        public HRESULT CheckCounter(
            ref D3D10_COUNTER_DESC pDesc,
            out D3D10_COUNTER_TYPE pType,
            out uint pActiveCounters,
            string szName,
            out uint pNameLength,
            string szUnits,
            out uint pUnitsLength,
            string szDescription,
            out uint pDescriptionLength
        ){
            var fp = GetFunctionPointer(93);
            var callback = (CheckCounterFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CheckCounterFunc));
            
            return callback(Self, ref pDesc, out pType, out pActiveCounters, szName, out pNameLength, szUnits, out pUnitsLength, szDescription, out pDescriptionLength);
        }
        delegate HRESULT CheckCounterFunc(IntPtr self, ref D3D10_COUNTER_DESC pDesc, out D3D10_COUNTER_TYPE pType, out uint pActiveCounters, string szName, out uint pNameLength, string szUnits, out uint pUnitsLength, string szDescription, out uint pDescriptionLength);

        public uint GetCreationFlags(
        ){
            var fp = GetFunctionPointer(94);
            var callback = (GetCreationFlagsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetCreationFlagsFunc));
            
            return callback(Self);
        }
        delegate uint GetCreationFlagsFunc(IntPtr self);

        public HRESULT OpenSharedResource(
            HANDLE hResource,
            ref Guid ReturnedInterface,
            out IntPtr ppResource
        ){
            var fp = GetFunctionPointer(95);
            var callback = (OpenSharedResourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OpenSharedResourceFunc));
            
            return callback(Self, hResource, ref ReturnedInterface, out ppResource);
        }
        delegate HRESULT OpenSharedResourceFunc(IntPtr self, HANDLE hResource, ref Guid ReturnedInterface, out IntPtr ppResource);

        public void SetTextFilterSize(
            uint Width,
            uint Height
        ){
            var fp = GetFunctionPointer(96);
            var callback = (SetTextFilterSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetTextFilterSizeFunc));
            
            callback(Self, Width, Height);
        }
        delegate void SetTextFilterSizeFunc(IntPtr self, uint Width, uint Height);

        public void GetTextFilterSize(
            out uint pWidth,
            out uint pHeight
        ){
            var fp = GetFunctionPointer(97);
            var callback = (GetTextFilterSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTextFilterSizeFunc));
            
            callback(Self, out pWidth, out pHeight);
        }
        delegate void GetTextFilterSizeFunc(IntPtr self, out uint pWidth, out uint pHeight);

    }
    public class ID3D10Buffer: ID3D10Resource
    {
        static /*readonly*/ Guid s_uuid = new Guid("9b7e4c02-342c-4106-a19f-4f2704f689f0");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public HRESULT Map(
            D3D10_MAP MapType,
            uint MapFlags,
            out IntPtr ppData
        ){
            var fp = GetFunctionPointer(10);
            var callback = (MapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(MapFunc));
            
            return callback(Self, MapType, MapFlags, out ppData);
        }
        delegate HRESULT MapFunc(IntPtr self, D3D10_MAP MapType, uint MapFlags, out IntPtr ppData);

        public void Unmap(
        ){
            var fp = GetFunctionPointer(11);
            var callback = (UnmapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(UnmapFunc));
            
            callback(Self);
        }
        delegate void UnmapFunc(IntPtr self);

        public void GetDesc(
            out D3D10_BUFFER_DESC pDesc
        ){
            var fp = GetFunctionPointer(12);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            callback(Self, out pDesc);
        }
        delegate void GetDescFunc(IntPtr self, out D3D10_BUFFER_DESC pDesc);

    }
    public class ID3D10Resource: ID3D10DeviceChild
    {
        static /*readonly*/ Guid s_uuid = new Guid("9b7e4c01-342c-4106-a19f-4f2704f689f0");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public void GetType(
            out D3D10_RESOURCE_DIMENSION rType
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetTypeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypeFunc));
            
            callback(Self, out rType);
        }
        delegate void GetTypeFunc(IntPtr self, out D3D10_RESOURCE_DIMENSION rType);

        public void SetEvictionPriority(
            uint EvictionPriority
        ){
            var fp = GetFunctionPointer(8);
            var callback = (SetEvictionPriorityFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetEvictionPriorityFunc));
            
            callback(Self, EvictionPriority);
        }
        delegate void SetEvictionPriorityFunc(IntPtr self, uint EvictionPriority);

        public uint GetEvictionPriority(
        ){
            var fp = GetFunctionPointer(9);
            var callback = (GetEvictionPriorityFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetEvictionPriorityFunc));
            
            return callback(Self);
        }
        delegate uint GetEvictionPriorityFunc(IntPtr self);

    }
    public class ID3D10DeviceChild: IUnknown
    {
        static /*readonly*/ Guid s_uuid = new Guid("9b7e4c00-342c-4106-a19f-4f2704f689f0");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public void GetDevice(
            out ID3D10Device ppDevice
        ){
            var fp = GetFunctionPointer(3);
            var callback = (GetDeviceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDeviceFunc));
            ppDevice = new ID3D10Device();
            callback(Self, out ppDevice.PtrForNew);
        }
        delegate void GetDeviceFunc(IntPtr self, out IntPtr ppDevice);

        public HRESULT GetPrivateData(
            ref Guid guid,
            out uint pDataSize,
            IntPtr pData
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetPrivateDataFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPrivateDataFunc));
            
            return callback(Self, ref guid, out pDataSize, pData);
        }
        delegate HRESULT GetPrivateDataFunc(IntPtr self, ref Guid guid, out uint pDataSize, IntPtr pData);

        public HRESULT SetPrivateData(
            ref Guid guid,
            uint DataSize,
            IntPtr pData
        ){
            var fp = GetFunctionPointer(5);
            var callback = (SetPrivateDataFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetPrivateDataFunc));
            
            return callback(Self, ref guid, DataSize, pData);
        }
        delegate HRESULT SetPrivateDataFunc(IntPtr self, ref Guid guid, uint DataSize, IntPtr pData);

        public HRESULT SetPrivateDataInterface(
            ref Guid guid,
            IUnknown pData
        ){
            var fp = GetFunctionPointer(6);
            var callback = (SetPrivateDataInterfaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetPrivateDataInterfaceFunc));
            
            return callback(Self, ref guid, pData.Ptr);
        }
        delegate HRESULT SetPrivateDataInterfaceFunc(IntPtr self, ref Guid guid, IntPtr pData);

    }
    public enum D3D10_RESOURCE_DIMENSION
    {
        _UNKNOWN = 0x0,
        _BUFFER = 0x1,
        _TEXTURE1D = 0x2,
        _TEXTURE2D = 0x3,
        _TEXTURE3D = 0x4,
    }
    public enum D3D10_MAP
    {
        _READ = 0x1,
        _WRITE = 0x2,
        _READ_WRITE = 0x3,
        _WRITE_DISCARD = 0x4,
        _WRITE_NO_OVERWRITE = 0x5,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_BUFFER_DESC
    {
        public uint ByteWidth;
        public D3D10_USAGE Usage;
        public uint BindFlags;
        public uint CPUAccessFlags;
        public uint MiscFlags;
    }
    public enum D3D10_USAGE
    {
        _DEFAULT = 0x0,
        _IMMUTABLE = 0x1,
        _DYNAMIC = 0x2,
        _STAGING = 0x3,
    }
    public class ID3D10ShaderResourceView: ID3D10View
    {
        static /*readonly*/ Guid s_uuid = new Guid("9b7e4c07-342c-4106-a19f-4f2704f689f0");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public void GetDesc(
            out D3D10_SHADER_RESOURCE_VIEW_DESC pDesc
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            callback(Self, out pDesc);
        }
        delegate void GetDescFunc(IntPtr self, out D3D10_SHADER_RESOURCE_VIEW_DESC pDesc);

    }
    public class ID3D10View: ID3D10DeviceChild
    {
        static /*readonly*/ Guid s_uuid = new Guid("c902b03f-60a7-49ba-9936-2a3ab37a7e33");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public void GetResource(
            out ID3D10Resource ppResource
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetResourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetResourceFunc));
            ppResource = new ID3D10Resource();
            callback(Self, out ppResource.PtrForNew);
        }
        delegate void GetResourceFunc(IntPtr self, out IntPtr ppResource);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_SHADER_RESOURCE_VIEW_DESC
    {
        public DXGI_FORMAT Format;
        public D3D10_SRV_DIMENSION ViewDimension;
        public D3D10_SHADER_RESOURCE_VIEW_DESC__anonymous_24 __anonymous__3;
    }
    public struct D3D10_SRV_DIMENSION { public D3D_SRV_DIMENSION Value; }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_BUFFER_SRV
    {
        public D3D10_BUFFER_SRV__anonymous_27 __anonymous__1;
        public D3D10_BUFFER_SRV__anonymous_28 __anonymous__2;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_TEX1D_SRV
    {
        public uint MostDetailedMip;
        public uint MipLevels;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_TEX1D_ARRAY_SRV
    {
        public uint MostDetailedMip;
        public uint MipLevels;
        public uint FirstArraySlice;
        public uint ArraySize;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_TEX2D_SRV
    {
        public uint MostDetailedMip;
        public uint MipLevels;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_TEX2D_ARRAY_SRV
    {
        public uint MostDetailedMip;
        public uint MipLevels;
        public uint FirstArraySlice;
        public uint ArraySize;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_TEX2DMS_SRV
    {
        public uint UnusedField_NothingToDefine;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_TEX2DMS_ARRAY_SRV
    {
        public uint FirstArraySlice;
        public uint ArraySize;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_TEX3D_SRV
    {
        public uint MostDetailedMip;
        public uint MipLevels;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_TEXCUBE_SRV
    {
        public uint MostDetailedMip;
        public uint MipLevels;
    }
    public class ID3D10PixelShader: ID3D10DeviceChild
    {
        static /*readonly*/ Guid s_uuid = new Guid("4968b601-9d00-4cde-8346-8e7f675819b6");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
    }
    public class ID3D10SamplerState: ID3D10DeviceChild
    {
        static /*readonly*/ Guid s_uuid = new Guid("9b7e4c0c-342c-4106-a19f-4f2704f689f0");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public void GetDesc(
            out D3D10_SAMPLER_DESC pDesc
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            callback(Self, out pDesc);
        }
        delegate void GetDescFunc(IntPtr self, out D3D10_SAMPLER_DESC pDesc);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_SAMPLER_DESC
    {
        public D3D10_FILTER Filter;
        public D3D10_TEXTURE_ADDRESS_MODE AddressU;
        public D3D10_TEXTURE_ADDRESS_MODE AddressV;
        public D3D10_TEXTURE_ADDRESS_MODE AddressW;
        public float MipLODBias;
        public uint MaxAnisotropy;
        public D3D10_COMPARISON_FUNC ComparisonFunc;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=4)]public float[] BorderColor;
        public float MinLOD;
        public float MaxLOD;
    }
    public enum D3D10_FILTER
    {
        _MIN_MAG_MIP_POINT = 0x0,
        _MIN_MAG_POINT_MIP_LINEAR = 0x1,
        _MIN_POINT_MAG_LINEAR_MIP_POINT = 0x4,
        _MIN_POINT_MAG_MIP_LINEAR = 0x5,
        _MIN_LINEAR_MAG_MIP_POINT = 0x10,
        _MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x11,
        _MIN_MAG_LINEAR_MIP_POINT = 0x14,
        _MIN_MAG_MIP_LINEAR = 0x15,
        _ANISOTROPIC = 0x55,
        _COMPARISON_MIN_MAG_MIP_POINT = 0x80,
        _COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 0x81,
        _COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x84,
        _COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 0x85,
        _COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 0x90,
        _COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x91,
        _COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 0x94,
        _COMPARISON_MIN_MAG_MIP_LINEAR = 0x95,
        _COMPARISON_ANISOTROPIC = 0xd5,
        _TEXT_1BIT = unchecked((int)0x80000000),
    }
    public enum D3D10_TEXTURE_ADDRESS_MODE
    {
        _WRAP = 0x1,
        _MIRROR = 0x2,
        _CLAMP = 0x3,
        _BORDER = 0x4,
        _MIRROR_ONCE = 0x5,
    }
    public enum D3D10_COMPARISON_FUNC
    {
        _NEVER = 0x1,
        _LESS = 0x2,
        _EQUAL = 0x3,
        _LESS_EQUAL = 0x4,
        _GREATER = 0x5,
        _NOT_EQUAL = 0x6,
        _GREATER_EQUAL = 0x7,
        _ALWAYS = 0x8,
    }
    public class ID3D10VertexShader: ID3D10DeviceChild
    {
        static /*readonly*/ Guid s_uuid = new Guid("9b7e4c0a-342c-4106-a19f-4f2704f689f0");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
    }
    public class ID3D10InputLayout: ID3D10DeviceChild
    {
        static /*readonly*/ Guid s_uuid = new Guid("9b7e4c0b-342c-4106-a19f-4f2704f689f0");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
    }
    public class ID3D10GeometryShader: ID3D10DeviceChild
    {
        static /*readonly*/ Guid s_uuid = new Guid("6316be88-54cd-4040-ab44-20461bc81f68");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
    }
    public struct D3D10_PRIMITIVE_TOPOLOGY { public D3D_PRIMITIVE_TOPOLOGY Value; }
    public class ID3D10Predicate: ID3D10Query
    {
        static /*readonly*/ Guid s_uuid = new Guid("9b7e4c10-342c-4106-a19f-4f2704f689f0");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
    }
    public class ID3D10Query: ID3D10Asynchronous
    {
        static /*readonly*/ Guid s_uuid = new Guid("9b7e4c0e-342c-4106-a19f-4f2704f689f0");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public void GetDesc(
            out D3D10_QUERY_DESC pDesc
        ){
            var fp = GetFunctionPointer(11);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            callback(Self, out pDesc);
        }
        delegate void GetDescFunc(IntPtr self, out D3D10_QUERY_DESC pDesc);

    }
    public class ID3D10Asynchronous: ID3D10DeviceChild
    {
        static /*readonly*/ Guid s_uuid = new Guid("9b7e4c0d-342c-4106-a19f-4f2704f689f0");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public void Begin(
        ){
            var fp = GetFunctionPointer(7);
            var callback = (BeginFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(BeginFunc));
            
            callback(Self);
        }
        delegate void BeginFunc(IntPtr self);

        public void End(
        ){
            var fp = GetFunctionPointer(8);
            var callback = (EndFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(EndFunc));
            
            callback(Self);
        }
        delegate void EndFunc(IntPtr self);

        public HRESULT GetData(
            IntPtr pData,
            uint DataSize,
            uint GetDataFlags
        ){
            var fp = GetFunctionPointer(9);
            var callback = (GetDataFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDataFunc));
            
            return callback(Self, pData, DataSize, GetDataFlags);
        }
        delegate HRESULT GetDataFunc(IntPtr self, IntPtr pData, uint DataSize, uint GetDataFlags);

        public uint GetDataSize(
        ){
            var fp = GetFunctionPointer(10);
            var callback = (GetDataSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDataSizeFunc));
            
            return callback(Self);
        }
        delegate uint GetDataSizeFunc(IntPtr self);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_QUERY_DESC
    {
        public D3D10_QUERY Query;
        public uint MiscFlags;
    }
    public enum D3D10_QUERY
    {
        _EVENT = 0x0,
        _OCCLUSION = 0x1,
        _TIMESTAMP = 0x2,
        _TIMESTAMP_DISJOINT = 0x3,
        _PIPELINE_STATISTICS = 0x4,
        _OCCLUSION_PREDICATE = 0x5,
        _SO_STATISTICS = 0x6,
        _SO_OVERFLOW_PREDICATE = 0x7,
    }
    public class ID3D10RenderTargetView: ID3D10View
    {
        static /*readonly*/ Guid s_uuid = new Guid("9b7e4c08-342c-4106-a19f-4f2704f689f0");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public void GetDesc(
            out D3D10_RENDER_TARGET_VIEW_DESC pDesc
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            callback(Self, out pDesc);
        }
        delegate void GetDescFunc(IntPtr self, out D3D10_RENDER_TARGET_VIEW_DESC pDesc);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_RENDER_TARGET_VIEW_DESC
    {
        public DXGI_FORMAT Format;
        public D3D10_RTV_DIMENSION ViewDimension;
        public D3D10_RENDER_TARGET_VIEW_DESC__anonymous_80 __anonymous__3;
    }
    public enum D3D10_RTV_DIMENSION
    {
        _UNKNOWN = 0x0,
        _BUFFER = 0x1,
        _TEXTURE1D = 0x2,
        _TEXTURE1DARRAY = 0x3,
        _TEXTURE2D = 0x4,
        _TEXTURE2DARRAY = 0x5,
        _TEXTURE2DMS = 0x6,
        _TEXTURE2DMSARRAY = 0x7,
        _TEXTURE3D = 0x8,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_BUFFER_RTV
    {
        public D3D10_BUFFER_RTV__anonymous_83 __anonymous__1;
        public D3D10_BUFFER_RTV__anonymous_84 __anonymous__2;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_TEX1D_RTV
    {
        public uint MipSlice;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_TEX1D_ARRAY_RTV
    {
        public uint MipSlice;
        public uint FirstArraySlice;
        public uint ArraySize;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_TEX2D_RTV
    {
        public uint MipSlice;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_TEX2D_ARRAY_RTV
    {
        public uint MipSlice;
        public uint FirstArraySlice;
        public uint ArraySize;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_TEX2DMS_RTV
    {
        public uint UnusedField_NothingToDefine;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_TEX2DMS_ARRAY_RTV
    {
        public uint FirstArraySlice;
        public uint ArraySize;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_TEX3D_RTV
    {
        public uint MipSlice;
        public uint FirstWSlice;
        public uint WSize;
    }
    public class ID3D10DepthStencilView: ID3D10View
    {
        static /*readonly*/ Guid s_uuid = new Guid("9b7e4c09-342c-4106-a19f-4f2704f689f0");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public void GetDesc(
            out D3D10_DEPTH_STENCIL_VIEW_DESC pDesc
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            callback(Self, out pDesc);
        }
        delegate void GetDescFunc(IntPtr self, out D3D10_DEPTH_STENCIL_VIEW_DESC pDesc);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_DEPTH_STENCIL_VIEW_DESC
    {
        public DXGI_FORMAT Format;
        public D3D10_DSV_DIMENSION ViewDimension;
        public D3D10_DEPTH_STENCIL_VIEW_DESC__anonymous_105 __anonymous__3;
    }
    public enum D3D10_DSV_DIMENSION
    {
        _UNKNOWN = 0x0,
        _TEXTURE1D = 0x1,
        _TEXTURE1DARRAY = 0x2,
        _TEXTURE2D = 0x3,
        _TEXTURE2DARRAY = 0x4,
        _TEXTURE2DMS = 0x5,
        _TEXTURE2DMSARRAY = 0x6,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_TEX1D_DSV
    {
        public uint MipSlice;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_TEX1D_ARRAY_DSV
    {
        public uint MipSlice;
        public uint FirstArraySlice;
        public uint ArraySize;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_TEX2D_DSV
    {
        public uint MipSlice;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_TEX2D_ARRAY_DSV
    {
        public uint MipSlice;
        public uint FirstArraySlice;
        public uint ArraySize;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_TEX2DMS_DSV
    {
        public uint UnusedField_NothingToDefine;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_TEX2DMS_ARRAY_DSV
    {
        public uint FirstArraySlice;
        public uint ArraySize;
    }
    public class ID3D10BlendState: ID3D10DeviceChild
    {
        static /*readonly*/ Guid s_uuid = new Guid("edad8d19-8a35-4d6d-8566-2ea276cde161");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public void GetDesc(
            out D3D10_BLEND_DESC pDesc
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            callback(Self, out pDesc);
        }
        delegate void GetDescFunc(IntPtr self, out D3D10_BLEND_DESC pDesc);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_BLEND_DESC
    {
        public int AlphaToCoverageEnable;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=8)]public int[] BlendEnable;
        public D3D10_BLEND SrcBlend;
        public D3D10_BLEND DestBlend;
        public D3D10_BLEND_OP BlendOp;
        public D3D10_BLEND SrcBlendAlpha;
        public D3D10_BLEND DestBlendAlpha;
        public D3D10_BLEND_OP BlendOpAlpha;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=8)]public UINT8[] RenderTargetWriteMask;
    }
    public enum D3D10_BLEND
    {
        _ZERO = 0x1,
        _ONE = 0x2,
        _SRC_COLOR = 0x3,
        _INV_SRC_COLOR = 0x4,
        _SRC_ALPHA = 0x5,
        _INV_SRC_ALPHA = 0x6,
        _DEST_ALPHA = 0x7,
        _INV_DEST_ALPHA = 0x8,
        _DEST_COLOR = 0x9,
        _INV_DEST_COLOR = 0xa,
        _SRC_ALPHA_SAT = 0xb,
        _BLEND_FACTOR = 0xe,
        _INV_BLEND_FACTOR = 0xf,
        _SRC1_COLOR = 0x10,
        _INV_SRC1_COLOR = 0x11,
        _SRC1_ALPHA = 0x12,
        _INV_SRC1_ALPHA = 0x13,
    }
    public enum D3D10_BLEND_OP
    {
        _ADD = 0x1,
        _SUBTRACT = 0x2,
        _REV_SUBTRACT = 0x3,
        _MIN = 0x4,
        _MAX = 0x5,
    }
    public class ID3D10DepthStencilState: ID3D10DeviceChild
    {
        static /*readonly*/ Guid s_uuid = new Guid("2b4b1cc8-a4ad-41f8-8322-ca86fc3ec675");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public void GetDesc(
            out D3D10_DEPTH_STENCIL_DESC pDesc
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            callback(Self, out pDesc);
        }
        delegate void GetDescFunc(IntPtr self, out D3D10_DEPTH_STENCIL_DESC pDesc);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_DEPTH_STENCIL_DESC
    {
        public int DepthEnable;
        public D3D10_DEPTH_WRITE_MASK DepthWriteMask;
        public D3D10_COMPARISON_FUNC DepthFunc;
        public int StencilEnable;
        public UINT8 StencilReadMask;
        public UINT8 StencilWriteMask;
        public D3D10_DEPTH_STENCILOP_DESC FrontFace;
        public D3D10_DEPTH_STENCILOP_DESC BackFace;
    }
    public enum D3D10_DEPTH_WRITE_MASK
    {
        _ZERO = 0x0,
        _ALL = 0x1,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_DEPTH_STENCILOP_DESC
    {
        public D3D10_STENCIL_OP StencilFailOp;
        public D3D10_STENCIL_OP StencilDepthFailOp;
        public D3D10_STENCIL_OP StencilPassOp;
        public D3D10_COMPARISON_FUNC StencilFunc;
    }
    public enum D3D10_STENCIL_OP
    {
        _KEEP = 0x1,
        _ZERO = 0x2,
        _REPLACE = 0x3,
        _INCR_SAT = 0x4,
        _DECR_SAT = 0x5,
        _INVERT = 0x6,
        _INCR = 0x7,
        _DECR = 0x8,
    }
    public class ID3D10RasterizerState: ID3D10DeviceChild
    {
        static /*readonly*/ Guid s_uuid = new Guid("a2a07292-89af-4345-be2e-c53d9fbb6e9f");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public void GetDesc(
            out D3D10_RASTERIZER_DESC pDesc
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            callback(Self, out pDesc);
        }
        delegate void GetDescFunc(IntPtr self, out D3D10_RASTERIZER_DESC pDesc);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_RASTERIZER_DESC
    {
        public D3D10_FILL_MODE FillMode;
        public D3D10_CULL_MODE CullMode;
        public int FrontCounterClockwise;
        public int DepthBias;
        public float DepthBiasClamp;
        public float SlopeScaledDepthBias;
        public int DepthClipEnable;
        public int ScissorEnable;
        public int MultisampleEnable;
        public int AntialiasedLineEnable;
    }
    public enum D3D10_FILL_MODE
    {
        _WIREFRAME = 0x2,
        _SOLID = 0x3,
    }
    public enum D3D10_CULL_MODE
    {
        _NONE = 0x1,
        _FRONT = 0x2,
        _BACK = 0x3,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_VIEWPORT
    {
        public int TopLeftX;
        public int TopLeftY;
        public uint Width;
        public uint Height;
        public float MinDepth;
        public float MaxDepth;
    }
    public struct D3D10_RECT { public RECT Value; }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_BOX
    {
        public uint left;
        public uint top;
        public uint front;
        public uint right;
        public uint bottom;
        public uint back;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_SUBRESOURCE_DATA
    {
        public IntPtr pSysMem;
        public uint SysMemPitch;
        public uint SysMemSlicePitch;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_TEXTURE1D_DESC
    {
        public uint Width;
        public uint MipLevels;
        public uint ArraySize;
        public DXGI_FORMAT Format;
        public D3D10_USAGE Usage;
        public uint BindFlags;
        public uint CPUAccessFlags;
        public uint MiscFlags;
    }
    public class ID3D10Texture1D: ID3D10Resource
    {
        static /*readonly*/ Guid s_uuid = new Guid("9b7e4c03-342c-4106-a19f-4f2704f689f0");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public HRESULT Map(
            uint Subresource,
            D3D10_MAP MapType,
            uint MapFlags,
            out IntPtr ppData
        ){
            var fp = GetFunctionPointer(10);
            var callback = (MapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(MapFunc));
            
            return callback(Self, Subresource, MapType, MapFlags, out ppData);
        }
        delegate HRESULT MapFunc(IntPtr self, uint Subresource, D3D10_MAP MapType, uint MapFlags, out IntPtr ppData);

        public void Unmap(
            uint Subresource
        ){
            var fp = GetFunctionPointer(11);
            var callback = (UnmapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(UnmapFunc));
            
            callback(Self, Subresource);
        }
        delegate void UnmapFunc(IntPtr self, uint Subresource);

        public void GetDesc(
            out D3D10_TEXTURE1D_DESC pDesc
        ){
            var fp = GetFunctionPointer(12);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            callback(Self, out pDesc);
        }
        delegate void GetDescFunc(IntPtr self, out D3D10_TEXTURE1D_DESC pDesc);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_TEXTURE2D_DESC
    {
        public uint Width;
        public uint Height;
        public uint MipLevels;
        public uint ArraySize;
        public DXGI_FORMAT Format;
        public DXGI_SAMPLE_DESC SampleDesc;
        public D3D10_USAGE Usage;
        public uint BindFlags;
        public uint CPUAccessFlags;
        public uint MiscFlags;
    }
    public class ID3D10Texture2D: ID3D10Resource
    {
        static /*readonly*/ Guid s_uuid = new Guid("9b7e4c04-342c-4106-a19f-4f2704f689f0");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public HRESULT Map(
            uint Subresource,
            D3D10_MAP MapType,
            uint MapFlags,
            out D3D10_MAPPED_TEXTURE2D pMappedTex2D
        ){
            var fp = GetFunctionPointer(10);
            var callback = (MapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(MapFunc));
            
            return callback(Self, Subresource, MapType, MapFlags, out pMappedTex2D);
        }
        delegate HRESULT MapFunc(IntPtr self, uint Subresource, D3D10_MAP MapType, uint MapFlags, out D3D10_MAPPED_TEXTURE2D pMappedTex2D);

        public void Unmap(
            uint Subresource
        ){
            var fp = GetFunctionPointer(11);
            var callback = (UnmapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(UnmapFunc));
            
            callback(Self, Subresource);
        }
        delegate void UnmapFunc(IntPtr self, uint Subresource);

        public void GetDesc(
            out D3D10_TEXTURE2D_DESC pDesc
        ){
            var fp = GetFunctionPointer(12);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            callback(Self, out pDesc);
        }
        delegate void GetDescFunc(IntPtr self, out D3D10_TEXTURE2D_DESC pDesc);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_MAPPED_TEXTURE2D
    {
        public IntPtr pData;
        public uint RowPitch;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_TEXTURE3D_DESC
    {
        public uint Width;
        public uint Height;
        public uint Depth;
        public uint MipLevels;
        public DXGI_FORMAT Format;
        public D3D10_USAGE Usage;
        public uint BindFlags;
        public uint CPUAccessFlags;
        public uint MiscFlags;
    }
    public class ID3D10Texture3D: ID3D10Resource
    {
        static /*readonly*/ Guid s_uuid = new Guid("9b7e4c05-342c-4106-a19f-4f2704f689f0");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public HRESULT Map(
            uint Subresource,
            D3D10_MAP MapType,
            uint MapFlags,
            out D3D10_MAPPED_TEXTURE3D pMappedTex3D
        ){
            var fp = GetFunctionPointer(10);
            var callback = (MapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(MapFunc));
            
            return callback(Self, Subresource, MapType, MapFlags, out pMappedTex3D);
        }
        delegate HRESULT MapFunc(IntPtr self, uint Subresource, D3D10_MAP MapType, uint MapFlags, out D3D10_MAPPED_TEXTURE3D pMappedTex3D);

        public void Unmap(
            uint Subresource
        ){
            var fp = GetFunctionPointer(11);
            var callback = (UnmapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(UnmapFunc));
            
            callback(Self, Subresource);
        }
        delegate void UnmapFunc(IntPtr self, uint Subresource);

        public void GetDesc(
            out D3D10_TEXTURE3D_DESC pDesc
        ){
            var fp = GetFunctionPointer(12);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            callback(Self, out pDesc);
        }
        delegate void GetDescFunc(IntPtr self, out D3D10_TEXTURE3D_DESC pDesc);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_MAPPED_TEXTURE3D
    {
        public IntPtr pData;
        public uint RowPitch;
        public uint DepthPitch;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_INPUT_ELEMENT_DESC
    {
        public string SemanticName;
        public uint SemanticIndex;
        public DXGI_FORMAT Format;
        public uint InputSlot;
        public uint AlignedByteOffset;
        public D3D10_INPUT_CLASSIFICATION InputSlotClass;
        public uint InstanceDataStepRate;
    }
    public enum D3D10_INPUT_CLASSIFICATION
    {
        _VERTEX_DATA = 0x0,
        _INSTANCE_DATA = 0x1,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_SO_DECLARATION_ENTRY
    {
        public string SemanticName;
        public uint SemanticIndex;
        public byte StartComponent;
        public byte ComponentCount;
        public byte OutputSlot;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_COUNTER_DESC
    {
        public D3D10_COUNTER Counter;
        public uint MiscFlags;
    }
    public enum D3D10_COUNTER
    {
        _GPU_IDLE = 0x0,
        _VERTEX_PROCESSING = 0x1,
        _GEOMETRY_PROCESSING = 0x2,
        _PIXEL_PROCESSING = 0x3,
        _OTHER_GPU_PROCESSING = 0x4,
        _HOST_ADAPTER_BANDWIDTH_UTILIZATION = 0x5,
        _LOCAL_VIDMEM_BANDWIDTH_UTILIZATION = 0x6,
        _VERTEX_THROUGHPUT_UTILIZATION = 0x7,
        _TRIANGLE_SETUP_THROUGHPUT_UTILIZATION = 0x8,
        _FILLRATE_THROUGHPUT_UTILIZATION = 0x9,
        _VS_MEMORY_LIMITED = 0xa,
        _VS_COMPUTATION_LIMITED = 0xb,
        _GS_MEMORY_LIMITED = 0xc,
        _GS_COMPUTATION_LIMITED = 0xd,
        _PS_MEMORY_LIMITED = 0xe,
        _PS_COMPUTATION_LIMITED = 0xf,
        _POST_TRANSFORM_CACHE_HIT_RATE = 0x10,
        _TEXTURE_CACHE_HIT_RATE = 0x11,
        _DEVICE_DEPENDENT_0 = 0x40000000,
    }
    public class ID3D10Counter: ID3D10Asynchronous
    {
        static /*readonly*/ Guid s_uuid = new Guid("9b7e4c11-342c-4106-a19f-4f2704f689f0");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public void GetDesc(
            out D3D10_COUNTER_DESC pDesc
        ){
            var fp = GetFunctionPointer(11);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            callback(Self, out pDesc);
        }
        delegate void GetDescFunc(IntPtr self, out D3D10_COUNTER_DESC pDesc);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D10_COUNTER_INFO
    {
        public D3D10_COUNTER LastDeviceDependentCounter;
        public uint NumSimultaneousCounters;
        public UINT8 NumDetectableParallelUnits;
    }
    public enum D3D10_COUNTER_TYPE
    {
        _FLOAT32 = 0x0,
        _UINT16 = 0x1,
        _UINT32 = 0x2,
        _UINT64 = 0x3,
    }
    public static class d3d10 {
    }
}
