// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public static partial class Constants {
        // macro function: D3D11_SHVER_GET_TYPE ( _Version ) ( ( ( _Version ) >> 16 ) & 0xffff )
        // macro function: D3D11_SHVER_GET_MAJOR ( _Version ) ( ( ( _Version ) >> 4 ) & 0xf )
        // macro function: D3D11_SHVER_GET_MINOR ( _Version ) ( ( ( _Version ) >> 0 ) & 0xf )
        public const int D3D_RETURN_PARAMETER_INDEX = ( - 1 );
        public const int D3D_SHADER_REQUIRES_DOUBLES = unchecked((int)0x00000001);
        public const int D3D_SHADER_REQUIRES_EARLY_DEPTH_STENCIL = unchecked((int)0x00000002);
        public const int D3D_SHADER_REQUIRES_UAVS_AT_EVERY_STAGE = unchecked((int)0x00000004);
        public const int D3D_SHADER_REQUIRES_64_UAVS = unchecked((int)0x00000008);
        public const int D3D_SHADER_REQUIRES_MINIMUM_PRECISION = unchecked((int)0x00000010);
        public const int D3D_SHADER_REQUIRES_11_1_DOUBLE_EXTENSIONS = unchecked((int)0x00000020);
        public const int D3D_SHADER_REQUIRES_11_1_SHADER_EXTENSIONS = unchecked((int)0x00000040);
        public const int D3D_SHADER_REQUIRES_LEVEL_9_COMPARISON_FILTERING = unchecked((int)0x00000080);
        public const int D3D_SHADER_REQUIRES_TILED_RESOURCES = unchecked((int)0x00000100);
        // unknown type: INTERFACE ID3D11ShaderReflectionType
// duplicate: INTERFACE = INTERFACE ID3D11ShaderReflectionVariable
// duplicate: INTERFACE = INTERFACE ID3D11ShaderReflectionConstantBuffer
// duplicate: INTERFACE = INTERFACE ID3D11ShaderReflection
// duplicate: INTERFACE = INTERFACE ID3D11LibraryReflection
// duplicate: INTERFACE = INTERFACE ID3D11FunctionReflection
// duplicate: INTERFACE = INTERFACE ID3D11FunctionParameterReflection
// duplicate: INTERFACE = INTERFACE ID3D11Module
// duplicate: INTERFACE = INTERFACE ID3D11ModuleInstance
// duplicate: INTERFACE = INTERFACE ID3D11Linker
// duplicate: INTERFACE = INTERFACE ID3D11LinkingNode
// duplicate: INTERFACE = INTERFACE ID3D11FunctionLinkingGraph
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct _D3D11_PARAMETER_DESC // 1
    {
        [MarshalAs(UnmanagedType.LPStr)]public string Name;
        [MarshalAs(UnmanagedType.LPStr)]public string SemanticName;
        public _D3D_SHADER_VARIABLE_TYPE Type;
        public _D3D_SHADER_VARIABLE_CLASS Class;
        public uint Rows;
        public uint Columns;
        public D3D_INTERPOLATION_MODE InterpolationMode;
        public _D3D_PARAMETER_FLAGS Flags;
        public uint FirstInRegister;
        public uint FirstInComponent;
        public uint FirstOutRegister;
        public uint FirstOutComponent;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct _D3D11_SIGNATURE_PARAMETER_DESC // 1
    {
        [MarshalAs(UnmanagedType.LPStr)]public string SemanticName;
        public uint SemanticIndex;
        public uint Register;
        public D3D_NAME SystemValueType;
        public D3D_REGISTER_COMPONENT_TYPE ComponentType;
        public byte Mask;
        public byte ReadWriteMask;
        public uint Stream;
        public D3D_MIN_PRECISION MinPrecision;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct _D3D11_SHADER_BUFFER_DESC // 1
    {
        [MarshalAs(UnmanagedType.LPStr)]public string Name;
        public _D3D_CBUFFER_TYPE Type;
        public uint Variables;
        public uint Size;
        public uint uFlags;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct _D3D11_SHADER_VARIABLE_DESC // 1
    {
        [MarshalAs(UnmanagedType.LPStr)]public string Name;
        public uint StartOffset;
        public uint Size;
        public uint uFlags;
        public IntPtr DefaultValue;
        public uint StartTexture;
        public uint TextureSize;
        public uint StartSampler;
        public uint SamplerSize;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct _D3D11_SHADER_TYPE_DESC // 1
    {
        public _D3D_SHADER_VARIABLE_CLASS Class;
        public _D3D_SHADER_VARIABLE_TYPE Type;
        public uint Rows;
        public uint Columns;
        public uint Elements;
        public uint Members;
        public uint Offset;
        [MarshalAs(UnmanagedType.LPStr)]public string Name;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct _D3D11_SHADER_DESC // 1
    {
        public uint Version;
        [MarshalAs(UnmanagedType.LPStr)]public string Creator;
        public uint Flags;
        public uint ConstantBuffers;
        public uint BoundResources;
        public uint InputParameters;
        public uint OutputParameters;
        public uint InstructionCount;
        public uint TempRegisterCount;
        public uint TempArrayCount;
        public uint DefCount;
        public uint DclCount;
        public uint TextureNormalInstructions;
        public uint TextureLoadInstructions;
        public uint TextureCompInstructions;
        public uint TextureBiasInstructions;
        public uint TextureGradientInstructions;
        public uint FloatInstructionCount;
        public uint IntInstructionCount;
        public uint UintInstructionCount;
        public uint StaticFlowControlCount;
        public uint DynamicFlowControlCount;
        public uint MacroInstructionCount;
        public uint ArrayInstructionCount;
        public uint CutInstructionCount;
        public uint EmitInstructionCount;
        public D3D_PRIMITIVE_TOPOLOGY GSOutputTopology;
        public uint GSMaxOutputVertexCount;
        public D3D_PRIMITIVE InputPrimitive;
        public uint PatchConstantParameters;
        public uint cGSInstanceCount;
        public uint cControlPoints;
        public D3D_TESSELLATOR_OUTPUT_PRIMITIVE HSOutputPrimitive;
        public D3D_TESSELLATOR_PARTITIONING HSPartitioning;
        public D3D_TESSELLATOR_DOMAIN TessellatorDomain;
        public uint cBarrierInstructions;
        public uint cInterlockedInstructions;
        public uint cTextureStoreInstructions;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct _D3D11_SHADER_INPUT_BIND_DESC // 1
    {
        [MarshalAs(UnmanagedType.LPStr)]public string Name;
        public _D3D_SHADER_INPUT_TYPE Type;
        public uint BindPoint;
        public uint BindCount;
        public uint uFlags;
        public D3D_RESOURCE_RETURN_TYPE ReturnType;
        public D3D_SRV_DIMENSION Dimension;
        public uint NumSamples;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct _D3D11_LIBRARY_DESC // 1
    {
        [MarshalAs(UnmanagedType.LPStr)]public string Creator;
        public uint Flags;
        public uint FunctionCount;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct _D3D11_FUNCTION_DESC // 1
    {
        public uint Version;
        [MarshalAs(UnmanagedType.LPStr)]public string Creator;
        public uint Flags;
        public uint ConstantBuffers;
        public uint BoundResources;
        public uint InstructionCount;
        public uint TempRegisterCount;
        public uint TempArrayCount;
        public uint DefCount;
        public uint DclCount;
        public uint TextureNormalInstructions;
        public uint TextureLoadInstructions;
        public uint TextureCompInstructions;
        public uint TextureBiasInstructions;
        public uint TextureGradientInstructions;
        public uint FloatInstructionCount;
        public uint IntInstructionCount;
        public uint UintInstructionCount;
        public uint StaticFlowControlCount;
        public uint DynamicFlowControlCount;
        public uint MacroInstructionCount;
        public uint ArrayInstructionCount;
        public uint MovInstructionCount;
        public uint MovcInstructionCount;
        public uint ConversionInstructionCount;
        public uint BitwiseInstructionCount;
        public D3D_FEATURE_LEVEL MinFeatureLevel;
        public ulong RequiredFeatureFlags;
        [MarshalAs(UnmanagedType.LPStr)]public string Name;
        public int FunctionParameterCount;
        public int HasReturn;
        public int Has10Level9VertexShader;
        public int Has10Level9PixelShader;
    }
}
