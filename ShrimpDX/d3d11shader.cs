// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public static partial class Constants {
        public const int D3D_RETURN_PARAMETER_INDEX = ( - 1 );
        public const int D3D_SHADER_REQUIRES_DOUBLES = 0x00000001;
        public const int D3D_SHADER_REQUIRES_EARLY_DEPTH_STENCIL = 0x00000002;
        public const int D3D_SHADER_REQUIRES_UAVS_AT_EVERY_STAGE = 0x00000004;
        public const int D3D_SHADER_REQUIRES_64_UAVS = 0x00000008;
        public const int D3D_SHADER_REQUIRES_MINIMUM_PRECISION = 0x00000010;
        public const int D3D_SHADER_REQUIRES_11_1_DOUBLE_EXTENSIONS = 0x00000020;
        public const int D3D_SHADER_REQUIRES_11_1_SHADER_EXTENSIONS = 0x00000040;
        public const int D3D_SHADER_REQUIRES_LEVEL_9_COMPARISON_FILTERING = 0x00000080;
        public const int D3D_SHADER_REQUIRES_TILED_RESOURCES = 0x00000100;
    }
    public class ID3D11Linker: IUnknown
    {
        static Guid s_uuid = new Guid("59a6cd0e-e10d-4c1f-88c0-63aba1daf30e");
        public static new ref Guid IID => ref s_uuid;
                    
        public override int QueryInterface(
            ref Guid iid,
            out IntPtr ppv
        ){
            var fp = GetFunctionPointer(3);
            var callback = (QueryInterfaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(QueryInterfaceFunc));
            
            return callback(m_ptr, ref iid, out ppv);
        }
        delegate int QueryInterfaceFunc(IntPtr self, ref Guid iid, out IntPtr ppv);

        public override uint AddRef(
        ){
            var fp = GetFunctionPointer(4);
            var callback = (AddRefFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AddRefFunc));
            
            return callback(m_ptr);
        }
        delegate uint AddRefFunc(IntPtr self);

        public override uint Release(
        ){
            var fp = GetFunctionPointer(5);
            var callback = (ReleaseFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ReleaseFunc));
            
            return callback(m_ptr);
        }
        delegate uint ReleaseFunc(IntPtr self);

        public virtual int Link(
            ID3D11ModuleInstance pEntry,
            string pEntryName,
            string pTargetName,
            uint uFlags,
            out ID3D10Blob ppShaderBlob,
            out ID3D10Blob ppErrorBuffer
        ){
            var fp = GetFunctionPointer(6);
            var callback = (LinkFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(LinkFunc));
            ppShaderBlob = new ID3D10Blob();ppErrorBuffer = new ID3D10Blob();
            return callback(m_ptr, pEntry.Ptr, pEntryName, pTargetName, uFlags, out ppShaderBlob.PtrForNew, out ppErrorBuffer.PtrForNew);
        }
        delegate int LinkFunc(IntPtr self, IntPtr pEntry, string pEntryName, string pTargetName, uint uFlags, out IntPtr ppShaderBlob, out IntPtr ppErrorBuffer);

        public virtual int UseLibrary(
            ID3D11ModuleInstance pLibraryMI
        ){
            var fp = GetFunctionPointer(7);
            var callback = (UseLibraryFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(UseLibraryFunc));
            
            return callback(m_ptr, pLibraryMI.Ptr);
        }
        delegate int UseLibraryFunc(IntPtr self, IntPtr pLibraryMI);

        public virtual int AddClipPlaneFromCBuffer(
            uint uCBufferSlot,
            uint uCBufferEntry
        ){
            var fp = GetFunctionPointer(8);
            var callback = (AddClipPlaneFromCBufferFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AddClipPlaneFromCBufferFunc));
            
            return callback(m_ptr, uCBufferSlot, uCBufferEntry);
        }
        delegate int AddClipPlaneFromCBufferFunc(IntPtr self, uint uCBufferSlot, uint uCBufferEntry);

    }
    public class ID3D11ModuleInstance: IUnknown
    {
        static Guid s_uuid = new Guid("469e07f7-045a-48d5-aa12-68a478cdf75d");
        public static new ref Guid IID => ref s_uuid;
                    
        public override int QueryInterface(
            ref Guid iid,
            out IntPtr ppv
        ){
            var fp = GetFunctionPointer(3);
            var callback = (QueryInterfaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(QueryInterfaceFunc));
            
            return callback(m_ptr, ref iid, out ppv);
        }
        delegate int QueryInterfaceFunc(IntPtr self, ref Guid iid, out IntPtr ppv);

        public override uint AddRef(
        ){
            var fp = GetFunctionPointer(4);
            var callback = (AddRefFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AddRefFunc));
            
            return callback(m_ptr);
        }
        delegate uint AddRefFunc(IntPtr self);

        public override uint Release(
        ){
            var fp = GetFunctionPointer(5);
            var callback = (ReleaseFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ReleaseFunc));
            
            return callback(m_ptr);
        }
        delegate uint ReleaseFunc(IntPtr self);

        public virtual int BindConstantBuffer(
            uint uSrcSlot,
            uint uDstSlot,
            uint cbDstOffset
        ){
            var fp = GetFunctionPointer(6);
            var callback = (BindConstantBufferFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(BindConstantBufferFunc));
            
            return callback(m_ptr, uSrcSlot, uDstSlot, cbDstOffset);
        }
        delegate int BindConstantBufferFunc(IntPtr self, uint uSrcSlot, uint uDstSlot, uint cbDstOffset);

        public virtual int BindConstantBufferByName(
            string pName,
            uint uDstSlot,
            uint cbDstOffset
        ){
            var fp = GetFunctionPointer(7);
            var callback = (BindConstantBufferByNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(BindConstantBufferByNameFunc));
            
            return callback(m_ptr, pName, uDstSlot, cbDstOffset);
        }
        delegate int BindConstantBufferByNameFunc(IntPtr self, string pName, uint uDstSlot, uint cbDstOffset);

        public virtual int BindResource(
            uint uSrcSlot,
            uint uDstSlot,
            uint uCount
        ){
            var fp = GetFunctionPointer(8);
            var callback = (BindResourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(BindResourceFunc));
            
            return callback(m_ptr, uSrcSlot, uDstSlot, uCount);
        }
        delegate int BindResourceFunc(IntPtr self, uint uSrcSlot, uint uDstSlot, uint uCount);

        public virtual int BindResourceByName(
            string pName,
            uint uDstSlot,
            uint uCount
        ){
            var fp = GetFunctionPointer(9);
            var callback = (BindResourceByNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(BindResourceByNameFunc));
            
            return callback(m_ptr, pName, uDstSlot, uCount);
        }
        delegate int BindResourceByNameFunc(IntPtr self, string pName, uint uDstSlot, uint uCount);

        public virtual int BindSampler(
            uint uSrcSlot,
            uint uDstSlot,
            uint uCount
        ){
            var fp = GetFunctionPointer(10);
            var callback = (BindSamplerFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(BindSamplerFunc));
            
            return callback(m_ptr, uSrcSlot, uDstSlot, uCount);
        }
        delegate int BindSamplerFunc(IntPtr self, uint uSrcSlot, uint uDstSlot, uint uCount);

        public virtual int BindSamplerByName(
            string pName,
            uint uDstSlot,
            uint uCount
        ){
            var fp = GetFunctionPointer(11);
            var callback = (BindSamplerByNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(BindSamplerByNameFunc));
            
            return callback(m_ptr, pName, uDstSlot, uCount);
        }
        delegate int BindSamplerByNameFunc(IntPtr self, string pName, uint uDstSlot, uint uCount);

        public virtual int BindUnorderedAccessView(
            uint uSrcSlot,
            uint uDstSlot,
            uint uCount
        ){
            var fp = GetFunctionPointer(12);
            var callback = (BindUnorderedAccessViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(BindUnorderedAccessViewFunc));
            
            return callback(m_ptr, uSrcSlot, uDstSlot, uCount);
        }
        delegate int BindUnorderedAccessViewFunc(IntPtr self, uint uSrcSlot, uint uDstSlot, uint uCount);

        public virtual int BindUnorderedAccessViewByName(
            string pName,
            uint uDstSlot,
            uint uCount
        ){
            var fp = GetFunctionPointer(13);
            var callback = (BindUnorderedAccessViewByNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(BindUnorderedAccessViewByNameFunc));
            
            return callback(m_ptr, pName, uDstSlot, uCount);
        }
        delegate int BindUnorderedAccessViewByNameFunc(IntPtr self, string pName, uint uDstSlot, uint uCount);

        public virtual int BindResourceAsUnorderedAccessView(
            uint uSrcSrvSlot,
            uint uDstUavSlot,
            uint uCount
        ){
            var fp = GetFunctionPointer(14);
            var callback = (BindResourceAsUnorderedAccessViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(BindResourceAsUnorderedAccessViewFunc));
            
            return callback(m_ptr, uSrcSrvSlot, uDstUavSlot, uCount);
        }
        delegate int BindResourceAsUnorderedAccessViewFunc(IntPtr self, uint uSrcSrvSlot, uint uDstUavSlot, uint uCount);

        public virtual int BindResourceAsUnorderedAccessViewByName(
            string pSrvName,
            uint uDstUavSlot,
            uint uCount
        ){
            var fp = GetFunctionPointer(15);
            var callback = (BindResourceAsUnorderedAccessViewByNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(BindResourceAsUnorderedAccessViewByNameFunc));
            
            return callback(m_ptr, pSrvName, uDstUavSlot, uCount);
        }
        delegate int BindResourceAsUnorderedAccessViewByNameFunc(IntPtr self, string pSrvName, uint uDstUavSlot, uint uCount);

    }
    public class ID3D11Module: IUnknown
    {
        static Guid s_uuid = new Guid("cac701ee-80fc-4122-8242-10b39c8cec34");
        public static new ref Guid IID => ref s_uuid;
                    
        public override int QueryInterface(
            ref Guid iid,
            out IntPtr ppv
        ){
            var fp = GetFunctionPointer(3);
            var callback = (QueryInterfaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(QueryInterfaceFunc));
            
            return callback(m_ptr, ref iid, out ppv);
        }
        delegate int QueryInterfaceFunc(IntPtr self, ref Guid iid, out IntPtr ppv);

        public override uint AddRef(
        ){
            var fp = GetFunctionPointer(4);
            var callback = (AddRefFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AddRefFunc));
            
            return callback(m_ptr);
        }
        delegate uint AddRefFunc(IntPtr self);

        public override uint Release(
        ){
            var fp = GetFunctionPointer(5);
            var callback = (ReleaseFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ReleaseFunc));
            
            return callback(m_ptr);
        }
        delegate uint ReleaseFunc(IntPtr self);

        public virtual int CreateInstance(
            string pNamespace,
            out ID3D11ModuleInstance ppModuleInstance
        ){
            var fp = GetFunctionPointer(6);
            var callback = (CreateInstanceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateInstanceFunc));
            ppModuleInstance = new ID3D11ModuleInstance();
            return callback(m_ptr, pNamespace, out ppModuleInstance.PtrForNew);
        }
        delegate int CreateInstanceFunc(IntPtr self, string pNamespace, out IntPtr ppModuleInstance);

    }
    public class ID3D11FunctionLinkingGraph: IUnknown
    {
        static Guid s_uuid = new Guid("54133220-1ce8-43d3-8236-9855c5ceecff");
        public static new ref Guid IID => ref s_uuid;
                    
        public override int QueryInterface(
            ref Guid iid,
            out IntPtr ppv
        ){
            var fp = GetFunctionPointer(3);
            var callback = (QueryInterfaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(QueryInterfaceFunc));
            
            return callback(m_ptr, ref iid, out ppv);
        }
        delegate int QueryInterfaceFunc(IntPtr self, ref Guid iid, out IntPtr ppv);

        public override uint AddRef(
        ){
            var fp = GetFunctionPointer(4);
            var callback = (AddRefFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AddRefFunc));
            
            return callback(m_ptr);
        }
        delegate uint AddRefFunc(IntPtr self);

        public override uint Release(
        ){
            var fp = GetFunctionPointer(5);
            var callback = (ReleaseFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ReleaseFunc));
            
            return callback(m_ptr);
        }
        delegate uint ReleaseFunc(IntPtr self);

        public virtual int CreateModuleInstance(
            out ID3D11ModuleInstance ppModuleInstance,
            out ID3D10Blob ppErrorBuffer
        ){
            var fp = GetFunctionPointer(6);
            var callback = (CreateModuleInstanceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateModuleInstanceFunc));
            ppModuleInstance = new ID3D11ModuleInstance();ppErrorBuffer = new ID3D10Blob();
            return callback(m_ptr, out ppModuleInstance.PtrForNew, out ppErrorBuffer.PtrForNew);
        }
        delegate int CreateModuleInstanceFunc(IntPtr self, out IntPtr ppModuleInstance, out IntPtr ppErrorBuffer);

        public virtual int SetInputSignature(
            ref D3D11_PARAMETER_DESC pInputParameters,
            uint cInputParameters,
            out ID3D11LinkingNode ppInputNode
        ){
            var fp = GetFunctionPointer(7);
            var callback = (SetInputSignatureFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetInputSignatureFunc));
            ppInputNode = new ID3D11LinkingNode();
            return callback(m_ptr, ref pInputParameters, cInputParameters, out ppInputNode.PtrForNew);
        }
        delegate int SetInputSignatureFunc(IntPtr self, ref D3D11_PARAMETER_DESC pInputParameters, uint cInputParameters, out IntPtr ppInputNode);

        public virtual int SetOutputSignature(
            ref D3D11_PARAMETER_DESC pOutputParameters,
            uint cOutputParameters,
            out ID3D11LinkingNode ppOutputNode
        ){
            var fp = GetFunctionPointer(8);
            var callback = (SetOutputSignatureFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetOutputSignatureFunc));
            ppOutputNode = new ID3D11LinkingNode();
            return callback(m_ptr, ref pOutputParameters, cOutputParameters, out ppOutputNode.PtrForNew);
        }
        delegate int SetOutputSignatureFunc(IntPtr self, ref D3D11_PARAMETER_DESC pOutputParameters, uint cOutputParameters, out IntPtr ppOutputNode);

        public virtual int CallFunction(
            string pModuleInstanceNamespace,
            ID3D11Module pModuleWithFunctionPrototype,
            string pFunctionName,
            out ID3D11LinkingNode ppCallNode
        ){
            var fp = GetFunctionPointer(9);
            var callback = (CallFunctionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CallFunctionFunc));
            ppCallNode = new ID3D11LinkingNode();
            return callback(m_ptr, pModuleInstanceNamespace, pModuleWithFunctionPrototype.Ptr, pFunctionName, out ppCallNode.PtrForNew);
        }
        delegate int CallFunctionFunc(IntPtr self, string pModuleInstanceNamespace, IntPtr pModuleWithFunctionPrototype, string pFunctionName, out IntPtr ppCallNode);

        public virtual int PassValue(
            ID3D11LinkingNode pSrcNode,
            int SrcParameterIndex,
            ID3D11LinkingNode pDstNode,
            int DstParameterIndex
        ){
            var fp = GetFunctionPointer(10);
            var callback = (PassValueFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PassValueFunc));
            
            return callback(m_ptr, pSrcNode.Ptr, SrcParameterIndex, pDstNode.Ptr, DstParameterIndex);
        }
        delegate int PassValueFunc(IntPtr self, IntPtr pSrcNode, int SrcParameterIndex, IntPtr pDstNode, int DstParameterIndex);

        public virtual int PassValueWithSwizzle(
            ID3D11LinkingNode pSrcNode,
            int SrcParameterIndex,
            string pSrcSwizzle,
            ID3D11LinkingNode pDstNode,
            int DstParameterIndex,
            string pDstSwizzle
        ){
            var fp = GetFunctionPointer(11);
            var callback = (PassValueWithSwizzleFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PassValueWithSwizzleFunc));
            
            return callback(m_ptr, pSrcNode.Ptr, SrcParameterIndex, pSrcSwizzle, pDstNode.Ptr, DstParameterIndex, pDstSwizzle);
        }
        delegate int PassValueWithSwizzleFunc(IntPtr self, IntPtr pSrcNode, int SrcParameterIndex, string pSrcSwizzle, IntPtr pDstNode, int DstParameterIndex, string pDstSwizzle);

        public virtual int GetLastError(
            out ID3D10Blob ppErrorBuffer
        ){
            var fp = GetFunctionPointer(12);
            var callback = (GetLastErrorFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetLastErrorFunc));
            ppErrorBuffer = new ID3D10Blob();
            return callback(m_ptr, out ppErrorBuffer.PtrForNew);
        }
        delegate int GetLastErrorFunc(IntPtr self, out IntPtr ppErrorBuffer);

        public virtual int GenerateHlsl(
            uint uFlags,
            out ID3D10Blob ppBuffer
        ){
            var fp = GetFunctionPointer(13);
            var callback = (GenerateHlslFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GenerateHlslFunc));
            ppBuffer = new ID3D10Blob();
            return callback(m_ptr, uFlags, out ppBuffer.PtrForNew);
        }
        delegate int GenerateHlslFunc(IntPtr self, uint uFlags, out IntPtr ppBuffer);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_PARAMETER_DESC // 1
    {
        public string Name;
        public string SemanticName;
        public D3D10_SHADER_VARIABLE_TYPE Type;
        public D3D10_SHADER_VARIABLE_CLASS Class;
        public uint Rows;
        public uint Columns;
        public D3D_INTERPOLATION_MODE InterpolationMode;
        public D3D_PARAMETER_FLAGS Flags;
        public uint FirstInRegister;
        public uint FirstInComponent;
        public uint FirstOutRegister;
        public uint FirstOutComponent;
    }
    public class ID3D11LinkingNode: IUnknown
    {
        static Guid s_uuid = new Guid("d80dd70c-8d2f-4751-94a1-03c79b3556db");
        public static new ref Guid IID => ref s_uuid;
                    
        public override int QueryInterface(
            ref Guid iid,
            out IntPtr ppv
        ){
            var fp = GetFunctionPointer(3);
            var callback = (QueryInterfaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(QueryInterfaceFunc));
            
            return callback(m_ptr, ref iid, out ppv);
        }
        delegate int QueryInterfaceFunc(IntPtr self, ref Guid iid, out IntPtr ppv);

        public override uint AddRef(
        ){
            var fp = GetFunctionPointer(4);
            var callback = (AddRefFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AddRefFunc));
            
            return callback(m_ptr);
        }
        delegate uint AddRefFunc(IntPtr self);

        public override uint Release(
        ){
            var fp = GetFunctionPointer(5);
            var callback = (ReleaseFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ReleaseFunc));
            
            return callback(m_ptr);
        }
        delegate uint ReleaseFunc(IntPtr self);

    }
    public enum D3D11_SHADER_VERSION_TYPE // 1
    {
        _PIXEL_SHADER = 0x0,
        _VERTEX_SHADER = 0x1,
        _GEOMETRY_SHADER = 0x2,
        _HULL_SHADER = 0x3,
        _DOMAIN_SHADER = 0x4,
        _COMPUTE_SHADER = 0x5,
        _RESERVED0 = 0xfff0,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_SIGNATURE_PARAMETER_DESC // 1
    {
        public string SemanticName;
        public uint SemanticIndex;
        public uint Register;
        public D3D10_NAME SystemValueType;
        public D3D10_REGISTER_COMPONENT_TYPE ComponentType;
        public byte Mask;
        public byte ReadWriteMask;
        public uint Stream;
        public D3D_MIN_PRECISION MinPrecision;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_SHADER_BUFFER_DESC // 1
    {
        public string Name;
        public D3D11_CBUFFER_TYPE Type;
        public uint Variables;
        public uint Size;
        public uint uFlags;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_SHADER_VARIABLE_DESC // 1
    {
        public string Name;
        public uint StartOffset;
        public uint Size;
        public uint uFlags;
        public IntPtr DefaultValue;
        public uint StartTexture;
        public uint TextureSize;
        public uint StartSampler;
        public uint SamplerSize;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_SHADER_TYPE_DESC // 1
    {
        public D3D10_SHADER_VARIABLE_CLASS Class;
        public D3D10_SHADER_VARIABLE_TYPE Type;
        public uint Rows;
        public uint Columns;
        public uint Elements;
        public uint Members;
        public uint Offset;
        public string Name;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_SHADER_DESC // 1
    {
        public uint Version;
        public string Creator;
        public uint Flags;
        public uint ConstantBuffers;
        public uint BoundResources;
        public uint InputParameters;
        public uint OutputParameters;
        public uint InstructionCount;
        public uint TempRegisterCount;
        public uint TempArrayCount;
        public uint DefCount;
        public uint DclCount;
        public uint TextureNormalInstructions;
        public uint TextureLoadInstructions;
        public uint TextureCompInstructions;
        public uint TextureBiasInstructions;
        public uint TextureGradientInstructions;
        public uint FloatInstructionCount;
        public uint IntInstructionCount;
        public uint UintInstructionCount;
        public uint StaticFlowControlCount;
        public uint DynamicFlowControlCount;
        public uint MacroInstructionCount;
        public uint ArrayInstructionCount;
        public uint CutInstructionCount;
        public uint EmitInstructionCount;
        public D3D11_PRIMITIVE_TOPOLOGY GSOutputTopology;
        public uint GSMaxOutputVertexCount;
        public D3D11_PRIMITIVE InputPrimitive;
        public uint PatchConstantParameters;
        public uint cGSInstanceCount;
        public uint cControlPoints;
        public D3D11_TESSELLATOR_OUTPUT_PRIMITIVE HSOutputPrimitive;
        public D3D11_TESSELLATOR_PARTITIONING HSPartitioning;
        public D3D11_TESSELLATOR_DOMAIN TessellatorDomain;
        public uint cBarrierInstructions;
        public uint cInterlockedInstructions;
        public uint cTextureStoreInstructions;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_SHADER_INPUT_BIND_DESC // 1
    {
        public string Name;
        public D3D10_SHADER_INPUT_TYPE Type;
        public uint BindPoint;
        public uint BindCount;
        public uint uFlags;
        public D3D11_RESOURCE_RETURN_TYPE ReturnType;
        public D3D11_SRV_DIMENSION Dimension;
        public uint NumSamples;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_LIBRARY_DESC // 1
    {
        public string Creator;
        public uint Flags;
        public uint FunctionCount;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_FUNCTION_DESC // 1
    {
        public uint Version;
        public string Creator;
        public uint Flags;
        public uint ConstantBuffers;
        public uint BoundResources;
        public uint InstructionCount;
        public uint TempRegisterCount;
        public uint TempArrayCount;
        public uint DefCount;
        public uint DclCount;
        public uint TextureNormalInstructions;
        public uint TextureLoadInstructions;
        public uint TextureCompInstructions;
        public uint TextureBiasInstructions;
        public uint TextureGradientInstructions;
        public uint FloatInstructionCount;
        public uint IntInstructionCount;
        public uint UintInstructionCount;
        public uint StaticFlowControlCount;
        public uint DynamicFlowControlCount;
        public uint MacroInstructionCount;
        public uint ArrayInstructionCount;
        public uint MovInstructionCount;
        public uint MovcInstructionCount;
        public uint ConversionInstructionCount;
        public uint BitwiseInstructionCount;
        public D3D_FEATURE_LEVEL MinFeatureLevel;
        public ulong RequiredFeatureFlags;
        public string Name;
        public int FunctionParameterCount;
        public int HasReturn;
        public int Has10Level9VertexShader;
        public int Has10Level9PixelShader;
    }
    public class ID3D11ShaderReflectionType: ComPtr
    {
        static Guid s_uuid = new Guid("6e6ffa6a-9bae-4613-a51e-91652d508c21");
        public static new ref Guid IID => ref s_uuid;
                    
        public virtual int GetDesc(
            out D3D11_SHADER_TYPE_DESC pDesc
        ){
            var fp = GetFunctionPointer(0);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            return callback(m_ptr, out pDesc);
        }
        delegate int GetDescFunc(IntPtr self, out D3D11_SHADER_TYPE_DESC pDesc);

        public virtual ID3D11ShaderReflectionType GetMemberTypeByIndex(
            uint Index
        ){
            var fp = GetFunctionPointer(1);
            var callback = (GetMemberTypeByIndexFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMemberTypeByIndexFunc));
            
            return callback(m_ptr, Index);
        }
        delegate ID3D11ShaderReflectionType GetMemberTypeByIndexFunc(IntPtr self, uint Index);

        public virtual ID3D11ShaderReflectionType GetMemberTypeByName(
            string Name
        ){
            var fp = GetFunctionPointer(2);
            var callback = (GetMemberTypeByNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMemberTypeByNameFunc));
            
            return callback(m_ptr, Name);
        }
        delegate ID3D11ShaderReflectionType GetMemberTypeByNameFunc(IntPtr self, string Name);

        public virtual string GetMemberTypeName(
            uint Index
        ){
            var fp = GetFunctionPointer(3);
            var callback = (GetMemberTypeNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMemberTypeNameFunc));
            
            return callback(m_ptr, Index);
        }
        delegate string GetMemberTypeNameFunc(IntPtr self, uint Index);

        public virtual int IsEqual(
            ID3D11ShaderReflectionType pType
        ){
            var fp = GetFunctionPointer(4);
            var callback = (IsEqualFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsEqualFunc));
            
            return callback(m_ptr, pType.Ptr);
        }
        delegate int IsEqualFunc(IntPtr self, IntPtr pType);

        public virtual ID3D11ShaderReflectionType GetSubType(
        ){
            var fp = GetFunctionPointer(5);
            var callback = (GetSubTypeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetSubTypeFunc));
            
            return callback(m_ptr);
        }
        delegate ID3D11ShaderReflectionType GetSubTypeFunc(IntPtr self);

        public virtual ID3D11ShaderReflectionType GetBaseClass(
        ){
            var fp = GetFunctionPointer(6);
            var callback = (GetBaseClassFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetBaseClassFunc));
            
            return callback(m_ptr);
        }
        delegate ID3D11ShaderReflectionType GetBaseClassFunc(IntPtr self);

        public virtual uint GetNumInterfaces(
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetNumInterfacesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetNumInterfacesFunc));
            
            return callback(m_ptr);
        }
        delegate uint GetNumInterfacesFunc(IntPtr self);

        public virtual ID3D11ShaderReflectionType GetInterfaceByIndex(
            uint uIndex
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetInterfaceByIndexFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetInterfaceByIndexFunc));
            
            return callback(m_ptr, uIndex);
        }
        delegate ID3D11ShaderReflectionType GetInterfaceByIndexFunc(IntPtr self, uint uIndex);

        public virtual int IsOfType(
            ID3D11ShaderReflectionType pType
        ){
            var fp = GetFunctionPointer(9);
            var callback = (IsOfTypeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsOfTypeFunc));
            
            return callback(m_ptr, pType.Ptr);
        }
        delegate int IsOfTypeFunc(IntPtr self, IntPtr pType);

        public virtual int ImplementsInterface(
            ID3D11ShaderReflectionType pBase
        ){
            var fp = GetFunctionPointer(10);
            var callback = (ImplementsInterfaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ImplementsInterfaceFunc));
            
            return callback(m_ptr, pBase.Ptr);
        }
        delegate int ImplementsInterfaceFunc(IntPtr self, IntPtr pBase);

    }
    public class ID3D11ShaderReflectionVariable: ComPtr
    {
        static Guid s_uuid = new Guid("51f23923-f3e5-4bd1-91cb-606177d8db4c");
        public static new ref Guid IID => ref s_uuid;
                    
        public virtual int GetDesc(
            out D3D11_SHADER_VARIABLE_DESC pDesc
        ){
            var fp = GetFunctionPointer(0);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            return callback(m_ptr, out pDesc);
        }
        delegate int GetDescFunc(IntPtr self, out D3D11_SHADER_VARIABLE_DESC pDesc);

        public virtual ID3D11ShaderReflectionType GetComType(
        ){
            var fp = GetFunctionPointer(1);
            var callback = (GetTypeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypeFunc));
            
            return callback(m_ptr);
        }
        delegate ID3D11ShaderReflectionType GetTypeFunc(IntPtr self);

        public virtual ID3D11ShaderReflectionConstantBuffer GetBuffer(
        ){
            var fp = GetFunctionPointer(2);
            var callback = (GetBufferFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetBufferFunc));
            
            return callback(m_ptr);
        }
        delegate ID3D11ShaderReflectionConstantBuffer GetBufferFunc(IntPtr self);

        public virtual uint GetInterfaceSlot(
            uint uArrayIndex
        ){
            var fp = GetFunctionPointer(3);
            var callback = (GetInterfaceSlotFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetInterfaceSlotFunc));
            
            return callback(m_ptr, uArrayIndex);
        }
        delegate uint GetInterfaceSlotFunc(IntPtr self, uint uArrayIndex);

    }
    public class ID3D11ShaderReflectionConstantBuffer: ComPtr
    {
        static Guid s_uuid = new Guid("eb62d63d-93dd-4318-8ae8-c6f83ad371b8");
        public static new ref Guid IID => ref s_uuid;
                    
        public virtual int GetDesc(
            out D3D11_SHADER_BUFFER_DESC pDesc
        ){
            var fp = GetFunctionPointer(0);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            return callback(m_ptr, out pDesc);
        }
        delegate int GetDescFunc(IntPtr self, out D3D11_SHADER_BUFFER_DESC pDesc);

        public virtual ID3D11ShaderReflectionVariable GetVariableByIndex(
            uint Index
        ){
            var fp = GetFunctionPointer(1);
            var callback = (GetVariableByIndexFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetVariableByIndexFunc));
            
            return callback(m_ptr, Index);
        }
        delegate ID3D11ShaderReflectionVariable GetVariableByIndexFunc(IntPtr self, uint Index);

        public virtual ID3D11ShaderReflectionVariable GetVariableByName(
            string Name
        ){
            var fp = GetFunctionPointer(2);
            var callback = (GetVariableByNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetVariableByNameFunc));
            
            return callback(m_ptr, Name);
        }
        delegate ID3D11ShaderReflectionVariable GetVariableByNameFunc(IntPtr self, string Name);

    }
    public class ID3D11ShaderReflection: IUnknown
    {
        static Guid s_uuid = new Guid("8d536ca1-0cca-4956-a837-786963755584");
        public static new ref Guid IID => ref s_uuid;
                    
        public override int QueryInterface(
            ref Guid iid,
            out IntPtr ppv
        ){
            var fp = GetFunctionPointer(3);
            var callback = (QueryInterfaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(QueryInterfaceFunc));
            
            return callback(m_ptr, ref iid, out ppv);
        }
        delegate int QueryInterfaceFunc(IntPtr self, ref Guid iid, out IntPtr ppv);

        public override uint AddRef(
        ){
            var fp = GetFunctionPointer(4);
            var callback = (AddRefFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AddRefFunc));
            
            return callback(m_ptr);
        }
        delegate uint AddRefFunc(IntPtr self);

        public override uint Release(
        ){
            var fp = GetFunctionPointer(5);
            var callback = (ReleaseFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ReleaseFunc));
            
            return callback(m_ptr);
        }
        delegate uint ReleaseFunc(IntPtr self);

        public virtual int GetDesc(
            out D3D11_SHADER_DESC pDesc
        ){
            var fp = GetFunctionPointer(6);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            return callback(m_ptr, out pDesc);
        }
        delegate int GetDescFunc(IntPtr self, out D3D11_SHADER_DESC pDesc);

        public virtual ID3D11ShaderReflectionConstantBuffer GetConstantBufferByIndex(
            uint Index
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetConstantBufferByIndexFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetConstantBufferByIndexFunc));
            
            return callback(m_ptr, Index);
        }
        delegate ID3D11ShaderReflectionConstantBuffer GetConstantBufferByIndexFunc(IntPtr self, uint Index);

        public virtual ID3D11ShaderReflectionConstantBuffer GetConstantBufferByName(
            string Name
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetConstantBufferByNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetConstantBufferByNameFunc));
            
            return callback(m_ptr, Name);
        }
        delegate ID3D11ShaderReflectionConstantBuffer GetConstantBufferByNameFunc(IntPtr self, string Name);

        public virtual int GetResourceBindingDesc(
            uint ResourceIndex,
            out D3D11_SHADER_INPUT_BIND_DESC pDesc
        ){
            var fp = GetFunctionPointer(9);
            var callback = (GetResourceBindingDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetResourceBindingDescFunc));
            
            return callback(m_ptr, ResourceIndex, out pDesc);
        }
        delegate int GetResourceBindingDescFunc(IntPtr self, uint ResourceIndex, out D3D11_SHADER_INPUT_BIND_DESC pDesc);

        public virtual int GetInputParameterDesc(
            uint ParameterIndex,
            out D3D11_SIGNATURE_PARAMETER_DESC pDesc
        ){
            var fp = GetFunctionPointer(10);
            var callback = (GetInputParameterDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetInputParameterDescFunc));
            
            return callback(m_ptr, ParameterIndex, out pDesc);
        }
        delegate int GetInputParameterDescFunc(IntPtr self, uint ParameterIndex, out D3D11_SIGNATURE_PARAMETER_DESC pDesc);

        public virtual int GetOutputParameterDesc(
            uint ParameterIndex,
            out D3D11_SIGNATURE_PARAMETER_DESC pDesc
        ){
            var fp = GetFunctionPointer(11);
            var callback = (GetOutputParameterDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetOutputParameterDescFunc));
            
            return callback(m_ptr, ParameterIndex, out pDesc);
        }
        delegate int GetOutputParameterDescFunc(IntPtr self, uint ParameterIndex, out D3D11_SIGNATURE_PARAMETER_DESC pDesc);

        public virtual int GetPatchConstantParameterDesc(
            uint ParameterIndex,
            out D3D11_SIGNATURE_PARAMETER_DESC pDesc
        ){
            var fp = GetFunctionPointer(12);
            var callback = (GetPatchConstantParameterDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPatchConstantParameterDescFunc));
            
            return callback(m_ptr, ParameterIndex, out pDesc);
        }
        delegate int GetPatchConstantParameterDescFunc(IntPtr self, uint ParameterIndex, out D3D11_SIGNATURE_PARAMETER_DESC pDesc);

        public virtual ID3D11ShaderReflectionVariable GetVariableByName(
            string Name
        ){
            var fp = GetFunctionPointer(13);
            var callback = (GetVariableByNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetVariableByNameFunc));
            
            return callback(m_ptr, Name);
        }
        delegate ID3D11ShaderReflectionVariable GetVariableByNameFunc(IntPtr self, string Name);

        public virtual int GetResourceBindingDescByName(
            string Name,
            out D3D11_SHADER_INPUT_BIND_DESC pDesc
        ){
            var fp = GetFunctionPointer(14);
            var callback = (GetResourceBindingDescByNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetResourceBindingDescByNameFunc));
            
            return callback(m_ptr, Name, out pDesc);
        }
        delegate int GetResourceBindingDescByNameFunc(IntPtr self, string Name, out D3D11_SHADER_INPUT_BIND_DESC pDesc);

        public virtual uint GetMovInstructionCount(
        ){
            var fp = GetFunctionPointer(15);
            var callback = (GetMovInstructionCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMovInstructionCountFunc));
            
            return callback(m_ptr);
        }
        delegate uint GetMovInstructionCountFunc(IntPtr self);

        public virtual uint GetMovcInstructionCount(
        ){
            var fp = GetFunctionPointer(16);
            var callback = (GetMovcInstructionCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMovcInstructionCountFunc));
            
            return callback(m_ptr);
        }
        delegate uint GetMovcInstructionCountFunc(IntPtr self);

        public virtual uint GetConversionInstructionCount(
        ){
            var fp = GetFunctionPointer(17);
            var callback = (GetConversionInstructionCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetConversionInstructionCountFunc));
            
            return callback(m_ptr);
        }
        delegate uint GetConversionInstructionCountFunc(IntPtr self);

        public virtual uint GetBitwiseInstructionCount(
        ){
            var fp = GetFunctionPointer(18);
            var callback = (GetBitwiseInstructionCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetBitwiseInstructionCountFunc));
            
            return callback(m_ptr);
        }
        delegate uint GetBitwiseInstructionCountFunc(IntPtr self);

        public virtual D3D11_PRIMITIVE GetGSInputPrimitive(
        ){
            var fp = GetFunctionPointer(19);
            var callback = (GetGSInputPrimitiveFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetGSInputPrimitiveFunc));
            
            return callback(m_ptr);
        }
        delegate D3D11_PRIMITIVE GetGSInputPrimitiveFunc(IntPtr self);

        public virtual int IsSampleFrequencyShader(
        ){
            var fp = GetFunctionPointer(20);
            var callback = (IsSampleFrequencyShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsSampleFrequencyShaderFunc));
            
            return callback(m_ptr);
        }
        delegate int IsSampleFrequencyShaderFunc(IntPtr self);

        public virtual uint GetNumInterfaceSlots(
        ){
            var fp = GetFunctionPointer(21);
            var callback = (GetNumInterfaceSlotsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetNumInterfaceSlotsFunc));
            
            return callback(m_ptr);
        }
        delegate uint GetNumInterfaceSlotsFunc(IntPtr self);

        public virtual int GetMinFeatureLevel(
            out D3D_FEATURE_LEVEL pLevel
        ){
            var fp = GetFunctionPointer(22);
            var callback = (GetMinFeatureLevelFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMinFeatureLevelFunc));
            
            return callback(m_ptr, out pLevel);
        }
        delegate int GetMinFeatureLevelFunc(IntPtr self, out D3D_FEATURE_LEVEL pLevel);

        public virtual uint GetThreadGroupSize(
            out uint pSizeX,
            out uint pSizeY,
            out uint pSizeZ
        ){
            var fp = GetFunctionPointer(23);
            var callback = (GetThreadGroupSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetThreadGroupSizeFunc));
            
            return callback(m_ptr, out pSizeX, out pSizeY, out pSizeZ);
        }
        delegate uint GetThreadGroupSizeFunc(IntPtr self, out uint pSizeX, out uint pSizeY, out uint pSizeZ);

        public virtual ulong GetRequiresFlags(
        ){
            var fp = GetFunctionPointer(24);
            var callback = (GetRequiresFlagsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetRequiresFlagsFunc));
            
            return callback(m_ptr);
        }
        delegate ulong GetRequiresFlagsFunc(IntPtr self);

    }
    public class ID3D11LibraryReflection: IUnknown
    {
        static Guid s_uuid = new Guid("54384f1b-5b3e-4bb7-ae01-60ba3097cbb6");
        public static new ref Guid IID => ref s_uuid;
                    
        public override int QueryInterface(
            ref Guid iid,
            out IntPtr ppv
        ){
            var fp = GetFunctionPointer(3);
            var callback = (QueryInterfaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(QueryInterfaceFunc));
            
            return callback(m_ptr, ref iid, out ppv);
        }
        delegate int QueryInterfaceFunc(IntPtr self, ref Guid iid, out IntPtr ppv);

        public override uint AddRef(
        ){
            var fp = GetFunctionPointer(4);
            var callback = (AddRefFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AddRefFunc));
            
            return callback(m_ptr);
        }
        delegate uint AddRefFunc(IntPtr self);

        public override uint Release(
        ){
            var fp = GetFunctionPointer(5);
            var callback = (ReleaseFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ReleaseFunc));
            
            return callback(m_ptr);
        }
        delegate uint ReleaseFunc(IntPtr self);

        public virtual int GetDesc(
            out D3D11_LIBRARY_DESC pDesc
        ){
            var fp = GetFunctionPointer(6);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            return callback(m_ptr, out pDesc);
        }
        delegate int GetDescFunc(IntPtr self, out D3D11_LIBRARY_DESC pDesc);

        public virtual ID3D11FunctionReflection GetFunctionByIndex(
            int FunctionIndex
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetFunctionByIndexFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFunctionByIndexFunc));
            
            return callback(m_ptr, FunctionIndex);
        }
        delegate ID3D11FunctionReflection GetFunctionByIndexFunc(IntPtr self, int FunctionIndex);

    }
    public class ID3D11FunctionReflection: ComPtr
    {
        static Guid s_uuid = new Guid("207bcecb-d683-4a06-a8a3-9b149b9f73a4");
        public static new ref Guid IID => ref s_uuid;
                    
        public virtual int GetDesc(
            out D3D11_FUNCTION_DESC pDesc
        ){
            var fp = GetFunctionPointer(0);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            return callback(m_ptr, out pDesc);
        }
        delegate int GetDescFunc(IntPtr self, out D3D11_FUNCTION_DESC pDesc);

        public virtual ID3D11ShaderReflectionConstantBuffer GetConstantBufferByIndex(
            uint BufferIndex
        ){
            var fp = GetFunctionPointer(1);
            var callback = (GetConstantBufferByIndexFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetConstantBufferByIndexFunc));
            
            return callback(m_ptr, BufferIndex);
        }
        delegate ID3D11ShaderReflectionConstantBuffer GetConstantBufferByIndexFunc(IntPtr self, uint BufferIndex);

        public virtual ID3D11ShaderReflectionConstantBuffer GetConstantBufferByName(
            string Name
        ){
            var fp = GetFunctionPointer(2);
            var callback = (GetConstantBufferByNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetConstantBufferByNameFunc));
            
            return callback(m_ptr, Name);
        }
        delegate ID3D11ShaderReflectionConstantBuffer GetConstantBufferByNameFunc(IntPtr self, string Name);

        public virtual int GetResourceBindingDesc(
            uint ResourceIndex,
            out D3D11_SHADER_INPUT_BIND_DESC pDesc
        ){
            var fp = GetFunctionPointer(3);
            var callback = (GetResourceBindingDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetResourceBindingDescFunc));
            
            return callback(m_ptr, ResourceIndex, out pDesc);
        }
        delegate int GetResourceBindingDescFunc(IntPtr self, uint ResourceIndex, out D3D11_SHADER_INPUT_BIND_DESC pDesc);

        public virtual ID3D11ShaderReflectionVariable GetVariableByName(
            string Name
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetVariableByNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetVariableByNameFunc));
            
            return callback(m_ptr, Name);
        }
        delegate ID3D11ShaderReflectionVariable GetVariableByNameFunc(IntPtr self, string Name);

        public virtual int GetResourceBindingDescByName(
            string Name,
            out D3D11_SHADER_INPUT_BIND_DESC pDesc
        ){
            var fp = GetFunctionPointer(5);
            var callback = (GetResourceBindingDescByNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetResourceBindingDescByNameFunc));
            
            return callback(m_ptr, Name, out pDesc);
        }
        delegate int GetResourceBindingDescByNameFunc(IntPtr self, string Name, out D3D11_SHADER_INPUT_BIND_DESC pDesc);

        public virtual ID3D11FunctionParameterReflection GetFunctionParameter(
            int ParameterIndex
        ){
            var fp = GetFunctionPointer(6);
            var callback = (GetFunctionParameterFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFunctionParameterFunc));
            
            return callback(m_ptr, ParameterIndex);
        }
        delegate ID3D11FunctionParameterReflection GetFunctionParameterFunc(IntPtr self, int ParameterIndex);

    }
    public class ID3D11FunctionParameterReflection: ComPtr
    {
        static Guid s_uuid = new Guid("42757488-334f-47fe-982e-1a65d08cc462");
        public static new ref Guid IID => ref s_uuid;
                    
        public virtual int GetDesc(
            out D3D11_PARAMETER_DESC pDesc
        ){
            var fp = GetFunctionPointer(0);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            return callback(m_ptr, out pDesc);
        }
        delegate int GetDescFunc(IntPtr self, out D3D11_PARAMETER_DESC pDesc);

    }
}
