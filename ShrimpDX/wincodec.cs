// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public static partial class Constants {
        public const int WINCODEC_SDK_VERSION1 = unchecked((int)0x0236);
        public const int WINCODEC_SDK_VERSION2 = unchecked((int)0x0237);
        // unknown type: WINCODEC_SDK_VERSION WINCODEC_SDK_VERSION2
        // unknown type: CLSID_WICImagingFactory CLSID_WICImagingFactory2
        // unknown type: CLSID_WICPngDecoder CLSID_WICPngDecoder2
        public const int WIC_JPEG_MAX_COMPONENT_COUNT = ( 4 );
        public const int WIC_JPEG_MAX_TABLE_INDEX = ( 3 );
        public const int WIC_JPEG_SAMPLE_FACTORS_ONE = unchecked((int)0x11);
        public const int WIC_JPEG_SAMPLE_FACTORS_THREE_420 = unchecked((int)0x111122);
        public const int WIC_JPEG_SAMPLE_FACTORS_THREE_422 = unchecked((int)0x111121);
        public const int WIC_JPEG_SAMPLE_FACTORS_THREE_440 = unchecked((int)0x111112);
        public const int WIC_JPEG_SAMPLE_FACTORS_THREE_444 = unchecked((int)0x111111);
        public const int WIC_JPEG_QUANTIZATION_BASELINE_ONE = ( 0 );
        public const int WIC_JPEG_QUANTIZATION_BASELINE_THREE = unchecked((int)0x10100);
        public const int WIC_JPEG_HUFFMAN_BASELINE_ONE = ( 0 );
        public const int WIC_JPEG_HUFFMAN_BASELINE_THREE = unchecked((int)0x111100);
        // unknown type: GUID_WICPixelFormatUndefined GUID_WICPixelFormatDontCare
        public const int FACILITY_WINCODEC_ERR = unchecked((int)0x898);
        public const int WINCODEC_ERR_BASE = unchecked((int)0x2000);
        // macro function: MAKE_WINCODECHR ( sev , code ) MAKE_HRESULT ( sev , FACILITY_WINCODEC_ERR , ( WINCODEC_ERR_BASE + code ) )
        // macro function: MAKE_WINCODECHR_ERR ( code ) MAKE_WINCODECHR ( 1 , code )
        // unknown type: WINCODEC_ERR_GENERIC_ERROR E_FAIL
        // unknown type: WINCODEC_ERR_INVALIDPARAMETER E_INVALIDARG
        // unknown type: WINCODEC_ERR_OUTOFMEMORY E_OUTOFMEMORY
        // unknown type: WINCODEC_ERR_NOTIMPLEMENTED E_NOTIMPL
        // unknown type: WINCODEC_ERR_ABORTED E_ABORT
        // unknown type: WINCODEC_ERR_ACCESSDENIED E_ACCESSDENIED
        // unknown type: WINCODEC_ERR_VALUEOVERFLOW INTSAFE_E_ARITHMETIC_OVERFLOW
        public const int WICRawChangeNotification_ExposureCompensation = unchecked((int)0x00000001);
        public const int WICRawChangeNotification_NamedWhitePoint = unchecked((int)0x00000002);
        public const int WICRawChangeNotification_KelvinWhitePoint = unchecked((int)0x00000004);
        public const int WICRawChangeNotification_RGBWhitePoint = unchecked((int)0x00000008);
        public const int WICRawChangeNotification_Contrast = unchecked((int)0x00000010);
        public const int WICRawChangeNotification_Gamma = unchecked((int)0x00000020);
        public const int WICRawChangeNotification_Sharpness = unchecked((int)0x00000040);
        public const int WICRawChangeNotification_Saturation = unchecked((int)0x00000080);
        public const int WICRawChangeNotification_Tint = unchecked((int)0x00000100);
        public const int WICRawChangeNotification_NoiseReduction = unchecked((int)0x00000200);
        public const int WICRawChangeNotification_DestinationColorContext = unchecked((int)0x00000400);
        public const int WICRawChangeNotification_ToneCurve = unchecked((int)0x00000800);
        public const int WICRawChangeNotification_Rotation = unchecked((int)0x00001000);
        public const int WICRawChangeNotification_RenderMode = unchecked((int)0x00002000);
    }
    public class IWICPalette: IUnknown
    {
        static Guid s_uuid = new Guid("00000040-a8f2-4877-ba0a-fd2b6645fb94");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int InitializePredefined(
            WICBitmapPaletteType ePaletteType,
            int fAddTransparentColor
        ){
            var fp = GetFunctionPointer(3);
            var callback = (InitializePredefinedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(InitializePredefinedFunc));
            
            return callback(m_ptr, ePaletteType, fAddTransparentColor);
        }
        delegate int InitializePredefinedFunc(IntPtr self, WICBitmapPaletteType ePaletteType, int fAddTransparentColor);

        public virtual int InitializeCustom(
            out uint pColors,
            uint cCount
        ){
            var fp = GetFunctionPointer(4);
            var callback = (InitializeCustomFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(InitializeCustomFunc));
            
            return callback(m_ptr, out pColors, cCount);
        }
        delegate int InitializeCustomFunc(IntPtr self, out uint pColors, uint cCount);

        public virtual int InitializeFromBitmap(
            IWICBitmapSource pISurface,
            uint cCount,
            int fAddTransparentColor
        ){
            var fp = GetFunctionPointer(5);
            var callback = (InitializeFromBitmapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(InitializeFromBitmapFunc));
            
            return callback(m_ptr, pISurface!=null ? pISurface.Ptr : IntPtr.Zero, cCount, fAddTransparentColor);
        }
        delegate int InitializeFromBitmapFunc(IntPtr self, IntPtr pISurface, uint cCount, int fAddTransparentColor);

        public virtual int InitializeFromPalette(
            IWICPalette pIPalette
        ){
            var fp = GetFunctionPointer(6);
            var callback = (InitializeFromPaletteFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(InitializeFromPaletteFunc));
            
            return callback(m_ptr, pIPalette!=null ? pIPalette.Ptr : IntPtr.Zero);
        }
        delegate int InitializeFromPaletteFunc(IntPtr self, IntPtr pIPalette);

        public virtual int GetComType(
            out WICBitmapPaletteType pePaletteType
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetTypeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypeFunc));
            
            return callback(m_ptr, out pePaletteType);
        }
        delegate int GetTypeFunc(IntPtr self, out WICBitmapPaletteType pePaletteType);

        public virtual int GetColorCount(
            out uint pcCount
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetColorCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetColorCountFunc));
            
            return callback(m_ptr, out pcCount);
        }
        delegate int GetColorCountFunc(IntPtr self, out uint pcCount);

        public virtual int GetColors(
            uint cCount,
            out uint pColors,
            out uint pcActualColors
        ){
            var fp = GetFunctionPointer(9);
            var callback = (GetColorsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetColorsFunc));
            
            return callback(m_ptr, cCount, out pColors, out pcActualColors);
        }
        delegate int GetColorsFunc(IntPtr self, uint cCount, out uint pColors, out uint pcActualColors);

        public virtual int IsBlackWhite(
            out int pfIsBlackWhite
        ){
            var fp = GetFunctionPointer(10);
            var callback = (IsBlackWhiteFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsBlackWhiteFunc));
            
            return callback(m_ptr, out pfIsBlackWhite);
        }
        delegate int IsBlackWhiteFunc(IntPtr self, out int pfIsBlackWhite);

        public virtual int IsGrayscale(
            out int pfIsGrayscale
        ){
            var fp = GetFunctionPointer(11);
            var callback = (IsGrayscaleFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsGrayscaleFunc));
            
            return callback(m_ptr, out pfIsGrayscale);
        }
        delegate int IsGrayscaleFunc(IntPtr self, out int pfIsGrayscale);

        public virtual int HasAlpha(
            out int pfHasAlpha
        ){
            var fp = GetFunctionPointer(12);
            var callback = (HasAlphaFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(HasAlphaFunc));
            
            return callback(m_ptr, out pfHasAlpha);
        }
        delegate int HasAlphaFunc(IntPtr self, out int pfHasAlpha);

    }
    public enum WICBitmapPaletteType // 1
    {
        WICBitmapPaletteTypeCustom = 0x0,
        WICBitmapPaletteTypeMedianCut = 0x1,
        WICBitmapPaletteTypeFixedBW = 0x2,
        WICBitmapPaletteTypeFixedHalftone8 = 0x3,
        WICBitmapPaletteTypeFixedHalftone27 = 0x4,
        WICBitmapPaletteTypeFixedHalftone64 = 0x5,
        WICBitmapPaletteTypeFixedHalftone125 = 0x6,
        WICBitmapPaletteTypeFixedHalftone216 = 0x7,
        WICBitmapPaletteTypeFixedWebPalette = 0x7,
        WICBitmapPaletteTypeFixedHalftone252 = 0x8,
        WICBitmapPaletteTypeFixedHalftone256 = 0x9,
        WICBitmapPaletteTypeFixedGray4 = 0xa,
        WICBitmapPaletteTypeFixedGray16 = 0xb,
        WICBitmapPaletteTypeFixedGray256 = 0xc,
        WICBITMAPPALETTETYPE_FORCE_DWORD = 0x7fffffff,
    }
    public class IWICBitmapSource: IUnknown
    {
        static Guid s_uuid = new Guid("00000120-a8f2-4877-ba0a-fd2b6645fb94");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int GetSize(
            out uint puiWidth,
            out uint puiHeight
        ){
            var fp = GetFunctionPointer(3);
            var callback = (GetSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetSizeFunc));
            
            return callback(m_ptr, out puiWidth, out puiHeight);
        }
        delegate int GetSizeFunc(IntPtr self, out uint puiWidth, out uint puiHeight);

        public virtual int GetPixelFormat(
            out Guid pPixelFormat
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetPixelFormatFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPixelFormatFunc));
            
            return callback(m_ptr, out pPixelFormat);
        }
        delegate int GetPixelFormatFunc(IntPtr self, out Guid pPixelFormat);

        public virtual int GetResolution(
            out double pDpiX,
            out double pDpiY
        ){
            var fp = GetFunctionPointer(5);
            var callback = (GetResolutionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetResolutionFunc));
            
            return callback(m_ptr, out pDpiX, out pDpiY);
        }
        delegate int GetResolutionFunc(IntPtr self, out double pDpiX, out double pDpiY);

        public virtual int CopyPalette(
            IWICPalette pIPalette
        ){
            var fp = GetFunctionPointer(6);
            var callback = (CopyPaletteFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopyPaletteFunc));
            
            return callback(m_ptr, pIPalette!=null ? pIPalette.Ptr : IntPtr.Zero);
        }
        delegate int CopyPaletteFunc(IntPtr self, IntPtr pIPalette);

        public virtual int CopyPixels(
            ref WICRect prc,
            uint cbStride,
            uint cbBufferSize,
            out byte pbBuffer
        ){
            var fp = GetFunctionPointer(7);
            var callback = (CopyPixelsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopyPixelsFunc));
            
            return callback(m_ptr, ref prc, cbStride, cbBufferSize, out pbBuffer);
        }
        delegate int CopyPixelsFunc(IntPtr self, ref WICRect prc, uint cbStride, uint cbBufferSize, out byte pbBuffer);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct WICRect // 1
    {
        public int X;
        public int Y;
        public int Width;
        public int Height;
    }
    public class IWICFormatConverter: IWICBitmapSource
    {
        static Guid s_uuid = new Guid("00000301-a8f2-4877-ba0a-fd2b6645fb94");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int Initialize(
            IWICBitmapSource pISource,
            ref Guid dstFormat,
            WICBitmapDitherType dither,
            IWICPalette pIPalette,
            double alphaThresholdPercent,
            WICBitmapPaletteType paletteTranslate
        ){
            var fp = GetFunctionPointer(8);
            var callback = (InitializeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(InitializeFunc));
            
            return callback(m_ptr, pISource!=null ? pISource.Ptr : IntPtr.Zero, ref dstFormat, dither, pIPalette!=null ? pIPalette.Ptr : IntPtr.Zero, alphaThresholdPercent, paletteTranslate);
        }
        delegate int InitializeFunc(IntPtr self, IntPtr pISource, ref Guid dstFormat, WICBitmapDitherType dither, IntPtr pIPalette, double alphaThresholdPercent, WICBitmapPaletteType paletteTranslate);

        public virtual int CanConvert(
            ref Guid srcPixelFormat,
            ref Guid dstPixelFormat,
            out int pfCanConvert
        ){
            var fp = GetFunctionPointer(9);
            var callback = (CanConvertFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CanConvertFunc));
            
            return callback(m_ptr, ref srcPixelFormat, ref dstPixelFormat, out pfCanConvert);
        }
        delegate int CanConvertFunc(IntPtr self, ref Guid srcPixelFormat, ref Guid dstPixelFormat, out int pfCanConvert);

    }
    public enum WICBitmapDitherType // 1
    {
        WICBitmapDitherTypeNone = 0x0,
        WICBitmapDitherTypeSolid = 0x0,
        WICBitmapDitherTypeOrdered4x4 = 0x1,
        WICBitmapDitherTypeOrdered8x8 = 0x2,
        WICBitmapDitherTypeOrdered16x16 = 0x3,
        WICBitmapDitherTypeSpiral4x4 = 0x4,
        WICBitmapDitherTypeSpiral8x8 = 0x5,
        WICBitmapDitherTypeDualSpiral4x4 = 0x6,
        WICBitmapDitherTypeDualSpiral8x8 = 0x7,
        WICBitmapDitherTypeErrorDiffusion = 0x8,
        WICBITMAPDITHERTYPE_FORCE_DWORD = 0x7fffffff,
    }
    public class IWICPlanarFormatConverter: IWICBitmapSource
    {
        static Guid s_uuid = new Guid("bebee9cb-83b0-4dcc-8132-b0aaa55eac96");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int Initialize(
            out IWICBitmapSource ppPlanes,
            uint cPlanes,
            ref Guid dstFormat,
            WICBitmapDitherType dither,
            IWICPalette pIPalette,
            double alphaThresholdPercent,
            WICBitmapPaletteType paletteTranslate
        ){
            var fp = GetFunctionPointer(8);
            var callback = (InitializeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(InitializeFunc));
            ppPlanes = new IWICBitmapSource();
            return callback(m_ptr, out ppPlanes.PtrForNew, cPlanes, ref dstFormat, dither, pIPalette!=null ? pIPalette.Ptr : IntPtr.Zero, alphaThresholdPercent, paletteTranslate);
        }
        delegate int InitializeFunc(IntPtr self, out IntPtr ppPlanes, uint cPlanes, ref Guid dstFormat, WICBitmapDitherType dither, IntPtr pIPalette, double alphaThresholdPercent, WICBitmapPaletteType paletteTranslate);

        public virtual int CanConvert(
            ref Guid pSrcPixelFormats,
            uint cSrcPlanes,
            ref Guid dstPixelFormat,
            out int pfCanConvert
        ){
            var fp = GetFunctionPointer(9);
            var callback = (CanConvertFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CanConvertFunc));
            
            return callback(m_ptr, ref pSrcPixelFormats, cSrcPlanes, ref dstPixelFormat, out pfCanConvert);
        }
        delegate int CanConvertFunc(IntPtr self, ref Guid pSrcPixelFormats, uint cSrcPlanes, ref Guid dstPixelFormat, out int pfCanConvert);

    }
    public class IWICBitmapScaler: IWICBitmapSource
    {
        static Guid s_uuid = new Guid("00000302-a8f2-4877-ba0a-fd2b6645fb94");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int Initialize(
            IWICBitmapSource pISource,
            uint uiWidth,
            uint uiHeight,
            WICBitmapInterpolationMode mode
        ){
            var fp = GetFunctionPointer(8);
            var callback = (InitializeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(InitializeFunc));
            
            return callback(m_ptr, pISource!=null ? pISource.Ptr : IntPtr.Zero, uiWidth, uiHeight, mode);
        }
        delegate int InitializeFunc(IntPtr self, IntPtr pISource, uint uiWidth, uint uiHeight, WICBitmapInterpolationMode mode);

    }
    public enum WICBitmapInterpolationMode // 1
    {
        WICBitmapInterpolationModeNearestNeighbor = 0x0,
        WICBitmapInterpolationModeLinear = 0x1,
        WICBitmapInterpolationModeCubic = 0x2,
        WICBitmapInterpolationModeFant = 0x3,
        WICBitmapInterpolationModeHighQualityCubic = 0x4,
        WICBITMAPINTERPOLATIONMODE_FORCE_DWORD = 0x7fffffff,
    }
    public class IWICBitmapClipper: IWICBitmapSource
    {
        static Guid s_uuid = new Guid("e4fbcf03-223d-4e81-9333-d635556dd1b5");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int Initialize(
            IWICBitmapSource pISource,
            ref WICRect prc
        ){
            var fp = GetFunctionPointer(8);
            var callback = (InitializeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(InitializeFunc));
            
            return callback(m_ptr, pISource!=null ? pISource.Ptr : IntPtr.Zero, ref prc);
        }
        delegate int InitializeFunc(IntPtr self, IntPtr pISource, ref WICRect prc);

    }
    public class IWICBitmapFlipRotator: IWICBitmapSource
    {
        static Guid s_uuid = new Guid("5009834f-2d6a-41ce-9e1b-17c5aff7a782");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int Initialize(
            IWICBitmapSource pISource,
            WICBitmapTransformOptions options
        ){
            var fp = GetFunctionPointer(8);
            var callback = (InitializeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(InitializeFunc));
            
            return callback(m_ptr, pISource!=null ? pISource.Ptr : IntPtr.Zero, options);
        }
        delegate int InitializeFunc(IntPtr self, IntPtr pISource, WICBitmapTransformOptions options);

    }
    public enum WICBitmapTransformOptions // 1
    {
        WICBitmapTransformRotate0 = 0x0,
        WICBitmapTransformRotate90 = 0x1,
        WICBitmapTransformRotate180 = 0x2,
        WICBitmapTransformRotate270 = 0x3,
        WICBitmapTransformFlipHorizontal = 0x8,
        WICBitmapTransformFlipVertical = 0x10,
        WICBITMAPTRANSFORMOPTIONS_FORCE_DWORD = 0x7fffffff,
    }
    public class IWICBitmapLock: IUnknown
    {
        static Guid s_uuid = new Guid("00000123-a8f2-4877-ba0a-fd2b6645fb94");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int GetSize(
            out uint puiWidth,
            out uint puiHeight
        ){
            var fp = GetFunctionPointer(3);
            var callback = (GetSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetSizeFunc));
            
            return callback(m_ptr, out puiWidth, out puiHeight);
        }
        delegate int GetSizeFunc(IntPtr self, out uint puiWidth, out uint puiHeight);

        public virtual int GetStride(
            out uint pcbStride
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetStrideFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetStrideFunc));
            
            return callback(m_ptr, out pcbStride);
        }
        delegate int GetStrideFunc(IntPtr self, out uint pcbStride);

        public virtual int GetDataPointer(
            out uint pcbBufferSize,
            out IntPtr ppbData
        ){
            var fp = GetFunctionPointer(5);
            var callback = (GetDataPointerFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDataPointerFunc));
            
            return callback(m_ptr, out pcbBufferSize, out ppbData);
        }
        delegate int GetDataPointerFunc(IntPtr self, out uint pcbBufferSize, out IntPtr ppbData);

        public virtual int GetPixelFormat(
            out Guid pPixelFormat
        ){
            var fp = GetFunctionPointer(6);
            var callback = (GetPixelFormatFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPixelFormatFunc));
            
            return callback(m_ptr, out pPixelFormat);
        }
        delegate int GetPixelFormatFunc(IntPtr self, out Guid pPixelFormat);

    }
    public class IWICBitmap: IWICBitmapSource
    {
        static Guid s_uuid = new Guid("00000121-a8f2-4877-ba0a-fd2b6645fb94");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int Lock(
            ref WICRect prcLock,
            uint flags,
            out IWICBitmapLock ppILock
        ){
            var fp = GetFunctionPointer(8);
            var callback = (LockFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(LockFunc));
            ppILock = new IWICBitmapLock();
            return callback(m_ptr, ref prcLock, flags, out ppILock.PtrForNew);
        }
        delegate int LockFunc(IntPtr self, ref WICRect prcLock, uint flags, out IntPtr ppILock);

        public virtual int SetPalette(
            IWICPalette pIPalette
        ){
            var fp = GetFunctionPointer(9);
            var callback = (SetPaletteFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetPaletteFunc));
            
            return callback(m_ptr, pIPalette!=null ? pIPalette.Ptr : IntPtr.Zero);
        }
        delegate int SetPaletteFunc(IntPtr self, IntPtr pIPalette);

        public virtual int SetResolution(
            double dpiX,
            double dpiY
        ){
            var fp = GetFunctionPointer(10);
            var callback = (SetResolutionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetResolutionFunc));
            
            return callback(m_ptr, dpiX, dpiY);
        }
        delegate int SetResolutionFunc(IntPtr self, double dpiX, double dpiY);

    }
    public class IWICColorContext: IUnknown
    {
        static Guid s_uuid = new Guid("3c613a02-34b2-44ea-9a7c-45aea9c6fd6d");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int InitializeFromFilename(
            ref ushort wzFilename
        ){
            var fp = GetFunctionPointer(3);
            var callback = (InitializeFromFilenameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(InitializeFromFilenameFunc));
            
            return callback(m_ptr, ref wzFilename);
        }
        delegate int InitializeFromFilenameFunc(IntPtr self, ref ushort wzFilename);

        public virtual int InitializeFromMemory(
            ref byte pbBuffer,
            uint cbBufferSize
        ){
            var fp = GetFunctionPointer(4);
            var callback = (InitializeFromMemoryFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(InitializeFromMemoryFunc));
            
            return callback(m_ptr, ref pbBuffer, cbBufferSize);
        }
        delegate int InitializeFromMemoryFunc(IntPtr self, ref byte pbBuffer, uint cbBufferSize);

        public virtual int InitializeFromExifColorSpace(
            uint value
        ){
            var fp = GetFunctionPointer(5);
            var callback = (InitializeFromExifColorSpaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(InitializeFromExifColorSpaceFunc));
            
            return callback(m_ptr, value);
        }
        delegate int InitializeFromExifColorSpaceFunc(IntPtr self, uint value);

        public virtual int GetComType(
            out WICColorContextType pType
        ){
            var fp = GetFunctionPointer(6);
            var callback = (GetTypeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypeFunc));
            
            return callback(m_ptr, out pType);
        }
        delegate int GetTypeFunc(IntPtr self, out WICColorContextType pType);

        public virtual int GetProfileBytes(
            uint cbBuffer,
            out byte pbBuffer,
            out uint pcbActual
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetProfileBytesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetProfileBytesFunc));
            
            return callback(m_ptr, cbBuffer, out pbBuffer, out pcbActual);
        }
        delegate int GetProfileBytesFunc(IntPtr self, uint cbBuffer, out byte pbBuffer, out uint pcbActual);

        public virtual int GetExifColorSpace(
            out uint pValue
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetExifColorSpaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetExifColorSpaceFunc));
            
            return callback(m_ptr, out pValue);
        }
        delegate int GetExifColorSpaceFunc(IntPtr self, out uint pValue);

    }
    public enum WICColorContextType // 1
    {
        WICColorContextUninitialized = 0x0,
        WICColorContextProfile = 0x1,
        WICColorContextExifColorSpace = 0x2,
    }
    public class IWICColorTransform: IWICBitmapSource
    {
        static Guid s_uuid = new Guid("b66f034f-d0e2-40ab-b436-6de39e321a94");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int Initialize(
            IWICBitmapSource pIBitmapSource,
            IWICColorContext pIContextSource,
            IWICColorContext pIContextDest,
            ref Guid pixelFmtDest
        ){
            var fp = GetFunctionPointer(8);
            var callback = (InitializeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(InitializeFunc));
            
            return callback(m_ptr, pIBitmapSource!=null ? pIBitmapSource.Ptr : IntPtr.Zero, pIContextSource!=null ? pIContextSource.Ptr : IntPtr.Zero, pIContextDest!=null ? pIContextDest.Ptr : IntPtr.Zero, ref pixelFmtDest);
        }
        delegate int InitializeFunc(IntPtr self, IntPtr pIBitmapSource, IntPtr pIContextSource, IntPtr pIContextDest, ref Guid pixelFmtDest);

    }
    public class IWICFastMetadataEncoder: IUnknown
    {
        static Guid s_uuid = new Guid("b84e2c09-78c9-4ac4-8bd3-524ae1663a2f");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int Commit(
        ){
            var fp = GetFunctionPointer(3);
            var callback = (CommitFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CommitFunc));
            
            return callback(m_ptr);
        }
        delegate int CommitFunc(IntPtr self);

        public virtual int GetMetadataQueryWriter(
            out IWICMetadataQueryWriter ppIMetadataQueryWriter
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetMetadataQueryWriterFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMetadataQueryWriterFunc));
            ppIMetadataQueryWriter = new IWICMetadataQueryWriter();
            return callback(m_ptr, out ppIMetadataQueryWriter.PtrForNew);
        }
        delegate int GetMetadataQueryWriterFunc(IntPtr self, out IntPtr ppIMetadataQueryWriter);

    }
    public class IWICMetadataQueryWriter: IWICMetadataQueryReader
    {
        static Guid s_uuid = new Guid("a721791a-0def-4d06-bd91-2118bf1db10b");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int SetMetadataByName(
            ref ushort wzName,
            ref tagPROPVARIANT pvarValue
        ){
            var fp = GetFunctionPointer(7);
            var callback = (SetMetadataByNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetMetadataByNameFunc));
            
            return callback(m_ptr, ref wzName, ref pvarValue);
        }
        delegate int SetMetadataByNameFunc(IntPtr self, ref ushort wzName, ref tagPROPVARIANT pvarValue);

        public virtual int RemoveMetadataByName(
            ref ushort wzName
        ){
            var fp = GetFunctionPointer(8);
            var callback = (RemoveMetadataByNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RemoveMetadataByNameFunc));
            
            return callback(m_ptr, ref wzName);
        }
        delegate int RemoveMetadataByNameFunc(IntPtr self, ref ushort wzName);

    }
    public class IWICMetadataQueryReader: IUnknown
    {
        static Guid s_uuid = new Guid("30989668-e1c9-4597-b395-458eedb808df");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int GetContainerFormat(
            out Guid pguidContainerFormat
        ){
            var fp = GetFunctionPointer(3);
            var callback = (GetContainerFormatFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetContainerFormatFunc));
            
            return callback(m_ptr, out pguidContainerFormat);
        }
        delegate int GetContainerFormatFunc(IntPtr self, out Guid pguidContainerFormat);

        public virtual int GetLocation(
            uint cchMaxLength,
            out ushort wzNamespace,
            out uint pcchActualLength
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetLocationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetLocationFunc));
            
            return callback(m_ptr, cchMaxLength, out wzNamespace, out pcchActualLength);
        }
        delegate int GetLocationFunc(IntPtr self, uint cchMaxLength, out ushort wzNamespace, out uint pcchActualLength);

        public virtual int GetMetadataByName(
            ref ushort wzName,
            out tagPROPVARIANT pvarValue
        ){
            var fp = GetFunctionPointer(5);
            var callback = (GetMetadataByNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMetadataByNameFunc));
            
            return callback(m_ptr, ref wzName, out pvarValue);
        }
        delegate int GetMetadataByNameFunc(IntPtr self, ref ushort wzName, out tagPROPVARIANT pvarValue);

        public virtual int GetEnumerator(
            out IEnumString ppIEnumString
        ){
            var fp = GetFunctionPointer(6);
            var callback = (GetEnumeratorFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetEnumeratorFunc));
            ppIEnumString = new IEnumString();
            return callback(m_ptr, out ppIEnumString.PtrForNew);
        }
        delegate int GetEnumeratorFunc(IntPtr self, out IntPtr ppIEnumString);

    }
    public class IWICStream: IStream
    {
        static Guid s_uuid = new Guid("135ff860-22b7-4ddf-b0f6-218f4f299a43");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int InitializeFromIStream(
            IStream pIStream
        ){
            var fp = GetFunctionPointer(14);
            var callback = (InitializeFromIStreamFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(InitializeFromIStreamFunc));
            
            return callback(m_ptr, pIStream!=null ? pIStream.Ptr : IntPtr.Zero);
        }
        delegate int InitializeFromIStreamFunc(IntPtr self, IntPtr pIStream);

        public virtual int InitializeFromFilename(
            ref ushort wzFileName,
            uint dwDesiredAccess
        ){
            var fp = GetFunctionPointer(15);
            var callback = (InitializeFromFilenameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(InitializeFromFilenameFunc));
            
            return callback(m_ptr, ref wzFileName, dwDesiredAccess);
        }
        delegate int InitializeFromFilenameFunc(IntPtr self, ref ushort wzFileName, uint dwDesiredAccess);

        public virtual int InitializeFromMemory(
            out byte pbBuffer,
            uint cbBufferSize
        ){
            var fp = GetFunctionPointer(16);
            var callback = (InitializeFromMemoryFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(InitializeFromMemoryFunc));
            
            return callback(m_ptr, out pbBuffer, cbBufferSize);
        }
        delegate int InitializeFromMemoryFunc(IntPtr self, out byte pbBuffer, uint cbBufferSize);

        public virtual int InitializeFromIStreamRegion(
            IStream pIStream,
            _ULARGE_INTEGER ulOffset,
            _ULARGE_INTEGER ulMaxSize
        ){
            var fp = GetFunctionPointer(17);
            var callback = (InitializeFromIStreamRegionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(InitializeFromIStreamRegionFunc));
            
            return callback(m_ptr, pIStream!=null ? pIStream.Ptr : IntPtr.Zero, ulOffset, ulMaxSize);
        }
        delegate int InitializeFromIStreamRegionFunc(IntPtr self, IntPtr pIStream, _ULARGE_INTEGER ulOffset, _ULARGE_INTEGER ulMaxSize);

    }
    public class IWICEnumMetadataItem: IUnknown
    {
        static Guid s_uuid = new Guid("dc2bb46d-3f07-481e-8625-220c4aedbb33");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int Next(
            uint celt,
            out tagPROPVARIANT rgeltSchema,
            out tagPROPVARIANT rgeltId,
            out tagPROPVARIANT rgeltValue,
            out uint pceltFetched
        ){
            var fp = GetFunctionPointer(3);
            var callback = (NextFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(NextFunc));
            
            return callback(m_ptr, celt, out rgeltSchema, out rgeltId, out rgeltValue, out pceltFetched);
        }
        delegate int NextFunc(IntPtr self, uint celt, out tagPROPVARIANT rgeltSchema, out tagPROPVARIANT rgeltId, out tagPROPVARIANT rgeltValue, out uint pceltFetched);

        public virtual int Skip(
            uint celt
        ){
            var fp = GetFunctionPointer(4);
            var callback = (SkipFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SkipFunc));
            
            return callback(m_ptr, celt);
        }
        delegate int SkipFunc(IntPtr self, uint celt);

        public virtual int Reset(
        ){
            var fp = GetFunctionPointer(5);
            var callback = (ResetFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ResetFunc));
            
            return callback(m_ptr);
        }
        delegate int ResetFunc(IntPtr self);

        public virtual int Clone(
            out IWICEnumMetadataItem ppIEnumMetadataItem
        ){
            var fp = GetFunctionPointer(6);
            var callback = (CloneFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CloneFunc));
            ppIEnumMetadataItem = new IWICEnumMetadataItem();
            return callback(m_ptr, out ppIEnumMetadataItem.PtrForNew);
        }
        delegate int CloneFunc(IntPtr self, out IntPtr ppIEnumMetadataItem);

    }
    public class IWICBitmapEncoder: IUnknown
    {
        static Guid s_uuid = new Guid("00000103-a8f2-4877-ba0a-fd2b6645fb94");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int Initialize(
            IStream pIStream,
            WICBitmapEncoderCacheOption cacheOption
        ){
            var fp = GetFunctionPointer(3);
            var callback = (InitializeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(InitializeFunc));
            
            return callback(m_ptr, pIStream!=null ? pIStream.Ptr : IntPtr.Zero, cacheOption);
        }
        delegate int InitializeFunc(IntPtr self, IntPtr pIStream, WICBitmapEncoderCacheOption cacheOption);

        public virtual int GetContainerFormat(
            out Guid pguidContainerFormat
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetContainerFormatFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetContainerFormatFunc));
            
            return callback(m_ptr, out pguidContainerFormat);
        }
        delegate int GetContainerFormatFunc(IntPtr self, out Guid pguidContainerFormat);

        public virtual int GetEncoderInfo(
            out IWICBitmapEncoderInfo ppIEncoderInfo
        ){
            var fp = GetFunctionPointer(5);
            var callback = (GetEncoderInfoFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetEncoderInfoFunc));
            ppIEncoderInfo = new IWICBitmapEncoderInfo();
            return callback(m_ptr, out ppIEncoderInfo.PtrForNew);
        }
        delegate int GetEncoderInfoFunc(IntPtr self, out IntPtr ppIEncoderInfo);

        public virtual int SetColorContexts(
            uint cCount,
            out IWICColorContext ppIColorContext
        ){
            var fp = GetFunctionPointer(6);
            var callback = (SetColorContextsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetColorContextsFunc));
            ppIColorContext = new IWICColorContext();
            return callback(m_ptr, cCount, out ppIColorContext.PtrForNew);
        }
        delegate int SetColorContextsFunc(IntPtr self, uint cCount, out IntPtr ppIColorContext);

        public virtual int SetPalette(
            IWICPalette pIPalette
        ){
            var fp = GetFunctionPointer(7);
            var callback = (SetPaletteFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetPaletteFunc));
            
            return callback(m_ptr, pIPalette!=null ? pIPalette.Ptr : IntPtr.Zero);
        }
        delegate int SetPaletteFunc(IntPtr self, IntPtr pIPalette);

        public virtual int SetThumbnail(
            IWICBitmapSource pIThumbnail
        ){
            var fp = GetFunctionPointer(8);
            var callback = (SetThumbnailFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetThumbnailFunc));
            
            return callback(m_ptr, pIThumbnail!=null ? pIThumbnail.Ptr : IntPtr.Zero);
        }
        delegate int SetThumbnailFunc(IntPtr self, IntPtr pIThumbnail);

        public virtual int SetPreview(
            IWICBitmapSource pIPreview
        ){
            var fp = GetFunctionPointer(9);
            var callback = (SetPreviewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetPreviewFunc));
            
            return callback(m_ptr, pIPreview!=null ? pIPreview.Ptr : IntPtr.Zero);
        }
        delegate int SetPreviewFunc(IntPtr self, IntPtr pIPreview);

        public virtual int CreateNewFrame(
            out IWICBitmapFrameEncode ppIFrameEncode,
            out IPropertyBag2 ppIEncoderOptions
        ){
            var fp = GetFunctionPointer(10);
            var callback = (CreateNewFrameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateNewFrameFunc));
            ppIFrameEncode = new IWICBitmapFrameEncode();ppIEncoderOptions = new IPropertyBag2();
            return callback(m_ptr, out ppIFrameEncode.PtrForNew, out ppIEncoderOptions.PtrForNew);
        }
        delegate int CreateNewFrameFunc(IntPtr self, out IntPtr ppIFrameEncode, out IntPtr ppIEncoderOptions);

        public virtual int Commit(
        ){
            var fp = GetFunctionPointer(11);
            var callback = (CommitFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CommitFunc));
            
            return callback(m_ptr);
        }
        delegate int CommitFunc(IntPtr self);

        public virtual int GetMetadataQueryWriter(
            out IWICMetadataQueryWriter ppIMetadataQueryWriter
        ){
            var fp = GetFunctionPointer(12);
            var callback = (GetMetadataQueryWriterFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMetadataQueryWriterFunc));
            ppIMetadataQueryWriter = new IWICMetadataQueryWriter();
            return callback(m_ptr, out ppIMetadataQueryWriter.PtrForNew);
        }
        delegate int GetMetadataQueryWriterFunc(IntPtr self, out IntPtr ppIMetadataQueryWriter);

    }
    public enum WICBitmapEncoderCacheOption // 1
    {
        WICBitmapEncoderCacheInMemory = 0x0,
        WICBitmapEncoderCacheTempFile = 0x1,
        WICBitmapEncoderNoCache = 0x2,
        WICBITMAPENCODERCACHEOPTION_FORCE_DWORD = 0x7fffffff,
    }
    public class IWICBitmapEncoderInfo: IWICBitmapCodecInfo
    {
        static Guid s_uuid = new Guid("94c9b4ee-a09f-4f92-8a1e-4a9bce7e76fb");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int CreateInstance(
            out IWICBitmapEncoder ppIBitmapEncoder
        ){
            var fp = GetFunctionPointer(23);
            var callback = (CreateInstanceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateInstanceFunc));
            ppIBitmapEncoder = new IWICBitmapEncoder();
            return callback(m_ptr, out ppIBitmapEncoder.PtrForNew);
        }
        delegate int CreateInstanceFunc(IntPtr self, out IntPtr ppIBitmapEncoder);

    }
    public class IWICBitmapCodecInfo: IWICComponentInfo
    {
        static Guid s_uuid = new Guid("e87a44c4-b76e-4c47-8b09-298eb12a2714");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int GetContainerFormat(
            out Guid pguidContainerFormat
        ){
            var fp = GetFunctionPointer(11);
            var callback = (GetContainerFormatFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetContainerFormatFunc));
            
            return callback(m_ptr, out pguidContainerFormat);
        }
        delegate int GetContainerFormatFunc(IntPtr self, out Guid pguidContainerFormat);

        public virtual int GetPixelFormats(
            uint cFormats,
            out Guid pguidPixelFormats,
            out uint pcActual
        ){
            var fp = GetFunctionPointer(12);
            var callback = (GetPixelFormatsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPixelFormatsFunc));
            
            return callback(m_ptr, cFormats, out pguidPixelFormats, out pcActual);
        }
        delegate int GetPixelFormatsFunc(IntPtr self, uint cFormats, out Guid pguidPixelFormats, out uint pcActual);

        public virtual int GetColorManagementVersion(
            uint cchColorManagementVersion,
            out ushort wzColorManagementVersion,
            out uint pcchActual
        ){
            var fp = GetFunctionPointer(13);
            var callback = (GetColorManagementVersionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetColorManagementVersionFunc));
            
            return callback(m_ptr, cchColorManagementVersion, out wzColorManagementVersion, out pcchActual);
        }
        delegate int GetColorManagementVersionFunc(IntPtr self, uint cchColorManagementVersion, out ushort wzColorManagementVersion, out uint pcchActual);

        public virtual int GetDeviceManufacturer(
            uint cchDeviceManufacturer,
            out ushort wzDeviceManufacturer,
            out uint pcchActual
        ){
            var fp = GetFunctionPointer(14);
            var callback = (GetDeviceManufacturerFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDeviceManufacturerFunc));
            
            return callback(m_ptr, cchDeviceManufacturer, out wzDeviceManufacturer, out pcchActual);
        }
        delegate int GetDeviceManufacturerFunc(IntPtr self, uint cchDeviceManufacturer, out ushort wzDeviceManufacturer, out uint pcchActual);

        public virtual int GetDeviceModels(
            uint cchDeviceModels,
            out ushort wzDeviceModels,
            out uint pcchActual
        ){
            var fp = GetFunctionPointer(15);
            var callback = (GetDeviceModelsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDeviceModelsFunc));
            
            return callback(m_ptr, cchDeviceModels, out wzDeviceModels, out pcchActual);
        }
        delegate int GetDeviceModelsFunc(IntPtr self, uint cchDeviceModels, out ushort wzDeviceModels, out uint pcchActual);

        public virtual int GetMimeTypes(
            uint cchMimeTypes,
            out ushort wzMimeTypes,
            out uint pcchActual
        ){
            var fp = GetFunctionPointer(16);
            var callback = (GetMimeTypesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMimeTypesFunc));
            
            return callback(m_ptr, cchMimeTypes, out wzMimeTypes, out pcchActual);
        }
        delegate int GetMimeTypesFunc(IntPtr self, uint cchMimeTypes, out ushort wzMimeTypes, out uint pcchActual);

        public virtual int GetFileExtensions(
            uint cchFileExtensions,
            out ushort wzFileExtensions,
            out uint pcchActual
        ){
            var fp = GetFunctionPointer(17);
            var callback = (GetFileExtensionsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFileExtensionsFunc));
            
            return callback(m_ptr, cchFileExtensions, out wzFileExtensions, out pcchActual);
        }
        delegate int GetFileExtensionsFunc(IntPtr self, uint cchFileExtensions, out ushort wzFileExtensions, out uint pcchActual);

        public virtual int DoesSupportAnimation(
            out int pfSupportAnimation
        ){
            var fp = GetFunctionPointer(18);
            var callback = (DoesSupportAnimationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DoesSupportAnimationFunc));
            
            return callback(m_ptr, out pfSupportAnimation);
        }
        delegate int DoesSupportAnimationFunc(IntPtr self, out int pfSupportAnimation);

        public virtual int DoesSupportChromakey(
            out int pfSupportChromakey
        ){
            var fp = GetFunctionPointer(19);
            var callback = (DoesSupportChromakeyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DoesSupportChromakeyFunc));
            
            return callback(m_ptr, out pfSupportChromakey);
        }
        delegate int DoesSupportChromakeyFunc(IntPtr self, out int pfSupportChromakey);

        public virtual int DoesSupportLossless(
            out int pfSupportLossless
        ){
            var fp = GetFunctionPointer(20);
            var callback = (DoesSupportLosslessFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DoesSupportLosslessFunc));
            
            return callback(m_ptr, out pfSupportLossless);
        }
        delegate int DoesSupportLosslessFunc(IntPtr self, out int pfSupportLossless);

        public virtual int DoesSupportMultiframe(
            out int pfSupportMultiframe
        ){
            var fp = GetFunctionPointer(21);
            var callback = (DoesSupportMultiframeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DoesSupportMultiframeFunc));
            
            return callback(m_ptr, out pfSupportMultiframe);
        }
        delegate int DoesSupportMultiframeFunc(IntPtr self, out int pfSupportMultiframe);

        public virtual int MatchesMimeType(
            ref ushort wzMimeType,
            out int pfMatches
        ){
            var fp = GetFunctionPointer(22);
            var callback = (MatchesMimeTypeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(MatchesMimeTypeFunc));
            
            return callback(m_ptr, ref wzMimeType, out pfMatches);
        }
        delegate int MatchesMimeTypeFunc(IntPtr self, ref ushort wzMimeType, out int pfMatches);

    }
    public class IWICComponentInfo: IUnknown
    {
        static Guid s_uuid = new Guid("23bc3f0a-698b-4357-886b-f24d50671334");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int GetComponentType(
            out WICComponentType pType
        ){
            var fp = GetFunctionPointer(3);
            var callback = (GetComponentTypeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetComponentTypeFunc));
            
            return callback(m_ptr, out pType);
        }
        delegate int GetComponentTypeFunc(IntPtr self, out WICComponentType pType);

        public virtual int GetCLSID(
            out Guid pclsid
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetCLSIDFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetCLSIDFunc));
            
            return callback(m_ptr, out pclsid);
        }
        delegate int GetCLSIDFunc(IntPtr self, out Guid pclsid);

        public virtual int GetSigningStatus(
            out uint pStatus
        ){
            var fp = GetFunctionPointer(5);
            var callback = (GetSigningStatusFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetSigningStatusFunc));
            
            return callback(m_ptr, out pStatus);
        }
        delegate int GetSigningStatusFunc(IntPtr self, out uint pStatus);

        public virtual int GetAuthor(
            uint cchAuthor,
            out ushort wzAuthor,
            out uint pcchActual
        ){
            var fp = GetFunctionPointer(6);
            var callback = (GetAuthorFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetAuthorFunc));
            
            return callback(m_ptr, cchAuthor, out wzAuthor, out pcchActual);
        }
        delegate int GetAuthorFunc(IntPtr self, uint cchAuthor, out ushort wzAuthor, out uint pcchActual);

        public virtual int GetVendorGUID(
            out Guid pguidVendor
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetVendorGUIDFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetVendorGUIDFunc));
            
            return callback(m_ptr, out pguidVendor);
        }
        delegate int GetVendorGUIDFunc(IntPtr self, out Guid pguidVendor);

        public virtual int GetVersion(
            uint cchVersion,
            out ushort wzVersion,
            out uint pcchActual
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetVersionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetVersionFunc));
            
            return callback(m_ptr, cchVersion, out wzVersion, out pcchActual);
        }
        delegate int GetVersionFunc(IntPtr self, uint cchVersion, out ushort wzVersion, out uint pcchActual);

        public virtual int GetSpecVersion(
            uint cchSpecVersion,
            out ushort wzSpecVersion,
            out uint pcchActual
        ){
            var fp = GetFunctionPointer(9);
            var callback = (GetSpecVersionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetSpecVersionFunc));
            
            return callback(m_ptr, cchSpecVersion, out wzSpecVersion, out pcchActual);
        }
        delegate int GetSpecVersionFunc(IntPtr self, uint cchSpecVersion, out ushort wzSpecVersion, out uint pcchActual);

        public virtual int GetFriendlyName(
            uint cchFriendlyName,
            out ushort wzFriendlyName,
            out uint pcchActual
        ){
            var fp = GetFunctionPointer(10);
            var callback = (GetFriendlyNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFriendlyNameFunc));
            
            return callback(m_ptr, cchFriendlyName, out wzFriendlyName, out pcchActual);
        }
        delegate int GetFriendlyNameFunc(IntPtr self, uint cchFriendlyName, out ushort wzFriendlyName, out uint pcchActual);

    }
    public enum WICComponentType // 1
    {
        WICDecoder = 0x1,
        WICEncoder = 0x2,
        WICPixelFormatConverter = 0x4,
        WICMetadataReader = 0x8,
        WICMetadataWriter = 0x10,
        WICPixelFormat = 0x20,
        WICAllComponents = 0x3f,
        WICCOMPONENTTYPE_FORCE_DWORD = 0x7fffffff,
    }
    public class IWICBitmapFrameEncode: IUnknown
    {
        static Guid s_uuid = new Guid("00000105-a8f2-4877-ba0a-fd2b6645fb94");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int Initialize(
            IPropertyBag2 pIEncoderOptions
        ){
            var fp = GetFunctionPointer(3);
            var callback = (InitializeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(InitializeFunc));
            
            return callback(m_ptr, pIEncoderOptions!=null ? pIEncoderOptions.Ptr : IntPtr.Zero);
        }
        delegate int InitializeFunc(IntPtr self, IntPtr pIEncoderOptions);

        public virtual int SetSize(
            uint uiWidth,
            uint uiHeight
        ){
            var fp = GetFunctionPointer(4);
            var callback = (SetSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetSizeFunc));
            
            return callback(m_ptr, uiWidth, uiHeight);
        }
        delegate int SetSizeFunc(IntPtr self, uint uiWidth, uint uiHeight);

        public virtual int SetResolution(
            double dpiX,
            double dpiY
        ){
            var fp = GetFunctionPointer(5);
            var callback = (SetResolutionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetResolutionFunc));
            
            return callback(m_ptr, dpiX, dpiY);
        }
        delegate int SetResolutionFunc(IntPtr self, double dpiX, double dpiY);

        public virtual int SetPixelFormat(
            out Guid pPixelFormat
        ){
            var fp = GetFunctionPointer(6);
            var callback = (SetPixelFormatFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetPixelFormatFunc));
            
            return callback(m_ptr, out pPixelFormat);
        }
        delegate int SetPixelFormatFunc(IntPtr self, out Guid pPixelFormat);

        public virtual int SetColorContexts(
            uint cCount,
            out IWICColorContext ppIColorContext
        ){
            var fp = GetFunctionPointer(7);
            var callback = (SetColorContextsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetColorContextsFunc));
            ppIColorContext = new IWICColorContext();
            return callback(m_ptr, cCount, out ppIColorContext.PtrForNew);
        }
        delegate int SetColorContextsFunc(IntPtr self, uint cCount, out IntPtr ppIColorContext);

        public virtual int SetPalette(
            IWICPalette pIPalette
        ){
            var fp = GetFunctionPointer(8);
            var callback = (SetPaletteFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetPaletteFunc));
            
            return callback(m_ptr, pIPalette!=null ? pIPalette.Ptr : IntPtr.Zero);
        }
        delegate int SetPaletteFunc(IntPtr self, IntPtr pIPalette);

        public virtual int SetThumbnail(
            IWICBitmapSource pIThumbnail
        ){
            var fp = GetFunctionPointer(9);
            var callback = (SetThumbnailFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetThumbnailFunc));
            
            return callback(m_ptr, pIThumbnail!=null ? pIThumbnail.Ptr : IntPtr.Zero);
        }
        delegate int SetThumbnailFunc(IntPtr self, IntPtr pIThumbnail);

        public virtual int WritePixels(
            uint lineCount,
            uint cbStride,
            uint cbBufferSize,
            out byte pbPixels
        ){
            var fp = GetFunctionPointer(10);
            var callback = (WritePixelsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(WritePixelsFunc));
            
            return callback(m_ptr, lineCount, cbStride, cbBufferSize, out pbPixels);
        }
        delegate int WritePixelsFunc(IntPtr self, uint lineCount, uint cbStride, uint cbBufferSize, out byte pbPixels);

        public virtual int WriteSource(
            IWICBitmapSource pIBitmapSource,
            out WICRect prc
        ){
            var fp = GetFunctionPointer(11);
            var callback = (WriteSourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(WriteSourceFunc));
            
            return callback(m_ptr, pIBitmapSource!=null ? pIBitmapSource.Ptr : IntPtr.Zero, out prc);
        }
        delegate int WriteSourceFunc(IntPtr self, IntPtr pIBitmapSource, out WICRect prc);

        public virtual int Commit(
        ){
            var fp = GetFunctionPointer(12);
            var callback = (CommitFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CommitFunc));
            
            return callback(m_ptr);
        }
        delegate int CommitFunc(IntPtr self);

        public virtual int GetMetadataQueryWriter(
            out IWICMetadataQueryWriter ppIMetadataQueryWriter
        ){
            var fp = GetFunctionPointer(13);
            var callback = (GetMetadataQueryWriterFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMetadataQueryWriterFunc));
            ppIMetadataQueryWriter = new IWICMetadataQueryWriter();
            return callback(m_ptr, out ppIMetadataQueryWriter.PtrForNew);
        }
        delegate int GetMetadataQueryWriterFunc(IntPtr self, out IntPtr ppIMetadataQueryWriter);

    }
    public class IWICPlanarBitmapFrameEncode: IUnknown
    {
        static Guid s_uuid = new Guid("f928b7b8-2221-40c1-b72e-7e82f1974d1a");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int WritePixels(
            uint lineCount,
            out WICBitmapPlane pPlanes,
            uint cPlanes
        ){
            var fp = GetFunctionPointer(3);
            var callback = (WritePixelsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(WritePixelsFunc));
            
            return callback(m_ptr, lineCount, out pPlanes, cPlanes);
        }
        delegate int WritePixelsFunc(IntPtr self, uint lineCount, out WICBitmapPlane pPlanes, uint cPlanes);

        public virtual int WriteSource(
            out IWICBitmapSource ppPlanes,
            uint cPlanes,
            out WICRect prcSource
        ){
            var fp = GetFunctionPointer(4);
            var callback = (WriteSourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(WriteSourceFunc));
            ppPlanes = new IWICBitmapSource();
            return callback(m_ptr, out ppPlanes.PtrForNew, cPlanes, out prcSource);
        }
        delegate int WriteSourceFunc(IntPtr self, out IntPtr ppPlanes, uint cPlanes, out WICRect prcSource);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct WICBitmapPlane // 1
    {
        public Guid Format;
        public IntPtr pbBuffer;
        public uint cbStride;
        public uint cbBufferSize;
    }
    public class IWICImageEncoder: IUnknown
    {
        static Guid s_uuid = new Guid("04c75bf8-3ce1-473b-acc5-3cc4f5e94999");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int WriteFrame(
            ID2D1Image pImage,
            IWICBitmapFrameEncode pFrameEncode,
            ref WICImageParameters pImageParameters
        ){
            var fp = GetFunctionPointer(3);
            var callback = (WriteFrameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(WriteFrameFunc));
            
            return callback(m_ptr, pImage!=null ? pImage.Ptr : IntPtr.Zero, pFrameEncode!=null ? pFrameEncode.Ptr : IntPtr.Zero, ref pImageParameters);
        }
        delegate int WriteFrameFunc(IntPtr self, IntPtr pImage, IntPtr pFrameEncode, ref WICImageParameters pImageParameters);

        public virtual int WriteFrameThumbnail(
            ID2D1Image pImage,
            IWICBitmapFrameEncode pFrameEncode,
            ref WICImageParameters pImageParameters
        ){
            var fp = GetFunctionPointer(4);
            var callback = (WriteFrameThumbnailFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(WriteFrameThumbnailFunc));
            
            return callback(m_ptr, pImage!=null ? pImage.Ptr : IntPtr.Zero, pFrameEncode!=null ? pFrameEncode.Ptr : IntPtr.Zero, ref pImageParameters);
        }
        delegate int WriteFrameThumbnailFunc(IntPtr self, IntPtr pImage, IntPtr pFrameEncode, ref WICImageParameters pImageParameters);

        public virtual int WriteThumbnail(
            ID2D1Image pImage,
            IWICBitmapEncoder pEncoder,
            ref WICImageParameters pImageParameters
        ){
            var fp = GetFunctionPointer(5);
            var callback = (WriteThumbnailFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(WriteThumbnailFunc));
            
            return callback(m_ptr, pImage!=null ? pImage.Ptr : IntPtr.Zero, pEncoder!=null ? pEncoder.Ptr : IntPtr.Zero, ref pImageParameters);
        }
        delegate int WriteThumbnailFunc(IntPtr self, IntPtr pImage, IntPtr pEncoder, ref WICImageParameters pImageParameters);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct WICImageParameters // 1
    {
        public D2D1_PIXEL_FORMAT PixelFormat;
        public float DpiX;
        public float DpiY;
        public float Top;
        public float Left;
        public uint PixelWidth;
        public uint PixelHeight;
    }
    public class IWICBitmapDecoder: IUnknown
    {
        static Guid s_uuid = new Guid("9edde9e7-8dee-47ea-99df-e6faf2ed44bf");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int QueryCapability(
            IStream pIStream,
            out uint pdwCapability
        ){
            var fp = GetFunctionPointer(3);
            var callback = (QueryCapabilityFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(QueryCapabilityFunc));
            
            return callback(m_ptr, pIStream!=null ? pIStream.Ptr : IntPtr.Zero, out pdwCapability);
        }
        delegate int QueryCapabilityFunc(IntPtr self, IntPtr pIStream, out uint pdwCapability);

        public virtual int Initialize(
            IStream pIStream,
            WICDecodeOptions cacheOptions
        ){
            var fp = GetFunctionPointer(4);
            var callback = (InitializeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(InitializeFunc));
            
            return callback(m_ptr, pIStream!=null ? pIStream.Ptr : IntPtr.Zero, cacheOptions);
        }
        delegate int InitializeFunc(IntPtr self, IntPtr pIStream, WICDecodeOptions cacheOptions);

        public virtual int GetContainerFormat(
            out Guid pguidContainerFormat
        ){
            var fp = GetFunctionPointer(5);
            var callback = (GetContainerFormatFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetContainerFormatFunc));
            
            return callback(m_ptr, out pguidContainerFormat);
        }
        delegate int GetContainerFormatFunc(IntPtr self, out Guid pguidContainerFormat);

        public virtual int GetDecoderInfo(
            out IWICBitmapDecoderInfo ppIDecoderInfo
        ){
            var fp = GetFunctionPointer(6);
            var callback = (GetDecoderInfoFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDecoderInfoFunc));
            ppIDecoderInfo = new IWICBitmapDecoderInfo();
            return callback(m_ptr, out ppIDecoderInfo.PtrForNew);
        }
        delegate int GetDecoderInfoFunc(IntPtr self, out IntPtr ppIDecoderInfo);

        public virtual int CopyPalette(
            IWICPalette pIPalette
        ){
            var fp = GetFunctionPointer(7);
            var callback = (CopyPaletteFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopyPaletteFunc));
            
            return callback(m_ptr, pIPalette!=null ? pIPalette.Ptr : IntPtr.Zero);
        }
        delegate int CopyPaletteFunc(IntPtr self, IntPtr pIPalette);

        public virtual int GetMetadataQueryReader(
            out IWICMetadataQueryReader ppIMetadataQueryReader
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetMetadataQueryReaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMetadataQueryReaderFunc));
            ppIMetadataQueryReader = new IWICMetadataQueryReader();
            return callback(m_ptr, out ppIMetadataQueryReader.PtrForNew);
        }
        delegate int GetMetadataQueryReaderFunc(IntPtr self, out IntPtr ppIMetadataQueryReader);

        public virtual int GetPreview(
            out IWICBitmapSource ppIBitmapSource
        ){
            var fp = GetFunctionPointer(9);
            var callback = (GetPreviewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPreviewFunc));
            ppIBitmapSource = new IWICBitmapSource();
            return callback(m_ptr, out ppIBitmapSource.PtrForNew);
        }
        delegate int GetPreviewFunc(IntPtr self, out IntPtr ppIBitmapSource);

        public virtual int GetColorContexts(
            uint cCount,
            out IWICColorContext ppIColorContexts,
            out uint pcActualCount
        ){
            var fp = GetFunctionPointer(10);
            var callback = (GetColorContextsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetColorContextsFunc));
            ppIColorContexts = new IWICColorContext();
            return callback(m_ptr, cCount, out ppIColorContexts.PtrForNew, out pcActualCount);
        }
        delegate int GetColorContextsFunc(IntPtr self, uint cCount, out IntPtr ppIColorContexts, out uint pcActualCount);

        public virtual int GetThumbnail(
            out IWICBitmapSource ppIThumbnail
        ){
            var fp = GetFunctionPointer(11);
            var callback = (GetThumbnailFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetThumbnailFunc));
            ppIThumbnail = new IWICBitmapSource();
            return callback(m_ptr, out ppIThumbnail.PtrForNew);
        }
        delegate int GetThumbnailFunc(IntPtr self, out IntPtr ppIThumbnail);

        public virtual int GetFrameCount(
            out uint pCount
        ){
            var fp = GetFunctionPointer(12);
            var callback = (GetFrameCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFrameCountFunc));
            
            return callback(m_ptr, out pCount);
        }
        delegate int GetFrameCountFunc(IntPtr self, out uint pCount);

        public virtual int GetFrame(
            uint index,
            out IWICBitmapFrameDecode ppIBitmapFrame
        ){
            var fp = GetFunctionPointer(13);
            var callback = (GetFrameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFrameFunc));
            ppIBitmapFrame = new IWICBitmapFrameDecode();
            return callback(m_ptr, index, out ppIBitmapFrame.PtrForNew);
        }
        delegate int GetFrameFunc(IntPtr self, uint index, out IntPtr ppIBitmapFrame);

    }
    public enum WICDecodeOptions // 1
    {
        WICDecodeMetadataCacheOnDemand = 0x0,
        WICDecodeMetadataCacheOnLoad = 0x1,
        WICMETADATACACHEOPTION_FORCE_DWORD = 0x7fffffff,
    }
    public class IWICBitmapDecoderInfo: IWICBitmapCodecInfo
    {
        static Guid s_uuid = new Guid("d8cd007f-d08f-4191-9bfc-236ea7f0e4b5");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int GetPatterns(
            uint cbSizePatterns,
            out WICBitmapPattern pPatterns,
            out uint pcPatterns,
            out uint pcbPatternsActual
        ){
            var fp = GetFunctionPointer(23);
            var callback = (GetPatternsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPatternsFunc));
            
            return callback(m_ptr, cbSizePatterns, out pPatterns, out pcPatterns, out pcbPatternsActual);
        }
        delegate int GetPatternsFunc(IntPtr self, uint cbSizePatterns, out WICBitmapPattern pPatterns, out uint pcPatterns, out uint pcbPatternsActual);

        public virtual int MatchesPattern(
            IStream pIStream,
            out int pfMatches
        ){
            var fp = GetFunctionPointer(24);
            var callback = (MatchesPatternFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(MatchesPatternFunc));
            
            return callback(m_ptr, pIStream!=null ? pIStream.Ptr : IntPtr.Zero, out pfMatches);
        }
        delegate int MatchesPatternFunc(IntPtr self, IntPtr pIStream, out int pfMatches);

        public virtual int CreateInstance(
            out IWICBitmapDecoder ppIBitmapDecoder
        ){
            var fp = GetFunctionPointer(25);
            var callback = (CreateInstanceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateInstanceFunc));
            ppIBitmapDecoder = new IWICBitmapDecoder();
            return callback(m_ptr, out ppIBitmapDecoder.PtrForNew);
        }
        delegate int CreateInstanceFunc(IntPtr self, out IntPtr ppIBitmapDecoder);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct WICBitmapPattern // 1
    {
        public _ULARGE_INTEGER Position;
        public uint Length;
        public IntPtr Pattern;
        public IntPtr Mask;
        public int EndOfStream;
    }
    public class IWICBitmapFrameDecode: IWICBitmapSource
    {
        static Guid s_uuid = new Guid("3b16811b-6a43-4ec9-a813-3d930c13b940");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int GetMetadataQueryReader(
            out IWICMetadataQueryReader ppIMetadataQueryReader
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetMetadataQueryReaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMetadataQueryReaderFunc));
            ppIMetadataQueryReader = new IWICMetadataQueryReader();
            return callback(m_ptr, out ppIMetadataQueryReader.PtrForNew);
        }
        delegate int GetMetadataQueryReaderFunc(IntPtr self, out IntPtr ppIMetadataQueryReader);

        public virtual int GetColorContexts(
            uint cCount,
            out IWICColorContext ppIColorContexts,
            out uint pcActualCount
        ){
            var fp = GetFunctionPointer(9);
            var callback = (GetColorContextsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetColorContextsFunc));
            ppIColorContexts = new IWICColorContext();
            return callback(m_ptr, cCount, out ppIColorContexts.PtrForNew, out pcActualCount);
        }
        delegate int GetColorContextsFunc(IntPtr self, uint cCount, out IntPtr ppIColorContexts, out uint pcActualCount);

        public virtual int GetThumbnail(
            out IWICBitmapSource ppIThumbnail
        ){
            var fp = GetFunctionPointer(10);
            var callback = (GetThumbnailFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetThumbnailFunc));
            ppIThumbnail = new IWICBitmapSource();
            return callback(m_ptr, out ppIThumbnail.PtrForNew);
        }
        delegate int GetThumbnailFunc(IntPtr self, out IntPtr ppIThumbnail);

    }
    public class IWICBitmapSourceTransform: IUnknown
    {
        static Guid s_uuid = new Guid("3b16811b-6a43-4ec9-b713-3d5a0c13b940");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int CopyPixels(
            ref WICRect prc,
            uint uiWidth,
            uint uiHeight,
            out Guid pguidDstFormat,
            WICBitmapTransformOptions dstTransform,
            uint nStride,
            uint cbBufferSize,
            out byte pbBuffer
        ){
            var fp = GetFunctionPointer(3);
            var callback = (CopyPixelsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopyPixelsFunc));
            
            return callback(m_ptr, ref prc, uiWidth, uiHeight, out pguidDstFormat, dstTransform, nStride, cbBufferSize, out pbBuffer);
        }
        delegate int CopyPixelsFunc(IntPtr self, ref WICRect prc, uint uiWidth, uint uiHeight, out Guid pguidDstFormat, WICBitmapTransformOptions dstTransform, uint nStride, uint cbBufferSize, out byte pbBuffer);

        public virtual int GetClosestSize(
            out uint puiWidth,
            out uint puiHeight
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetClosestSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetClosestSizeFunc));
            
            return callback(m_ptr, out puiWidth, out puiHeight);
        }
        delegate int GetClosestSizeFunc(IntPtr self, out uint puiWidth, out uint puiHeight);

        public virtual int GetClosestPixelFormat(
            out Guid pguidDstFormat
        ){
            var fp = GetFunctionPointer(5);
            var callback = (GetClosestPixelFormatFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetClosestPixelFormatFunc));
            
            return callback(m_ptr, out pguidDstFormat);
        }
        delegate int GetClosestPixelFormatFunc(IntPtr self, out Guid pguidDstFormat);

        public virtual int DoesSupportTransform(
            WICBitmapTransformOptions dstTransform,
            out int pfIsSupported
        ){
            var fp = GetFunctionPointer(6);
            var callback = (DoesSupportTransformFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DoesSupportTransformFunc));
            
            return callback(m_ptr, dstTransform, out pfIsSupported);
        }
        delegate int DoesSupportTransformFunc(IntPtr self, WICBitmapTransformOptions dstTransform, out int pfIsSupported);

    }
    public class IWICPlanarBitmapSourceTransform: IUnknown
    {
        static Guid s_uuid = new Guid("3aff9cce-be95-4303-b927-e7d16ff4a613");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int DoesSupportTransform(
            out uint puiWidth,
            out uint puiHeight,
            WICBitmapTransformOptions dstTransform,
            WICPlanarOptions dstPlanarOptions,
            ref Guid pguidDstFormats,
            out WICBitmapPlaneDescription pPlaneDescriptions,
            uint cPlanes,
            out int pfIsSupported
        ){
            var fp = GetFunctionPointer(3);
            var callback = (DoesSupportTransformFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DoesSupportTransformFunc));
            
            return callback(m_ptr, out puiWidth, out puiHeight, dstTransform, dstPlanarOptions, ref pguidDstFormats, out pPlaneDescriptions, cPlanes, out pfIsSupported);
        }
        delegate int DoesSupportTransformFunc(IntPtr self, out uint puiWidth, out uint puiHeight, WICBitmapTransformOptions dstTransform, WICPlanarOptions dstPlanarOptions, ref Guid pguidDstFormats, out WICBitmapPlaneDescription pPlaneDescriptions, uint cPlanes, out int pfIsSupported);

        public virtual int CopyPixels(
            ref WICRect prcSource,
            uint uiWidth,
            uint uiHeight,
            WICBitmapTransformOptions dstTransform,
            WICPlanarOptions dstPlanarOptions,
            ref WICBitmapPlane pDstPlanes,
            uint cPlanes
        ){
            var fp = GetFunctionPointer(4);
            var callback = (CopyPixelsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopyPixelsFunc));
            
            return callback(m_ptr, ref prcSource, uiWidth, uiHeight, dstTransform, dstPlanarOptions, ref pDstPlanes, cPlanes);
        }
        delegate int CopyPixelsFunc(IntPtr self, ref WICRect prcSource, uint uiWidth, uint uiHeight, WICBitmapTransformOptions dstTransform, WICPlanarOptions dstPlanarOptions, ref WICBitmapPlane pDstPlanes, uint cPlanes);

    }
    public enum WICPlanarOptions // 1
    {
        WICPlanarOptionsDefault = 0x0,
        WICPlanarOptionsPreserveSubsampling = 0x1,
        WICPLANAROPTIONS_FORCE_DWORD = 0x7fffffff,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct WICBitmapPlaneDescription // 1
    {
        public Guid Format;
        public uint Width;
        public uint Height;
    }
    public class IWICProgressiveLevelControl: IUnknown
    {
        static Guid s_uuid = new Guid("daac296f-7aa5-4dbf-8d15-225c5976f891");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int GetLevelCount(
            out uint pcLevels
        ){
            var fp = GetFunctionPointer(3);
            var callback = (GetLevelCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetLevelCountFunc));
            
            return callback(m_ptr, out pcLevels);
        }
        delegate int GetLevelCountFunc(IntPtr self, out uint pcLevels);

        public virtual int GetCurrentLevel(
            out uint pnLevel
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetCurrentLevelFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetCurrentLevelFunc));
            
            return callback(m_ptr, out pnLevel);
        }
        delegate int GetCurrentLevelFunc(IntPtr self, out uint pnLevel);

        public virtual int SetCurrentLevel(
            uint nLevel
        ){
            var fp = GetFunctionPointer(5);
            var callback = (SetCurrentLevelFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetCurrentLevelFunc));
            
            return callback(m_ptr, nLevel);
        }
        delegate int SetCurrentLevelFunc(IntPtr self, uint nLevel);

    }
    public class IWICProgressCallback: IUnknown
    {
        static Guid s_uuid = new Guid("4776f9cd-9517-45fa-bf24-e89c5ec5c60c");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int Notify(
            uint uFrameNum,
            WICProgressOperation operation,
            double dblProgress
        ){
            var fp = GetFunctionPointer(3);
            var callback = (NotifyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(NotifyFunc));
            
            return callback(m_ptr, uFrameNum, operation, dblProgress);
        }
        delegate int NotifyFunc(IntPtr self, uint uFrameNum, WICProgressOperation operation, double dblProgress);

    }
    public enum WICProgressOperation // 1
    {
        WICProgressOperationCopyPixels = 0x1,
        WICProgressOperationWritePixels = 0x2,
        WICProgressOperationAll = 0xffff,
        WICPROGRESSOPERATION_FORCE_DWORD = 0x7fffffff,
    }
    public class IWICBitmapCodecProgressNotification: IUnknown
    {
        static Guid s_uuid = new Guid("64c1024e-c3cf-4462-8078-88c2b11c46d9");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int RegisterProgressNotification(
            PFNProgressNotification pfnProgressNotification,
            IntPtr pvData,
            uint dwProgressFlags
        ){
            var fp = GetFunctionPointer(3);
            var callback = (RegisterProgressNotificationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RegisterProgressNotificationFunc));
            
            return callback(m_ptr, pfnProgressNotification, pvData, dwProgressFlags);
        }
        delegate int RegisterProgressNotificationFunc(IntPtr self, PFNProgressNotification pfnProgressNotification, IntPtr pvData, uint dwProgressFlags);

    }
    public delegate int PFNProgressNotification(IntPtr pvData, uint uFrameNum, WICProgressOperation operation, double dblProgress);
    public class IWICFormatConverterInfo: IWICComponentInfo
    {
        static Guid s_uuid = new Guid("9f34fb65-13f4-4f15-bc57-3726b5e53d9f");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int GetPixelFormats(
            uint cFormats,
            out Guid pPixelFormatGUIDs,
            out uint pcActual
        ){
            var fp = GetFunctionPointer(11);
            var callback = (GetPixelFormatsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPixelFormatsFunc));
            
            return callback(m_ptr, cFormats, out pPixelFormatGUIDs, out pcActual);
        }
        delegate int GetPixelFormatsFunc(IntPtr self, uint cFormats, out Guid pPixelFormatGUIDs, out uint pcActual);

        public virtual int CreateInstance(
            out IWICFormatConverter ppIConverter
        ){
            var fp = GetFunctionPointer(12);
            var callback = (CreateInstanceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateInstanceFunc));
            ppIConverter = new IWICFormatConverter();
            return callback(m_ptr, out ppIConverter.PtrForNew);
        }
        delegate int CreateInstanceFunc(IntPtr self, out IntPtr ppIConverter);

    }
    public class IWICPixelFormatInfo: IWICComponentInfo
    {
        static Guid s_uuid = new Guid("e8eda601-3d48-431a-ab44-69059be88bbe");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int GetFormatGUID(
            out Guid pFormat
        ){
            var fp = GetFunctionPointer(11);
            var callback = (GetFormatGUIDFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFormatGUIDFunc));
            
            return callback(m_ptr, out pFormat);
        }
        delegate int GetFormatGUIDFunc(IntPtr self, out Guid pFormat);

        public virtual int GetColorContext(
            out IWICColorContext ppIColorContext
        ){
            var fp = GetFunctionPointer(12);
            var callback = (GetColorContextFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetColorContextFunc));
            ppIColorContext = new IWICColorContext();
            return callback(m_ptr, out ppIColorContext.PtrForNew);
        }
        delegate int GetColorContextFunc(IntPtr self, out IntPtr ppIColorContext);

        public virtual int GetBitsPerPixel(
            out uint puiBitsPerPixel
        ){
            var fp = GetFunctionPointer(13);
            var callback = (GetBitsPerPixelFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetBitsPerPixelFunc));
            
            return callback(m_ptr, out puiBitsPerPixel);
        }
        delegate int GetBitsPerPixelFunc(IntPtr self, out uint puiBitsPerPixel);

        public virtual int GetChannelCount(
            out uint puiChannelCount
        ){
            var fp = GetFunctionPointer(14);
            var callback = (GetChannelCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetChannelCountFunc));
            
            return callback(m_ptr, out puiChannelCount);
        }
        delegate int GetChannelCountFunc(IntPtr self, out uint puiChannelCount);

        public virtual int GetChannelMask(
            uint uiChannelIndex,
            uint cbMaskBuffer,
            out byte pbMaskBuffer,
            out uint pcbActual
        ){
            var fp = GetFunctionPointer(15);
            var callback = (GetChannelMaskFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetChannelMaskFunc));
            
            return callback(m_ptr, uiChannelIndex, cbMaskBuffer, out pbMaskBuffer, out pcbActual);
        }
        delegate int GetChannelMaskFunc(IntPtr self, uint uiChannelIndex, uint cbMaskBuffer, out byte pbMaskBuffer, out uint pcbActual);

    }
    public class IWICPixelFormatInfo2: IWICPixelFormatInfo
    {
        static Guid s_uuid = new Guid("a9db33a2-af5f-43c7-b679-74f5984b5aa4");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int SupportsTransparency(
            out int pfSupportsTransparency
        ){
            var fp = GetFunctionPointer(16);
            var callback = (SupportsTransparencyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SupportsTransparencyFunc));
            
            return callback(m_ptr, out pfSupportsTransparency);
        }
        delegate int SupportsTransparencyFunc(IntPtr self, out int pfSupportsTransparency);

        public virtual int GetNumericRepresentation(
            out WICPixelFormatNumericRepresentation pNumericRepresentation
        ){
            var fp = GetFunctionPointer(17);
            var callback = (GetNumericRepresentationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetNumericRepresentationFunc));
            
            return callback(m_ptr, out pNumericRepresentation);
        }
        delegate int GetNumericRepresentationFunc(IntPtr self, out WICPixelFormatNumericRepresentation pNumericRepresentation);

    }
    public enum WICPixelFormatNumericRepresentation // 1
    {
        WICPixelFormatNumericRepresentationUnspecified = 0x0,
        WICPixelFormatNumericRepresentationIndexed = 0x1,
        WICPixelFormatNumericRepresentationUnsignedInteger = 0x2,
        WICPixelFormatNumericRepresentationSignedInteger = 0x3,
        WICPixelFormatNumericRepresentationFixed = 0x4,
        WICPixelFormatNumericRepresentationFloat = 0x5,
        _FORCE_DWORD = 0x7fffffff,
    }
    public class IWICImagingFactory: IUnknown
    {
        static Guid s_uuid = new Guid("ec5ec8a9-c395-4314-9c77-54d7a935ff70");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int CreateDecoderFromFilename(
            ref ushort wzFilename,
            ref Guid pguidVendor,
            uint dwDesiredAccess,
            WICDecodeOptions metadataOptions,
            out IWICBitmapDecoder ppIDecoder
        ){
            var fp = GetFunctionPointer(3);
            var callback = (CreateDecoderFromFilenameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateDecoderFromFilenameFunc));
            ppIDecoder = new IWICBitmapDecoder();
            return callback(m_ptr, ref wzFilename, ref pguidVendor, dwDesiredAccess, metadataOptions, out ppIDecoder.PtrForNew);
        }
        delegate int CreateDecoderFromFilenameFunc(IntPtr self, ref ushort wzFilename, ref Guid pguidVendor, uint dwDesiredAccess, WICDecodeOptions metadataOptions, out IntPtr ppIDecoder);

        public virtual int CreateDecoderFromStream(
            IStream pIStream,
            ref Guid pguidVendor,
            WICDecodeOptions metadataOptions,
            out IWICBitmapDecoder ppIDecoder
        ){
            var fp = GetFunctionPointer(4);
            var callback = (CreateDecoderFromStreamFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateDecoderFromStreamFunc));
            ppIDecoder = new IWICBitmapDecoder();
            return callback(m_ptr, pIStream!=null ? pIStream.Ptr : IntPtr.Zero, ref pguidVendor, metadataOptions, out ppIDecoder.PtrForNew);
        }
        delegate int CreateDecoderFromStreamFunc(IntPtr self, IntPtr pIStream, ref Guid pguidVendor, WICDecodeOptions metadataOptions, out IntPtr ppIDecoder);

        public virtual int CreateDecoderFromFileHandle(
            ulong hFile,
            ref Guid pguidVendor,
            WICDecodeOptions metadataOptions,
            out IWICBitmapDecoder ppIDecoder
        ){
            var fp = GetFunctionPointer(5);
            var callback = (CreateDecoderFromFileHandleFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateDecoderFromFileHandleFunc));
            ppIDecoder = new IWICBitmapDecoder();
            return callback(m_ptr, hFile, ref pguidVendor, metadataOptions, out ppIDecoder.PtrForNew);
        }
        delegate int CreateDecoderFromFileHandleFunc(IntPtr self, ulong hFile, ref Guid pguidVendor, WICDecodeOptions metadataOptions, out IntPtr ppIDecoder);

        public virtual int CreateComponentInfo(
            ref Guid clsidComponent,
            out IWICComponentInfo ppIInfo
        ){
            var fp = GetFunctionPointer(6);
            var callback = (CreateComponentInfoFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateComponentInfoFunc));
            ppIInfo = new IWICComponentInfo();
            return callback(m_ptr, ref clsidComponent, out ppIInfo.PtrForNew);
        }
        delegate int CreateComponentInfoFunc(IntPtr self, ref Guid clsidComponent, out IntPtr ppIInfo);

        public virtual int CreateDecoder(
            ref Guid guidContainerFormat,
            ref Guid pguidVendor,
            out IWICBitmapDecoder ppIDecoder
        ){
            var fp = GetFunctionPointer(7);
            var callback = (CreateDecoderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateDecoderFunc));
            ppIDecoder = new IWICBitmapDecoder();
            return callback(m_ptr, ref guidContainerFormat, ref pguidVendor, out ppIDecoder.PtrForNew);
        }
        delegate int CreateDecoderFunc(IntPtr self, ref Guid guidContainerFormat, ref Guid pguidVendor, out IntPtr ppIDecoder);

        public virtual int CreateEncoder(
            ref Guid guidContainerFormat,
            ref Guid pguidVendor,
            out IWICBitmapEncoder ppIEncoder
        ){
            var fp = GetFunctionPointer(8);
            var callback = (CreateEncoderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateEncoderFunc));
            ppIEncoder = new IWICBitmapEncoder();
            return callback(m_ptr, ref guidContainerFormat, ref pguidVendor, out ppIEncoder.PtrForNew);
        }
        delegate int CreateEncoderFunc(IntPtr self, ref Guid guidContainerFormat, ref Guid pguidVendor, out IntPtr ppIEncoder);

        public virtual int CreatePalette(
            out IWICPalette ppIPalette
        ){
            var fp = GetFunctionPointer(9);
            var callback = (CreatePaletteFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreatePaletteFunc));
            ppIPalette = new IWICPalette();
            return callback(m_ptr, out ppIPalette.PtrForNew);
        }
        delegate int CreatePaletteFunc(IntPtr self, out IntPtr ppIPalette);

        public virtual int CreateFormatConverter(
            out IWICFormatConverter ppIFormatConverter
        ){
            var fp = GetFunctionPointer(10);
            var callback = (CreateFormatConverterFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateFormatConverterFunc));
            ppIFormatConverter = new IWICFormatConverter();
            return callback(m_ptr, out ppIFormatConverter.PtrForNew);
        }
        delegate int CreateFormatConverterFunc(IntPtr self, out IntPtr ppIFormatConverter);

        public virtual int CreateBitmapScaler(
            out IWICBitmapScaler ppIBitmapScaler
        ){
            var fp = GetFunctionPointer(11);
            var callback = (CreateBitmapScalerFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateBitmapScalerFunc));
            ppIBitmapScaler = new IWICBitmapScaler();
            return callback(m_ptr, out ppIBitmapScaler.PtrForNew);
        }
        delegate int CreateBitmapScalerFunc(IntPtr self, out IntPtr ppIBitmapScaler);

        public virtual int CreateBitmapClipper(
            out IWICBitmapClipper ppIBitmapClipper
        ){
            var fp = GetFunctionPointer(12);
            var callback = (CreateBitmapClipperFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateBitmapClipperFunc));
            ppIBitmapClipper = new IWICBitmapClipper();
            return callback(m_ptr, out ppIBitmapClipper.PtrForNew);
        }
        delegate int CreateBitmapClipperFunc(IntPtr self, out IntPtr ppIBitmapClipper);

        public virtual int CreateBitmapFlipRotator(
            out IWICBitmapFlipRotator ppIBitmapFlipRotator
        ){
            var fp = GetFunctionPointer(13);
            var callback = (CreateBitmapFlipRotatorFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateBitmapFlipRotatorFunc));
            ppIBitmapFlipRotator = new IWICBitmapFlipRotator();
            return callback(m_ptr, out ppIBitmapFlipRotator.PtrForNew);
        }
        delegate int CreateBitmapFlipRotatorFunc(IntPtr self, out IntPtr ppIBitmapFlipRotator);

        public virtual int CreateStream(
            out IWICStream ppIWICStream
        ){
            var fp = GetFunctionPointer(14);
            var callback = (CreateStreamFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateStreamFunc));
            ppIWICStream = new IWICStream();
            return callback(m_ptr, out ppIWICStream.PtrForNew);
        }
        delegate int CreateStreamFunc(IntPtr self, out IntPtr ppIWICStream);

        public virtual int CreateColorContext(
            out IWICColorContext ppIWICColorContext
        ){
            var fp = GetFunctionPointer(15);
            var callback = (CreateColorContextFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateColorContextFunc));
            ppIWICColorContext = new IWICColorContext();
            return callback(m_ptr, out ppIWICColorContext.PtrForNew);
        }
        delegate int CreateColorContextFunc(IntPtr self, out IntPtr ppIWICColorContext);

        public virtual int CreateColorTransformer(
            out IWICColorTransform ppIWICColorTransform
        ){
            var fp = GetFunctionPointer(16);
            var callback = (CreateColorTransformerFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateColorTransformerFunc));
            ppIWICColorTransform = new IWICColorTransform();
            return callback(m_ptr, out ppIWICColorTransform.PtrForNew);
        }
        delegate int CreateColorTransformerFunc(IntPtr self, out IntPtr ppIWICColorTransform);

        public virtual int CreateBitmap(
            uint uiWidth,
            uint uiHeight,
            ref Guid pixelFormat,
            WICBitmapCreateCacheOption option,
            out IWICBitmap ppIBitmap
        ){
            var fp = GetFunctionPointer(17);
            var callback = (CreateBitmapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateBitmapFunc));
            ppIBitmap = new IWICBitmap();
            return callback(m_ptr, uiWidth, uiHeight, ref pixelFormat, option, out ppIBitmap.PtrForNew);
        }
        delegate int CreateBitmapFunc(IntPtr self, uint uiWidth, uint uiHeight, ref Guid pixelFormat, WICBitmapCreateCacheOption option, out IntPtr ppIBitmap);

        public virtual int CreateBitmapFromSource(
            IWICBitmapSource pIBitmapSource,
            WICBitmapCreateCacheOption option,
            out IWICBitmap ppIBitmap
        ){
            var fp = GetFunctionPointer(18);
            var callback = (CreateBitmapFromSourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateBitmapFromSourceFunc));
            ppIBitmap = new IWICBitmap();
            return callback(m_ptr, pIBitmapSource!=null ? pIBitmapSource.Ptr : IntPtr.Zero, option, out ppIBitmap.PtrForNew);
        }
        delegate int CreateBitmapFromSourceFunc(IntPtr self, IntPtr pIBitmapSource, WICBitmapCreateCacheOption option, out IntPtr ppIBitmap);

        public virtual int CreateBitmapFromSourceRect(
            IWICBitmapSource pIBitmapSource,
            uint x,
            uint y,
            uint width,
            uint height,
            out IWICBitmap ppIBitmap
        ){
            var fp = GetFunctionPointer(19);
            var callback = (CreateBitmapFromSourceRectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateBitmapFromSourceRectFunc));
            ppIBitmap = new IWICBitmap();
            return callback(m_ptr, pIBitmapSource!=null ? pIBitmapSource.Ptr : IntPtr.Zero, x, y, width, height, out ppIBitmap.PtrForNew);
        }
        delegate int CreateBitmapFromSourceRectFunc(IntPtr self, IntPtr pIBitmapSource, uint x, uint y, uint width, uint height, out IntPtr ppIBitmap);

        public virtual int CreateBitmapFromMemory(
            uint uiWidth,
            uint uiHeight,
            ref Guid pixelFormat,
            uint cbStride,
            uint cbBufferSize,
            out byte pbBuffer,
            out IWICBitmap ppIBitmap
        ){
            var fp = GetFunctionPointer(20);
            var callback = (CreateBitmapFromMemoryFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateBitmapFromMemoryFunc));
            ppIBitmap = new IWICBitmap();
            return callback(m_ptr, uiWidth, uiHeight, ref pixelFormat, cbStride, cbBufferSize, out pbBuffer, out ppIBitmap.PtrForNew);
        }
        delegate int CreateBitmapFromMemoryFunc(IntPtr self, uint uiWidth, uint uiHeight, ref Guid pixelFormat, uint cbStride, uint cbBufferSize, out byte pbBuffer, out IntPtr ppIBitmap);

        public virtual int CreateBitmapFromHBITMAP(
            out HBITMAP__ hBitmap,
            out HPALETTE__ hPalette,
            WICBitmapAlphaChannelOption options,
            out IWICBitmap ppIBitmap
        ){
            var fp = GetFunctionPointer(21);
            var callback = (CreateBitmapFromHBITMAPFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateBitmapFromHBITMAPFunc));
            ppIBitmap = new IWICBitmap();
            return callback(m_ptr, out hBitmap, out hPalette, options, out ppIBitmap.PtrForNew);
        }
        delegate int CreateBitmapFromHBITMAPFunc(IntPtr self, out HBITMAP__ hBitmap, out HPALETTE__ hPalette, WICBitmapAlphaChannelOption options, out IntPtr ppIBitmap);

        public virtual int CreateBitmapFromHICON(
            IntPtr hIcon,
            out IWICBitmap ppIBitmap
        ){
            var fp = GetFunctionPointer(22);
            var callback = (CreateBitmapFromHICONFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateBitmapFromHICONFunc));
            ppIBitmap = new IWICBitmap();
            return callback(m_ptr, hIcon, out ppIBitmap.PtrForNew);
        }
        delegate int CreateBitmapFromHICONFunc(IntPtr self, IntPtr hIcon, out IntPtr ppIBitmap);

        public virtual int CreateComponentEnumerator(
            uint componentTypes,
            uint options,
            out IEnumUnknown ppIEnumUnknown
        ){
            var fp = GetFunctionPointer(23);
            var callback = (CreateComponentEnumeratorFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateComponentEnumeratorFunc));
            ppIEnumUnknown = new IEnumUnknown();
            return callback(m_ptr, componentTypes, options, out ppIEnumUnknown.PtrForNew);
        }
        delegate int CreateComponentEnumeratorFunc(IntPtr self, uint componentTypes, uint options, out IntPtr ppIEnumUnknown);

        public virtual int CreateFastMetadataEncoderFromDecoder(
            IWICBitmapDecoder pIDecoder,
            out IWICFastMetadataEncoder ppIFastEncoder
        ){
            var fp = GetFunctionPointer(24);
            var callback = (CreateFastMetadataEncoderFromDecoderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateFastMetadataEncoderFromDecoderFunc));
            ppIFastEncoder = new IWICFastMetadataEncoder();
            return callback(m_ptr, pIDecoder!=null ? pIDecoder.Ptr : IntPtr.Zero, out ppIFastEncoder.PtrForNew);
        }
        delegate int CreateFastMetadataEncoderFromDecoderFunc(IntPtr self, IntPtr pIDecoder, out IntPtr ppIFastEncoder);

        public virtual int CreateFastMetadataEncoderFromFrameDecode(
            IWICBitmapFrameDecode pIFrameDecoder,
            out IWICFastMetadataEncoder ppIFastEncoder
        ){
            var fp = GetFunctionPointer(25);
            var callback = (CreateFastMetadataEncoderFromFrameDecodeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateFastMetadataEncoderFromFrameDecodeFunc));
            ppIFastEncoder = new IWICFastMetadataEncoder();
            return callback(m_ptr, pIFrameDecoder!=null ? pIFrameDecoder.Ptr : IntPtr.Zero, out ppIFastEncoder.PtrForNew);
        }
        delegate int CreateFastMetadataEncoderFromFrameDecodeFunc(IntPtr self, IntPtr pIFrameDecoder, out IntPtr ppIFastEncoder);

        public virtual int CreateQueryWriter(
            ref Guid guidMetadataFormat,
            ref Guid pguidVendor,
            out IWICMetadataQueryWriter ppIQueryWriter
        ){
            var fp = GetFunctionPointer(26);
            var callback = (CreateQueryWriterFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateQueryWriterFunc));
            ppIQueryWriter = new IWICMetadataQueryWriter();
            return callback(m_ptr, ref guidMetadataFormat, ref pguidVendor, out ppIQueryWriter.PtrForNew);
        }
        delegate int CreateQueryWriterFunc(IntPtr self, ref Guid guidMetadataFormat, ref Guid pguidVendor, out IntPtr ppIQueryWriter);

        public virtual int CreateQueryWriterFromReader(
            IWICMetadataQueryReader pIQueryReader,
            ref Guid pguidVendor,
            out IWICMetadataQueryWriter ppIQueryWriter
        ){
            var fp = GetFunctionPointer(27);
            var callback = (CreateQueryWriterFromReaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateQueryWriterFromReaderFunc));
            ppIQueryWriter = new IWICMetadataQueryWriter();
            return callback(m_ptr, pIQueryReader!=null ? pIQueryReader.Ptr : IntPtr.Zero, ref pguidVendor, out ppIQueryWriter.PtrForNew);
        }
        delegate int CreateQueryWriterFromReaderFunc(IntPtr self, IntPtr pIQueryReader, ref Guid pguidVendor, out IntPtr ppIQueryWriter);

    }
    public enum WICBitmapCreateCacheOption // 1
    {
        WICBitmapNoCache = 0x0,
        WICBitmapCacheOnDemand = 0x1,
        WICBitmapCacheOnLoad = 0x2,
        WICBITMAPCREATECACHEOPTION_FORCE_DWORD = 0x7fffffff,
    }
    public enum WICBitmapAlphaChannelOption // 1
    {
        WICBitmapUseAlpha = 0x0,
        WICBitmapUsePremultipliedAlpha = 0x1,
        WICBitmapIgnoreAlpha = 0x2,
        WICBITMAPALPHACHANNELOPTIONS_FORCE_DWORD = 0x7fffffff,
    }
    public class IWICImagingFactory2: IWICImagingFactory
    {
        static Guid s_uuid = new Guid("7b816b45-1996-4476-b132-de9e247c8af0");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int CreateImageEncoder(
            ID2D1Device pD2DDevice,
            out IWICImageEncoder ppWICImageEncoder
        ){
            var fp = GetFunctionPointer(28);
            var callback = (CreateImageEncoderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateImageEncoderFunc));
            ppWICImageEncoder = new IWICImageEncoder();
            return callback(m_ptr, pD2DDevice!=null ? pD2DDevice.Ptr : IntPtr.Zero, out ppWICImageEncoder.PtrForNew);
        }
        delegate int CreateImageEncoderFunc(IntPtr self, IntPtr pD2DDevice, out IntPtr ppWICImageEncoder);

    }
    public class IWICDevelopRawNotificationCallback: IUnknown
    {
        static Guid s_uuid = new Guid("95c75a6e-3e8c-4ec2-85a8-aebcc551e59b");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int Notify(
            uint NotificationMask
        ){
            var fp = GetFunctionPointer(3);
            var callback = (NotifyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(NotifyFunc));
            
            return callback(m_ptr, NotificationMask);
        }
        delegate int NotifyFunc(IntPtr self, uint NotificationMask);

    }
    public class IWICDevelopRaw: IWICBitmapFrameDecode
    {
        static Guid s_uuid = new Guid("fbec5e44-f7be-4b65-b7f8-c0c81fef026d");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int QueryRawCapabilitiesInfo(
            out WICRawCapabilitiesInfo pInfo
        ){
            var fp = GetFunctionPointer(11);
            var callback = (QueryRawCapabilitiesInfoFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(QueryRawCapabilitiesInfoFunc));
            
            return callback(m_ptr, out pInfo);
        }
        delegate int QueryRawCapabilitiesInfoFunc(IntPtr self, out WICRawCapabilitiesInfo pInfo);

        public virtual int LoadParameterSet(
            WICRawParameterSet ParameterSet
        ){
            var fp = GetFunctionPointer(12);
            var callback = (LoadParameterSetFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(LoadParameterSetFunc));
            
            return callback(m_ptr, ParameterSet);
        }
        delegate int LoadParameterSetFunc(IntPtr self, WICRawParameterSet ParameterSet);

        public virtual int GetCurrentParameterSet(
            out IPropertyBag2 ppCurrentParameterSet
        ){
            var fp = GetFunctionPointer(13);
            var callback = (GetCurrentParameterSetFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetCurrentParameterSetFunc));
            ppCurrentParameterSet = new IPropertyBag2();
            return callback(m_ptr, out ppCurrentParameterSet.PtrForNew);
        }
        delegate int GetCurrentParameterSetFunc(IntPtr self, out IntPtr ppCurrentParameterSet);

        public virtual int SetExposureCompensation(
            double ev
        ){
            var fp = GetFunctionPointer(14);
            var callback = (SetExposureCompensationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetExposureCompensationFunc));
            
            return callback(m_ptr, ev);
        }
        delegate int SetExposureCompensationFunc(IntPtr self, double ev);

        public virtual int GetExposureCompensation(
            out double pEV
        ){
            var fp = GetFunctionPointer(15);
            var callback = (GetExposureCompensationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetExposureCompensationFunc));
            
            return callback(m_ptr, out pEV);
        }
        delegate int GetExposureCompensationFunc(IntPtr self, out double pEV);

        public virtual int SetWhitePointRGB(
            uint Red,
            uint Green,
            uint Blue
        ){
            var fp = GetFunctionPointer(16);
            var callback = (SetWhitePointRGBFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetWhitePointRGBFunc));
            
            return callback(m_ptr, Red, Green, Blue);
        }
        delegate int SetWhitePointRGBFunc(IntPtr self, uint Red, uint Green, uint Blue);

        public virtual int GetWhitePointRGB(
            out uint pRed,
            out uint pGreen,
            out uint pBlue
        ){
            var fp = GetFunctionPointer(17);
            var callback = (GetWhitePointRGBFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetWhitePointRGBFunc));
            
            return callback(m_ptr, out pRed, out pGreen, out pBlue);
        }
        delegate int GetWhitePointRGBFunc(IntPtr self, out uint pRed, out uint pGreen, out uint pBlue);

        public virtual int SetNamedWhitePoint(
            WICNamedWhitePoint WhitePoint
        ){
            var fp = GetFunctionPointer(18);
            var callback = (SetNamedWhitePointFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetNamedWhitePointFunc));
            
            return callback(m_ptr, WhitePoint);
        }
        delegate int SetNamedWhitePointFunc(IntPtr self, WICNamedWhitePoint WhitePoint);

        public virtual int GetNamedWhitePoint(
            out WICNamedWhitePoint pWhitePoint
        ){
            var fp = GetFunctionPointer(19);
            var callback = (GetNamedWhitePointFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetNamedWhitePointFunc));
            
            return callback(m_ptr, out pWhitePoint);
        }
        delegate int GetNamedWhitePointFunc(IntPtr self, out WICNamedWhitePoint pWhitePoint);

        public virtual int SetWhitePointKelvin(
            uint WhitePointKelvin
        ){
            var fp = GetFunctionPointer(20);
            var callback = (SetWhitePointKelvinFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetWhitePointKelvinFunc));
            
            return callback(m_ptr, WhitePointKelvin);
        }
        delegate int SetWhitePointKelvinFunc(IntPtr self, uint WhitePointKelvin);

        public virtual int GetWhitePointKelvin(
            out uint pWhitePointKelvin
        ){
            var fp = GetFunctionPointer(21);
            var callback = (GetWhitePointKelvinFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetWhitePointKelvinFunc));
            
            return callback(m_ptr, out pWhitePointKelvin);
        }
        delegate int GetWhitePointKelvinFunc(IntPtr self, out uint pWhitePointKelvin);

        public virtual int GetKelvinRangeInfo(
            out uint pMinKelvinTemp,
            out uint pMaxKelvinTemp,
            out uint pKelvinTempStepValue
        ){
            var fp = GetFunctionPointer(22);
            var callback = (GetKelvinRangeInfoFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetKelvinRangeInfoFunc));
            
            return callback(m_ptr, out pMinKelvinTemp, out pMaxKelvinTemp, out pKelvinTempStepValue);
        }
        delegate int GetKelvinRangeInfoFunc(IntPtr self, out uint pMinKelvinTemp, out uint pMaxKelvinTemp, out uint pKelvinTempStepValue);

        public virtual int SetContrast(
            double Contrast
        ){
            var fp = GetFunctionPointer(23);
            var callback = (SetContrastFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetContrastFunc));
            
            return callback(m_ptr, Contrast);
        }
        delegate int SetContrastFunc(IntPtr self, double Contrast);

        public virtual int GetContrast(
            out double pContrast
        ){
            var fp = GetFunctionPointer(24);
            var callback = (GetContrastFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetContrastFunc));
            
            return callback(m_ptr, out pContrast);
        }
        delegate int GetContrastFunc(IntPtr self, out double pContrast);

        public virtual int SetGamma(
            double Gamma
        ){
            var fp = GetFunctionPointer(25);
            var callback = (SetGammaFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetGammaFunc));
            
            return callback(m_ptr, Gamma);
        }
        delegate int SetGammaFunc(IntPtr self, double Gamma);

        public virtual int GetGamma(
            out double pGamma
        ){
            var fp = GetFunctionPointer(26);
            var callback = (GetGammaFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetGammaFunc));
            
            return callback(m_ptr, out pGamma);
        }
        delegate int GetGammaFunc(IntPtr self, out double pGamma);

        public virtual int SetSharpness(
            double Sharpness
        ){
            var fp = GetFunctionPointer(27);
            var callback = (SetSharpnessFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetSharpnessFunc));
            
            return callback(m_ptr, Sharpness);
        }
        delegate int SetSharpnessFunc(IntPtr self, double Sharpness);

        public virtual int GetSharpness(
            out double pSharpness
        ){
            var fp = GetFunctionPointer(28);
            var callback = (GetSharpnessFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetSharpnessFunc));
            
            return callback(m_ptr, out pSharpness);
        }
        delegate int GetSharpnessFunc(IntPtr self, out double pSharpness);

        public virtual int SetSaturation(
            double Saturation
        ){
            var fp = GetFunctionPointer(29);
            var callback = (SetSaturationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetSaturationFunc));
            
            return callback(m_ptr, Saturation);
        }
        delegate int SetSaturationFunc(IntPtr self, double Saturation);

        public virtual int GetSaturation(
            out double pSaturation
        ){
            var fp = GetFunctionPointer(30);
            var callback = (GetSaturationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetSaturationFunc));
            
            return callback(m_ptr, out pSaturation);
        }
        delegate int GetSaturationFunc(IntPtr self, out double pSaturation);

        public virtual int SetTint(
            double Tint
        ){
            var fp = GetFunctionPointer(31);
            var callback = (SetTintFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetTintFunc));
            
            return callback(m_ptr, Tint);
        }
        delegate int SetTintFunc(IntPtr self, double Tint);

        public virtual int GetTint(
            out double pTint
        ){
            var fp = GetFunctionPointer(32);
            var callback = (GetTintFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTintFunc));
            
            return callback(m_ptr, out pTint);
        }
        delegate int GetTintFunc(IntPtr self, out double pTint);

        public virtual int SetNoiseReduction(
            double NoiseReduction
        ){
            var fp = GetFunctionPointer(33);
            var callback = (SetNoiseReductionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetNoiseReductionFunc));
            
            return callback(m_ptr, NoiseReduction);
        }
        delegate int SetNoiseReductionFunc(IntPtr self, double NoiseReduction);

        public virtual int GetNoiseReduction(
            out double pNoiseReduction
        ){
            var fp = GetFunctionPointer(34);
            var callback = (GetNoiseReductionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetNoiseReductionFunc));
            
            return callback(m_ptr, out pNoiseReduction);
        }
        delegate int GetNoiseReductionFunc(IntPtr self, out double pNoiseReduction);

        public virtual int SetDestinationColorContext(
            IWICColorContext pColorContext
        ){
            var fp = GetFunctionPointer(35);
            var callback = (SetDestinationColorContextFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetDestinationColorContextFunc));
            
            return callback(m_ptr, pColorContext!=null ? pColorContext.Ptr : IntPtr.Zero);
        }
        delegate int SetDestinationColorContextFunc(IntPtr self, IntPtr pColorContext);

        public virtual int SetToneCurve(
            uint cbToneCurveSize,
            ref WICRawToneCurve pToneCurve
        ){
            var fp = GetFunctionPointer(36);
            var callback = (SetToneCurveFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetToneCurveFunc));
            
            return callback(m_ptr, cbToneCurveSize, ref pToneCurve);
        }
        delegate int SetToneCurveFunc(IntPtr self, uint cbToneCurveSize, ref WICRawToneCurve pToneCurve);

        public virtual int GetToneCurve(
            uint cbToneCurveBufferSize,
            out WICRawToneCurve pToneCurve,
            out uint pcbActualToneCurveBufferSize
        ){
            var fp = GetFunctionPointer(37);
            var callback = (GetToneCurveFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetToneCurveFunc));
            
            return callback(m_ptr, cbToneCurveBufferSize, out pToneCurve, out pcbActualToneCurveBufferSize);
        }
        delegate int GetToneCurveFunc(IntPtr self, uint cbToneCurveBufferSize, out WICRawToneCurve pToneCurve, out uint pcbActualToneCurveBufferSize);

        public virtual int SetRotation(
            double Rotation
        ){
            var fp = GetFunctionPointer(38);
            var callback = (SetRotationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetRotationFunc));
            
            return callback(m_ptr, Rotation);
        }
        delegate int SetRotationFunc(IntPtr self, double Rotation);

        public virtual int GetRotation(
            out double pRotation
        ){
            var fp = GetFunctionPointer(39);
            var callback = (GetRotationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetRotationFunc));
            
            return callback(m_ptr, out pRotation);
        }
        delegate int GetRotationFunc(IntPtr self, out double pRotation);

        public virtual int SetRenderMode(
            WICRawRenderMode RenderMode
        ){
            var fp = GetFunctionPointer(40);
            var callback = (SetRenderModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetRenderModeFunc));
            
            return callback(m_ptr, RenderMode);
        }
        delegate int SetRenderModeFunc(IntPtr self, WICRawRenderMode RenderMode);

        public virtual int GetRenderMode(
            out WICRawRenderMode pRenderMode
        ){
            var fp = GetFunctionPointer(41);
            var callback = (GetRenderModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetRenderModeFunc));
            
            return callback(m_ptr, out pRenderMode);
        }
        delegate int GetRenderModeFunc(IntPtr self, out WICRawRenderMode pRenderMode);

        public virtual int SetNotificationCallback(
            IWICDevelopRawNotificationCallback pCallback
        ){
            var fp = GetFunctionPointer(42);
            var callback = (SetNotificationCallbackFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetNotificationCallbackFunc));
            
            return callback(m_ptr, pCallback!=null ? pCallback.Ptr : IntPtr.Zero);
        }
        delegate int SetNotificationCallbackFunc(IntPtr self, IntPtr pCallback);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct WICRawCapabilitiesInfo // 1
    {
        public uint cbSize;
        public uint CodecMajorVersion;
        public uint CodecMinorVersion;
        public WICRawCapabilities ExposureCompensationSupport;
        public WICRawCapabilities ContrastSupport;
        public WICRawCapabilities RGBWhitePointSupport;
        public WICRawCapabilities NamedWhitePointSupport;
        public uint NamedWhitePointSupportMask;
        public WICRawCapabilities KelvinWhitePointSupport;
        public WICRawCapabilities GammaSupport;
        public WICRawCapabilities TintSupport;
        public WICRawCapabilities SaturationSupport;
        public WICRawCapabilities SharpnessSupport;
        public WICRawCapabilities NoiseReductionSupport;
        public WICRawCapabilities DestinationColorProfileSupport;
        public WICRawCapabilities ToneCurveSupport;
        public WICRawRotationCapabilities RotationSupport;
        public WICRawCapabilities RenderModeSupport;
    }
    public enum WICRawCapabilities // 1
    {
        WICRawCapabilityNotSupported = 0x0,
        WICRawCapabilityGetSupported = 0x1,
        WICRawCapabilityFullySupported = 0x2,
        WICRAWCAPABILITIES_FORCE_DWORD = 0x7fffffff,
    }
    public enum WICRawRotationCapabilities // 1
    {
        WICRawRotationCapabilityNotSupported = 0x0,
        WICRawRotationCapabilityGetSupported = 0x1,
        WICRawRotationCapabilityNinetyDegreesSupported = 0x2,
        WICRawRotationCapabilityFullySupported = 0x3,
        WICRAWROTATIONCAPABILITIES_FORCE_DWORD = 0x7fffffff,
    }
    public enum WICRawParameterSet // 1
    {
        WICAsShotParameterSet = 0x1,
        WICUserAdjustedParameterSet = 0x2,
        WICAutoAdjustedParameterSet = 0x3,
        WICRAWPARAMETERSET_FORCE_DWORD = 0x7fffffff,
    }
    public enum WICNamedWhitePoint // 1
    {
        WICWhitePointDefault = 0x1,
        WICWhitePointDaylight = 0x2,
        WICWhitePointCloudy = 0x4,
        WICWhitePointShade = 0x8,
        WICWhitePointTungsten = 0x10,
        WICWhitePointFluorescent = 0x20,
        WICWhitePointFlash = 0x40,
        WICWhitePointUnderwater = 0x80,
        WICWhitePointCustom = 0x100,
        WICWhitePointAutoWhiteBalance = 0x200,
        WICWhitePointAsShot = 0x1,
        WICNAMEDWHITEPOINT_FORCE_DWORD = 0x7fffffff,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct WICRawToneCurve // 1
    {
        public uint cPoints;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=1)]public WICRawToneCurvePoint[] aPoints;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct WICRawToneCurvePoint // 1
    {
        public double Input;
        public double Output;
    }
    public enum WICRawRenderMode // 1
    {
        WICRawRenderModeDraft = 0x1,
        WICRawRenderModeNormal = 0x2,
        WICRawRenderModeBestQuality = 0x3,
        WICRAWRENDERMODE_FORCE_DWORD = 0x7fffffff,
    }
    public class IWICDdsDecoder: IUnknown
    {
        static Guid s_uuid = new Guid("409cd537-8532-40cb-9774-e2feb2df4e9c");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int GetParameters(
            out WICDdsParameters pParameters
        ){
            var fp = GetFunctionPointer(3);
            var callback = (GetParametersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetParametersFunc));
            
            return callback(m_ptr, out pParameters);
        }
        delegate int GetParametersFunc(IntPtr self, out WICDdsParameters pParameters);

        public virtual int GetFrame(
            uint arrayIndex,
            uint mipLevel,
            uint sliceIndex,
            out IWICBitmapFrameDecode ppIBitmapFrame
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetFrameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFrameFunc));
            ppIBitmapFrame = new IWICBitmapFrameDecode();
            return callback(m_ptr, arrayIndex, mipLevel, sliceIndex, out ppIBitmapFrame.PtrForNew);
        }
        delegate int GetFrameFunc(IntPtr self, uint arrayIndex, uint mipLevel, uint sliceIndex, out IntPtr ppIBitmapFrame);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct WICDdsParameters // 1
    {
        public uint Width;
        public uint Height;
        public uint Depth;
        public uint MipLevels;
        public uint ArraySize;
        public DXGI_FORMAT DxgiFormat;
        public WICDdsDimension Dimension;
        public WICDdsAlphaMode AlphaMode;
    }
    public enum WICDdsDimension // 1
    {
        WICDdsTexture1D = 0x0,
        WICDdsTexture2D = 0x1,
        WICDdsTexture3D = 0x2,
        WICDdsTextureCube = 0x3,
        WICDDSTEXTURE_FORCE_DWORD = 0x7fffffff,
    }
    public enum WICDdsAlphaMode // 1
    {
        WICDdsAlphaModeUnknown = 0x0,
        WICDdsAlphaModeStraight = 0x1,
        WICDdsAlphaModePremultiplied = 0x2,
        WICDdsAlphaModeOpaque = 0x3,
        WICDdsAlphaModeCustom = 0x4,
        WICDDSALPHAMODE_FORCE_DWORD = 0x7fffffff,
    }
    public class IWICDdsEncoder: IUnknown
    {
        static Guid s_uuid = new Guid("5cacdb4c-407e-41b3-b936-d0f010cd6732");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int SetParameters(
            out WICDdsParameters pParameters
        ){
            var fp = GetFunctionPointer(3);
            var callback = (SetParametersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetParametersFunc));
            
            return callback(m_ptr, out pParameters);
        }
        delegate int SetParametersFunc(IntPtr self, out WICDdsParameters pParameters);

        public virtual int GetParameters(
            out WICDdsParameters pParameters
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetParametersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetParametersFunc));
            
            return callback(m_ptr, out pParameters);
        }
        delegate int GetParametersFunc(IntPtr self, out WICDdsParameters pParameters);

        public virtual int CreateNewFrame(
            out IWICBitmapFrameEncode ppIFrameEncode,
            out uint pArrayIndex,
            out uint pMipLevel,
            out uint pSliceIndex
        ){
            var fp = GetFunctionPointer(5);
            var callback = (CreateNewFrameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateNewFrameFunc));
            ppIFrameEncode = new IWICBitmapFrameEncode();
            return callback(m_ptr, out ppIFrameEncode.PtrForNew, out pArrayIndex, out pMipLevel, out pSliceIndex);
        }
        delegate int CreateNewFrameFunc(IntPtr self, out IntPtr ppIFrameEncode, out uint pArrayIndex, out uint pMipLevel, out uint pSliceIndex);

    }
    public class IWICDdsFrameDecode: IUnknown
    {
        static Guid s_uuid = new Guid("3d4c0c61-18a4-41e4-bd80-481a4fc9f464");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int GetSizeInBlocks(
            out uint pWidthInBlocks,
            out uint pHeightInBlocks
        ){
            var fp = GetFunctionPointer(3);
            var callback = (GetSizeInBlocksFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetSizeInBlocksFunc));
            
            return callback(m_ptr, out pWidthInBlocks, out pHeightInBlocks);
        }
        delegate int GetSizeInBlocksFunc(IntPtr self, out uint pWidthInBlocks, out uint pHeightInBlocks);

        public virtual int GetFormatInfo(
            out WICDdsFormatInfo pFormatInfo
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetFormatInfoFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFormatInfoFunc));
            
            return callback(m_ptr, out pFormatInfo);
        }
        delegate int GetFormatInfoFunc(IntPtr self, out WICDdsFormatInfo pFormatInfo);

        public virtual int CopyBlocks(
            ref WICRect prcBoundsInBlocks,
            uint cbStride,
            uint cbBufferSize,
            out byte pbBuffer
        ){
            var fp = GetFunctionPointer(5);
            var callback = (CopyBlocksFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopyBlocksFunc));
            
            return callback(m_ptr, ref prcBoundsInBlocks, cbStride, cbBufferSize, out pbBuffer);
        }
        delegate int CopyBlocksFunc(IntPtr self, ref WICRect prcBoundsInBlocks, uint cbStride, uint cbBufferSize, out byte pbBuffer);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct WICDdsFormatInfo // 1
    {
        public DXGI_FORMAT DxgiFormat;
        public uint BytesPerBlock;
        public uint BlockWidth;
        public uint BlockHeight;
    }
    public class IWICJpegFrameDecode: IUnknown
    {
        static Guid s_uuid = new Guid("8939f66e-c46a-4c21-a9d1-98b327ce1679");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int DoesSupportIndexing(
            out int pfIndexingSupported
        ){
            var fp = GetFunctionPointer(3);
            var callback = (DoesSupportIndexingFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DoesSupportIndexingFunc));
            
            return callback(m_ptr, out pfIndexingSupported);
        }
        delegate int DoesSupportIndexingFunc(IntPtr self, out int pfIndexingSupported);

        public virtual int SetIndexing(
            WICJpegIndexingOptions options,
            uint horizontalIntervalSize
        ){
            var fp = GetFunctionPointer(4);
            var callback = (SetIndexingFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetIndexingFunc));
            
            return callback(m_ptr, options, horizontalIntervalSize);
        }
        delegate int SetIndexingFunc(IntPtr self, WICJpegIndexingOptions options, uint horizontalIntervalSize);

        public virtual int ClearIndexing(
        ){
            var fp = GetFunctionPointer(5);
            var callback = (ClearIndexingFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ClearIndexingFunc));
            
            return callback(m_ptr);
        }
        delegate int ClearIndexingFunc(IntPtr self);

        public virtual int GetAcHuffmanTable(
            uint scanIndex,
            uint tableIndex,
            out DXGI_JPEG_AC_HUFFMAN_TABLE pAcHuffmanTable
        ){
            var fp = GetFunctionPointer(6);
            var callback = (GetAcHuffmanTableFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetAcHuffmanTableFunc));
            
            return callback(m_ptr, scanIndex, tableIndex, out pAcHuffmanTable);
        }
        delegate int GetAcHuffmanTableFunc(IntPtr self, uint scanIndex, uint tableIndex, out DXGI_JPEG_AC_HUFFMAN_TABLE pAcHuffmanTable);

        public virtual int GetDcHuffmanTable(
            uint scanIndex,
            uint tableIndex,
            out DXGI_JPEG_DC_HUFFMAN_TABLE pDcHuffmanTable
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetDcHuffmanTableFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDcHuffmanTableFunc));
            
            return callback(m_ptr, scanIndex, tableIndex, out pDcHuffmanTable);
        }
        delegate int GetDcHuffmanTableFunc(IntPtr self, uint scanIndex, uint tableIndex, out DXGI_JPEG_DC_HUFFMAN_TABLE pDcHuffmanTable);

        public virtual int GetQuantizationTable(
            uint scanIndex,
            uint tableIndex,
            out DXGI_JPEG_QUANTIZATION_TABLE pQuantizationTable
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetQuantizationTableFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetQuantizationTableFunc));
            
            return callback(m_ptr, scanIndex, tableIndex, out pQuantizationTable);
        }
        delegate int GetQuantizationTableFunc(IntPtr self, uint scanIndex, uint tableIndex, out DXGI_JPEG_QUANTIZATION_TABLE pQuantizationTable);

        public virtual int GetFrameHeader(
            out WICJpegFrameHeader pFrameHeader
        ){
            var fp = GetFunctionPointer(9);
            var callback = (GetFrameHeaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFrameHeaderFunc));
            
            return callback(m_ptr, out pFrameHeader);
        }
        delegate int GetFrameHeaderFunc(IntPtr self, out WICJpegFrameHeader pFrameHeader);

        public virtual int GetScanHeader(
            uint scanIndex,
            out WICJpegScanHeader pScanHeader
        ){
            var fp = GetFunctionPointer(10);
            var callback = (GetScanHeaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetScanHeaderFunc));
            
            return callback(m_ptr, scanIndex, out pScanHeader);
        }
        delegate int GetScanHeaderFunc(IntPtr self, uint scanIndex, out WICJpegScanHeader pScanHeader);

        public virtual int CopyScan(
            uint scanIndex,
            uint scanOffset,
            uint cbScanData,
            out byte pbScanData,
            out uint pcbScanDataActual
        ){
            var fp = GetFunctionPointer(11);
            var callback = (CopyScanFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopyScanFunc));
            
            return callback(m_ptr, scanIndex, scanOffset, cbScanData, out pbScanData, out pcbScanDataActual);
        }
        delegate int CopyScanFunc(IntPtr self, uint scanIndex, uint scanOffset, uint cbScanData, out byte pbScanData, out uint pcbScanDataActual);

        public virtual int CopyMinimalStream(
            uint streamOffset,
            uint cbStreamData,
            out byte pbStreamData,
            out uint pcbStreamDataActual
        ){
            var fp = GetFunctionPointer(12);
            var callback = (CopyMinimalStreamFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopyMinimalStreamFunc));
            
            return callback(m_ptr, streamOffset, cbStreamData, out pbStreamData, out pcbStreamDataActual);
        }
        delegate int CopyMinimalStreamFunc(IntPtr self, uint streamOffset, uint cbStreamData, out byte pbStreamData, out uint pcbStreamDataActual);

    }
    public enum WICJpegIndexingOptions // 1
    {
        WICJpegIndexingOptionsGenerateOnDemand = 0x0,
        WICJpegIndexingOptionsGenerateOnLoad = 0x1,
        _FORCE_DWORD = 0x7fffffff,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct WICJpegFrameHeader // 1
    {
        public uint Width;
        public uint Height;
        public WICJpegTransferMatrix TransferMatrix;
        public WICJpegScanType ScanType;
        public uint cComponents;
        public uint ComponentIdentifiers;
        public uint SampleFactors;
        public uint QuantizationTableIndices;
    }
    public enum WICJpegTransferMatrix // 1
    {
        WICJpegTransferMatrixIdentity = 0x0,
        WICJpegTransferMatrixBT601 = 0x1,
        _FORCE_DWORD = 0x7fffffff,
    }
    public enum WICJpegScanType // 1
    {
        WICJpegScanTypeInterleaved = 0x0,
        WICJpegScanTypePlanarComponents = 0x1,
        WICJpegScanTypeProgressive = 0x2,
        _FORCE_DWORD = 0x7fffffff,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct WICJpegScanHeader // 1
    {
        public uint cComponents;
        public uint RestartInterval;
        public uint ComponentSelectors;
        public uint HuffmanTableIndices;
        public byte StartSpectralSelection;
        public byte EndSpectralSelection;
        public byte SuccessiveApproximationHigh;
        public byte SuccessiveApproximationLow;
    }
    public class IWICJpegFrameEncode: IUnknown
    {
        static Guid s_uuid = new Guid("2f0c601f-d2c6-468c-abfa-49495d983ed1");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int GetAcHuffmanTable(
            uint scanIndex,
            uint tableIndex,
            out DXGI_JPEG_AC_HUFFMAN_TABLE pAcHuffmanTable
        ){
            var fp = GetFunctionPointer(3);
            var callback = (GetAcHuffmanTableFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetAcHuffmanTableFunc));
            
            return callback(m_ptr, scanIndex, tableIndex, out pAcHuffmanTable);
        }
        delegate int GetAcHuffmanTableFunc(IntPtr self, uint scanIndex, uint tableIndex, out DXGI_JPEG_AC_HUFFMAN_TABLE pAcHuffmanTable);

        public virtual int GetDcHuffmanTable(
            uint scanIndex,
            uint tableIndex,
            out DXGI_JPEG_DC_HUFFMAN_TABLE pDcHuffmanTable
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetDcHuffmanTableFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDcHuffmanTableFunc));
            
            return callback(m_ptr, scanIndex, tableIndex, out pDcHuffmanTable);
        }
        delegate int GetDcHuffmanTableFunc(IntPtr self, uint scanIndex, uint tableIndex, out DXGI_JPEG_DC_HUFFMAN_TABLE pDcHuffmanTable);

        public virtual int GetQuantizationTable(
            uint scanIndex,
            uint tableIndex,
            out DXGI_JPEG_QUANTIZATION_TABLE pQuantizationTable
        ){
            var fp = GetFunctionPointer(5);
            var callback = (GetQuantizationTableFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetQuantizationTableFunc));
            
            return callback(m_ptr, scanIndex, tableIndex, out pQuantizationTable);
        }
        delegate int GetQuantizationTableFunc(IntPtr self, uint scanIndex, uint tableIndex, out DXGI_JPEG_QUANTIZATION_TABLE pQuantizationTable);

        public virtual int WriteScan(
            uint cbScanData,
            ref byte pbScanData
        ){
            var fp = GetFunctionPointer(6);
            var callback = (WriteScanFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(WriteScanFunc));
            
            return callback(m_ptr, cbScanData, ref pbScanData);
        }
        delegate int WriteScanFunc(IntPtr self, uint cbScanData, ref byte pbScanData);

    }
    public enum WICComponentEnumerateOptions // 1
    {
        WICComponentEnumerateDefault = 0x0,
        WICComponentEnumerateRefresh = 0x1,
        WICComponentEnumerateDisabled = unchecked((int)0x80000000),
        WICComponentEnumerateUnsigned = 0x40000000,
        WICComponentEnumerateBuiltInOnly = 0x20000000,
        WICCOMPONENTENUMERATEOPTIONS_FORCE_DWORD = 0x7fffffff,
    }
    public enum WICBitmapLockFlags // 1
    {
        WICBitmapLockRead = 0x1,
        WICBitmapLockWrite = 0x2,
        WICBITMAPLOCKFLAGS_FORCE_DWORD = 0x7fffffff,
    }
    public enum WICBitmapDecoderCapabilities // 1
    {
        WICBitmapDecoderCapabilitySameEncoder = 0x1,
        WICBitmapDecoderCapabilityCanDecodeAllImages = 0x2,
        WICBitmapDecoderCapabilityCanDecodeSomeImages = 0x4,
        WICBitmapDecoderCapabilityCanEnumerateMetadata = 0x8,
        WICBitmapDecoderCapabilityCanDecodeThumbnail = 0x10,
        WICBITMAPDECODERCAPABILITIES_FORCE_DWORD = 0x7fffffff,
    }
    public enum WICProgressNotification // 1
    {
        WICProgressNotificationBegin = 0x10000,
        WICProgressNotificationEnd = 0x20000,
        WICProgressNotificationFrequent = 0x40000,
        WICProgressNotificationAll = unchecked((int)0xffff0000),
        WICPROGRESSNOTIFICATION_FORCE_DWORD = 0x7fffffff,
    }
    public enum WICComponentSigning // 1
    {
        WICComponentSigned = 0x1,
        WICComponentUnsigned = 0x2,
        WICComponentSafe = 0x4,
        WICComponentDisabled = unchecked((int)0x80000000),
        WICCOMPONENTSIGNING_FORCE_DWORD = 0x7fffffff,
    }
    public enum WICGifLogicalScreenDescriptorProperties // 1
    {
        WICGifLogicalScreenSignature = 0x1,
        WICGifLogicalScreenDescriptorWidth = 0x2,
        WICGifLogicalScreenDescriptorHeight = 0x3,
        WICGifLogicalScreenDescriptorGlobalColorTableFlag = 0x4,
        WICGifLogicalScreenDescriptorColorResolution = 0x5,
        WICGifLogicalScreenDescriptorSortFlag = 0x6,
        WICGifLogicalScreenDescriptorGlobalColorTableSize = 0x7,
        WICGifLogicalScreenDescriptorBackgroundColorIndex = 0x8,
        WICGifLogicalScreenDescriptorPixelAspectRatio = 0x9,
        _FORCE_DWORD = 0x7fffffff,
    }
    public enum WICGifImageDescriptorProperties // 1
    {
        WICGifImageDescriptorLeft = 0x1,
        WICGifImageDescriptorTop = 0x2,
        WICGifImageDescriptorWidth = 0x3,
        WICGifImageDescriptorHeight = 0x4,
        WICGifImageDescriptorLocalColorTableFlag = 0x5,
        WICGifImageDescriptorInterlaceFlag = 0x6,
        WICGifImageDescriptorSortFlag = 0x7,
        WICGifImageDescriptorLocalColorTableSize = 0x8,
        _FORCE_DWORD = 0x7fffffff,
    }
    public enum WICGifGraphicControlExtensionProperties // 1
    {
        WICGifGraphicControlExtensionDisposal = 0x1,
        WICGifGraphicControlExtensionUserInputFlag = 0x2,
        WICGifGraphicControlExtensionTransparencyFlag = 0x3,
        WICGifGraphicControlExtensionDelay = 0x4,
        WICGifGraphicControlExtensionTransparentColorIndex = 0x5,
        _FORCE_DWORD = 0x7fffffff,
    }
    public enum WICGifApplicationExtensionProperties // 1
    {
        WICGifApplicationExtensionApplication = 0x1,
        WICGifApplicationExtensionData = 0x2,
        _FORCE_DWORD = 0x7fffffff,
    }
    public enum WICGifCommentExtensionProperties // 1
    {
        WICGifCommentExtensionText = 0x1,
        _FORCE_DWORD = 0x7fffffff,
    }
    public enum WICJpegCommentProperties // 1
    {
        WICJpegCommentText = 0x1,
        _FORCE_DWORD = 0x7fffffff,
    }
    public enum WICJpegLuminanceProperties // 1
    {
        WICJpegLuminanceTable = 0x1,
        _FORCE_DWORD = 0x7fffffff,
    }
    public enum WICJpegChrominanceProperties // 1
    {
        WICJpegChrominanceTable = 0x1,
        _FORCE_DWORD = 0x7fffffff,
    }
    public enum WIC8BIMIptcProperties // 1
    {
        WIC8BIMIptcPString = 0x0,
        WIC8BIMIptcEmbeddedIPTC = 0x1,
        _FORCE_DWORD = 0x7fffffff,
    }
    public enum WIC8BIMResolutionInfoProperties // 1
    {
        WIC8BIMResolutionInfoPString = 0x1,
        WIC8BIMResolutionInfoHResolution = 0x2,
        WIC8BIMResolutionInfoHResolutionUnit = 0x3,
        WIC8BIMResolutionInfoWidthUnit = 0x4,
        WIC8BIMResolutionInfoVResolution = 0x5,
        WIC8BIMResolutionInfoVResolutionUnit = 0x6,
        WIC8BIMResolutionInfoHeightUnit = 0x7,
        _FORCE_DWORD = 0x7fffffff,
    }
    public enum WIC8BIMIptcDigestProperties // 1
    {
        WIC8BIMIptcDigestPString = 0x1,
        WIC8BIMIptcDigestIptcDigest = 0x2,
        _FORCE_DWORD = 0x7fffffff,
    }
    public enum WICPngGamaProperties // 1
    {
        WICPngGamaGamma = 0x1,
        _FORCE_DWORD = 0x7fffffff,
    }
    public enum WICPngBkgdProperties // 1
    {
        WICPngBkgdBackgroundColor = 0x1,
        _FORCE_DWORD = 0x7fffffff,
    }
    public enum WICPngItxtProperties // 1
    {
        WICPngItxtKeyword = 0x1,
        WICPngItxtCompressionFlag = 0x2,
        WICPngItxtLanguageTag = 0x3,
        WICPngItxtTranslatedKeyword = 0x4,
        WICPngItxtText = 0x5,
        _FORCE_DWORD = 0x7fffffff,
    }
    public enum WICPngChrmProperties // 1
    {
        WICPngChrmWhitePointX = 0x1,
        WICPngChrmWhitePointY = 0x2,
        WICPngChrmRedX = 0x3,
        WICPngChrmRedY = 0x4,
        WICPngChrmGreenX = 0x5,
        WICPngChrmGreenY = 0x6,
        WICPngChrmBlueX = 0x7,
        WICPngChrmBlueY = 0x8,
        _FORCE_DWORD = 0x7fffffff,
    }
    public enum WICPngHistProperties // 1
    {
        WICPngHistFrequencies = 0x1,
        _FORCE_DWORD = 0x7fffffff,
    }
    public enum WICPngIccpProperties // 1
    {
        WICPngIccpProfileName = 0x1,
        WICPngIccpProfileData = 0x2,
        _FORCE_DWORD = 0x7fffffff,
    }
    public enum WICPngSrgbProperties // 1
    {
        WICPngSrgbRenderingIntent = 0x1,
        _FORCE_DWORD = 0x7fffffff,
    }
    public enum WICPngTimeProperties // 1
    {
        WICPngTimeYear = 0x1,
        WICPngTimeMonth = 0x2,
        WICPngTimeDay = 0x3,
        WICPngTimeHour = 0x4,
        WICPngTimeMinute = 0x5,
        WICPngTimeSecond = 0x6,
        _FORCE_DWORD = 0x7fffffff,
    }
    public enum WICHeifProperties // 1
    {
        WICHeifOrientation = 0x1,
        _FORCE_DWORD = 0x7fffffff,
    }
    public enum WICWebpAnimProperties // 1
    {
        WICWebpAnimLoopCount = 0x1,
        _FORCE_DWORD = 0x7fffffff,
    }
    public enum WICWebpAnmfProperties // 1
    {
        WICWebpAnmfFrameDuration = 0x1,
        _FORCE_DWORD = 0x7fffffff,
    }
    public enum WICSectionAccessLevel // 1
    {
        WICSectionAccessLevelRead = 0x1,
        WICSectionAccessLevelReadWrite = 0x3,
        _FORCE_DWORD = 0x7fffffff,
    }
    public enum WICTiffCompressionOption // 1
    {
        WICTiffCompressionDontCare = 0x0,
        WICTiffCompressionNone = 0x1,
        WICTiffCompressionCCITT3 = 0x2,
        WICTiffCompressionCCITT4 = 0x3,
        WICTiffCompressionLZW = 0x4,
        WICTiffCompressionRLE = 0x5,
        WICTiffCompressionZIP = 0x6,
        WICTiffCompressionLZWHDifferencing = 0x7,
        WICTIFFCOMPRESSIONOPTION_FORCE_DWORD = 0x7fffffff,
    }
    public enum WICJpegYCrCbSubsamplingOption // 1
    {
        WICJpegYCrCbSubsamplingDefault = 0x0,
        WICJpegYCrCbSubsampling420 = 0x1,
        WICJpegYCrCbSubsampling422 = 0x2,
        WICJpegYCrCbSubsampling444 = 0x3,
        WICJpegYCrCbSubsampling440 = 0x4,
        WICJPEGYCRCBSUBSAMPLING_FORCE_DWORD = 0x7fffffff,
    }
    public enum WICPngFilterOption // 1
    {
        WICPngFilterUnspecified = 0x0,
        WICPngFilterNone = 0x1,
        WICPngFilterSub = 0x2,
        WICPngFilterUp = 0x3,
        WICPngFilterAverage = 0x4,
        WICPngFilterPaeth = 0x5,
        WICPngFilterAdaptive = 0x6,
        WICPNGFILTEROPTION_FORCE_DWORD = 0x7fffffff,
    }
    public static class wincodec {
        [DllImport("wincodec.dll")]
        public static extern int IWICBitmapCodecProgressNotification_Remote_RegisterProgressNotification_Proxy(
            IWICBitmapCodecProgressNotification This,
            IWICProgressCallback pICallback,
            uint dwProgressFlags
        );
        [DllImport("wincodec.dll")]
        public static extern void IWICBitmapCodecProgressNotification_Remote_RegisterProgressNotification_Stub(
            IRpcStubBuffer This,
            IRpcChannelBuffer _pRpcChannelBuffer,
            out _RPC_MESSAGE _pRpcMessage,
            out uint _pdwStubPhase
        );
        [DllImport("wincodec.dll")]
        public static extern int IWICBitmapDecoderInfo_Remote_GetPatterns_Proxy(
            IWICBitmapDecoderInfo This,
            out IntPtr ppPatterns,
            out uint pcPatterns
        );
        [DllImport("wincodec.dll")]
        public static extern void IWICBitmapDecoderInfo_Remote_GetPatterns_Stub(
            IRpcStubBuffer This,
            IRpcChannelBuffer _pRpcChannelBuffer,
            out _RPC_MESSAGE _pRpcMessage,
            out uint _pdwStubPhase
        );
        [DllImport("wincodec.dll")]
        public static extern int WICConvertBitmapSource(
            ref Guid dstFormat,
            IWICBitmapSource pISrc,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<IWICBitmapSource>))]out IWICBitmapSource ppIDst
        );
        [DllImport("wincodec.dll")]
        public static extern int WICCreateBitmapFromSection(
            uint width,
            uint height,
            ref Guid pixelFormat,
            IntPtr hSection,
            uint stride,
            uint offset,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<IWICBitmap>))]out IWICBitmap ppIBitmap
        );
        [DllImport("wincodec.dll")]
        public static extern int WICCreateBitmapFromSectionEx(
            uint width,
            uint height,
            ref Guid pixelFormat,
            IntPtr hSection,
            uint stride,
            uint offset,
            WICSectionAccessLevel desiredAccessLevel,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<IWICBitmap>))]out IWICBitmap ppIBitmap
        );
        [DllImport("wincodec.dll")]
        public static extern int WICMapGuidToShortName(
            ref Guid guid,
            uint cchName,
            out ushort wzName,
            out uint pcchActual
        );
        [DllImport("wincodec.dll")]
        public static extern int WICMapShortNameToGuid(
            ref ushort wzName,
            out Guid pguid
        );
        [DllImport("wincodec.dll")]
        public static extern int WICMapSchemaToName(
            ref Guid guidMetadataFormat,
            out ushort pwzSchema,
            uint cchName,
            out ushort wzName,
            out uint pcchActual
        );
        [DllImport("wincodec.dll")]
        public static extern int IWICDevelopRaw_Remote_QueryRawCapabilitiesInfo_Proxy(
            IWICDevelopRaw This,
            out WICRawCapabilitiesInfo pInfo
        );
        [DllImport("wincodec.dll")]
        public static extern void IWICDevelopRaw_Remote_QueryRawCapabilitiesInfo_Stub(
            IRpcStubBuffer This,
            IRpcChannelBuffer _pRpcChannelBuffer,
            out _RPC_MESSAGE _pRpcMessage,
            out uint _pdwStubPhase
        );
        [DllImport("wincodec.dll")]
        public static extern int IWICDevelopRaw_Remote_SetToneCurve_Proxy(
            IWICDevelopRaw This,
            uint cPoints,
            ref WICRawToneCurvePoint aPoints
        );
        [DllImport("wincodec.dll")]
        public static extern void IWICDevelopRaw_Remote_SetToneCurve_Stub(
            IRpcStubBuffer This,
            IRpcChannelBuffer _pRpcChannelBuffer,
            out _RPC_MESSAGE _pRpcMessage,
            out uint _pdwStubPhase
        );
        [DllImport("wincodec.dll")]
        public static extern int IWICDevelopRaw_Remote_GetToneCurve_Proxy(
            IWICDevelopRaw This,
            out uint pcPoints,
            out IntPtr paPoints
        );
        [DllImport("wincodec.dll")]
        public static extern void IWICDevelopRaw_Remote_GetToneCurve_Stub(
            IRpcStubBuffer This,
            IRpcChannelBuffer _pRpcChannelBuffer,
            out _RPC_MESSAGE _pRpcMessage,
            out uint _pdwStubPhase
        );
        [DllImport("wincodec.dll")]
        public static extern uint BSTR_UserSize(
            out uint __param__1,
            uint __param__2,
            out IntPtr __param__3
        );
        [DllImport("wincodec.dll")]
        public static extern IntPtr BSTR_UserMarshal(
            out uint __param__1,
            out byte __param__2,
            out IntPtr __param__3
        );
        [DllImport("wincodec.dll")]
        public static extern IntPtr BSTR_UserUnmarshal(
            out uint __param__1,
            out byte __param__2,
            out IntPtr __param__3
        );
        [DllImport("wincodec.dll")]
        public static extern void BSTR_UserFree(
            out uint __param__1,
            out IntPtr __param__2
        );
        [DllImport("wincodec.dll")]
        public static extern uint HBITMAP_UserSize(
            out uint __param__1,
            uint __param__2,
            out IntPtr __param__3
        );
        [DllImport("wincodec.dll")]
        public static extern IntPtr HBITMAP_UserMarshal(
            out uint __param__1,
            out byte __param__2,
            out IntPtr __param__3
        );
        [DllImport("wincodec.dll")]
        public static extern IntPtr HBITMAP_UserUnmarshal(
            out uint __param__1,
            out byte __param__2,
            out IntPtr __param__3
        );
        [DllImport("wincodec.dll")]
        public static extern void HBITMAP_UserFree(
            out uint __param__1,
            out IntPtr __param__2
        );
        [DllImport("wincodec.dll")]
        public static extern uint HICON_UserSize(
            out uint __param__1,
            uint __param__2,
            out IntPtr __param__3
        );
        [DllImport("wincodec.dll")]
        public static extern IntPtr HICON_UserMarshal(
            out uint __param__1,
            out byte __param__2,
            out IntPtr __param__3
        );
        [DllImport("wincodec.dll")]
        public static extern IntPtr HICON_UserUnmarshal(
            out uint __param__1,
            out byte __param__2,
            out IntPtr __param__3
        );
        [DllImport("wincodec.dll")]
        public static extern void HICON_UserFree(
            out uint __param__1,
            out IntPtr __param__2
        );
        [DllImport("wincodec.dll")]
        public static extern uint HPALETTE_UserSize(
            out uint __param__1,
            uint __param__2,
            out IntPtr __param__3
        );
        [DllImport("wincodec.dll")]
        public static extern IntPtr HPALETTE_UserMarshal(
            out uint __param__1,
            out byte __param__2,
            out IntPtr __param__3
        );
        [DllImport("wincodec.dll")]
        public static extern IntPtr HPALETTE_UserUnmarshal(
            out uint __param__1,
            out byte __param__2,
            out IntPtr __param__3
        );
        [DllImport("wincodec.dll")]
        public static extern void HPALETTE_UserFree(
            out uint __param__1,
            out IntPtr __param__2
        );
        [DllImport("wincodec.dll")]
        public static extern uint LPSAFEARRAY_UserSize(
            out uint __param__1,
            uint __param__2,
            out IntPtr __param__3
        );
        [DllImport("wincodec.dll")]
        public static extern IntPtr LPSAFEARRAY_UserMarshal(
            out uint __param__1,
            out byte __param__2,
            out IntPtr __param__3
        );
        [DllImport("wincodec.dll")]
        public static extern IntPtr LPSAFEARRAY_UserUnmarshal(
            out uint __param__1,
            out byte __param__2,
            out IntPtr __param__3
        );
        [DllImport("wincodec.dll")]
        public static extern void LPSAFEARRAY_UserFree(
            out uint __param__1,
            out IntPtr __param__2
        );
        [DllImport("wincodec.dll")]
        public static extern uint WICInProcPointer_UserSize(
            out uint __param__1,
            uint __param__2,
            out IntPtr __param__3
        );
        [DllImport("wincodec.dll")]
        public static extern IntPtr WICInProcPointer_UserMarshal(
            out uint __param__1,
            out byte __param__2,
            out IntPtr __param__3
        );
        [DllImport("wincodec.dll")]
        public static extern IntPtr WICInProcPointer_UserUnmarshal(
            out uint __param__1,
            out byte __param__2,
            out IntPtr __param__3
        );
        [DllImport("wincodec.dll")]
        public static extern void WICInProcPointer_UserFree(
            out uint __param__1,
            out IntPtr __param__2
        );
        [DllImport("wincodec.dll")]
        public static extern int IWICBitmapCodecProgressNotification_RegisterProgressNotification_Proxy(
            IWICBitmapCodecProgressNotification This,
            PFNProgressNotification pfnProgressNotification,
            IntPtr pvData,
            uint dwProgressFlags
        );
        [DllImport("wincodec.dll")]
        public static extern int IWICBitmapCodecProgressNotification_RegisterProgressNotification_Stub(
            IWICBitmapCodecProgressNotification This,
            IWICProgressCallback pICallback,
            uint dwProgressFlags
        );
        [DllImport("wincodec.dll")]
        public static extern int IWICBitmapDecoderInfo_GetPatterns_Proxy(
            IWICBitmapDecoderInfo This,
            uint cbSizePatterns,
            out WICBitmapPattern pPatterns,
            out uint pcPatterns,
            out uint pcbPatternsActual
        );
        [DllImport("wincodec.dll")]
        public static extern int IWICBitmapDecoderInfo_GetPatterns_Stub(
            IWICBitmapDecoderInfo This,
            out IntPtr ppPatterns,
            out uint pcPatterns
        );
        [DllImport("wincodec.dll")]
        public static extern int IWICDevelopRaw_QueryRawCapabilitiesInfo_Proxy(
            IWICDevelopRaw This,
            out WICRawCapabilitiesInfo pInfo
        );
        [DllImport("wincodec.dll")]
        public static extern int IWICDevelopRaw_QueryRawCapabilitiesInfo_Stub(
            IWICDevelopRaw This,
            out WICRawCapabilitiesInfo pInfo
        );
        [DllImport("wincodec.dll")]
        public static extern int IWICDevelopRaw_SetToneCurve_Proxy(
            IWICDevelopRaw This,
            uint cbToneCurveSize,
            ref WICRawToneCurve pToneCurve
        );
        [DllImport("wincodec.dll")]
        public static extern int IWICDevelopRaw_SetToneCurve_Stub(
            IWICDevelopRaw This,
            uint cPoints,
            ref WICRawToneCurvePoint aPoints
        );
        [DllImport("wincodec.dll")]
        public static extern int IWICDevelopRaw_GetToneCurve_Proxy(
            IWICDevelopRaw This,
            uint cbToneCurveBufferSize,
            out WICRawToneCurve pToneCurve,
            out uint pcbActualToneCurveBufferSize
        );
        [DllImport("wincodec.dll")]
        public static extern int IWICDevelopRaw_GetToneCurve_Stub(
            IWICDevelopRaw This,
            out uint pcPoints,
            out IntPtr paPoints
        );
    }
}
