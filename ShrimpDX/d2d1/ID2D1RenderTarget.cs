// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class ID2D1RenderTarget: ID2D1Resource
    {
        static Guid s_uuid = new Guid("2cd90694-12e2-11dc-9fed-001143a055f9");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int CreateBitmap(
            D2D_SIZE_U size,
            IntPtr srcData,
            uint pitch,
            ref D2D1_BITMAP_PROPERTIES bitmapProperties,
            out ID2D1Bitmap bitmap
        ){
            var fp = GetFunctionPointer(4);
            if(m_CreateBitmapFunc==null) m_CreateBitmapFunc = (CreateBitmapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateBitmapFunc));
            bitmap = new ID2D1Bitmap();
            return m_CreateBitmapFunc(m_ptr, size, srcData, pitch, ref bitmapProperties, out bitmap.PtrForNew);
        }
        delegate int CreateBitmapFunc(IntPtr self, D2D_SIZE_U size, IntPtr srcData, uint pitch, ref D2D1_BITMAP_PROPERTIES bitmapProperties, out IntPtr bitmap);
        CreateBitmapFunc m_CreateBitmapFunc;

        public virtual int CreateBitmapFromWicBitmap(
            IWICBitmapSource wicBitmapSource,
            ref D2D1_BITMAP_PROPERTIES bitmapProperties,
            out ID2D1Bitmap bitmap
        ){
            var fp = GetFunctionPointer(5);
            if(m_CreateBitmapFromWicBitmapFunc==null) m_CreateBitmapFromWicBitmapFunc = (CreateBitmapFromWicBitmapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateBitmapFromWicBitmapFunc));
            bitmap = new ID2D1Bitmap();
            return m_CreateBitmapFromWicBitmapFunc(m_ptr, wicBitmapSource!=null ? wicBitmapSource.Ptr : IntPtr.Zero, ref bitmapProperties, out bitmap.PtrForNew);
        }
        delegate int CreateBitmapFromWicBitmapFunc(IntPtr self, IntPtr wicBitmapSource, ref D2D1_BITMAP_PROPERTIES bitmapProperties, out IntPtr bitmap);
        CreateBitmapFromWicBitmapFunc m_CreateBitmapFromWicBitmapFunc;

        public virtual int CreateSharedBitmap(
            ref Guid riid,
            IntPtr data,
            ref D2D1_BITMAP_PROPERTIES bitmapProperties,
            out ID2D1Bitmap bitmap
        ){
            var fp = GetFunctionPointer(6);
            if(m_CreateSharedBitmapFunc==null) m_CreateSharedBitmapFunc = (CreateSharedBitmapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateSharedBitmapFunc));
            bitmap = new ID2D1Bitmap();
            return m_CreateSharedBitmapFunc(m_ptr, ref riid, data, ref bitmapProperties, out bitmap.PtrForNew);
        }
        delegate int CreateSharedBitmapFunc(IntPtr self, ref Guid riid, IntPtr data, ref D2D1_BITMAP_PROPERTIES bitmapProperties, out IntPtr bitmap);
        CreateSharedBitmapFunc m_CreateSharedBitmapFunc;

        public virtual int CreateBitmapBrush(
            ID2D1Bitmap bitmap,
            ref D2D1_BITMAP_BRUSH_PROPERTIES bitmapBrushProperties,
            ref D2D1_BRUSH_PROPERTIES brushProperties,
            out ID2D1BitmapBrush bitmapBrush
        ){
            var fp = GetFunctionPointer(7);
            if(m_CreateBitmapBrushFunc==null) m_CreateBitmapBrushFunc = (CreateBitmapBrushFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateBitmapBrushFunc));
            bitmapBrush = new ID2D1BitmapBrush();
            return m_CreateBitmapBrushFunc(m_ptr, bitmap!=null ? bitmap.Ptr : IntPtr.Zero, ref bitmapBrushProperties, ref brushProperties, out bitmapBrush.PtrForNew);
        }
        delegate int CreateBitmapBrushFunc(IntPtr self, IntPtr bitmap, ref D2D1_BITMAP_BRUSH_PROPERTIES bitmapBrushProperties, ref D2D1_BRUSH_PROPERTIES brushProperties, out IntPtr bitmapBrush);
        CreateBitmapBrushFunc m_CreateBitmapBrushFunc;

        public virtual int CreateSolidColorBrush(
            ref System.Numerics.Vector4 color,
            ref D2D1_BRUSH_PROPERTIES brushProperties,
            out ID2D1SolidColorBrush solidColorBrush
        ){
            var fp = GetFunctionPointer(8);
            if(m_CreateSolidColorBrushFunc==null) m_CreateSolidColorBrushFunc = (CreateSolidColorBrushFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateSolidColorBrushFunc));
            solidColorBrush = new ID2D1SolidColorBrush();
            return m_CreateSolidColorBrushFunc(m_ptr, ref color, ref brushProperties, out solidColorBrush.PtrForNew);
        }
        delegate int CreateSolidColorBrushFunc(IntPtr self, ref System.Numerics.Vector4 color, ref D2D1_BRUSH_PROPERTIES brushProperties, out IntPtr solidColorBrush);
        CreateSolidColorBrushFunc m_CreateSolidColorBrushFunc;

        public virtual int CreateGradientStopCollection(
            ref D2D1_GRADIENT_STOP gradientStops,
            uint gradientStopsCount,
            D2D1_GAMMA colorInterpolationGamma,
            D2D1_EXTEND_MODE extendMode,
            out ID2D1GradientStopCollection gradientStopCollection
        ){
            var fp = GetFunctionPointer(9);
            if(m_CreateGradientStopCollectionFunc==null) m_CreateGradientStopCollectionFunc = (CreateGradientStopCollectionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateGradientStopCollectionFunc));
            gradientStopCollection = new ID2D1GradientStopCollection();
            return m_CreateGradientStopCollectionFunc(m_ptr, ref gradientStops, gradientStopsCount, colorInterpolationGamma, extendMode, out gradientStopCollection.PtrForNew);
        }
        delegate int CreateGradientStopCollectionFunc(IntPtr self, ref D2D1_GRADIENT_STOP gradientStops, uint gradientStopsCount, D2D1_GAMMA colorInterpolationGamma, D2D1_EXTEND_MODE extendMode, out IntPtr gradientStopCollection);
        CreateGradientStopCollectionFunc m_CreateGradientStopCollectionFunc;

        public virtual int CreateLinearGradientBrush(
            ref D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES linearGradientBrushProperties,
            ref D2D1_BRUSH_PROPERTIES brushProperties,
            ID2D1GradientStopCollection gradientStopCollection,
            out ID2D1LinearGradientBrush linearGradientBrush
        ){
            var fp = GetFunctionPointer(10);
            if(m_CreateLinearGradientBrushFunc==null) m_CreateLinearGradientBrushFunc = (CreateLinearGradientBrushFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateLinearGradientBrushFunc));
            linearGradientBrush = new ID2D1LinearGradientBrush();
            return m_CreateLinearGradientBrushFunc(m_ptr, ref linearGradientBrushProperties, ref brushProperties, gradientStopCollection!=null ? gradientStopCollection.Ptr : IntPtr.Zero, out linearGradientBrush.PtrForNew);
        }
        delegate int CreateLinearGradientBrushFunc(IntPtr self, ref D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES linearGradientBrushProperties, ref D2D1_BRUSH_PROPERTIES brushProperties, IntPtr gradientStopCollection, out IntPtr linearGradientBrush);
        CreateLinearGradientBrushFunc m_CreateLinearGradientBrushFunc;

        public virtual int CreateRadialGradientBrush(
            ref D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES radialGradientBrushProperties,
            ref D2D1_BRUSH_PROPERTIES brushProperties,
            ID2D1GradientStopCollection gradientStopCollection,
            out ID2D1RadialGradientBrush radialGradientBrush
        ){
            var fp = GetFunctionPointer(11);
            if(m_CreateRadialGradientBrushFunc==null) m_CreateRadialGradientBrushFunc = (CreateRadialGradientBrushFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateRadialGradientBrushFunc));
            radialGradientBrush = new ID2D1RadialGradientBrush();
            return m_CreateRadialGradientBrushFunc(m_ptr, ref radialGradientBrushProperties, ref brushProperties, gradientStopCollection!=null ? gradientStopCollection.Ptr : IntPtr.Zero, out radialGradientBrush.PtrForNew);
        }
        delegate int CreateRadialGradientBrushFunc(IntPtr self, ref D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES radialGradientBrushProperties, ref D2D1_BRUSH_PROPERTIES brushProperties, IntPtr gradientStopCollection, out IntPtr radialGradientBrush);
        CreateRadialGradientBrushFunc m_CreateRadialGradientBrushFunc;

        public virtual int CreateCompatibleRenderTarget(
            ref D2D_SIZE_F desiredSize,
            ref D2D_SIZE_U desiredPixelSize,
            ref D2D1_PIXEL_FORMAT desiredFormat,
            D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options,
            out ID2D1BitmapRenderTarget bitmapRenderTarget
        ){
            var fp = GetFunctionPointer(12);
            if(m_CreateCompatibleRenderTargetFunc==null) m_CreateCompatibleRenderTargetFunc = (CreateCompatibleRenderTargetFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateCompatibleRenderTargetFunc));
            bitmapRenderTarget = new ID2D1BitmapRenderTarget();
            return m_CreateCompatibleRenderTargetFunc(m_ptr, ref desiredSize, ref desiredPixelSize, ref desiredFormat, options, out bitmapRenderTarget.PtrForNew);
        }
        delegate int CreateCompatibleRenderTargetFunc(IntPtr self, ref D2D_SIZE_F desiredSize, ref D2D_SIZE_U desiredPixelSize, ref D2D1_PIXEL_FORMAT desiredFormat, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options, out IntPtr bitmapRenderTarget);
        CreateCompatibleRenderTargetFunc m_CreateCompatibleRenderTargetFunc;

        public virtual int CreateLayer(
            ref D2D_SIZE_F size,
            out ID2D1Layer layer
        ){
            var fp = GetFunctionPointer(13);
            if(m_CreateLayerFunc==null) m_CreateLayerFunc = (CreateLayerFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateLayerFunc));
            layer = new ID2D1Layer();
            return m_CreateLayerFunc(m_ptr, ref size, out layer.PtrForNew);
        }
        delegate int CreateLayerFunc(IntPtr self, ref D2D_SIZE_F size, out IntPtr layer);
        CreateLayerFunc m_CreateLayerFunc;

        public virtual int CreateMesh(
            out ID2D1Mesh mesh
        ){
            var fp = GetFunctionPointer(14);
            if(m_CreateMeshFunc==null) m_CreateMeshFunc = (CreateMeshFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateMeshFunc));
            mesh = new ID2D1Mesh();
            return m_CreateMeshFunc(m_ptr, out mesh.PtrForNew);
        }
        delegate int CreateMeshFunc(IntPtr self, out IntPtr mesh);
        CreateMeshFunc m_CreateMeshFunc;

        public virtual void DrawLine(
            System.Numerics.Vector2 point0,
            System.Numerics.Vector2 point1,
            ID2D1Brush brush,
            float strokeWidth,
            ID2D1StrokeStyle strokeStyle
        ){
            var fp = GetFunctionPointer(15);
            if(m_DrawLineFunc==null) m_DrawLineFunc = (DrawLineFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawLineFunc));
            
            m_DrawLineFunc(m_ptr, point0, point1, brush!=null ? brush.Ptr : IntPtr.Zero, strokeWidth, strokeStyle!=null ? strokeStyle.Ptr : IntPtr.Zero);
        }
        delegate void DrawLineFunc(IntPtr self, System.Numerics.Vector2 point0, System.Numerics.Vector2 point1, IntPtr brush, float strokeWidth, IntPtr strokeStyle);
        DrawLineFunc m_DrawLineFunc;

        public virtual void DrawRectangle(
            ref System.Numerics.Vector4 rect,
            ID2D1Brush brush,
            float strokeWidth,
            ID2D1StrokeStyle strokeStyle
        ){
            var fp = GetFunctionPointer(16);
            if(m_DrawRectangleFunc==null) m_DrawRectangleFunc = (DrawRectangleFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawRectangleFunc));
            
            m_DrawRectangleFunc(m_ptr, ref rect, brush!=null ? brush.Ptr : IntPtr.Zero, strokeWidth, strokeStyle!=null ? strokeStyle.Ptr : IntPtr.Zero);
        }
        delegate void DrawRectangleFunc(IntPtr self, ref System.Numerics.Vector4 rect, IntPtr brush, float strokeWidth, IntPtr strokeStyle);
        DrawRectangleFunc m_DrawRectangleFunc;

        public virtual void FillRectangle(
            ref System.Numerics.Vector4 rect,
            ID2D1Brush brush
        ){
            var fp = GetFunctionPointer(17);
            if(m_FillRectangleFunc==null) m_FillRectangleFunc = (FillRectangleFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FillRectangleFunc));
            
            m_FillRectangleFunc(m_ptr, ref rect, brush!=null ? brush.Ptr : IntPtr.Zero);
        }
        delegate void FillRectangleFunc(IntPtr self, ref System.Numerics.Vector4 rect, IntPtr brush);
        FillRectangleFunc m_FillRectangleFunc;

        public virtual void DrawRoundedRectangle(
            ref D2D1_ROUNDED_RECT roundedRect,
            ID2D1Brush brush,
            float strokeWidth,
            ID2D1StrokeStyle strokeStyle
        ){
            var fp = GetFunctionPointer(18);
            if(m_DrawRoundedRectangleFunc==null) m_DrawRoundedRectangleFunc = (DrawRoundedRectangleFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawRoundedRectangleFunc));
            
            m_DrawRoundedRectangleFunc(m_ptr, ref roundedRect, brush!=null ? brush.Ptr : IntPtr.Zero, strokeWidth, strokeStyle!=null ? strokeStyle.Ptr : IntPtr.Zero);
        }
        delegate void DrawRoundedRectangleFunc(IntPtr self, ref D2D1_ROUNDED_RECT roundedRect, IntPtr brush, float strokeWidth, IntPtr strokeStyle);
        DrawRoundedRectangleFunc m_DrawRoundedRectangleFunc;

        public virtual void FillRoundedRectangle(
            ref D2D1_ROUNDED_RECT roundedRect,
            ID2D1Brush brush
        ){
            var fp = GetFunctionPointer(19);
            if(m_FillRoundedRectangleFunc==null) m_FillRoundedRectangleFunc = (FillRoundedRectangleFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FillRoundedRectangleFunc));
            
            m_FillRoundedRectangleFunc(m_ptr, ref roundedRect, brush!=null ? brush.Ptr : IntPtr.Zero);
        }
        delegate void FillRoundedRectangleFunc(IntPtr self, ref D2D1_ROUNDED_RECT roundedRect, IntPtr brush);
        FillRoundedRectangleFunc m_FillRoundedRectangleFunc;

        public virtual void DrawEllipse(
            ref D2D1_ELLIPSE ellipse,
            ID2D1Brush brush,
            float strokeWidth,
            ID2D1StrokeStyle strokeStyle
        ){
            var fp = GetFunctionPointer(20);
            if(m_DrawEllipseFunc==null) m_DrawEllipseFunc = (DrawEllipseFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawEllipseFunc));
            
            m_DrawEllipseFunc(m_ptr, ref ellipse, brush!=null ? brush.Ptr : IntPtr.Zero, strokeWidth, strokeStyle!=null ? strokeStyle.Ptr : IntPtr.Zero);
        }
        delegate void DrawEllipseFunc(IntPtr self, ref D2D1_ELLIPSE ellipse, IntPtr brush, float strokeWidth, IntPtr strokeStyle);
        DrawEllipseFunc m_DrawEllipseFunc;

        public virtual void FillEllipse(
            ref D2D1_ELLIPSE ellipse,
            ID2D1Brush brush
        ){
            var fp = GetFunctionPointer(21);
            if(m_FillEllipseFunc==null) m_FillEllipseFunc = (FillEllipseFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FillEllipseFunc));
            
            m_FillEllipseFunc(m_ptr, ref ellipse, brush!=null ? brush.Ptr : IntPtr.Zero);
        }
        delegate void FillEllipseFunc(IntPtr self, ref D2D1_ELLIPSE ellipse, IntPtr brush);
        FillEllipseFunc m_FillEllipseFunc;

        public virtual void DrawGeometry(
            ID2D1Geometry geometry,
            ID2D1Brush brush,
            float strokeWidth,
            ID2D1StrokeStyle strokeStyle
        ){
            var fp = GetFunctionPointer(22);
            if(m_DrawGeometryFunc==null) m_DrawGeometryFunc = (DrawGeometryFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawGeometryFunc));
            
            m_DrawGeometryFunc(m_ptr, geometry!=null ? geometry.Ptr : IntPtr.Zero, brush!=null ? brush.Ptr : IntPtr.Zero, strokeWidth, strokeStyle!=null ? strokeStyle.Ptr : IntPtr.Zero);
        }
        delegate void DrawGeometryFunc(IntPtr self, IntPtr geometry, IntPtr brush, float strokeWidth, IntPtr strokeStyle);
        DrawGeometryFunc m_DrawGeometryFunc;

        public virtual void FillGeometry(
            ID2D1Geometry geometry,
            ID2D1Brush brush,
            ID2D1Brush opacityBrush
        ){
            var fp = GetFunctionPointer(23);
            if(m_FillGeometryFunc==null) m_FillGeometryFunc = (FillGeometryFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FillGeometryFunc));
            
            m_FillGeometryFunc(m_ptr, geometry!=null ? geometry.Ptr : IntPtr.Zero, brush!=null ? brush.Ptr : IntPtr.Zero, opacityBrush!=null ? opacityBrush.Ptr : IntPtr.Zero);
        }
        delegate void FillGeometryFunc(IntPtr self, IntPtr geometry, IntPtr brush, IntPtr opacityBrush);
        FillGeometryFunc m_FillGeometryFunc;

        public virtual void FillMesh(
            ID2D1Mesh mesh,
            ID2D1Brush brush
        ){
            var fp = GetFunctionPointer(24);
            if(m_FillMeshFunc==null) m_FillMeshFunc = (FillMeshFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FillMeshFunc));
            
            m_FillMeshFunc(m_ptr, mesh!=null ? mesh.Ptr : IntPtr.Zero, brush!=null ? brush.Ptr : IntPtr.Zero);
        }
        delegate void FillMeshFunc(IntPtr self, IntPtr mesh, IntPtr brush);
        FillMeshFunc m_FillMeshFunc;

        public virtual void FillOpacityMask(
            ID2D1Bitmap opacityMask,
            ID2D1Brush brush,
            D2D1_OPACITY_MASK_CONTENT content,
            ref System.Numerics.Vector4 destinationRectangle,
            ref System.Numerics.Vector4 sourceRectangle
        ){
            var fp = GetFunctionPointer(25);
            if(m_FillOpacityMaskFunc==null) m_FillOpacityMaskFunc = (FillOpacityMaskFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FillOpacityMaskFunc));
            
            m_FillOpacityMaskFunc(m_ptr, opacityMask!=null ? opacityMask.Ptr : IntPtr.Zero, brush!=null ? brush.Ptr : IntPtr.Zero, content, ref destinationRectangle, ref sourceRectangle);
        }
        delegate void FillOpacityMaskFunc(IntPtr self, IntPtr opacityMask, IntPtr brush, D2D1_OPACITY_MASK_CONTENT content, ref System.Numerics.Vector4 destinationRectangle, ref System.Numerics.Vector4 sourceRectangle);
        FillOpacityMaskFunc m_FillOpacityMaskFunc;

        public virtual void DrawBitmap(
            ID2D1Bitmap bitmap,
            ref System.Numerics.Vector4 destinationRectangle,
            float opacity,
            D2D1_BITMAP_INTERPOLATION_MODE interpolationMode,
            ref System.Numerics.Vector4 sourceRectangle
        ){
            var fp = GetFunctionPointer(26);
            if(m_DrawBitmapFunc==null) m_DrawBitmapFunc = (DrawBitmapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawBitmapFunc));
            
            m_DrawBitmapFunc(m_ptr, bitmap!=null ? bitmap.Ptr : IntPtr.Zero, ref destinationRectangle, opacity, interpolationMode, ref sourceRectangle);
        }
        delegate void DrawBitmapFunc(IntPtr self, IntPtr bitmap, ref System.Numerics.Vector4 destinationRectangle, float opacity, D2D1_BITMAP_INTERPOLATION_MODE interpolationMode, ref System.Numerics.Vector4 sourceRectangle);
        DrawBitmapFunc m_DrawBitmapFunc;

        public virtual void DrawText(
            ref ushort _string,
            uint stringLength,
            IDWriteTextFormat textFormat,
            ref System.Numerics.Vector4 layoutRect,
            ID2D1Brush defaultFillBrush,
            D2D1_DRAW_TEXT_OPTIONS options,
            DWRITE_MEASURING_MODE measuringMode
        ){
            var fp = GetFunctionPointer(27);
            if(m_DrawTextWFunc==null) m_DrawTextWFunc = (DrawTextWFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawTextWFunc));
            
            m_DrawTextWFunc(m_ptr, ref _string, stringLength, textFormat!=null ? textFormat.Ptr : IntPtr.Zero, ref layoutRect, defaultFillBrush!=null ? defaultFillBrush.Ptr : IntPtr.Zero, options, measuringMode);
        }
        delegate void DrawTextWFunc(IntPtr self, ref ushort _string, uint stringLength, IntPtr textFormat, ref System.Numerics.Vector4 layoutRect, IntPtr defaultFillBrush, D2D1_DRAW_TEXT_OPTIONS options, DWRITE_MEASURING_MODE measuringMode);
        DrawTextWFunc m_DrawTextWFunc;

        public virtual void DrawTextLayout(
            System.Numerics.Vector2 origin,
            IDWriteTextLayout textLayout,
            ID2D1Brush defaultFillBrush,
            D2D1_DRAW_TEXT_OPTIONS options
        ){
            var fp = GetFunctionPointer(28);
            if(m_DrawTextLayoutFunc==null) m_DrawTextLayoutFunc = (DrawTextLayoutFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawTextLayoutFunc));
            
            m_DrawTextLayoutFunc(m_ptr, origin, textLayout!=null ? textLayout.Ptr : IntPtr.Zero, defaultFillBrush!=null ? defaultFillBrush.Ptr : IntPtr.Zero, options);
        }
        delegate void DrawTextLayoutFunc(IntPtr self, System.Numerics.Vector2 origin, IntPtr textLayout, IntPtr defaultFillBrush, D2D1_DRAW_TEXT_OPTIONS options);
        DrawTextLayoutFunc m_DrawTextLayoutFunc;

        public virtual void DrawGlyphRun(
            System.Numerics.Vector2 baselineOrigin,
            ref DWRITE_GLYPH_RUN glyphRun,
            ID2D1Brush foregroundBrush,
            DWRITE_MEASURING_MODE measuringMode
        ){
            var fp = GetFunctionPointer(29);
            if(m_DrawGlyphRunFunc==null) m_DrawGlyphRunFunc = (DrawGlyphRunFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawGlyphRunFunc));
            
            m_DrawGlyphRunFunc(m_ptr, baselineOrigin, ref glyphRun, foregroundBrush!=null ? foregroundBrush.Ptr : IntPtr.Zero, measuringMode);
        }
        delegate void DrawGlyphRunFunc(IntPtr self, System.Numerics.Vector2 baselineOrigin, ref DWRITE_GLYPH_RUN glyphRun, IntPtr foregroundBrush, DWRITE_MEASURING_MODE measuringMode);
        DrawGlyphRunFunc m_DrawGlyphRunFunc;

        public virtual void SetTransform(
            ref System.Numerics.Matrix3x2 transform
        ){
            var fp = GetFunctionPointer(30);
            if(m_SetTransformFunc==null) m_SetTransformFunc = (SetTransformFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetTransformFunc));
            
            m_SetTransformFunc(m_ptr, ref transform);
        }
        delegate void SetTransformFunc(IntPtr self, ref System.Numerics.Matrix3x2 transform);
        SetTransformFunc m_SetTransformFunc;

        public virtual void GetTransform(
            out System.Numerics.Matrix3x2 transform
        ){
            var fp = GetFunctionPointer(31);
            if(m_GetTransformFunc==null) m_GetTransformFunc = (GetTransformFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTransformFunc));
            
            m_GetTransformFunc(m_ptr, out transform);
        }
        delegate void GetTransformFunc(IntPtr self, out System.Numerics.Matrix3x2 transform);
        GetTransformFunc m_GetTransformFunc;

        public virtual void SetAntialiasMode(
            D2D1_ANTIALIAS_MODE antialiasMode
        ){
            var fp = GetFunctionPointer(32);
            if(m_SetAntialiasModeFunc==null) m_SetAntialiasModeFunc = (SetAntialiasModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetAntialiasModeFunc));
            
            m_SetAntialiasModeFunc(m_ptr, antialiasMode);
        }
        delegate void SetAntialiasModeFunc(IntPtr self, D2D1_ANTIALIAS_MODE antialiasMode);
        SetAntialiasModeFunc m_SetAntialiasModeFunc;

        public virtual D2D1_ANTIALIAS_MODE GetAntialiasMode(
        ){
            var fp = GetFunctionPointer(33);
            if(m_GetAntialiasModeFunc==null) m_GetAntialiasModeFunc = (GetAntialiasModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetAntialiasModeFunc));
            
            return m_GetAntialiasModeFunc(m_ptr);
        }
        delegate D2D1_ANTIALIAS_MODE GetAntialiasModeFunc(IntPtr self);
        GetAntialiasModeFunc m_GetAntialiasModeFunc;

        public virtual void SetTextAntialiasMode(
            D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode
        ){
            var fp = GetFunctionPointer(34);
            if(m_SetTextAntialiasModeFunc==null) m_SetTextAntialiasModeFunc = (SetTextAntialiasModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetTextAntialiasModeFunc));
            
            m_SetTextAntialiasModeFunc(m_ptr, textAntialiasMode);
        }
        delegate void SetTextAntialiasModeFunc(IntPtr self, D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode);
        SetTextAntialiasModeFunc m_SetTextAntialiasModeFunc;

        public virtual D2D1_TEXT_ANTIALIAS_MODE GetTextAntialiasMode(
        ){
            var fp = GetFunctionPointer(35);
            if(m_GetTextAntialiasModeFunc==null) m_GetTextAntialiasModeFunc = (GetTextAntialiasModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTextAntialiasModeFunc));
            
            return m_GetTextAntialiasModeFunc(m_ptr);
        }
        delegate D2D1_TEXT_ANTIALIAS_MODE GetTextAntialiasModeFunc(IntPtr self);
        GetTextAntialiasModeFunc m_GetTextAntialiasModeFunc;

        public virtual void SetTextRenderingParams(
            IDWriteRenderingParams textRenderingParams
        ){
            var fp = GetFunctionPointer(36);
            if(m_SetTextRenderingParamsFunc==null) m_SetTextRenderingParamsFunc = (SetTextRenderingParamsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetTextRenderingParamsFunc));
            
            m_SetTextRenderingParamsFunc(m_ptr, textRenderingParams!=null ? textRenderingParams.Ptr : IntPtr.Zero);
        }
        delegate void SetTextRenderingParamsFunc(IntPtr self, IntPtr textRenderingParams);
        SetTextRenderingParamsFunc m_SetTextRenderingParamsFunc;

        public virtual void GetTextRenderingParams(
            out IDWriteRenderingParams textRenderingParams
        ){
            var fp = GetFunctionPointer(37);
            if(m_GetTextRenderingParamsFunc==null) m_GetTextRenderingParamsFunc = (GetTextRenderingParamsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTextRenderingParamsFunc));
            textRenderingParams = new IDWriteRenderingParams();
            m_GetTextRenderingParamsFunc(m_ptr, out textRenderingParams.PtrForNew);
        }
        delegate void GetTextRenderingParamsFunc(IntPtr self, out IntPtr textRenderingParams);
        GetTextRenderingParamsFunc m_GetTextRenderingParamsFunc;

        public virtual void SetTags(
            ulong tag1,
            ulong tag2
        ){
            var fp = GetFunctionPointer(38);
            if(m_SetTagsFunc==null) m_SetTagsFunc = (SetTagsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetTagsFunc));
            
            m_SetTagsFunc(m_ptr, tag1, tag2);
        }
        delegate void SetTagsFunc(IntPtr self, ulong tag1, ulong tag2);
        SetTagsFunc m_SetTagsFunc;

        public virtual void GetTags(
            out ulong tag1,
            out ulong tag2
        ){
            var fp = GetFunctionPointer(39);
            if(m_GetTagsFunc==null) m_GetTagsFunc = (GetTagsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTagsFunc));
            
            m_GetTagsFunc(m_ptr, out tag1, out tag2);
        }
        delegate void GetTagsFunc(IntPtr self, out ulong tag1, out ulong tag2);
        GetTagsFunc m_GetTagsFunc;

        public virtual void PushLayer(
            ref D2D1_LAYER_PARAMETERS layerParameters,
            ID2D1Layer layer
        ){
            var fp = GetFunctionPointer(40);
            if(m_PushLayerFunc==null) m_PushLayerFunc = (PushLayerFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PushLayerFunc));
            
            m_PushLayerFunc(m_ptr, ref layerParameters, layer!=null ? layer.Ptr : IntPtr.Zero);
        }
        delegate void PushLayerFunc(IntPtr self, ref D2D1_LAYER_PARAMETERS layerParameters, IntPtr layer);
        PushLayerFunc m_PushLayerFunc;

        public virtual void PopLayer(
        ){
            var fp = GetFunctionPointer(41);
            if(m_PopLayerFunc==null) m_PopLayerFunc = (PopLayerFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PopLayerFunc));
            
            m_PopLayerFunc(m_ptr);
        }
        delegate void PopLayerFunc(IntPtr self);
        PopLayerFunc m_PopLayerFunc;

        public virtual int Flush(
            out ulong tag1,
            out ulong tag2
        ){
            var fp = GetFunctionPointer(42);
            if(m_FlushFunc==null) m_FlushFunc = (FlushFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FlushFunc));
            
            return m_FlushFunc(m_ptr, out tag1, out tag2);
        }
        delegate int FlushFunc(IntPtr self, out ulong tag1, out ulong tag2);
        FlushFunc m_FlushFunc;

        public virtual void SaveDrawingState(
            ID2D1DrawingStateBlock drawingStateBlock
        ){
            var fp = GetFunctionPointer(43);
            if(m_SaveDrawingStateFunc==null) m_SaveDrawingStateFunc = (SaveDrawingStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SaveDrawingStateFunc));
            
            m_SaveDrawingStateFunc(m_ptr, drawingStateBlock!=null ? drawingStateBlock.Ptr : IntPtr.Zero);
        }
        delegate void SaveDrawingStateFunc(IntPtr self, IntPtr drawingStateBlock);
        SaveDrawingStateFunc m_SaveDrawingStateFunc;

        public virtual void RestoreDrawingState(
            ID2D1DrawingStateBlock drawingStateBlock
        ){
            var fp = GetFunctionPointer(44);
            if(m_RestoreDrawingStateFunc==null) m_RestoreDrawingStateFunc = (RestoreDrawingStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RestoreDrawingStateFunc));
            
            m_RestoreDrawingStateFunc(m_ptr, drawingStateBlock!=null ? drawingStateBlock.Ptr : IntPtr.Zero);
        }
        delegate void RestoreDrawingStateFunc(IntPtr self, IntPtr drawingStateBlock);
        RestoreDrawingStateFunc m_RestoreDrawingStateFunc;

        public virtual void PushAxisAlignedClip(
            ref System.Numerics.Vector4 clipRect,
            D2D1_ANTIALIAS_MODE antialiasMode
        ){
            var fp = GetFunctionPointer(45);
            if(m_PushAxisAlignedClipFunc==null) m_PushAxisAlignedClipFunc = (PushAxisAlignedClipFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PushAxisAlignedClipFunc));
            
            m_PushAxisAlignedClipFunc(m_ptr, ref clipRect, antialiasMode);
        }
        delegate void PushAxisAlignedClipFunc(IntPtr self, ref System.Numerics.Vector4 clipRect, D2D1_ANTIALIAS_MODE antialiasMode);
        PushAxisAlignedClipFunc m_PushAxisAlignedClipFunc;

        public virtual void PopAxisAlignedClip(
        ){
            var fp = GetFunctionPointer(46);
            if(m_PopAxisAlignedClipFunc==null) m_PopAxisAlignedClipFunc = (PopAxisAlignedClipFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PopAxisAlignedClipFunc));
            
            m_PopAxisAlignedClipFunc(m_ptr);
        }
        delegate void PopAxisAlignedClipFunc(IntPtr self);
        PopAxisAlignedClipFunc m_PopAxisAlignedClipFunc;

        public virtual void Clear(
            ref System.Numerics.Vector4 clearColor
        ){
            var fp = GetFunctionPointer(47);
            if(m_ClearFunc==null) m_ClearFunc = (ClearFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ClearFunc));
            
            m_ClearFunc(m_ptr, ref clearColor);
        }
        delegate void ClearFunc(IntPtr self, ref System.Numerics.Vector4 clearColor);
        ClearFunc m_ClearFunc;

        public virtual void BeginDraw(
        ){
            var fp = GetFunctionPointer(48);
            if(m_BeginDrawFunc==null) m_BeginDrawFunc = (BeginDrawFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(BeginDrawFunc));
            
            m_BeginDrawFunc(m_ptr);
        }
        delegate void BeginDrawFunc(IntPtr self);
        BeginDrawFunc m_BeginDrawFunc;

        public virtual int EndDraw(
            out ulong tag1,
            out ulong tag2
        ){
            var fp = GetFunctionPointer(49);
            if(m_EndDrawFunc==null) m_EndDrawFunc = (EndDrawFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(EndDrawFunc));
            
            return m_EndDrawFunc(m_ptr, out tag1, out tag2);
        }
        delegate int EndDrawFunc(IntPtr self, out ulong tag1, out ulong tag2);
        EndDrawFunc m_EndDrawFunc;

        public virtual D2D1_PIXEL_FORMAT GetPixelFormat(
        ){
            var fp = GetFunctionPointer(50);
            if(m_GetPixelFormatFunc==null) m_GetPixelFormatFunc = (GetPixelFormatFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPixelFormatFunc));
            
            return m_GetPixelFormatFunc(m_ptr);
        }
        delegate D2D1_PIXEL_FORMAT GetPixelFormatFunc(IntPtr self);
        GetPixelFormatFunc m_GetPixelFormatFunc;

        public virtual void SetDpi(
            float dpiX,
            float dpiY
        ){
            var fp = GetFunctionPointer(51);
            if(m_SetDpiFunc==null) m_SetDpiFunc = (SetDpiFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetDpiFunc));
            
            m_SetDpiFunc(m_ptr, dpiX, dpiY);
        }
        delegate void SetDpiFunc(IntPtr self, float dpiX, float dpiY);
        SetDpiFunc m_SetDpiFunc;

        public virtual void GetDpi(
            out float dpiX,
            out float dpiY
        ){
            var fp = GetFunctionPointer(52);
            if(m_GetDpiFunc==null) m_GetDpiFunc = (GetDpiFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDpiFunc));
            
            m_GetDpiFunc(m_ptr, out dpiX, out dpiY);
        }
        delegate void GetDpiFunc(IntPtr self, out float dpiX, out float dpiY);
        GetDpiFunc m_GetDpiFunc;

        public virtual D2D_SIZE_F GetSize(
        ){
            var fp = GetFunctionPointer(53);
            if(m_GetSizeFunc==null) m_GetSizeFunc = (GetSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetSizeFunc));
            
            return m_GetSizeFunc(m_ptr);
        }
        delegate D2D_SIZE_F GetSizeFunc(IntPtr self);
        GetSizeFunc m_GetSizeFunc;

        public virtual D2D_SIZE_U GetPixelSize(
        ){
            var fp = GetFunctionPointer(54);
            if(m_GetPixelSizeFunc==null) m_GetPixelSizeFunc = (GetPixelSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPixelSizeFunc));
            
            return m_GetPixelSizeFunc(m_ptr);
        }
        delegate D2D_SIZE_U GetPixelSizeFunc(IntPtr self);
        GetPixelSizeFunc m_GetPixelSizeFunc;

        public virtual uint GetMaximumBitmapSize(
        ){
            var fp = GetFunctionPointer(55);
            if(m_GetMaximumBitmapSizeFunc==null) m_GetMaximumBitmapSizeFunc = (GetMaximumBitmapSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMaximumBitmapSizeFunc));
            
            return m_GetMaximumBitmapSizeFunc(m_ptr);
        }
        delegate uint GetMaximumBitmapSizeFunc(IntPtr self);
        GetMaximumBitmapSizeFunc m_GetMaximumBitmapSizeFunc;

        public virtual int IsSupported(
            ref D2D1_RENDER_TARGET_PROPERTIES renderTargetProperties
        ){
            var fp = GetFunctionPointer(56);
            if(m_IsSupportedFunc==null) m_IsSupportedFunc = (IsSupportedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsSupportedFunc));
            
            return m_IsSupportedFunc(m_ptr, ref renderTargetProperties);
        }
        delegate int IsSupportedFunc(IntPtr self, ref D2D1_RENDER_TARGET_PROPERTIES renderTargetProperties);
        IsSupportedFunc m_IsSupportedFunc;

    }
}
