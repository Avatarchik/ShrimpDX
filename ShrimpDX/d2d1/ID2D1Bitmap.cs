// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class ID2D1Bitmap: ID2D1Image
    {
        static Guid s_uuid = new Guid("a2296057-ea42-4099-983b-539fb6505426");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual D2D_SIZE_F GetSize(
        ){
            var fp = GetFunctionPointer(4);
            if(m_GetSizeFunc==null) m_GetSizeFunc = (GetSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetSizeFunc));
            
            return m_GetSizeFunc(m_ptr);
        }
        delegate D2D_SIZE_F GetSizeFunc(IntPtr self);
        GetSizeFunc m_GetSizeFunc;

        public virtual D2D_SIZE_U GetPixelSize(
        ){
            var fp = GetFunctionPointer(5);
            if(m_GetPixelSizeFunc==null) m_GetPixelSizeFunc = (GetPixelSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPixelSizeFunc));
            
            return m_GetPixelSizeFunc(m_ptr);
        }
        delegate D2D_SIZE_U GetPixelSizeFunc(IntPtr self);
        GetPixelSizeFunc m_GetPixelSizeFunc;

        public virtual D2D1_PIXEL_FORMAT GetPixelFormat(
        ){
            var fp = GetFunctionPointer(6);
            if(m_GetPixelFormatFunc==null) m_GetPixelFormatFunc = (GetPixelFormatFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPixelFormatFunc));
            
            return m_GetPixelFormatFunc(m_ptr);
        }
        delegate D2D1_PIXEL_FORMAT GetPixelFormatFunc(IntPtr self);
        GetPixelFormatFunc m_GetPixelFormatFunc;

        public virtual void GetDpi(
            out float dpiX,
            out float dpiY
        ){
            var fp = GetFunctionPointer(7);
            if(m_GetDpiFunc==null) m_GetDpiFunc = (GetDpiFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDpiFunc));
            
            m_GetDpiFunc(m_ptr, out dpiX, out dpiY);
        }
        delegate void GetDpiFunc(IntPtr self, out float dpiX, out float dpiY);
        GetDpiFunc m_GetDpiFunc;

        public virtual int CopyFromBitmap(
            ref D2D_POINT_2U destPoint,
            ID2D1Bitmap bitmap,
            ref D2D_RECT_U srcRect
        ){
            var fp = GetFunctionPointer(8);
            if(m_CopyFromBitmapFunc==null) m_CopyFromBitmapFunc = (CopyFromBitmapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopyFromBitmapFunc));
            
            return m_CopyFromBitmapFunc(m_ptr, ref destPoint, bitmap!=null ? bitmap.Ptr : IntPtr.Zero, ref srcRect);
        }
        delegate int CopyFromBitmapFunc(IntPtr self, ref D2D_POINT_2U destPoint, IntPtr bitmap, ref D2D_RECT_U srcRect);
        CopyFromBitmapFunc m_CopyFromBitmapFunc;

        public virtual int CopyFromRenderTarget(
            ref D2D_POINT_2U destPoint,
            ID2D1RenderTarget renderTarget,
            ref D2D_RECT_U srcRect
        ){
            var fp = GetFunctionPointer(9);
            if(m_CopyFromRenderTargetFunc==null) m_CopyFromRenderTargetFunc = (CopyFromRenderTargetFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopyFromRenderTargetFunc));
            
            return m_CopyFromRenderTargetFunc(m_ptr, ref destPoint, renderTarget!=null ? renderTarget.Ptr : IntPtr.Zero, ref srcRect);
        }
        delegate int CopyFromRenderTargetFunc(IntPtr self, ref D2D_POINT_2U destPoint, IntPtr renderTarget, ref D2D_RECT_U srcRect);
        CopyFromRenderTargetFunc m_CopyFromRenderTargetFunc;

        public virtual int CopyFromMemory(
            ref D2D_RECT_U dstRect,
            IntPtr srcData,
            uint pitch
        ){
            var fp = GetFunctionPointer(10);
            if(m_CopyFromMemoryFunc==null) m_CopyFromMemoryFunc = (CopyFromMemoryFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopyFromMemoryFunc));
            
            return m_CopyFromMemoryFunc(m_ptr, ref dstRect, srcData, pitch);
        }
        delegate int CopyFromMemoryFunc(IntPtr self, ref D2D_RECT_U dstRect, IntPtr srcData, uint pitch);
        CopyFromMemoryFunc m_CopyFromMemoryFunc;

    }
}
