// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class ID2D1Geometry: ID2D1Resource
    {
        static Guid s_uuid = new Guid("2cd906a1-12e2-11dc-9fed-001143a055f9");
        public static new ref Guid IID =>ref s_uuid;
        public override ref Guid GetIID(){ return ref s_uuid; }
                
        public virtual int GetBounds(
            ref System.Numerics.Matrix3x2 worldTransform,
            out System.Numerics.Vector4 bounds
        ){
            var fp = GetFunctionPointer(4);
            if(m_GetBoundsFunc==null) m_GetBoundsFunc = (GetBoundsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetBoundsFunc));
            
            return m_GetBoundsFunc(m_ptr, ref worldTransform, out bounds);
        }
        delegate int GetBoundsFunc(IntPtr self, ref System.Numerics.Matrix3x2 worldTransform, out System.Numerics.Vector4 bounds);
        GetBoundsFunc m_GetBoundsFunc;

        public virtual int GetWidenedBounds(
            float strokeWidth,
            ID2D1StrokeStyle strokeStyle,
            ref System.Numerics.Matrix3x2 worldTransform,
            float flatteningTolerance,
            out System.Numerics.Vector4 bounds
        ){
            var fp = GetFunctionPointer(5);
            if(m_GetWidenedBoundsFunc==null) m_GetWidenedBoundsFunc = (GetWidenedBoundsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetWidenedBoundsFunc));
            
            return m_GetWidenedBoundsFunc(m_ptr, strokeWidth, strokeStyle!=null ? strokeStyle.Ptr : IntPtr.Zero, ref worldTransform, flatteningTolerance, out bounds);
        }
        delegate int GetWidenedBoundsFunc(IntPtr self, float strokeWidth, IntPtr strokeStyle, ref System.Numerics.Matrix3x2 worldTransform, float flatteningTolerance, out System.Numerics.Vector4 bounds);
        GetWidenedBoundsFunc m_GetWidenedBoundsFunc;

        public virtual int StrokeContainsPoint(
            System.Numerics.Vector2 point,
            float strokeWidth,
            ID2D1StrokeStyle strokeStyle,
            ref System.Numerics.Matrix3x2 worldTransform,
            float flatteningTolerance,
            out int contains
        ){
            var fp = GetFunctionPointer(6);
            if(m_StrokeContainsPointFunc==null) m_StrokeContainsPointFunc = (StrokeContainsPointFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(StrokeContainsPointFunc));
            
            return m_StrokeContainsPointFunc(m_ptr, point, strokeWidth, strokeStyle!=null ? strokeStyle.Ptr : IntPtr.Zero, ref worldTransform, flatteningTolerance, out contains);
        }
        delegate int StrokeContainsPointFunc(IntPtr self, System.Numerics.Vector2 point, float strokeWidth, IntPtr strokeStyle, ref System.Numerics.Matrix3x2 worldTransform, float flatteningTolerance, out int contains);
        StrokeContainsPointFunc m_StrokeContainsPointFunc;

        public virtual int FillContainsPoint(
            System.Numerics.Vector2 point,
            ref System.Numerics.Matrix3x2 worldTransform,
            float flatteningTolerance,
            out int contains
        ){
            var fp = GetFunctionPointer(7);
            if(m_FillContainsPointFunc==null) m_FillContainsPointFunc = (FillContainsPointFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FillContainsPointFunc));
            
            return m_FillContainsPointFunc(m_ptr, point, ref worldTransform, flatteningTolerance, out contains);
        }
        delegate int FillContainsPointFunc(IntPtr self, System.Numerics.Vector2 point, ref System.Numerics.Matrix3x2 worldTransform, float flatteningTolerance, out int contains);
        FillContainsPointFunc m_FillContainsPointFunc;

        public virtual int CompareWithGeometry(
            ID2D1Geometry inputGeometry,
            ref System.Numerics.Matrix3x2 inputGeometryTransform,
            float flatteningTolerance,
            out D2D1_GEOMETRY_RELATION relation
        ){
            var fp = GetFunctionPointer(8);
            if(m_CompareWithGeometryFunc==null) m_CompareWithGeometryFunc = (CompareWithGeometryFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CompareWithGeometryFunc));
            
            return m_CompareWithGeometryFunc(m_ptr, inputGeometry!=null ? inputGeometry.Ptr : IntPtr.Zero, ref inputGeometryTransform, flatteningTolerance, out relation);
        }
        delegate int CompareWithGeometryFunc(IntPtr self, IntPtr inputGeometry, ref System.Numerics.Matrix3x2 inputGeometryTransform, float flatteningTolerance, out D2D1_GEOMETRY_RELATION relation);
        CompareWithGeometryFunc m_CompareWithGeometryFunc;

        public virtual int Simplify(
            D2D1_GEOMETRY_SIMPLIFICATION_OPTION simplificationOption,
            ref System.Numerics.Matrix3x2 worldTransform,
            float flatteningTolerance,
            ID2D1SimplifiedGeometrySink geometrySink
        ){
            var fp = GetFunctionPointer(9);
            if(m_SimplifyFunc==null) m_SimplifyFunc = (SimplifyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SimplifyFunc));
            
            return m_SimplifyFunc(m_ptr, simplificationOption, ref worldTransform, flatteningTolerance, geometrySink!=null ? geometrySink.Ptr : IntPtr.Zero);
        }
        delegate int SimplifyFunc(IntPtr self, D2D1_GEOMETRY_SIMPLIFICATION_OPTION simplificationOption, ref System.Numerics.Matrix3x2 worldTransform, float flatteningTolerance, IntPtr geometrySink);
        SimplifyFunc m_SimplifyFunc;

        public virtual int Tessellate(
            ref System.Numerics.Matrix3x2 worldTransform,
            float flatteningTolerance,
            ID2D1TessellationSink tessellationSink
        ){
            var fp = GetFunctionPointer(10);
            if(m_TessellateFunc==null) m_TessellateFunc = (TessellateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(TessellateFunc));
            
            return m_TessellateFunc(m_ptr, ref worldTransform, flatteningTolerance, tessellationSink!=null ? tessellationSink.Ptr : IntPtr.Zero);
        }
        delegate int TessellateFunc(IntPtr self, ref System.Numerics.Matrix3x2 worldTransform, float flatteningTolerance, IntPtr tessellationSink);
        TessellateFunc m_TessellateFunc;

        public virtual int CombineWithGeometry(
            ID2D1Geometry inputGeometry,
            D2D1_COMBINE_MODE combineMode,
            ref System.Numerics.Matrix3x2 inputGeometryTransform,
            float flatteningTolerance,
            ID2D1SimplifiedGeometrySink geometrySink
        ){
            var fp = GetFunctionPointer(11);
            if(m_CombineWithGeometryFunc==null) m_CombineWithGeometryFunc = (CombineWithGeometryFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CombineWithGeometryFunc));
            
            return m_CombineWithGeometryFunc(m_ptr, inputGeometry!=null ? inputGeometry.Ptr : IntPtr.Zero, combineMode, ref inputGeometryTransform, flatteningTolerance, geometrySink!=null ? geometrySink.Ptr : IntPtr.Zero);
        }
        delegate int CombineWithGeometryFunc(IntPtr self, IntPtr inputGeometry, D2D1_COMBINE_MODE combineMode, ref System.Numerics.Matrix3x2 inputGeometryTransform, float flatteningTolerance, IntPtr geometrySink);
        CombineWithGeometryFunc m_CombineWithGeometryFunc;

        public virtual int Outline(
            ref System.Numerics.Matrix3x2 worldTransform,
            float flatteningTolerance,
            ID2D1SimplifiedGeometrySink geometrySink
        ){
            var fp = GetFunctionPointer(12);
            if(m_OutlineFunc==null) m_OutlineFunc = (OutlineFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OutlineFunc));
            
            return m_OutlineFunc(m_ptr, ref worldTransform, flatteningTolerance, geometrySink!=null ? geometrySink.Ptr : IntPtr.Zero);
        }
        delegate int OutlineFunc(IntPtr self, ref System.Numerics.Matrix3x2 worldTransform, float flatteningTolerance, IntPtr geometrySink);
        OutlineFunc m_OutlineFunc;

        public virtual int ComputeArea(
            ref System.Numerics.Matrix3x2 worldTransform,
            float flatteningTolerance,
            out float area
        ){
            var fp = GetFunctionPointer(13);
            if(m_ComputeAreaFunc==null) m_ComputeAreaFunc = (ComputeAreaFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ComputeAreaFunc));
            
            return m_ComputeAreaFunc(m_ptr, ref worldTransform, flatteningTolerance, out area);
        }
        delegate int ComputeAreaFunc(IntPtr self, ref System.Numerics.Matrix3x2 worldTransform, float flatteningTolerance, out float area);
        ComputeAreaFunc m_ComputeAreaFunc;

        public virtual int ComputeLength(
            ref System.Numerics.Matrix3x2 worldTransform,
            float flatteningTolerance,
            out float length
        ){
            var fp = GetFunctionPointer(14);
            if(m_ComputeLengthFunc==null) m_ComputeLengthFunc = (ComputeLengthFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ComputeLengthFunc));
            
            return m_ComputeLengthFunc(m_ptr, ref worldTransform, flatteningTolerance, out length);
        }
        delegate int ComputeLengthFunc(IntPtr self, ref System.Numerics.Matrix3x2 worldTransform, float flatteningTolerance, out float length);
        ComputeLengthFunc m_ComputeLengthFunc;

        public virtual int ComputePointAtLength(
            float length,
            ref System.Numerics.Matrix3x2 worldTransform,
            float flatteningTolerance,
            out System.Numerics.Vector2 point,
            out System.Numerics.Vector2 unitTangentVector
        ){
            var fp = GetFunctionPointer(15);
            if(m_ComputePointAtLengthFunc==null) m_ComputePointAtLengthFunc = (ComputePointAtLengthFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ComputePointAtLengthFunc));
            
            return m_ComputePointAtLengthFunc(m_ptr, length, ref worldTransform, flatteningTolerance, out point, out unitTangentVector);
        }
        delegate int ComputePointAtLengthFunc(IntPtr self, float length, ref System.Numerics.Matrix3x2 worldTransform, float flatteningTolerance, out System.Numerics.Vector2 point, out System.Numerics.Vector2 unitTangentVector);
        ComputePointAtLengthFunc m_ComputePointAtLengthFunc;

        public virtual int Widen(
            float strokeWidth,
            ID2D1StrokeStyle strokeStyle,
            ref System.Numerics.Matrix3x2 worldTransform,
            float flatteningTolerance,
            ID2D1SimplifiedGeometrySink geometrySink
        ){
            var fp = GetFunctionPointer(16);
            if(m_WidenFunc==null) m_WidenFunc = (WidenFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(WidenFunc));
            
            return m_WidenFunc(m_ptr, strokeWidth, strokeStyle!=null ? strokeStyle.Ptr : IntPtr.Zero, ref worldTransform, flatteningTolerance, geometrySink!=null ? geometrySink.Ptr : IntPtr.Zero);
        }
        delegate int WidenFunc(IntPtr self, float strokeWidth, IntPtr strokeStyle, ref System.Numerics.Matrix3x2 worldTransform, float flatteningTolerance, IntPtr geometrySink);
        WidenFunc m_WidenFunc;

    }
}
