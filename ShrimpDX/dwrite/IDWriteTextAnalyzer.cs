// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class IDWriteTextAnalyzer: IUnknown
    {
        static Guid s_uuid = new Guid("b7e6163e-7f46-43b4-84b3-e4e6249c365d");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int AnalyzeScript(
            IDWriteTextAnalysisSource analysisSource,
            uint textPosition,
            uint textLength,
            IDWriteTextAnalysisSink analysisSink
        ){
            var fp = GetFunctionPointer(3);
            if(m_AnalyzeScriptFunc==null) m_AnalyzeScriptFunc = (AnalyzeScriptFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AnalyzeScriptFunc));
            
            return m_AnalyzeScriptFunc(m_ptr, analysisSource!=null ? analysisSource.Ptr : IntPtr.Zero, textPosition, textLength, analysisSink!=null ? analysisSink.Ptr : IntPtr.Zero);
        }
        delegate int AnalyzeScriptFunc(IntPtr self, IntPtr analysisSource, uint textPosition, uint textLength, IntPtr analysisSink);
        AnalyzeScriptFunc m_AnalyzeScriptFunc;

        public virtual int AnalyzeBidi(
            IDWriteTextAnalysisSource analysisSource,
            uint textPosition,
            uint textLength,
            IDWriteTextAnalysisSink analysisSink
        ){
            var fp = GetFunctionPointer(4);
            if(m_AnalyzeBidiFunc==null) m_AnalyzeBidiFunc = (AnalyzeBidiFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AnalyzeBidiFunc));
            
            return m_AnalyzeBidiFunc(m_ptr, analysisSource!=null ? analysisSource.Ptr : IntPtr.Zero, textPosition, textLength, analysisSink!=null ? analysisSink.Ptr : IntPtr.Zero);
        }
        delegate int AnalyzeBidiFunc(IntPtr self, IntPtr analysisSource, uint textPosition, uint textLength, IntPtr analysisSink);
        AnalyzeBidiFunc m_AnalyzeBidiFunc;

        public virtual int AnalyzeNumberSubstitution(
            IDWriteTextAnalysisSource analysisSource,
            uint textPosition,
            uint textLength,
            IDWriteTextAnalysisSink analysisSink
        ){
            var fp = GetFunctionPointer(5);
            if(m_AnalyzeNumberSubstitutionFunc==null) m_AnalyzeNumberSubstitutionFunc = (AnalyzeNumberSubstitutionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AnalyzeNumberSubstitutionFunc));
            
            return m_AnalyzeNumberSubstitutionFunc(m_ptr, analysisSource!=null ? analysisSource.Ptr : IntPtr.Zero, textPosition, textLength, analysisSink!=null ? analysisSink.Ptr : IntPtr.Zero);
        }
        delegate int AnalyzeNumberSubstitutionFunc(IntPtr self, IntPtr analysisSource, uint textPosition, uint textLength, IntPtr analysisSink);
        AnalyzeNumberSubstitutionFunc m_AnalyzeNumberSubstitutionFunc;

        public virtual int AnalyzeLineBreakpoints(
            IDWriteTextAnalysisSource analysisSource,
            uint textPosition,
            uint textLength,
            IDWriteTextAnalysisSink analysisSink
        ){
            var fp = GetFunctionPointer(6);
            if(m_AnalyzeLineBreakpointsFunc==null) m_AnalyzeLineBreakpointsFunc = (AnalyzeLineBreakpointsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AnalyzeLineBreakpointsFunc));
            
            return m_AnalyzeLineBreakpointsFunc(m_ptr, analysisSource!=null ? analysisSource.Ptr : IntPtr.Zero, textPosition, textLength, analysisSink!=null ? analysisSink.Ptr : IntPtr.Zero);
        }
        delegate int AnalyzeLineBreakpointsFunc(IntPtr self, IntPtr analysisSource, uint textPosition, uint textLength, IntPtr analysisSink);
        AnalyzeLineBreakpointsFunc m_AnalyzeLineBreakpointsFunc;

        public virtual int GetGlyphs(
            ref ushort textString,
            uint textLength,
            IDWriteFontFace fontFace,
            int isSideways,
            int isRightToLeft,
            ref DWRITE_SCRIPT_ANALYSIS scriptAnalysis,
            ref ushort localeName,
            IDWriteNumberSubstitution numberSubstitution,
            ref IntPtr features,
            ref uint featureRangeLengths,
            uint featureRanges,
            uint maxGlyphCount,
            out ushort clusterMap,
            out DWRITE_SHAPING_TEXT_PROPERTIES textProps,
            out ushort glyphIndices,
            out DWRITE_SHAPING_GLYPH_PROPERTIES glyphProps,
            out uint actualGlyphCount
        ){
            var fp = GetFunctionPointer(7);
            if(m_GetGlyphsFunc==null) m_GetGlyphsFunc = (GetGlyphsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetGlyphsFunc));
            
            return m_GetGlyphsFunc(m_ptr, ref textString, textLength, fontFace!=null ? fontFace.Ptr : IntPtr.Zero, isSideways, isRightToLeft, ref scriptAnalysis, ref localeName, numberSubstitution!=null ? numberSubstitution.Ptr : IntPtr.Zero, ref features, ref featureRangeLengths, featureRanges, maxGlyphCount, out clusterMap, out textProps, out glyphIndices, out glyphProps, out actualGlyphCount);
        }
        delegate int GetGlyphsFunc(IntPtr self, ref ushort textString, uint textLength, IntPtr fontFace, int isSideways, int isRightToLeft, ref DWRITE_SCRIPT_ANALYSIS scriptAnalysis, ref ushort localeName, IntPtr numberSubstitution, ref IntPtr features, ref uint featureRangeLengths, uint featureRanges, uint maxGlyphCount, out ushort clusterMap, out DWRITE_SHAPING_TEXT_PROPERTIES textProps, out ushort glyphIndices, out DWRITE_SHAPING_GLYPH_PROPERTIES glyphProps, out uint actualGlyphCount);
        GetGlyphsFunc m_GetGlyphsFunc;

        public virtual int GetGlyphPlacements(
            ref ushort textString,
            ref ushort clusterMap,
            out DWRITE_SHAPING_TEXT_PROPERTIES textProps,
            uint textLength,
            ref ushort glyphIndices,
            ref DWRITE_SHAPING_GLYPH_PROPERTIES glyphProps,
            uint glyphCount,
            IDWriteFontFace fontFace,
            float fontEmSize,
            int isSideways,
            int isRightToLeft,
            ref DWRITE_SCRIPT_ANALYSIS scriptAnalysis,
            ref ushort localeName,
            ref IntPtr features,
            ref uint featureRangeLengths,
            uint featureRanges,
            out float glyphAdvances,
            out DWRITE_GLYPH_OFFSET glyphOffsets
        ){
            var fp = GetFunctionPointer(8);
            if(m_GetGlyphPlacementsFunc==null) m_GetGlyphPlacementsFunc = (GetGlyphPlacementsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetGlyphPlacementsFunc));
            
            return m_GetGlyphPlacementsFunc(m_ptr, ref textString, ref clusterMap, out textProps, textLength, ref glyphIndices, ref glyphProps, glyphCount, fontFace!=null ? fontFace.Ptr : IntPtr.Zero, fontEmSize, isSideways, isRightToLeft, ref scriptAnalysis, ref localeName, ref features, ref featureRangeLengths, featureRanges, out glyphAdvances, out glyphOffsets);
        }
        delegate int GetGlyphPlacementsFunc(IntPtr self, ref ushort textString, ref ushort clusterMap, out DWRITE_SHAPING_TEXT_PROPERTIES textProps, uint textLength, ref ushort glyphIndices, ref DWRITE_SHAPING_GLYPH_PROPERTIES glyphProps, uint glyphCount, IntPtr fontFace, float fontEmSize, int isSideways, int isRightToLeft, ref DWRITE_SCRIPT_ANALYSIS scriptAnalysis, ref ushort localeName, ref IntPtr features, ref uint featureRangeLengths, uint featureRanges, out float glyphAdvances, out DWRITE_GLYPH_OFFSET glyphOffsets);
        GetGlyphPlacementsFunc m_GetGlyphPlacementsFunc;

        public virtual int GetGdiCompatibleGlyphPlacements(
            ref ushort textString,
            ref ushort clusterMap,
            out DWRITE_SHAPING_TEXT_PROPERTIES textProps,
            uint textLength,
            ref ushort glyphIndices,
            ref DWRITE_SHAPING_GLYPH_PROPERTIES glyphProps,
            uint glyphCount,
            IDWriteFontFace fontFace,
            float fontEmSize,
            float pixelsPerDip,
            ref DWRITE_MATRIX transform,
            int useGdiNatural,
            int isSideways,
            int isRightToLeft,
            ref DWRITE_SCRIPT_ANALYSIS scriptAnalysis,
            ref ushort localeName,
            ref IntPtr features,
            ref uint featureRangeLengths,
            uint featureRanges,
            out float glyphAdvances,
            out DWRITE_GLYPH_OFFSET glyphOffsets
        ){
            var fp = GetFunctionPointer(9);
            if(m_GetGdiCompatibleGlyphPlacementsFunc==null) m_GetGdiCompatibleGlyphPlacementsFunc = (GetGdiCompatibleGlyphPlacementsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetGdiCompatibleGlyphPlacementsFunc));
            
            return m_GetGdiCompatibleGlyphPlacementsFunc(m_ptr, ref textString, ref clusterMap, out textProps, textLength, ref glyphIndices, ref glyphProps, glyphCount, fontFace!=null ? fontFace.Ptr : IntPtr.Zero, fontEmSize, pixelsPerDip, ref transform, useGdiNatural, isSideways, isRightToLeft, ref scriptAnalysis, ref localeName, ref features, ref featureRangeLengths, featureRanges, out glyphAdvances, out glyphOffsets);
        }
        delegate int GetGdiCompatibleGlyphPlacementsFunc(IntPtr self, ref ushort textString, ref ushort clusterMap, out DWRITE_SHAPING_TEXT_PROPERTIES textProps, uint textLength, ref ushort glyphIndices, ref DWRITE_SHAPING_GLYPH_PROPERTIES glyphProps, uint glyphCount, IntPtr fontFace, float fontEmSize, float pixelsPerDip, ref DWRITE_MATRIX transform, int useGdiNatural, int isSideways, int isRightToLeft, ref DWRITE_SCRIPT_ANALYSIS scriptAnalysis, ref ushort localeName, ref IntPtr features, ref uint featureRangeLengths, uint featureRanges, out float glyphAdvances, out DWRITE_GLYPH_OFFSET glyphOffsets);
        GetGdiCompatibleGlyphPlacementsFunc m_GetGdiCompatibleGlyphPlacementsFunc;

    }
}
