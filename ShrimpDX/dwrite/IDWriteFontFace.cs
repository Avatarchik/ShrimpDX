// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class IDWriteFontFace: IUnknown
    {
        static Guid s_uuid = new Guid("5f49804d-7024-4d43-bfa9-d25984f53849");
        public static new ref Guid IID =>ref s_uuid;
        public override ref Guid GetIID(){ return ref s_uuid; }
                
        public virtual DWRITE_FONT_FACE_TYPE GetComType(
        ){
            var fp = GetFunctionPointer(3);
            if(m_GetTypeFunc==null) m_GetTypeFunc = (GetTypeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypeFunc));
            
            return m_GetTypeFunc(m_ptr);
        }
        delegate DWRITE_FONT_FACE_TYPE GetTypeFunc(IntPtr self);
        GetTypeFunc m_GetTypeFunc;

        public virtual int GetFiles(
            out uint numberOfFiles,
            out IDWriteFontFile fontFiles
        ){
            var fp = GetFunctionPointer(4);
            if(m_GetFilesFunc==null) m_GetFilesFunc = (GetFilesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFilesFunc));
            fontFiles = new IDWriteFontFile();
            return m_GetFilesFunc(m_ptr, out numberOfFiles, out fontFiles.PtrForNew);
        }
        delegate int GetFilesFunc(IntPtr self, out uint numberOfFiles, out IntPtr fontFiles);
        GetFilesFunc m_GetFilesFunc;

        public virtual uint GetIndex(
        ){
            var fp = GetFunctionPointer(5);
            if(m_GetIndexFunc==null) m_GetIndexFunc = (GetIndexFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetIndexFunc));
            
            return m_GetIndexFunc(m_ptr);
        }
        delegate uint GetIndexFunc(IntPtr self);
        GetIndexFunc m_GetIndexFunc;

        public virtual DWRITE_FONT_SIMULATIONS GetSimulations(
        ){
            var fp = GetFunctionPointer(6);
            if(m_GetSimulationsFunc==null) m_GetSimulationsFunc = (GetSimulationsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetSimulationsFunc));
            
            return m_GetSimulationsFunc(m_ptr);
        }
        delegate DWRITE_FONT_SIMULATIONS GetSimulationsFunc(IntPtr self);
        GetSimulationsFunc m_GetSimulationsFunc;

        public virtual int IsSymbolFont(
        ){
            var fp = GetFunctionPointer(7);
            if(m_IsSymbolFontFunc==null) m_IsSymbolFontFunc = (IsSymbolFontFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsSymbolFontFunc));
            
            return m_IsSymbolFontFunc(m_ptr);
        }
        delegate int IsSymbolFontFunc(IntPtr self);
        IsSymbolFontFunc m_IsSymbolFontFunc;

        public virtual void GetMetrics(
            out DWRITE_FONT_METRICS fontFaceMetrics
        ){
            var fp = GetFunctionPointer(8);
            if(m_GetMetricsFunc==null) m_GetMetricsFunc = (GetMetricsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMetricsFunc));
            
            m_GetMetricsFunc(m_ptr, out fontFaceMetrics);
        }
        delegate void GetMetricsFunc(IntPtr self, out DWRITE_FONT_METRICS fontFaceMetrics);
        GetMetricsFunc m_GetMetricsFunc;

        public virtual ushort GetGlyphCount(
        ){
            var fp = GetFunctionPointer(9);
            if(m_GetGlyphCountFunc==null) m_GetGlyphCountFunc = (GetGlyphCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetGlyphCountFunc));
            
            return m_GetGlyphCountFunc(m_ptr);
        }
        delegate ushort GetGlyphCountFunc(IntPtr self);
        GetGlyphCountFunc m_GetGlyphCountFunc;

        public virtual int GetDesignGlyphMetrics(
            ref ushort glyphIndices,
            uint glyphCount,
            out DWRITE_GLYPH_METRICS glyphMetrics,
            int isSideways
        ){
            var fp = GetFunctionPointer(10);
            if(m_GetDesignGlyphMetricsFunc==null) m_GetDesignGlyphMetricsFunc = (GetDesignGlyphMetricsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDesignGlyphMetricsFunc));
            
            return m_GetDesignGlyphMetricsFunc(m_ptr, ref glyphIndices, glyphCount, out glyphMetrics, isSideways);
        }
        delegate int GetDesignGlyphMetricsFunc(IntPtr self, ref ushort glyphIndices, uint glyphCount, out DWRITE_GLYPH_METRICS glyphMetrics, int isSideways);
        GetDesignGlyphMetricsFunc m_GetDesignGlyphMetricsFunc;

        public virtual int GetGlyphIndicesW(
            ref uint codePoints,
            uint codePointCount,
            out ushort glyphIndices
        ){
            var fp = GetFunctionPointer(11);
            if(m_GetGlyphIndicesWFunc==null) m_GetGlyphIndicesWFunc = (GetGlyphIndicesWFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetGlyphIndicesWFunc));
            
            return m_GetGlyphIndicesWFunc(m_ptr, ref codePoints, codePointCount, out glyphIndices);
        }
        delegate int GetGlyphIndicesWFunc(IntPtr self, ref uint codePoints, uint codePointCount, out ushort glyphIndices);
        GetGlyphIndicesWFunc m_GetGlyphIndicesWFunc;

        public virtual int TryGetFontTable(
            uint openTypeTableTag,
            ref IntPtr tableData,
            out uint tableSize,
            out IntPtr tableContext,
            out int exists
        ){
            var fp = GetFunctionPointer(12);
            if(m_TryGetFontTableFunc==null) m_TryGetFontTableFunc = (TryGetFontTableFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(TryGetFontTableFunc));
            
            return m_TryGetFontTableFunc(m_ptr, openTypeTableTag, ref tableData, out tableSize, out tableContext, out exists);
        }
        delegate int TryGetFontTableFunc(IntPtr self, uint openTypeTableTag, ref IntPtr tableData, out uint tableSize, out IntPtr tableContext, out int exists);
        TryGetFontTableFunc m_TryGetFontTableFunc;

        public virtual void ReleaseFontTable(
            IntPtr tableContext
        ){
            var fp = GetFunctionPointer(13);
            if(m_ReleaseFontTableFunc==null) m_ReleaseFontTableFunc = (ReleaseFontTableFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ReleaseFontTableFunc));
            
            m_ReleaseFontTableFunc(m_ptr, tableContext);
        }
        delegate void ReleaseFontTableFunc(IntPtr self, IntPtr tableContext);
        ReleaseFontTableFunc m_ReleaseFontTableFunc;

        public virtual int GetGlyphRunOutline(
            float emSize,
            ref ushort glyphIndices,
            ref float glyphAdvances,
            ref DWRITE_GLYPH_OFFSET glyphOffsets,
            uint glyphCount,
            int isSideways,
            int isRightToLeft,
            ID2D1SimplifiedGeometrySink geometrySink
        ){
            var fp = GetFunctionPointer(14);
            if(m_GetGlyphRunOutlineFunc==null) m_GetGlyphRunOutlineFunc = (GetGlyphRunOutlineFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetGlyphRunOutlineFunc));
            
            return m_GetGlyphRunOutlineFunc(m_ptr, emSize, ref glyphIndices, ref glyphAdvances, ref glyphOffsets, glyphCount, isSideways, isRightToLeft, geometrySink!=null ? geometrySink.Ptr : IntPtr.Zero);
        }
        delegate int GetGlyphRunOutlineFunc(IntPtr self, float emSize, ref ushort glyphIndices, ref float glyphAdvances, ref DWRITE_GLYPH_OFFSET glyphOffsets, uint glyphCount, int isSideways, int isRightToLeft, IntPtr geometrySink);
        GetGlyphRunOutlineFunc m_GetGlyphRunOutlineFunc;

        public virtual int GetRecommendedRenderingMode(
            float emSize,
            float pixelsPerDip,
            DWRITE_MEASURING_MODE measuringMode,
            IDWriteRenderingParams renderingParams,
            out DWRITE_RENDERING_MODE renderingMode
        ){
            var fp = GetFunctionPointer(15);
            if(m_GetRecommendedRenderingModeFunc==null) m_GetRecommendedRenderingModeFunc = (GetRecommendedRenderingModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetRecommendedRenderingModeFunc));
            
            return m_GetRecommendedRenderingModeFunc(m_ptr, emSize, pixelsPerDip, measuringMode, renderingParams!=null ? renderingParams.Ptr : IntPtr.Zero, out renderingMode);
        }
        delegate int GetRecommendedRenderingModeFunc(IntPtr self, float emSize, float pixelsPerDip, DWRITE_MEASURING_MODE measuringMode, IntPtr renderingParams, out DWRITE_RENDERING_MODE renderingMode);
        GetRecommendedRenderingModeFunc m_GetRecommendedRenderingModeFunc;

        public virtual int GetGdiCompatibleMetrics(
            float emSize,
            float pixelsPerDip,
            ref DWRITE_MATRIX transform,
            out DWRITE_FONT_METRICS fontFaceMetrics
        ){
            var fp = GetFunctionPointer(16);
            if(m_GetGdiCompatibleMetricsFunc==null) m_GetGdiCompatibleMetricsFunc = (GetGdiCompatibleMetricsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetGdiCompatibleMetricsFunc));
            
            return m_GetGdiCompatibleMetricsFunc(m_ptr, emSize, pixelsPerDip, ref transform, out fontFaceMetrics);
        }
        delegate int GetGdiCompatibleMetricsFunc(IntPtr self, float emSize, float pixelsPerDip, ref DWRITE_MATRIX transform, out DWRITE_FONT_METRICS fontFaceMetrics);
        GetGdiCompatibleMetricsFunc m_GetGdiCompatibleMetricsFunc;

        public virtual int GetGdiCompatibleGlyphMetrics(
            float emSize,
            float pixelsPerDip,
            ref DWRITE_MATRIX transform,
            int useGdiNatural,
            ref ushort glyphIndices,
            uint glyphCount,
            out DWRITE_GLYPH_METRICS glyphMetrics,
            int isSideways
        ){
            var fp = GetFunctionPointer(17);
            if(m_GetGdiCompatibleGlyphMetricsFunc==null) m_GetGdiCompatibleGlyphMetricsFunc = (GetGdiCompatibleGlyphMetricsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetGdiCompatibleGlyphMetricsFunc));
            
            return m_GetGdiCompatibleGlyphMetricsFunc(m_ptr, emSize, pixelsPerDip, ref transform, useGdiNatural, ref glyphIndices, glyphCount, out glyphMetrics, isSideways);
        }
        delegate int GetGdiCompatibleGlyphMetricsFunc(IntPtr self, float emSize, float pixelsPerDip, ref DWRITE_MATRIX transform, int useGdiNatural, ref ushort glyphIndices, uint glyphCount, out DWRITE_GLYPH_METRICS glyphMetrics, int isSideways);
        GetGdiCompatibleGlyphMetricsFunc m_GetGdiCompatibleGlyphMetricsFunc;

    }
}
