// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class IDWriteInlineObject: IUnknown
    {
        static Guid s_uuid = new Guid("8339fde3-106f-47ab-8373-1c6295eb10b3");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int Draw(
            IntPtr clientDrawingContext,
            IDWriteTextRenderer renderer,
            float originX,
            float originY,
            int isSideways,
            int isRightToLeft,
            IUnknown clientDrawingEffect
        ){
            var fp = GetFunctionPointer(3);
            if(m_DrawFunc==null) m_DrawFunc = (DrawFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawFunc));
            
            return m_DrawFunc(m_ptr, clientDrawingContext, renderer!=null ? renderer.Ptr : IntPtr.Zero, originX, originY, isSideways, isRightToLeft, clientDrawingEffect!=null ? clientDrawingEffect.Ptr : IntPtr.Zero);
        }
        delegate int DrawFunc(IntPtr self, IntPtr clientDrawingContext, IntPtr renderer, float originX, float originY, int isSideways, int isRightToLeft, IntPtr clientDrawingEffect);
        DrawFunc m_DrawFunc;

        public virtual int GetMetrics(
            out DWRITE_INLINE_OBJECT_METRICS metrics
        ){
            var fp = GetFunctionPointer(4);
            if(m_GetMetricsFunc==null) m_GetMetricsFunc = (GetMetricsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMetricsFunc));
            
            return m_GetMetricsFunc(m_ptr, out metrics);
        }
        delegate int GetMetricsFunc(IntPtr self, out DWRITE_INLINE_OBJECT_METRICS metrics);
        GetMetricsFunc m_GetMetricsFunc;

        public virtual int GetOverhangMetrics(
            out DWRITE_OVERHANG_METRICS overhangs
        ){
            var fp = GetFunctionPointer(5);
            if(m_GetOverhangMetricsFunc==null) m_GetOverhangMetricsFunc = (GetOverhangMetricsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetOverhangMetricsFunc));
            
            return m_GetOverhangMetricsFunc(m_ptr, out overhangs);
        }
        delegate int GetOverhangMetricsFunc(IntPtr self, out DWRITE_OVERHANG_METRICS overhangs);
        GetOverhangMetricsFunc m_GetOverhangMetricsFunc;

        public virtual int GetBreakConditions(
            out DWRITE_BREAK_CONDITION breakConditionBefore,
            out DWRITE_BREAK_CONDITION breakConditionAfter
        ){
            var fp = GetFunctionPointer(6);
            if(m_GetBreakConditionsFunc==null) m_GetBreakConditionsFunc = (GetBreakConditionsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetBreakConditionsFunc));
            
            return m_GetBreakConditionsFunc(m_ptr, out breakConditionBefore, out breakConditionAfter);
        }
        delegate int GetBreakConditionsFunc(IntPtr self, out DWRITE_BREAK_CONDITION breakConditionBefore, out DWRITE_BREAK_CONDITION breakConditionAfter);
        GetBreakConditionsFunc m_GetBreakConditionsFunc;

    }
}
