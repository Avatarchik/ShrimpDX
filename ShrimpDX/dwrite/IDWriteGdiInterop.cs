// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class IDWriteGdiInterop: IUnknown
    {
        static Guid s_uuid = new Guid("1edd9491-9853-4299-898f-6432983b6f3a");
        public static new ref Guid IID =>ref s_uuid;
        public override ref Guid GetIID(){ return ref s_uuid; }
                
        public virtual int CreateFontFromLOGFONT(
            ref tagLOGFONTW logFont,
            out IDWriteFont font
        ){
            var fp = GetFunctionPointer(3);
            if(m_CreateFontFromLOGFONTFunc==null) m_CreateFontFromLOGFONTFunc = (CreateFontFromLOGFONTFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateFontFromLOGFONTFunc));
            font = new IDWriteFont();
            return m_CreateFontFromLOGFONTFunc(m_ptr, ref logFont, out font.PtrForNew);
        }
        delegate int CreateFontFromLOGFONTFunc(IntPtr self, ref tagLOGFONTW logFont, out IntPtr font);
        CreateFontFromLOGFONTFunc m_CreateFontFromLOGFONTFunc;

        public virtual int ConvertFontToLOGFONT(
            IDWriteFont font,
            out tagLOGFONTW logFont,
            out int isSystemFont
        ){
            var fp = GetFunctionPointer(4);
            if(m_ConvertFontToLOGFONTFunc==null) m_ConvertFontToLOGFONTFunc = (ConvertFontToLOGFONTFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ConvertFontToLOGFONTFunc));
            
            return m_ConvertFontToLOGFONTFunc(m_ptr, font!=null ? font.Ptr : IntPtr.Zero, out logFont, out isSystemFont);
        }
        delegate int ConvertFontToLOGFONTFunc(IntPtr self, IntPtr font, out tagLOGFONTW logFont, out int isSystemFont);
        ConvertFontToLOGFONTFunc m_ConvertFontToLOGFONTFunc;

        public virtual int ConvertFontFaceToLOGFONT(
            IDWriteFontFace font,
            out tagLOGFONTW logFont
        ){
            var fp = GetFunctionPointer(5);
            if(m_ConvertFontFaceToLOGFONTFunc==null) m_ConvertFontFaceToLOGFONTFunc = (ConvertFontFaceToLOGFONTFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ConvertFontFaceToLOGFONTFunc));
            
            return m_ConvertFontFaceToLOGFONTFunc(m_ptr, font!=null ? font.Ptr : IntPtr.Zero, out logFont);
        }
        delegate int ConvertFontFaceToLOGFONTFunc(IntPtr self, IntPtr font, out tagLOGFONTW logFont);
        ConvertFontFaceToLOGFONTFunc m_ConvertFontFaceToLOGFONTFunc;

        public virtual int CreateFontFaceFromHdc(
            IntPtr hdc,
            out IDWriteFontFace fontFace
        ){
            var fp = GetFunctionPointer(6);
            if(m_CreateFontFaceFromHdcFunc==null) m_CreateFontFaceFromHdcFunc = (CreateFontFaceFromHdcFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateFontFaceFromHdcFunc));
            fontFace = new IDWriteFontFace();
            return m_CreateFontFaceFromHdcFunc(m_ptr, hdc, out fontFace.PtrForNew);
        }
        delegate int CreateFontFaceFromHdcFunc(IntPtr self, IntPtr hdc, out IntPtr fontFace);
        CreateFontFaceFromHdcFunc m_CreateFontFaceFromHdcFunc;

        public virtual int CreateBitmapRenderTarget(
            IntPtr hdc,
            uint width,
            uint height,
            out IDWriteBitmapRenderTarget renderTarget
        ){
            var fp = GetFunctionPointer(7);
            if(m_CreateBitmapRenderTargetFunc==null) m_CreateBitmapRenderTargetFunc = (CreateBitmapRenderTargetFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateBitmapRenderTargetFunc));
            renderTarget = new IDWriteBitmapRenderTarget();
            return m_CreateBitmapRenderTargetFunc(m_ptr, hdc, width, height, out renderTarget.PtrForNew);
        }
        delegate int CreateBitmapRenderTargetFunc(IntPtr self, IntPtr hdc, uint width, uint height, out IntPtr renderTarget);
        CreateBitmapRenderTargetFunc m_CreateBitmapRenderTargetFunc;

    }
}
