// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class IDWriteFont: IUnknown
    {
        static Guid s_uuid = new Guid("acd16696-8c14-4f5d-877e-fe3fc1d32737");
        public static new ref Guid IID =>ref s_uuid;
        public override ref Guid GetIID(){ return ref s_uuid; }
                
        public virtual int GetFontFamily(
            out IDWriteFontFamily fontFamily
        ){
            var fp = GetFunctionPointer(3);
            if(m_GetFontFamilyFunc==null) m_GetFontFamilyFunc = (GetFontFamilyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFontFamilyFunc));
            fontFamily = new IDWriteFontFamily();
            return m_GetFontFamilyFunc(m_ptr, out fontFamily.PtrForNew);
        }
        delegate int GetFontFamilyFunc(IntPtr self, out IntPtr fontFamily);
        GetFontFamilyFunc m_GetFontFamilyFunc;

        public virtual DWRITE_FONT_WEIGHT GetWeight(
        ){
            var fp = GetFunctionPointer(4);
            if(m_GetWeightFunc==null) m_GetWeightFunc = (GetWeightFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetWeightFunc));
            
            return m_GetWeightFunc(m_ptr);
        }
        delegate DWRITE_FONT_WEIGHT GetWeightFunc(IntPtr self);
        GetWeightFunc m_GetWeightFunc;

        public virtual DWRITE_FONT_STRETCH GetStretch(
        ){
            var fp = GetFunctionPointer(5);
            if(m_GetStretchFunc==null) m_GetStretchFunc = (GetStretchFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetStretchFunc));
            
            return m_GetStretchFunc(m_ptr);
        }
        delegate DWRITE_FONT_STRETCH GetStretchFunc(IntPtr self);
        GetStretchFunc m_GetStretchFunc;

        public virtual DWRITE_FONT_STYLE GetStyle(
        ){
            var fp = GetFunctionPointer(6);
            if(m_GetStyleFunc==null) m_GetStyleFunc = (GetStyleFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetStyleFunc));
            
            return m_GetStyleFunc(m_ptr);
        }
        delegate DWRITE_FONT_STYLE GetStyleFunc(IntPtr self);
        GetStyleFunc m_GetStyleFunc;

        public virtual int IsSymbolFont(
        ){
            var fp = GetFunctionPointer(7);
            if(m_IsSymbolFontFunc==null) m_IsSymbolFontFunc = (IsSymbolFontFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsSymbolFontFunc));
            
            return m_IsSymbolFontFunc(m_ptr);
        }
        delegate int IsSymbolFontFunc(IntPtr self);
        IsSymbolFontFunc m_IsSymbolFontFunc;

        public virtual int GetFaceNames(
            out IDWriteLocalizedStrings names
        ){
            var fp = GetFunctionPointer(8);
            if(m_GetFaceNamesFunc==null) m_GetFaceNamesFunc = (GetFaceNamesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFaceNamesFunc));
            names = new IDWriteLocalizedStrings();
            return m_GetFaceNamesFunc(m_ptr, out names.PtrForNew);
        }
        delegate int GetFaceNamesFunc(IntPtr self, out IntPtr names);
        GetFaceNamesFunc m_GetFaceNamesFunc;

        public virtual int GetInformationalStrings(
            DWRITE_INFORMATIONAL_STRING_ID informationalStringID,
            out IDWriteLocalizedStrings informationalStrings,
            out int exists
        ){
            var fp = GetFunctionPointer(9);
            if(m_GetInformationalStringsFunc==null) m_GetInformationalStringsFunc = (GetInformationalStringsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetInformationalStringsFunc));
            informationalStrings = new IDWriteLocalizedStrings();
            return m_GetInformationalStringsFunc(m_ptr, informationalStringID, out informationalStrings.PtrForNew, out exists);
        }
        delegate int GetInformationalStringsFunc(IntPtr self, DWRITE_INFORMATIONAL_STRING_ID informationalStringID, out IntPtr informationalStrings, out int exists);
        GetInformationalStringsFunc m_GetInformationalStringsFunc;

        public virtual DWRITE_FONT_SIMULATIONS GetSimulations(
        ){
            var fp = GetFunctionPointer(10);
            if(m_GetSimulationsFunc==null) m_GetSimulationsFunc = (GetSimulationsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetSimulationsFunc));
            
            return m_GetSimulationsFunc(m_ptr);
        }
        delegate DWRITE_FONT_SIMULATIONS GetSimulationsFunc(IntPtr self);
        GetSimulationsFunc m_GetSimulationsFunc;

        public virtual void GetMetrics(
            out DWRITE_FONT_METRICS fontMetrics
        ){
            var fp = GetFunctionPointer(11);
            if(m_GetMetricsFunc==null) m_GetMetricsFunc = (GetMetricsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMetricsFunc));
            
            m_GetMetricsFunc(m_ptr, out fontMetrics);
        }
        delegate void GetMetricsFunc(IntPtr self, out DWRITE_FONT_METRICS fontMetrics);
        GetMetricsFunc m_GetMetricsFunc;

        public virtual int HasCharacter(
            uint unicodeValue,
            out int exists
        ){
            var fp = GetFunctionPointer(12);
            if(m_HasCharacterFunc==null) m_HasCharacterFunc = (HasCharacterFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(HasCharacterFunc));
            
            return m_HasCharacterFunc(m_ptr, unicodeValue, out exists);
        }
        delegate int HasCharacterFunc(IntPtr self, uint unicodeValue, out int exists);
        HasCharacterFunc m_HasCharacterFunc;

        public virtual int CreateFontFace(
            out IDWriteFontFace fontFace
        ){
            var fp = GetFunctionPointer(13);
            if(m_CreateFontFaceFunc==null) m_CreateFontFaceFunc = (CreateFontFaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateFontFaceFunc));
            fontFace = new IDWriteFontFace();
            return m_CreateFontFaceFunc(m_ptr, out fontFace.PtrForNew);
        }
        delegate int CreateFontFaceFunc(IntPtr self, out IntPtr fontFace);
        CreateFontFaceFunc m_CreateFontFaceFunc;

    }
}
