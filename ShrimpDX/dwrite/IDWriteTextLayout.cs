// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class IDWriteTextLayout: IDWriteTextFormat
    {
        static Guid s_uuid = new Guid("53737037-6d14-410b-9bfe-0b182bb70961");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int SetMaxWidth(
            float maxWidth
        ){
            var fp = GetFunctionPointer(28);
            if(m_SetMaxWidthFunc==null) m_SetMaxWidthFunc = (SetMaxWidthFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetMaxWidthFunc));
            
            return m_SetMaxWidthFunc(m_ptr, maxWidth);
        }
        delegate int SetMaxWidthFunc(IntPtr self, float maxWidth);
        SetMaxWidthFunc m_SetMaxWidthFunc;

        public virtual int SetMaxHeight(
            float maxHeight
        ){
            var fp = GetFunctionPointer(29);
            if(m_SetMaxHeightFunc==null) m_SetMaxHeightFunc = (SetMaxHeightFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetMaxHeightFunc));
            
            return m_SetMaxHeightFunc(m_ptr, maxHeight);
        }
        delegate int SetMaxHeightFunc(IntPtr self, float maxHeight);
        SetMaxHeightFunc m_SetMaxHeightFunc;

        public virtual int SetFontCollection(
            IDWriteFontCollection fontCollection,
            DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(30);
            if(m_SetFontCollectionFunc==null) m_SetFontCollectionFunc = (SetFontCollectionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetFontCollectionFunc));
            
            return m_SetFontCollectionFunc(m_ptr, fontCollection!=null ? fontCollection.Ptr : IntPtr.Zero, textRange);
        }
        delegate int SetFontCollectionFunc(IntPtr self, IntPtr fontCollection, DWRITE_TEXT_RANGE textRange);
        SetFontCollectionFunc m_SetFontCollectionFunc;

        public virtual int SetFontFamilyName(
            ref ushort fontFamilyName,
            DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(31);
            if(m_SetFontFamilyNameFunc==null) m_SetFontFamilyNameFunc = (SetFontFamilyNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetFontFamilyNameFunc));
            
            return m_SetFontFamilyNameFunc(m_ptr, ref fontFamilyName, textRange);
        }
        delegate int SetFontFamilyNameFunc(IntPtr self, ref ushort fontFamilyName, DWRITE_TEXT_RANGE textRange);
        SetFontFamilyNameFunc m_SetFontFamilyNameFunc;

        public virtual int SetFontWeight(
            DWRITE_FONT_WEIGHT fontWeight,
            DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(32);
            if(m_SetFontWeightFunc==null) m_SetFontWeightFunc = (SetFontWeightFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetFontWeightFunc));
            
            return m_SetFontWeightFunc(m_ptr, fontWeight, textRange);
        }
        delegate int SetFontWeightFunc(IntPtr self, DWRITE_FONT_WEIGHT fontWeight, DWRITE_TEXT_RANGE textRange);
        SetFontWeightFunc m_SetFontWeightFunc;

        public virtual int SetFontStyle(
            DWRITE_FONT_STYLE fontStyle,
            DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(33);
            if(m_SetFontStyleFunc==null) m_SetFontStyleFunc = (SetFontStyleFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetFontStyleFunc));
            
            return m_SetFontStyleFunc(m_ptr, fontStyle, textRange);
        }
        delegate int SetFontStyleFunc(IntPtr self, DWRITE_FONT_STYLE fontStyle, DWRITE_TEXT_RANGE textRange);
        SetFontStyleFunc m_SetFontStyleFunc;

        public virtual int SetFontStretch(
            DWRITE_FONT_STRETCH fontStretch,
            DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(34);
            if(m_SetFontStretchFunc==null) m_SetFontStretchFunc = (SetFontStretchFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetFontStretchFunc));
            
            return m_SetFontStretchFunc(m_ptr, fontStretch, textRange);
        }
        delegate int SetFontStretchFunc(IntPtr self, DWRITE_FONT_STRETCH fontStretch, DWRITE_TEXT_RANGE textRange);
        SetFontStretchFunc m_SetFontStretchFunc;

        public virtual int SetFontSize(
            float fontSize,
            DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(35);
            if(m_SetFontSizeFunc==null) m_SetFontSizeFunc = (SetFontSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetFontSizeFunc));
            
            return m_SetFontSizeFunc(m_ptr, fontSize, textRange);
        }
        delegate int SetFontSizeFunc(IntPtr self, float fontSize, DWRITE_TEXT_RANGE textRange);
        SetFontSizeFunc m_SetFontSizeFunc;

        public virtual int SetUnderline(
            int hasUnderline,
            DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(36);
            if(m_SetUnderlineFunc==null) m_SetUnderlineFunc = (SetUnderlineFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetUnderlineFunc));
            
            return m_SetUnderlineFunc(m_ptr, hasUnderline, textRange);
        }
        delegate int SetUnderlineFunc(IntPtr self, int hasUnderline, DWRITE_TEXT_RANGE textRange);
        SetUnderlineFunc m_SetUnderlineFunc;

        public virtual int SetStrikethrough(
            int hasStrikethrough,
            DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(37);
            if(m_SetStrikethroughFunc==null) m_SetStrikethroughFunc = (SetStrikethroughFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetStrikethroughFunc));
            
            return m_SetStrikethroughFunc(m_ptr, hasStrikethrough, textRange);
        }
        delegate int SetStrikethroughFunc(IntPtr self, int hasStrikethrough, DWRITE_TEXT_RANGE textRange);
        SetStrikethroughFunc m_SetStrikethroughFunc;

        public virtual int SetDrawingEffect(
            IUnknown drawingEffect,
            DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(38);
            if(m_SetDrawingEffectFunc==null) m_SetDrawingEffectFunc = (SetDrawingEffectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetDrawingEffectFunc));
            
            return m_SetDrawingEffectFunc(m_ptr, drawingEffect!=null ? drawingEffect.Ptr : IntPtr.Zero, textRange);
        }
        delegate int SetDrawingEffectFunc(IntPtr self, IntPtr drawingEffect, DWRITE_TEXT_RANGE textRange);
        SetDrawingEffectFunc m_SetDrawingEffectFunc;

        public virtual int SetInlineObject(
            IDWriteInlineObject inlineObject,
            DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(39);
            if(m_SetInlineObjectFunc==null) m_SetInlineObjectFunc = (SetInlineObjectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetInlineObjectFunc));
            
            return m_SetInlineObjectFunc(m_ptr, inlineObject!=null ? inlineObject.Ptr : IntPtr.Zero, textRange);
        }
        delegate int SetInlineObjectFunc(IntPtr self, IntPtr inlineObject, DWRITE_TEXT_RANGE textRange);
        SetInlineObjectFunc m_SetInlineObjectFunc;

        public virtual int SetTypography(
            IDWriteTypography typography,
            DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(40);
            if(m_SetTypographyFunc==null) m_SetTypographyFunc = (SetTypographyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetTypographyFunc));
            
            return m_SetTypographyFunc(m_ptr, typography!=null ? typography.Ptr : IntPtr.Zero, textRange);
        }
        delegate int SetTypographyFunc(IntPtr self, IntPtr typography, DWRITE_TEXT_RANGE textRange);
        SetTypographyFunc m_SetTypographyFunc;

        public virtual int SetLocaleName(
            ref ushort localeName,
            DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(41);
            if(m_SetLocaleNameFunc==null) m_SetLocaleNameFunc = (SetLocaleNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetLocaleNameFunc));
            
            return m_SetLocaleNameFunc(m_ptr, ref localeName, textRange);
        }
        delegate int SetLocaleNameFunc(IntPtr self, ref ushort localeName, DWRITE_TEXT_RANGE textRange);
        SetLocaleNameFunc m_SetLocaleNameFunc;

        public virtual float GetMaxWidth(
        ){
            var fp = GetFunctionPointer(42);
            if(m_GetMaxWidthFunc==null) m_GetMaxWidthFunc = (GetMaxWidthFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMaxWidthFunc));
            
            return m_GetMaxWidthFunc(m_ptr);
        }
        delegate float GetMaxWidthFunc(IntPtr self);
        GetMaxWidthFunc m_GetMaxWidthFunc;

        public virtual float GetMaxHeight(
        ){
            var fp = GetFunctionPointer(43);
            if(m_GetMaxHeightFunc==null) m_GetMaxHeightFunc = (GetMaxHeightFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMaxHeightFunc));
            
            return m_GetMaxHeightFunc(m_ptr);
        }
        delegate float GetMaxHeightFunc(IntPtr self);
        GetMaxHeightFunc m_GetMaxHeightFunc;

        public virtual int GetFontCollection(
            uint currentPosition,
            out IDWriteFontCollection fontCollection,
            out DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(44);
            if(m_GetFontCollectionFunc==null) m_GetFontCollectionFunc = (GetFontCollectionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFontCollectionFunc));
            fontCollection = new IDWriteFontCollection();
            return m_GetFontCollectionFunc(m_ptr, currentPosition, out fontCollection.PtrForNew, out textRange);
        }
        delegate int GetFontCollectionFunc(IntPtr self, uint currentPosition, out IntPtr fontCollection, out DWRITE_TEXT_RANGE textRange);
        GetFontCollectionFunc m_GetFontCollectionFunc;

        public virtual int GetFontFamilyNameLength(
            uint currentPosition,
            out uint nameLength,
            out DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(45);
            if(m_GetFontFamilyNameLengthFunc==null) m_GetFontFamilyNameLengthFunc = (GetFontFamilyNameLengthFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFontFamilyNameLengthFunc));
            
            return m_GetFontFamilyNameLengthFunc(m_ptr, currentPosition, out nameLength, out textRange);
        }
        delegate int GetFontFamilyNameLengthFunc(IntPtr self, uint currentPosition, out uint nameLength, out DWRITE_TEXT_RANGE textRange);
        GetFontFamilyNameLengthFunc m_GetFontFamilyNameLengthFunc;

        public virtual int GetFontFamilyName(
            uint currentPosition,
            out ushort fontFamilyName,
            uint nameSize,
            out DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(46);
            if(m_GetFontFamilyNameFunc==null) m_GetFontFamilyNameFunc = (GetFontFamilyNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFontFamilyNameFunc));
            
            return m_GetFontFamilyNameFunc(m_ptr, currentPosition, out fontFamilyName, nameSize, out textRange);
        }
        delegate int GetFontFamilyNameFunc(IntPtr self, uint currentPosition, out ushort fontFamilyName, uint nameSize, out DWRITE_TEXT_RANGE textRange);
        GetFontFamilyNameFunc m_GetFontFamilyNameFunc;

        public virtual int GetFontWeight(
            uint currentPosition,
            out DWRITE_FONT_WEIGHT fontWeight,
            out DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(47);
            if(m_GetFontWeightFunc==null) m_GetFontWeightFunc = (GetFontWeightFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFontWeightFunc));
            
            return m_GetFontWeightFunc(m_ptr, currentPosition, out fontWeight, out textRange);
        }
        delegate int GetFontWeightFunc(IntPtr self, uint currentPosition, out DWRITE_FONT_WEIGHT fontWeight, out DWRITE_TEXT_RANGE textRange);
        GetFontWeightFunc m_GetFontWeightFunc;

        public virtual int GetFontStyle(
            uint currentPosition,
            out DWRITE_FONT_STYLE fontStyle,
            out DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(48);
            if(m_GetFontStyleFunc==null) m_GetFontStyleFunc = (GetFontStyleFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFontStyleFunc));
            
            return m_GetFontStyleFunc(m_ptr, currentPosition, out fontStyle, out textRange);
        }
        delegate int GetFontStyleFunc(IntPtr self, uint currentPosition, out DWRITE_FONT_STYLE fontStyle, out DWRITE_TEXT_RANGE textRange);
        GetFontStyleFunc m_GetFontStyleFunc;

        public virtual int GetFontStretch(
            uint currentPosition,
            out DWRITE_FONT_STRETCH fontStretch,
            out DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(49);
            if(m_GetFontStretchFunc==null) m_GetFontStretchFunc = (GetFontStretchFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFontStretchFunc));
            
            return m_GetFontStretchFunc(m_ptr, currentPosition, out fontStretch, out textRange);
        }
        delegate int GetFontStretchFunc(IntPtr self, uint currentPosition, out DWRITE_FONT_STRETCH fontStretch, out DWRITE_TEXT_RANGE textRange);
        GetFontStretchFunc m_GetFontStretchFunc;

        public virtual int GetFontSize(
            uint currentPosition,
            out float fontSize,
            out DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(50);
            if(m_GetFontSizeFunc==null) m_GetFontSizeFunc = (GetFontSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFontSizeFunc));
            
            return m_GetFontSizeFunc(m_ptr, currentPosition, out fontSize, out textRange);
        }
        delegate int GetFontSizeFunc(IntPtr self, uint currentPosition, out float fontSize, out DWRITE_TEXT_RANGE textRange);
        GetFontSizeFunc m_GetFontSizeFunc;

        public virtual int GetUnderline(
            uint currentPosition,
            out int hasUnderline,
            out DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(51);
            if(m_GetUnderlineFunc==null) m_GetUnderlineFunc = (GetUnderlineFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetUnderlineFunc));
            
            return m_GetUnderlineFunc(m_ptr, currentPosition, out hasUnderline, out textRange);
        }
        delegate int GetUnderlineFunc(IntPtr self, uint currentPosition, out int hasUnderline, out DWRITE_TEXT_RANGE textRange);
        GetUnderlineFunc m_GetUnderlineFunc;

        public virtual int GetStrikethrough(
            uint currentPosition,
            out int hasStrikethrough,
            out DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(52);
            if(m_GetStrikethroughFunc==null) m_GetStrikethroughFunc = (GetStrikethroughFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetStrikethroughFunc));
            
            return m_GetStrikethroughFunc(m_ptr, currentPosition, out hasStrikethrough, out textRange);
        }
        delegate int GetStrikethroughFunc(IntPtr self, uint currentPosition, out int hasStrikethrough, out DWRITE_TEXT_RANGE textRange);
        GetStrikethroughFunc m_GetStrikethroughFunc;

        public virtual int GetDrawingEffect(
            uint currentPosition,
            out IntPtr drawingEffect,
            out DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(53);
            if(m_GetDrawingEffectFunc==null) m_GetDrawingEffectFunc = (GetDrawingEffectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDrawingEffectFunc));
            
            return m_GetDrawingEffectFunc(m_ptr, currentPosition, out drawingEffect, out textRange);
        }
        delegate int GetDrawingEffectFunc(IntPtr self, uint currentPosition, out IntPtr drawingEffect, out DWRITE_TEXT_RANGE textRange);
        GetDrawingEffectFunc m_GetDrawingEffectFunc;

        public virtual int GetInlineObject(
            uint currentPosition,
            out IDWriteInlineObject inlineObject,
            out DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(54);
            if(m_GetInlineObjectFunc==null) m_GetInlineObjectFunc = (GetInlineObjectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetInlineObjectFunc));
            inlineObject = new IDWriteInlineObject();
            return m_GetInlineObjectFunc(m_ptr, currentPosition, out inlineObject.PtrForNew, out textRange);
        }
        delegate int GetInlineObjectFunc(IntPtr self, uint currentPosition, out IntPtr inlineObject, out DWRITE_TEXT_RANGE textRange);
        GetInlineObjectFunc m_GetInlineObjectFunc;

        public virtual int GetTypography(
            uint currentPosition,
            out IDWriteTypography typography,
            out DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(55);
            if(m_GetTypographyFunc==null) m_GetTypographyFunc = (GetTypographyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypographyFunc));
            typography = new IDWriteTypography();
            return m_GetTypographyFunc(m_ptr, currentPosition, out typography.PtrForNew, out textRange);
        }
        delegate int GetTypographyFunc(IntPtr self, uint currentPosition, out IntPtr typography, out DWRITE_TEXT_RANGE textRange);
        GetTypographyFunc m_GetTypographyFunc;

        public virtual int GetLocaleNameLength(
            uint currentPosition,
            out uint nameLength,
            out DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(56);
            if(m_GetLocaleNameLengthFunc==null) m_GetLocaleNameLengthFunc = (GetLocaleNameLengthFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetLocaleNameLengthFunc));
            
            return m_GetLocaleNameLengthFunc(m_ptr, currentPosition, out nameLength, out textRange);
        }
        delegate int GetLocaleNameLengthFunc(IntPtr self, uint currentPosition, out uint nameLength, out DWRITE_TEXT_RANGE textRange);
        GetLocaleNameLengthFunc m_GetLocaleNameLengthFunc;

        public virtual int GetLocaleName(
            uint currentPosition,
            out ushort localeName,
            uint nameSize,
            out DWRITE_TEXT_RANGE textRange
        ){
            var fp = GetFunctionPointer(57);
            if(m_GetLocaleNameFunc==null) m_GetLocaleNameFunc = (GetLocaleNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetLocaleNameFunc));
            
            return m_GetLocaleNameFunc(m_ptr, currentPosition, out localeName, nameSize, out textRange);
        }
        delegate int GetLocaleNameFunc(IntPtr self, uint currentPosition, out ushort localeName, uint nameSize, out DWRITE_TEXT_RANGE textRange);
        GetLocaleNameFunc m_GetLocaleNameFunc;

        public virtual int Draw(
            IntPtr clientDrawingContext,
            IDWriteTextRenderer renderer,
            float originX,
            float originY
        ){
            var fp = GetFunctionPointer(58);
            if(m_DrawFunc==null) m_DrawFunc = (DrawFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawFunc));
            
            return m_DrawFunc(m_ptr, clientDrawingContext, renderer!=null ? renderer.Ptr : IntPtr.Zero, originX, originY);
        }
        delegate int DrawFunc(IntPtr self, IntPtr clientDrawingContext, IntPtr renderer, float originX, float originY);
        DrawFunc m_DrawFunc;

        public virtual int GetLineMetrics(
            out DWRITE_LINE_METRICS lineMetrics,
            uint maxLineCount,
            out uint actualLineCount
        ){
            var fp = GetFunctionPointer(59);
            if(m_GetLineMetricsFunc==null) m_GetLineMetricsFunc = (GetLineMetricsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetLineMetricsFunc));
            
            return m_GetLineMetricsFunc(m_ptr, out lineMetrics, maxLineCount, out actualLineCount);
        }
        delegate int GetLineMetricsFunc(IntPtr self, out DWRITE_LINE_METRICS lineMetrics, uint maxLineCount, out uint actualLineCount);
        GetLineMetricsFunc m_GetLineMetricsFunc;

        public virtual int GetMetrics(
            out DWRITE_TEXT_METRICS textMetrics
        ){
            var fp = GetFunctionPointer(60);
            if(m_GetMetricsFunc==null) m_GetMetricsFunc = (GetMetricsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMetricsFunc));
            
            return m_GetMetricsFunc(m_ptr, out textMetrics);
        }
        delegate int GetMetricsFunc(IntPtr self, out DWRITE_TEXT_METRICS textMetrics);
        GetMetricsFunc m_GetMetricsFunc;

        public virtual int GetOverhangMetrics(
            out DWRITE_OVERHANG_METRICS overhangs
        ){
            var fp = GetFunctionPointer(61);
            if(m_GetOverhangMetricsFunc==null) m_GetOverhangMetricsFunc = (GetOverhangMetricsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetOverhangMetricsFunc));
            
            return m_GetOverhangMetricsFunc(m_ptr, out overhangs);
        }
        delegate int GetOverhangMetricsFunc(IntPtr self, out DWRITE_OVERHANG_METRICS overhangs);
        GetOverhangMetricsFunc m_GetOverhangMetricsFunc;

        public virtual int GetClusterMetrics(
            out DWRITE_CLUSTER_METRICS clusterMetrics,
            uint maxClusterCount,
            out uint actualClusterCount
        ){
            var fp = GetFunctionPointer(62);
            if(m_GetClusterMetricsFunc==null) m_GetClusterMetricsFunc = (GetClusterMetricsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetClusterMetricsFunc));
            
            return m_GetClusterMetricsFunc(m_ptr, out clusterMetrics, maxClusterCount, out actualClusterCount);
        }
        delegate int GetClusterMetricsFunc(IntPtr self, out DWRITE_CLUSTER_METRICS clusterMetrics, uint maxClusterCount, out uint actualClusterCount);
        GetClusterMetricsFunc m_GetClusterMetricsFunc;

        public virtual int DetermineMinWidth(
            out float minWidth
        ){
            var fp = GetFunctionPointer(63);
            if(m_DetermineMinWidthFunc==null) m_DetermineMinWidthFunc = (DetermineMinWidthFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DetermineMinWidthFunc));
            
            return m_DetermineMinWidthFunc(m_ptr, out minWidth);
        }
        delegate int DetermineMinWidthFunc(IntPtr self, out float minWidth);
        DetermineMinWidthFunc m_DetermineMinWidthFunc;

        public virtual int HitTestPoint(
            float pointX,
            float pointY,
            out int isTrailingHit,
            out int isInside,
            out DWRITE_HIT_TEST_METRICS hitTestMetrics
        ){
            var fp = GetFunctionPointer(64);
            if(m_HitTestPointFunc==null) m_HitTestPointFunc = (HitTestPointFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(HitTestPointFunc));
            
            return m_HitTestPointFunc(m_ptr, pointX, pointY, out isTrailingHit, out isInside, out hitTestMetrics);
        }
        delegate int HitTestPointFunc(IntPtr self, float pointX, float pointY, out int isTrailingHit, out int isInside, out DWRITE_HIT_TEST_METRICS hitTestMetrics);
        HitTestPointFunc m_HitTestPointFunc;

        public virtual int HitTestTextPosition(
            uint textPosition,
            int isTrailingHit,
            out float pointX,
            out float pointY,
            out DWRITE_HIT_TEST_METRICS hitTestMetrics
        ){
            var fp = GetFunctionPointer(65);
            if(m_HitTestTextPositionFunc==null) m_HitTestTextPositionFunc = (HitTestTextPositionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(HitTestTextPositionFunc));
            
            return m_HitTestTextPositionFunc(m_ptr, textPosition, isTrailingHit, out pointX, out pointY, out hitTestMetrics);
        }
        delegate int HitTestTextPositionFunc(IntPtr self, uint textPosition, int isTrailingHit, out float pointX, out float pointY, out DWRITE_HIT_TEST_METRICS hitTestMetrics);
        HitTestTextPositionFunc m_HitTestTextPositionFunc;

        public virtual int HitTestTextRange(
            uint textPosition,
            uint textLength,
            float originX,
            float originY,
            out DWRITE_HIT_TEST_METRICS hitTestMetrics,
            uint maxHitTestMetricsCount,
            out uint actualHitTestMetricsCount
        ){
            var fp = GetFunctionPointer(66);
            if(m_HitTestTextRangeFunc==null) m_HitTestTextRangeFunc = (HitTestTextRangeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(HitTestTextRangeFunc));
            
            return m_HitTestTextRangeFunc(m_ptr, textPosition, textLength, originX, originY, out hitTestMetrics, maxHitTestMetricsCount, out actualHitTestMetricsCount);
        }
        delegate int HitTestTextRangeFunc(IntPtr self, uint textPosition, uint textLength, float originX, float originY, out DWRITE_HIT_TEST_METRICS hitTestMetrics, uint maxHitTestMetricsCount, out uint actualHitTestMetricsCount);
        HitTestTextRangeFunc m_HitTestTextRangeFunc;

    }
}
