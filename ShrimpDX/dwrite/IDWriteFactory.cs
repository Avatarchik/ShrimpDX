// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class IDWriteFactory: IUnknown
    {
        static Guid s_uuid = new Guid("b859ee5a-d838-4b5b-a2e8-1adc7d93db48");
        public static new ref Guid IID =>ref s_uuid;
        public override ref Guid GetIID(){ return ref s_uuid; }
                
        public virtual int GetSystemFontCollection(
            out IDWriteFontCollection fontCollection,
            int checkForUpdates
        ){
            var fp = GetFunctionPointer(3);
            if(m_GetSystemFontCollectionFunc==null) m_GetSystemFontCollectionFunc = (GetSystemFontCollectionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetSystemFontCollectionFunc));
            fontCollection = new IDWriteFontCollection();
            return m_GetSystemFontCollectionFunc(m_ptr, out fontCollection.PtrForNew, checkForUpdates);
        }
        delegate int GetSystemFontCollectionFunc(IntPtr self, out IntPtr fontCollection, int checkForUpdates);
        GetSystemFontCollectionFunc m_GetSystemFontCollectionFunc;

        public virtual int CreateCustomFontCollection(
            IDWriteFontCollectionLoader collectionLoader,
            IntPtr collectionKey,
            uint collectionKeySize,
            out IDWriteFontCollection fontCollection
        ){
            var fp = GetFunctionPointer(4);
            if(m_CreateCustomFontCollectionFunc==null) m_CreateCustomFontCollectionFunc = (CreateCustomFontCollectionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateCustomFontCollectionFunc));
            fontCollection = new IDWriteFontCollection();
            return m_CreateCustomFontCollectionFunc(m_ptr, collectionLoader!=null ? collectionLoader.Ptr : IntPtr.Zero, collectionKey, collectionKeySize, out fontCollection.PtrForNew);
        }
        delegate int CreateCustomFontCollectionFunc(IntPtr self, IntPtr collectionLoader, IntPtr collectionKey, uint collectionKeySize, out IntPtr fontCollection);
        CreateCustomFontCollectionFunc m_CreateCustomFontCollectionFunc;

        public virtual int RegisterFontCollectionLoader(
            IDWriteFontCollectionLoader fontCollectionLoader
        ){
            var fp = GetFunctionPointer(5);
            if(m_RegisterFontCollectionLoaderFunc==null) m_RegisterFontCollectionLoaderFunc = (RegisterFontCollectionLoaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RegisterFontCollectionLoaderFunc));
            
            return m_RegisterFontCollectionLoaderFunc(m_ptr, fontCollectionLoader!=null ? fontCollectionLoader.Ptr : IntPtr.Zero);
        }
        delegate int RegisterFontCollectionLoaderFunc(IntPtr self, IntPtr fontCollectionLoader);
        RegisterFontCollectionLoaderFunc m_RegisterFontCollectionLoaderFunc;

        public virtual int UnregisterFontCollectionLoader(
            IDWriteFontCollectionLoader fontCollectionLoader
        ){
            var fp = GetFunctionPointer(6);
            if(m_UnregisterFontCollectionLoaderFunc==null) m_UnregisterFontCollectionLoaderFunc = (UnregisterFontCollectionLoaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(UnregisterFontCollectionLoaderFunc));
            
            return m_UnregisterFontCollectionLoaderFunc(m_ptr, fontCollectionLoader!=null ? fontCollectionLoader.Ptr : IntPtr.Zero);
        }
        delegate int UnregisterFontCollectionLoaderFunc(IntPtr self, IntPtr fontCollectionLoader);
        UnregisterFontCollectionLoaderFunc m_UnregisterFontCollectionLoaderFunc;

        public virtual int CreateFontFileReference(
            ref ushort filePath,
            ref _FILETIME lastWriteTime,
            out IDWriteFontFile fontFile
        ){
            var fp = GetFunctionPointer(7);
            if(m_CreateFontFileReferenceFunc==null) m_CreateFontFileReferenceFunc = (CreateFontFileReferenceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateFontFileReferenceFunc));
            fontFile = new IDWriteFontFile();
            return m_CreateFontFileReferenceFunc(m_ptr, ref filePath, ref lastWriteTime, out fontFile.PtrForNew);
        }
        delegate int CreateFontFileReferenceFunc(IntPtr self, ref ushort filePath, ref _FILETIME lastWriteTime, out IntPtr fontFile);
        CreateFontFileReferenceFunc m_CreateFontFileReferenceFunc;

        public virtual int CreateCustomFontFileReference(
            IntPtr fontFileReferenceKey,
            uint fontFileReferenceKeySize,
            IDWriteFontFileLoader fontFileLoader,
            out IDWriteFontFile fontFile
        ){
            var fp = GetFunctionPointer(8);
            if(m_CreateCustomFontFileReferenceFunc==null) m_CreateCustomFontFileReferenceFunc = (CreateCustomFontFileReferenceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateCustomFontFileReferenceFunc));
            fontFile = new IDWriteFontFile();
            return m_CreateCustomFontFileReferenceFunc(m_ptr, fontFileReferenceKey, fontFileReferenceKeySize, fontFileLoader!=null ? fontFileLoader.Ptr : IntPtr.Zero, out fontFile.PtrForNew);
        }
        delegate int CreateCustomFontFileReferenceFunc(IntPtr self, IntPtr fontFileReferenceKey, uint fontFileReferenceKeySize, IntPtr fontFileLoader, out IntPtr fontFile);
        CreateCustomFontFileReferenceFunc m_CreateCustomFontFileReferenceFunc;

        public virtual int CreateFontFace(
            DWRITE_FONT_FACE_TYPE fontFaceType,
            uint numberOfFiles,
            ref IntPtr fontFiles,
            uint faceIndex,
            DWRITE_FONT_SIMULATIONS fontFaceSimulationFlags,
            out IDWriteFontFace fontFace
        ){
            var fp = GetFunctionPointer(9);
            if(m_CreateFontFaceFunc==null) m_CreateFontFaceFunc = (CreateFontFaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateFontFaceFunc));
            fontFace = new IDWriteFontFace();
            return m_CreateFontFaceFunc(m_ptr, fontFaceType, numberOfFiles, ref fontFiles, faceIndex, fontFaceSimulationFlags, out fontFace.PtrForNew);
        }
        delegate int CreateFontFaceFunc(IntPtr self, DWRITE_FONT_FACE_TYPE fontFaceType, uint numberOfFiles, ref IntPtr fontFiles, uint faceIndex, DWRITE_FONT_SIMULATIONS fontFaceSimulationFlags, out IntPtr fontFace);
        CreateFontFaceFunc m_CreateFontFaceFunc;

        public virtual int CreateRenderingParams(
            out IDWriteRenderingParams renderingParams
        ){
            var fp = GetFunctionPointer(10);
            if(m_CreateRenderingParamsFunc==null) m_CreateRenderingParamsFunc = (CreateRenderingParamsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateRenderingParamsFunc));
            renderingParams = new IDWriteRenderingParams();
            return m_CreateRenderingParamsFunc(m_ptr, out renderingParams.PtrForNew);
        }
        delegate int CreateRenderingParamsFunc(IntPtr self, out IntPtr renderingParams);
        CreateRenderingParamsFunc m_CreateRenderingParamsFunc;

        public virtual int CreateMonitorRenderingParams(
            IntPtr monitor,
            out IDWriteRenderingParams renderingParams
        ){
            var fp = GetFunctionPointer(11);
            if(m_CreateMonitorRenderingParamsFunc==null) m_CreateMonitorRenderingParamsFunc = (CreateMonitorRenderingParamsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateMonitorRenderingParamsFunc));
            renderingParams = new IDWriteRenderingParams();
            return m_CreateMonitorRenderingParamsFunc(m_ptr, monitor, out renderingParams.PtrForNew);
        }
        delegate int CreateMonitorRenderingParamsFunc(IntPtr self, IntPtr monitor, out IntPtr renderingParams);
        CreateMonitorRenderingParamsFunc m_CreateMonitorRenderingParamsFunc;

        public virtual int CreateCustomRenderingParams(
            float gamma,
            float enhancedContrast,
            float clearTypeLevel,
            DWRITE_PIXEL_GEOMETRY pixelGeometry,
            DWRITE_RENDERING_MODE renderingMode,
            out IDWriteRenderingParams renderingParams
        ){
            var fp = GetFunctionPointer(12);
            if(m_CreateCustomRenderingParamsFunc==null) m_CreateCustomRenderingParamsFunc = (CreateCustomRenderingParamsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateCustomRenderingParamsFunc));
            renderingParams = new IDWriteRenderingParams();
            return m_CreateCustomRenderingParamsFunc(m_ptr, gamma, enhancedContrast, clearTypeLevel, pixelGeometry, renderingMode, out renderingParams.PtrForNew);
        }
        delegate int CreateCustomRenderingParamsFunc(IntPtr self, float gamma, float enhancedContrast, float clearTypeLevel, DWRITE_PIXEL_GEOMETRY pixelGeometry, DWRITE_RENDERING_MODE renderingMode, out IntPtr renderingParams);
        CreateCustomRenderingParamsFunc m_CreateCustomRenderingParamsFunc;

        public virtual int RegisterFontFileLoader(
            IDWriteFontFileLoader fontFileLoader
        ){
            var fp = GetFunctionPointer(13);
            if(m_RegisterFontFileLoaderFunc==null) m_RegisterFontFileLoaderFunc = (RegisterFontFileLoaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RegisterFontFileLoaderFunc));
            
            return m_RegisterFontFileLoaderFunc(m_ptr, fontFileLoader!=null ? fontFileLoader.Ptr : IntPtr.Zero);
        }
        delegate int RegisterFontFileLoaderFunc(IntPtr self, IntPtr fontFileLoader);
        RegisterFontFileLoaderFunc m_RegisterFontFileLoaderFunc;

        public virtual int UnregisterFontFileLoader(
            IDWriteFontFileLoader fontFileLoader
        ){
            var fp = GetFunctionPointer(14);
            if(m_UnregisterFontFileLoaderFunc==null) m_UnregisterFontFileLoaderFunc = (UnregisterFontFileLoaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(UnregisterFontFileLoaderFunc));
            
            return m_UnregisterFontFileLoaderFunc(m_ptr, fontFileLoader!=null ? fontFileLoader.Ptr : IntPtr.Zero);
        }
        delegate int UnregisterFontFileLoaderFunc(IntPtr self, IntPtr fontFileLoader);
        UnregisterFontFileLoaderFunc m_UnregisterFontFileLoaderFunc;

        public virtual int CreateTextFormat(
            ref ushort fontFamilyName,
            IDWriteFontCollection fontCollection,
            DWRITE_FONT_WEIGHT fontWeight,
            DWRITE_FONT_STYLE fontStyle,
            DWRITE_FONT_STRETCH fontStretch,
            float fontSize,
            ref ushort localeName,
            out IDWriteTextFormat textFormat
        ){
            var fp = GetFunctionPointer(15);
            if(m_CreateTextFormatFunc==null) m_CreateTextFormatFunc = (CreateTextFormatFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateTextFormatFunc));
            textFormat = new IDWriteTextFormat();
            return m_CreateTextFormatFunc(m_ptr, ref fontFamilyName, fontCollection!=null ? fontCollection.Ptr : IntPtr.Zero, fontWeight, fontStyle, fontStretch, fontSize, ref localeName, out textFormat.PtrForNew);
        }
        delegate int CreateTextFormatFunc(IntPtr self, ref ushort fontFamilyName, IntPtr fontCollection, DWRITE_FONT_WEIGHT fontWeight, DWRITE_FONT_STYLE fontStyle, DWRITE_FONT_STRETCH fontStretch, float fontSize, ref ushort localeName, out IntPtr textFormat);
        CreateTextFormatFunc m_CreateTextFormatFunc;

        public virtual int CreateTypography(
            out IDWriteTypography typography
        ){
            var fp = GetFunctionPointer(16);
            if(m_CreateTypographyFunc==null) m_CreateTypographyFunc = (CreateTypographyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateTypographyFunc));
            typography = new IDWriteTypography();
            return m_CreateTypographyFunc(m_ptr, out typography.PtrForNew);
        }
        delegate int CreateTypographyFunc(IntPtr self, out IntPtr typography);
        CreateTypographyFunc m_CreateTypographyFunc;

        public virtual int GetGdiInterop(
            out IDWriteGdiInterop gdiInterop
        ){
            var fp = GetFunctionPointer(17);
            if(m_GetGdiInteropFunc==null) m_GetGdiInteropFunc = (GetGdiInteropFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetGdiInteropFunc));
            gdiInterop = new IDWriteGdiInterop();
            return m_GetGdiInteropFunc(m_ptr, out gdiInterop.PtrForNew);
        }
        delegate int GetGdiInteropFunc(IntPtr self, out IntPtr gdiInterop);
        GetGdiInteropFunc m_GetGdiInteropFunc;

        public virtual int CreateTextLayout(
            ref ushort _string,
            uint stringLength,
            IDWriteTextFormat textFormat,
            float maxWidth,
            float maxHeight,
            out IDWriteTextLayout textLayout
        ){
            var fp = GetFunctionPointer(18);
            if(m_CreateTextLayoutFunc==null) m_CreateTextLayoutFunc = (CreateTextLayoutFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateTextLayoutFunc));
            textLayout = new IDWriteTextLayout();
            return m_CreateTextLayoutFunc(m_ptr, ref _string, stringLength, textFormat!=null ? textFormat.Ptr : IntPtr.Zero, maxWidth, maxHeight, out textLayout.PtrForNew);
        }
        delegate int CreateTextLayoutFunc(IntPtr self, ref ushort _string, uint stringLength, IntPtr textFormat, float maxWidth, float maxHeight, out IntPtr textLayout);
        CreateTextLayoutFunc m_CreateTextLayoutFunc;

        public virtual int CreateGdiCompatibleTextLayout(
            ref ushort _string,
            uint stringLength,
            IDWriteTextFormat textFormat,
            float layoutWidth,
            float layoutHeight,
            float pixelsPerDip,
            ref DWRITE_MATRIX transform,
            int useGdiNatural,
            out IDWriteTextLayout textLayout
        ){
            var fp = GetFunctionPointer(19);
            if(m_CreateGdiCompatibleTextLayoutFunc==null) m_CreateGdiCompatibleTextLayoutFunc = (CreateGdiCompatibleTextLayoutFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateGdiCompatibleTextLayoutFunc));
            textLayout = new IDWriteTextLayout();
            return m_CreateGdiCompatibleTextLayoutFunc(m_ptr, ref _string, stringLength, textFormat!=null ? textFormat.Ptr : IntPtr.Zero, layoutWidth, layoutHeight, pixelsPerDip, ref transform, useGdiNatural, out textLayout.PtrForNew);
        }
        delegate int CreateGdiCompatibleTextLayoutFunc(IntPtr self, ref ushort _string, uint stringLength, IntPtr textFormat, float layoutWidth, float layoutHeight, float pixelsPerDip, ref DWRITE_MATRIX transform, int useGdiNatural, out IntPtr textLayout);
        CreateGdiCompatibleTextLayoutFunc m_CreateGdiCompatibleTextLayoutFunc;

        public virtual int CreateEllipsisTrimmingSign(
            IDWriteTextFormat textFormat,
            out IDWriteInlineObject trimmingSign
        ){
            var fp = GetFunctionPointer(20);
            if(m_CreateEllipsisTrimmingSignFunc==null) m_CreateEllipsisTrimmingSignFunc = (CreateEllipsisTrimmingSignFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateEllipsisTrimmingSignFunc));
            trimmingSign = new IDWriteInlineObject();
            return m_CreateEllipsisTrimmingSignFunc(m_ptr, textFormat!=null ? textFormat.Ptr : IntPtr.Zero, out trimmingSign.PtrForNew);
        }
        delegate int CreateEllipsisTrimmingSignFunc(IntPtr self, IntPtr textFormat, out IntPtr trimmingSign);
        CreateEllipsisTrimmingSignFunc m_CreateEllipsisTrimmingSignFunc;

        public virtual int CreateTextAnalyzer(
            out IDWriteTextAnalyzer textAnalyzer
        ){
            var fp = GetFunctionPointer(21);
            if(m_CreateTextAnalyzerFunc==null) m_CreateTextAnalyzerFunc = (CreateTextAnalyzerFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateTextAnalyzerFunc));
            textAnalyzer = new IDWriteTextAnalyzer();
            return m_CreateTextAnalyzerFunc(m_ptr, out textAnalyzer.PtrForNew);
        }
        delegate int CreateTextAnalyzerFunc(IntPtr self, out IntPtr textAnalyzer);
        CreateTextAnalyzerFunc m_CreateTextAnalyzerFunc;

        public virtual int CreateNumberSubstitution(
            DWRITE_NUMBER_SUBSTITUTION_METHOD substitutionMethod,
            ref ushort localeName,
            int ignoreUserOverride,
            out IDWriteNumberSubstitution numberSubstitution
        ){
            var fp = GetFunctionPointer(22);
            if(m_CreateNumberSubstitutionFunc==null) m_CreateNumberSubstitutionFunc = (CreateNumberSubstitutionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateNumberSubstitutionFunc));
            numberSubstitution = new IDWriteNumberSubstitution();
            return m_CreateNumberSubstitutionFunc(m_ptr, substitutionMethod, ref localeName, ignoreUserOverride, out numberSubstitution.PtrForNew);
        }
        delegate int CreateNumberSubstitutionFunc(IntPtr self, DWRITE_NUMBER_SUBSTITUTION_METHOD substitutionMethod, ref ushort localeName, int ignoreUserOverride, out IntPtr numberSubstitution);
        CreateNumberSubstitutionFunc m_CreateNumberSubstitutionFunc;

        public virtual int CreateGlyphRunAnalysis(
            ref DWRITE_GLYPH_RUN glyphRun,
            float pixelsPerDip,
            ref DWRITE_MATRIX transform,
            DWRITE_RENDERING_MODE renderingMode,
            DWRITE_MEASURING_MODE measuringMode,
            float baselineOriginX,
            float baselineOriginY,
            out IDWriteGlyphRunAnalysis glyphRunAnalysis
        ){
            var fp = GetFunctionPointer(23);
            if(m_CreateGlyphRunAnalysisFunc==null) m_CreateGlyphRunAnalysisFunc = (CreateGlyphRunAnalysisFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateGlyphRunAnalysisFunc));
            glyphRunAnalysis = new IDWriteGlyphRunAnalysis();
            return m_CreateGlyphRunAnalysisFunc(m_ptr, ref glyphRun, pixelsPerDip, ref transform, renderingMode, measuringMode, baselineOriginX, baselineOriginY, out glyphRunAnalysis.PtrForNew);
        }
        delegate int CreateGlyphRunAnalysisFunc(IntPtr self, ref DWRITE_GLYPH_RUN glyphRun, float pixelsPerDip, ref DWRITE_MATRIX transform, DWRITE_RENDERING_MODE renderingMode, DWRITE_MEASURING_MODE measuringMode, float baselineOriginX, float baselineOriginY, out IntPtr glyphRunAnalysis);
        CreateGlyphRunAnalysisFunc m_CreateGlyphRunAnalysisFunc;

    }
}
