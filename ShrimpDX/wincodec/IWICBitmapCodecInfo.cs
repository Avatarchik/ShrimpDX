// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class IWICBitmapCodecInfo: IWICComponentInfo
    {
        static Guid s_uuid = new Guid("e87a44c4-b76e-4c47-8b09-298eb12a2714");
        public static new ref Guid IID =>ref s_uuid;
        public override ref Guid GetIID(){ return ref s_uuid; }
                
        public virtual int GetContainerFormat(
            out Guid pguidContainerFormat
        ){
            var fp = GetFunctionPointer(11);
            if(m_GetContainerFormatFunc==null) m_GetContainerFormatFunc = (GetContainerFormatFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetContainerFormatFunc));
            
            return m_GetContainerFormatFunc(m_ptr, out pguidContainerFormat);
        }
        delegate int GetContainerFormatFunc(IntPtr self, out Guid pguidContainerFormat);
        GetContainerFormatFunc m_GetContainerFormatFunc;

        public virtual int GetPixelFormats(
            uint cFormats,
            out Guid pguidPixelFormats,
            out uint pcActual
        ){
            var fp = GetFunctionPointer(12);
            if(m_GetPixelFormatsFunc==null) m_GetPixelFormatsFunc = (GetPixelFormatsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPixelFormatsFunc));
            
            return m_GetPixelFormatsFunc(m_ptr, cFormats, out pguidPixelFormats, out pcActual);
        }
        delegate int GetPixelFormatsFunc(IntPtr self, uint cFormats, out Guid pguidPixelFormats, out uint pcActual);
        GetPixelFormatsFunc m_GetPixelFormatsFunc;

        public virtual int GetColorManagementVersion(
            uint cchColorManagementVersion,
            out ushort wzColorManagementVersion,
            out uint pcchActual
        ){
            var fp = GetFunctionPointer(13);
            if(m_GetColorManagementVersionFunc==null) m_GetColorManagementVersionFunc = (GetColorManagementVersionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetColorManagementVersionFunc));
            
            return m_GetColorManagementVersionFunc(m_ptr, cchColorManagementVersion, out wzColorManagementVersion, out pcchActual);
        }
        delegate int GetColorManagementVersionFunc(IntPtr self, uint cchColorManagementVersion, out ushort wzColorManagementVersion, out uint pcchActual);
        GetColorManagementVersionFunc m_GetColorManagementVersionFunc;

        public virtual int GetDeviceManufacturer(
            uint cchDeviceManufacturer,
            out ushort wzDeviceManufacturer,
            out uint pcchActual
        ){
            var fp = GetFunctionPointer(14);
            if(m_GetDeviceManufacturerFunc==null) m_GetDeviceManufacturerFunc = (GetDeviceManufacturerFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDeviceManufacturerFunc));
            
            return m_GetDeviceManufacturerFunc(m_ptr, cchDeviceManufacturer, out wzDeviceManufacturer, out pcchActual);
        }
        delegate int GetDeviceManufacturerFunc(IntPtr self, uint cchDeviceManufacturer, out ushort wzDeviceManufacturer, out uint pcchActual);
        GetDeviceManufacturerFunc m_GetDeviceManufacturerFunc;

        public virtual int GetDeviceModels(
            uint cchDeviceModels,
            out ushort wzDeviceModels,
            out uint pcchActual
        ){
            var fp = GetFunctionPointer(15);
            if(m_GetDeviceModelsFunc==null) m_GetDeviceModelsFunc = (GetDeviceModelsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDeviceModelsFunc));
            
            return m_GetDeviceModelsFunc(m_ptr, cchDeviceModels, out wzDeviceModels, out pcchActual);
        }
        delegate int GetDeviceModelsFunc(IntPtr self, uint cchDeviceModels, out ushort wzDeviceModels, out uint pcchActual);
        GetDeviceModelsFunc m_GetDeviceModelsFunc;

        public virtual int GetMimeTypes(
            uint cchMimeTypes,
            out ushort wzMimeTypes,
            out uint pcchActual
        ){
            var fp = GetFunctionPointer(16);
            if(m_GetMimeTypesFunc==null) m_GetMimeTypesFunc = (GetMimeTypesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMimeTypesFunc));
            
            return m_GetMimeTypesFunc(m_ptr, cchMimeTypes, out wzMimeTypes, out pcchActual);
        }
        delegate int GetMimeTypesFunc(IntPtr self, uint cchMimeTypes, out ushort wzMimeTypes, out uint pcchActual);
        GetMimeTypesFunc m_GetMimeTypesFunc;

        public virtual int GetFileExtensions(
            uint cchFileExtensions,
            out ushort wzFileExtensions,
            out uint pcchActual
        ){
            var fp = GetFunctionPointer(17);
            if(m_GetFileExtensionsFunc==null) m_GetFileExtensionsFunc = (GetFileExtensionsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFileExtensionsFunc));
            
            return m_GetFileExtensionsFunc(m_ptr, cchFileExtensions, out wzFileExtensions, out pcchActual);
        }
        delegate int GetFileExtensionsFunc(IntPtr self, uint cchFileExtensions, out ushort wzFileExtensions, out uint pcchActual);
        GetFileExtensionsFunc m_GetFileExtensionsFunc;

        public virtual int DoesSupportAnimation(
            out int pfSupportAnimation
        ){
            var fp = GetFunctionPointer(18);
            if(m_DoesSupportAnimationFunc==null) m_DoesSupportAnimationFunc = (DoesSupportAnimationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DoesSupportAnimationFunc));
            
            return m_DoesSupportAnimationFunc(m_ptr, out pfSupportAnimation);
        }
        delegate int DoesSupportAnimationFunc(IntPtr self, out int pfSupportAnimation);
        DoesSupportAnimationFunc m_DoesSupportAnimationFunc;

        public virtual int DoesSupportChromakey(
            out int pfSupportChromakey
        ){
            var fp = GetFunctionPointer(19);
            if(m_DoesSupportChromakeyFunc==null) m_DoesSupportChromakeyFunc = (DoesSupportChromakeyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DoesSupportChromakeyFunc));
            
            return m_DoesSupportChromakeyFunc(m_ptr, out pfSupportChromakey);
        }
        delegate int DoesSupportChromakeyFunc(IntPtr self, out int pfSupportChromakey);
        DoesSupportChromakeyFunc m_DoesSupportChromakeyFunc;

        public virtual int DoesSupportLossless(
            out int pfSupportLossless
        ){
            var fp = GetFunctionPointer(20);
            if(m_DoesSupportLosslessFunc==null) m_DoesSupportLosslessFunc = (DoesSupportLosslessFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DoesSupportLosslessFunc));
            
            return m_DoesSupportLosslessFunc(m_ptr, out pfSupportLossless);
        }
        delegate int DoesSupportLosslessFunc(IntPtr self, out int pfSupportLossless);
        DoesSupportLosslessFunc m_DoesSupportLosslessFunc;

        public virtual int DoesSupportMultiframe(
            out int pfSupportMultiframe
        ){
            var fp = GetFunctionPointer(21);
            if(m_DoesSupportMultiframeFunc==null) m_DoesSupportMultiframeFunc = (DoesSupportMultiframeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DoesSupportMultiframeFunc));
            
            return m_DoesSupportMultiframeFunc(m_ptr, out pfSupportMultiframe);
        }
        delegate int DoesSupportMultiframeFunc(IntPtr self, out int pfSupportMultiframe);
        DoesSupportMultiframeFunc m_DoesSupportMultiframeFunc;

        public virtual int MatchesMimeType(
            ref ushort wzMimeType,
            out int pfMatches
        ){
            var fp = GetFunctionPointer(22);
            if(m_MatchesMimeTypeFunc==null) m_MatchesMimeTypeFunc = (MatchesMimeTypeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(MatchesMimeTypeFunc));
            
            return m_MatchesMimeTypeFunc(m_ptr, ref wzMimeType, out pfMatches);
        }
        delegate int MatchesMimeTypeFunc(IntPtr self, ref ushort wzMimeType, out int pfMatches);
        MatchesMimeTypeFunc m_MatchesMimeTypeFunc;

    }
}
