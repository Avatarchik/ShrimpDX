// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class IWICPalette: IUnknown
    {
        static Guid s_uuid = new Guid("00000040-a8f2-4877-ba0a-fd2b6645fb94");
        public static new ref Guid IID =>ref s_uuid;
        public override ref Guid GetIID(){ return ref s_uuid; }
                
        public virtual int InitializePredefined(
            WICBitmapPaletteType ePaletteType,
            int fAddTransparentColor
        ){
            var fp = GetFunctionPointer(3);
            if(m_InitializePredefinedFunc==null) m_InitializePredefinedFunc = (InitializePredefinedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(InitializePredefinedFunc));
            
            return m_InitializePredefinedFunc(m_ptr, ePaletteType, fAddTransparentColor);
        }
        delegate int InitializePredefinedFunc(IntPtr self, WICBitmapPaletteType ePaletteType, int fAddTransparentColor);
        InitializePredefinedFunc m_InitializePredefinedFunc;

        public virtual int InitializeCustom(
            out uint pColors,
            uint cCount
        ){
            var fp = GetFunctionPointer(4);
            if(m_InitializeCustomFunc==null) m_InitializeCustomFunc = (InitializeCustomFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(InitializeCustomFunc));
            
            return m_InitializeCustomFunc(m_ptr, out pColors, cCount);
        }
        delegate int InitializeCustomFunc(IntPtr self, out uint pColors, uint cCount);
        InitializeCustomFunc m_InitializeCustomFunc;

        public virtual int InitializeFromBitmap(
            IWICBitmapSource pISurface,
            uint cCount,
            int fAddTransparentColor
        ){
            var fp = GetFunctionPointer(5);
            if(m_InitializeFromBitmapFunc==null) m_InitializeFromBitmapFunc = (InitializeFromBitmapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(InitializeFromBitmapFunc));
            
            return m_InitializeFromBitmapFunc(m_ptr, pISurface!=null ? pISurface.Ptr : IntPtr.Zero, cCount, fAddTransparentColor);
        }
        delegate int InitializeFromBitmapFunc(IntPtr self, IntPtr pISurface, uint cCount, int fAddTransparentColor);
        InitializeFromBitmapFunc m_InitializeFromBitmapFunc;

        public virtual int InitializeFromPalette(
            IWICPalette pIPalette
        ){
            var fp = GetFunctionPointer(6);
            if(m_InitializeFromPaletteFunc==null) m_InitializeFromPaletteFunc = (InitializeFromPaletteFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(InitializeFromPaletteFunc));
            
            return m_InitializeFromPaletteFunc(m_ptr, pIPalette!=null ? pIPalette.Ptr : IntPtr.Zero);
        }
        delegate int InitializeFromPaletteFunc(IntPtr self, IntPtr pIPalette);
        InitializeFromPaletteFunc m_InitializeFromPaletteFunc;

        public virtual int GetComType(
            out WICBitmapPaletteType pePaletteType
        ){
            var fp = GetFunctionPointer(7);
            if(m_GetTypeFunc==null) m_GetTypeFunc = (GetTypeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypeFunc));
            
            return m_GetTypeFunc(m_ptr, out pePaletteType);
        }
        delegate int GetTypeFunc(IntPtr self, out WICBitmapPaletteType pePaletteType);
        GetTypeFunc m_GetTypeFunc;

        public virtual int GetColorCount(
            out uint pcCount
        ){
            var fp = GetFunctionPointer(8);
            if(m_GetColorCountFunc==null) m_GetColorCountFunc = (GetColorCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetColorCountFunc));
            
            return m_GetColorCountFunc(m_ptr, out pcCount);
        }
        delegate int GetColorCountFunc(IntPtr self, out uint pcCount);
        GetColorCountFunc m_GetColorCountFunc;

        public virtual int GetColors(
            uint cCount,
            out uint pColors,
            out uint pcActualColors
        ){
            var fp = GetFunctionPointer(9);
            if(m_GetColorsFunc==null) m_GetColorsFunc = (GetColorsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetColorsFunc));
            
            return m_GetColorsFunc(m_ptr, cCount, out pColors, out pcActualColors);
        }
        delegate int GetColorsFunc(IntPtr self, uint cCount, out uint pColors, out uint pcActualColors);
        GetColorsFunc m_GetColorsFunc;

        public virtual int IsBlackWhite(
            out int pfIsBlackWhite
        ){
            var fp = GetFunctionPointer(10);
            if(m_IsBlackWhiteFunc==null) m_IsBlackWhiteFunc = (IsBlackWhiteFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsBlackWhiteFunc));
            
            return m_IsBlackWhiteFunc(m_ptr, out pfIsBlackWhite);
        }
        delegate int IsBlackWhiteFunc(IntPtr self, out int pfIsBlackWhite);
        IsBlackWhiteFunc m_IsBlackWhiteFunc;

        public virtual int IsGrayscale(
            out int pfIsGrayscale
        ){
            var fp = GetFunctionPointer(11);
            if(m_IsGrayscaleFunc==null) m_IsGrayscaleFunc = (IsGrayscaleFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsGrayscaleFunc));
            
            return m_IsGrayscaleFunc(m_ptr, out pfIsGrayscale);
        }
        delegate int IsGrayscaleFunc(IntPtr self, out int pfIsGrayscale);
        IsGrayscaleFunc m_IsGrayscaleFunc;

        public virtual int HasAlpha(
            out int pfHasAlpha
        ){
            var fp = GetFunctionPointer(12);
            if(m_HasAlphaFunc==null) m_HasAlphaFunc = (HasAlphaFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(HasAlphaFunc));
            
            return m_HasAlphaFunc(m_ptr, out pfHasAlpha);
        }
        delegate int HasAlphaFunc(IntPtr self, out int pfHasAlpha);
        HasAlphaFunc m_HasAlphaFunc;

    }
}
