// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class IWICJpegFrameDecode: IUnknown
    {
        static Guid s_uuid = new Guid("8939f66e-c46a-4c21-a9d1-98b327ce1679");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int DoesSupportIndexing(
            out int pfIndexingSupported
        ){
            var fp = GetFunctionPointer(3);
            if(m_DoesSupportIndexingFunc==null) m_DoesSupportIndexingFunc = (DoesSupportIndexingFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DoesSupportIndexingFunc));
            
            return m_DoesSupportIndexingFunc(m_ptr, out pfIndexingSupported);
        }
        delegate int DoesSupportIndexingFunc(IntPtr self, out int pfIndexingSupported);
        DoesSupportIndexingFunc m_DoesSupportIndexingFunc;

        public virtual int SetIndexing(
            WICJpegIndexingOptions options,
            uint horizontalIntervalSize
        ){
            var fp = GetFunctionPointer(4);
            if(m_SetIndexingFunc==null) m_SetIndexingFunc = (SetIndexingFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetIndexingFunc));
            
            return m_SetIndexingFunc(m_ptr, options, horizontalIntervalSize);
        }
        delegate int SetIndexingFunc(IntPtr self, WICJpegIndexingOptions options, uint horizontalIntervalSize);
        SetIndexingFunc m_SetIndexingFunc;

        public virtual int ClearIndexing(
        ){
            var fp = GetFunctionPointer(5);
            if(m_ClearIndexingFunc==null) m_ClearIndexingFunc = (ClearIndexingFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ClearIndexingFunc));
            
            return m_ClearIndexingFunc(m_ptr);
        }
        delegate int ClearIndexingFunc(IntPtr self);
        ClearIndexingFunc m_ClearIndexingFunc;

        public virtual int GetAcHuffmanTable(
            uint scanIndex,
            uint tableIndex,
            out DXGI_JPEG_AC_HUFFMAN_TABLE pAcHuffmanTable
        ){
            var fp = GetFunctionPointer(6);
            if(m_GetAcHuffmanTableFunc==null) m_GetAcHuffmanTableFunc = (GetAcHuffmanTableFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetAcHuffmanTableFunc));
            
            return m_GetAcHuffmanTableFunc(m_ptr, scanIndex, tableIndex, out pAcHuffmanTable);
        }
        delegate int GetAcHuffmanTableFunc(IntPtr self, uint scanIndex, uint tableIndex, out DXGI_JPEG_AC_HUFFMAN_TABLE pAcHuffmanTable);
        GetAcHuffmanTableFunc m_GetAcHuffmanTableFunc;

        public virtual int GetDcHuffmanTable(
            uint scanIndex,
            uint tableIndex,
            out DXGI_JPEG_DC_HUFFMAN_TABLE pDcHuffmanTable
        ){
            var fp = GetFunctionPointer(7);
            if(m_GetDcHuffmanTableFunc==null) m_GetDcHuffmanTableFunc = (GetDcHuffmanTableFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDcHuffmanTableFunc));
            
            return m_GetDcHuffmanTableFunc(m_ptr, scanIndex, tableIndex, out pDcHuffmanTable);
        }
        delegate int GetDcHuffmanTableFunc(IntPtr self, uint scanIndex, uint tableIndex, out DXGI_JPEG_DC_HUFFMAN_TABLE pDcHuffmanTable);
        GetDcHuffmanTableFunc m_GetDcHuffmanTableFunc;

        public virtual int GetQuantizationTable(
            uint scanIndex,
            uint tableIndex,
            out DXGI_JPEG_QUANTIZATION_TABLE pQuantizationTable
        ){
            var fp = GetFunctionPointer(8);
            if(m_GetQuantizationTableFunc==null) m_GetQuantizationTableFunc = (GetQuantizationTableFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetQuantizationTableFunc));
            
            return m_GetQuantizationTableFunc(m_ptr, scanIndex, tableIndex, out pQuantizationTable);
        }
        delegate int GetQuantizationTableFunc(IntPtr self, uint scanIndex, uint tableIndex, out DXGI_JPEG_QUANTIZATION_TABLE pQuantizationTable);
        GetQuantizationTableFunc m_GetQuantizationTableFunc;

        public virtual int GetFrameHeader(
            out WICJpegFrameHeader pFrameHeader
        ){
            var fp = GetFunctionPointer(9);
            if(m_GetFrameHeaderFunc==null) m_GetFrameHeaderFunc = (GetFrameHeaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFrameHeaderFunc));
            
            return m_GetFrameHeaderFunc(m_ptr, out pFrameHeader);
        }
        delegate int GetFrameHeaderFunc(IntPtr self, out WICJpegFrameHeader pFrameHeader);
        GetFrameHeaderFunc m_GetFrameHeaderFunc;

        public virtual int GetScanHeader(
            uint scanIndex,
            out WICJpegScanHeader pScanHeader
        ){
            var fp = GetFunctionPointer(10);
            if(m_GetScanHeaderFunc==null) m_GetScanHeaderFunc = (GetScanHeaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetScanHeaderFunc));
            
            return m_GetScanHeaderFunc(m_ptr, scanIndex, out pScanHeader);
        }
        delegate int GetScanHeaderFunc(IntPtr self, uint scanIndex, out WICJpegScanHeader pScanHeader);
        GetScanHeaderFunc m_GetScanHeaderFunc;

        public virtual int CopyScan(
            uint scanIndex,
            uint scanOffset,
            uint cbScanData,
            out byte pbScanData,
            out uint pcbScanDataActual
        ){
            var fp = GetFunctionPointer(11);
            if(m_CopyScanFunc==null) m_CopyScanFunc = (CopyScanFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopyScanFunc));
            
            return m_CopyScanFunc(m_ptr, scanIndex, scanOffset, cbScanData, out pbScanData, out pcbScanDataActual);
        }
        delegate int CopyScanFunc(IntPtr self, uint scanIndex, uint scanOffset, uint cbScanData, out byte pbScanData, out uint pcbScanDataActual);
        CopyScanFunc m_CopyScanFunc;

        public virtual int CopyMinimalStream(
            uint streamOffset,
            uint cbStreamData,
            out byte pbStreamData,
            out uint pcbStreamDataActual
        ){
            var fp = GetFunctionPointer(12);
            if(m_CopyMinimalStreamFunc==null) m_CopyMinimalStreamFunc = (CopyMinimalStreamFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopyMinimalStreamFunc));
            
            return m_CopyMinimalStreamFunc(m_ptr, streamOffset, cbStreamData, out pbStreamData, out pcbStreamDataActual);
        }
        delegate int CopyMinimalStreamFunc(IntPtr self, uint streamOffset, uint cbStreamData, out byte pbStreamData, out uint pcbStreamDataActual);
        CopyMinimalStreamFunc m_CopyMinimalStreamFunc;

    }
}
