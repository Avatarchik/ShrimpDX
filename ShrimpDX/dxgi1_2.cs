// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public static partial class Constants {
        public const int DXGI_SHARED_RESOURCE_READ = unchecked((int)0x80000000L);
        public const int DXGI_SHARED_RESOURCE_WRITE = ( 1 );
    }
    public class IDXGIDisplayControl: IUnknown
    {
        static Guid s_uuid = new Guid("ea9dbf1a-c88e-4486-854a-98aa0138f30c");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int IsStereoEnabled(
        ){
            var fp = GetFunctionPointer(3);
            var callback = (IsStereoEnabledFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsStereoEnabledFunc));
            
            return callback(m_ptr);
        }
        delegate int IsStereoEnabledFunc(IntPtr self);

        public virtual void SetStereoEnabled(
            int enabled
        ){
            var fp = GetFunctionPointer(4);
            var callback = (SetStereoEnabledFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetStereoEnabledFunc));
            
            callback(m_ptr, enabled);
        }
        delegate void SetStereoEnabledFunc(IntPtr self, int enabled);

    }
    public class IDXGIOutputDuplication: IDXGIObject
    {
        static Guid s_uuid = new Guid("191cfac3-a341-470d-b26e-a864f428319c");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual void GetDesc(
            out DXGI_OUTDUPL_DESC pDesc
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            callback(m_ptr, out pDesc);
        }
        delegate void GetDescFunc(IntPtr self, out DXGI_OUTDUPL_DESC pDesc);

        public virtual int AcquireNextFrame(
            uint TimeoutInMilliseconds,
            out DXGI_OUTDUPL_FRAME_INFO pFrameInfo,
            out IDXGIResource ppDesktopResource
        ){
            var fp = GetFunctionPointer(8);
            var callback = (AcquireNextFrameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AcquireNextFrameFunc));
            ppDesktopResource = new IDXGIResource();
            return callback(m_ptr, TimeoutInMilliseconds, out pFrameInfo, out ppDesktopResource.PtrForNew);
        }
        delegate int AcquireNextFrameFunc(IntPtr self, uint TimeoutInMilliseconds, out DXGI_OUTDUPL_FRAME_INFO pFrameInfo, out IntPtr ppDesktopResource);

        public virtual int GetFrameDirtyRects(
            uint DirtyRectsBufferSize,
            out tagRECT pDirtyRectsBuffer,
            out uint pDirtyRectsBufferSizeRequired
        ){
            var fp = GetFunctionPointer(9);
            var callback = (GetFrameDirtyRectsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFrameDirtyRectsFunc));
            
            return callback(m_ptr, DirtyRectsBufferSize, out pDirtyRectsBuffer, out pDirtyRectsBufferSizeRequired);
        }
        delegate int GetFrameDirtyRectsFunc(IntPtr self, uint DirtyRectsBufferSize, out tagRECT pDirtyRectsBuffer, out uint pDirtyRectsBufferSizeRequired);

        public virtual int GetFrameMoveRects(
            uint MoveRectsBufferSize,
            out DXGI_OUTDUPL_MOVE_RECT pMoveRectBuffer,
            out uint pMoveRectsBufferSizeRequired
        ){
            var fp = GetFunctionPointer(10);
            var callback = (GetFrameMoveRectsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFrameMoveRectsFunc));
            
            return callback(m_ptr, MoveRectsBufferSize, out pMoveRectBuffer, out pMoveRectsBufferSizeRequired);
        }
        delegate int GetFrameMoveRectsFunc(IntPtr self, uint MoveRectsBufferSize, out DXGI_OUTDUPL_MOVE_RECT pMoveRectBuffer, out uint pMoveRectsBufferSizeRequired);

        public virtual int GetFramePointerShape(
            uint PointerShapeBufferSize,
            IntPtr pPointerShapeBuffer,
            out uint pPointerShapeBufferSizeRequired,
            out DXGI_OUTDUPL_POINTER_SHAPE_INFO pPointerShapeInfo
        ){
            var fp = GetFunctionPointer(11);
            var callback = (GetFramePointerShapeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFramePointerShapeFunc));
            
            return callback(m_ptr, PointerShapeBufferSize, pPointerShapeBuffer, out pPointerShapeBufferSizeRequired, out pPointerShapeInfo);
        }
        delegate int GetFramePointerShapeFunc(IntPtr self, uint PointerShapeBufferSize, IntPtr pPointerShapeBuffer, out uint pPointerShapeBufferSizeRequired, out DXGI_OUTDUPL_POINTER_SHAPE_INFO pPointerShapeInfo);

        public virtual int MapDesktopSurface(
            out DXGI_MAPPED_RECT pLockedRect
        ){
            var fp = GetFunctionPointer(12);
            var callback = (MapDesktopSurfaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(MapDesktopSurfaceFunc));
            
            return callback(m_ptr, out pLockedRect);
        }
        delegate int MapDesktopSurfaceFunc(IntPtr self, out DXGI_MAPPED_RECT pLockedRect);

        public virtual int UnMapDesktopSurface(
        ){
            var fp = GetFunctionPointer(13);
            var callback = (UnMapDesktopSurfaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(UnMapDesktopSurfaceFunc));
            
            return callback(m_ptr);
        }
        delegate int UnMapDesktopSurfaceFunc(IntPtr self);

        public virtual int ReleaseFrame(
        ){
            var fp = GetFunctionPointer(14);
            var callback = (ReleaseFrameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ReleaseFrameFunc));
            
            return callback(m_ptr);
        }
        delegate int ReleaseFrameFunc(IntPtr self);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DXGI_OUTDUPL_DESC // 1
    {
        public DXGI_MODE_DESC ModeDesc;
        public DXGI_MODE_ROTATION Rotation;
        public int DesktopImageInSystemMemory;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DXGI_OUTDUPL_FRAME_INFO // 1
    {
        public _LARGE_INTEGER LastPresentTime;
        public _LARGE_INTEGER LastMouseUpdateTime;
        public uint AccumulatedFrames;
        public int RectsCoalesced;
        public int ProtectedContentMaskedOut;
        public DXGI_OUTDUPL_POINTER_POSITION PointerPosition;
        public uint TotalMetadataBufferSize;
        public uint PointerShapeBufferSize;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DXGI_OUTDUPL_POINTER_POSITION // 1
    {
        public tagPOINT Position;
        public int Visible;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DXGI_OUTDUPL_MOVE_RECT // 1
    {
        public tagPOINT SourcePoint;
        public tagRECT DestinationRect;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DXGI_OUTDUPL_POINTER_SHAPE_INFO // 1
    {
        public uint Type;
        public uint Width;
        public uint Height;
        public uint Pitch;
        public tagPOINT HotSpot;
    }
    public class IDXGISurface2: IDXGISurface1
    {
        static Guid s_uuid = new Guid("aba496dd-b617-4cb8-a866-bc44d7eb1fa2");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int GetResource(
            ref Guid riid,
            out IntPtr ppParentResource,
            out uint pSubresourceIndex
        ){
            var fp = GetFunctionPointer(13);
            var callback = (GetResourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetResourceFunc));
            
            return callback(m_ptr, ref riid, out ppParentResource, out pSubresourceIndex);
        }
        delegate int GetResourceFunc(IntPtr self, ref Guid riid, out IntPtr ppParentResource, out uint pSubresourceIndex);

    }
    public class IDXGIResource1: IDXGIResource
    {
        static Guid s_uuid = new Guid("30961379-4609-4a41-998e-54fe567ee0c1");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int CreateSubresourceSurface(
            uint index,
            out IDXGISurface2 ppSurface
        ){
            var fp = GetFunctionPointer(12);
            var callback = (CreateSubresourceSurfaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateSubresourceSurfaceFunc));
            ppSurface = new IDXGISurface2();
            return callback(m_ptr, index, out ppSurface.PtrForNew);
        }
        delegate int CreateSubresourceSurfaceFunc(IntPtr self, uint index, out IntPtr ppSurface);

        public virtual int CreateSharedHandle(
            ref _SECURITY_ATTRIBUTES pAttributes,
            uint dwAccess,
            ref ushort lpName,
            out IntPtr pHandle
        ){
            var fp = GetFunctionPointer(13);
            var callback = (CreateSharedHandleFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateSharedHandleFunc));
            
            return callback(m_ptr, ref pAttributes, dwAccess, ref lpName, out pHandle);
        }
        delegate int CreateSharedHandleFunc(IntPtr self, ref _SECURITY_ATTRIBUTES pAttributes, uint dwAccess, ref ushort lpName, out IntPtr pHandle);

    }
    public class IDXGIDevice2: IDXGIDevice1
    {
        static Guid s_uuid = new Guid("05008617-fbfd-4051-a790-144884b4f6a9");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int OfferResources(
            uint NumResources,
            ref IntPtr ppResources,
            _DXGI_OFFER_RESOURCE_PRIORITY Priority
        ){
            var fp = GetFunctionPointer(14);
            var callback = (OfferResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OfferResourcesFunc));
            
            return callback(m_ptr, NumResources, ref ppResources, Priority);
        }
        delegate int OfferResourcesFunc(IntPtr self, uint NumResources, ref IntPtr ppResources, _DXGI_OFFER_RESOURCE_PRIORITY Priority);

        public virtual int ReclaimResources(
            uint NumResources,
            ref IntPtr ppResources,
            out int pDiscarded
        ){
            var fp = GetFunctionPointer(15);
            var callback = (ReclaimResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ReclaimResourcesFunc));
            
            return callback(m_ptr, NumResources, ref ppResources, out pDiscarded);
        }
        delegate int ReclaimResourcesFunc(IntPtr self, uint NumResources, ref IntPtr ppResources, out int pDiscarded);

        public virtual int EnqueueSetEvent(
            IntPtr hEvent
        ){
            var fp = GetFunctionPointer(16);
            var callback = (EnqueueSetEventFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(EnqueueSetEventFunc));
            
            return callback(m_ptr, hEvent);
        }
        delegate int EnqueueSetEventFunc(IntPtr self, IntPtr hEvent);

    }
    public enum _DXGI_OFFER_RESOURCE_PRIORITY // 1
    {
        _LOW = 0x1,
        _NORMAL = 0x2,
        _HIGH = 0x3,
    }
    public class IDXGISwapChain1: IDXGISwapChain
    {
        static Guid s_uuid = new Guid("790a45f7-0d42-4876-983a-0a55cfe6f4aa");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int GetDesc1(
            out DXGI_SWAP_CHAIN_DESC1 pDesc
        ){
            var fp = GetFunctionPointer(18);
            var callback = (GetDesc1Func)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDesc1Func));
            
            return callback(m_ptr, out pDesc);
        }
        delegate int GetDesc1Func(IntPtr self, out DXGI_SWAP_CHAIN_DESC1 pDesc);

        public virtual int GetFullscreenDesc(
            out DXGI_SWAP_CHAIN_FULLSCREEN_DESC pDesc
        ){
            var fp = GetFunctionPointer(19);
            var callback = (GetFullscreenDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFullscreenDescFunc));
            
            return callback(m_ptr, out pDesc);
        }
        delegate int GetFullscreenDescFunc(IntPtr self, out DXGI_SWAP_CHAIN_FULLSCREEN_DESC pDesc);

        public virtual int GetHwnd(
            out IntPtr pHwnd
        ){
            var fp = GetFunctionPointer(20);
            var callback = (GetHwndFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetHwndFunc));
            
            return callback(m_ptr, out pHwnd);
        }
        delegate int GetHwndFunc(IntPtr self, out IntPtr pHwnd);

        public virtual int GetCoreWindow(
            ref Guid refiid,
            out IntPtr ppUnk
        ){
            var fp = GetFunctionPointer(21);
            var callback = (GetCoreWindowFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetCoreWindowFunc));
            
            return callback(m_ptr, ref refiid, out ppUnk);
        }
        delegate int GetCoreWindowFunc(IntPtr self, ref Guid refiid, out IntPtr ppUnk);

        public virtual int Present1(
            uint SyncInterval,
            uint PresentFlags,
            ref DXGI_PRESENT_PARAMETERS pPresentParameters
        ){
            var fp = GetFunctionPointer(22);
            var callback = (Present1Func)Marshal.GetDelegateForFunctionPointer(fp, typeof(Present1Func));
            
            return callback(m_ptr, SyncInterval, PresentFlags, ref pPresentParameters);
        }
        delegate int Present1Func(IntPtr self, uint SyncInterval, uint PresentFlags, ref DXGI_PRESENT_PARAMETERS pPresentParameters);

        public virtual int IsTemporaryMonoSupported(
        ){
            var fp = GetFunctionPointer(23);
            var callback = (IsTemporaryMonoSupportedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsTemporaryMonoSupportedFunc));
            
            return callback(m_ptr);
        }
        delegate int IsTemporaryMonoSupportedFunc(IntPtr self);

        public virtual int GetRestrictToOutput(
            out IDXGIOutput ppRestrictToOutput
        ){
            var fp = GetFunctionPointer(24);
            var callback = (GetRestrictToOutputFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetRestrictToOutputFunc));
            ppRestrictToOutput = new IDXGIOutput();
            return callback(m_ptr, out ppRestrictToOutput.PtrForNew);
        }
        delegate int GetRestrictToOutputFunc(IntPtr self, out IntPtr ppRestrictToOutput);

        public virtual int SetBackgroundColor(
            ref System.Numerics.Vector4 pColor
        ){
            var fp = GetFunctionPointer(25);
            var callback = (SetBackgroundColorFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetBackgroundColorFunc));
            
            return callback(m_ptr, ref pColor);
        }
        delegate int SetBackgroundColorFunc(IntPtr self, ref System.Numerics.Vector4 pColor);

        public virtual int GetBackgroundColor(
            out System.Numerics.Vector4 pColor
        ){
            var fp = GetFunctionPointer(26);
            var callback = (GetBackgroundColorFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetBackgroundColorFunc));
            
            return callback(m_ptr, out pColor);
        }
        delegate int GetBackgroundColorFunc(IntPtr self, out System.Numerics.Vector4 pColor);

        public virtual int SetRotation(
            DXGI_MODE_ROTATION Rotation
        ){
            var fp = GetFunctionPointer(27);
            var callback = (SetRotationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetRotationFunc));
            
            return callback(m_ptr, Rotation);
        }
        delegate int SetRotationFunc(IntPtr self, DXGI_MODE_ROTATION Rotation);

        public virtual int GetRotation(
            out DXGI_MODE_ROTATION pRotation
        ){
            var fp = GetFunctionPointer(28);
            var callback = (GetRotationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetRotationFunc));
            
            return callback(m_ptr, out pRotation);
        }
        delegate int GetRotationFunc(IntPtr self, out DXGI_MODE_ROTATION pRotation);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DXGI_SWAP_CHAIN_DESC1 // 1
    {
        public uint Width;
        public uint Height;
        public DXGI_FORMAT Format;
        public int Stereo;
        public DXGI_SAMPLE_DESC SampleDesc;
        public uint BufferUsage;
        public uint BufferCount;
        public DXGI_SCALING Scaling;
        public DXGI_SWAP_EFFECT SwapEffect;
        public DXGI_ALPHA_MODE AlphaMode;
        public uint Flags;
    }
    public enum DXGI_SCALING // 1
    {
        _STRETCH = 0x0,
        _NONE = 0x1,
        _ASPECT_RATIO_STRETCH = 0x2,
    }
    public enum DXGI_ALPHA_MODE // 1
    {
        _UNSPECIFIED = 0x0,
        _PREMULTIPLIED = 0x1,
        _STRAIGHT = 0x2,
        _IGNORE = 0x3,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DXGI_SWAP_CHAIN_FULLSCREEN_DESC // 1
    {
        public DXGI_RATIONAL RefreshRate;
        public DXGI_MODE_SCANLINE_ORDER ScanlineOrdering;
        public DXGI_MODE_SCALING Scaling;
        public int Windowed;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DXGI_PRESENT_PARAMETERS // 1
    {
        public uint DirtyRectsCount;
        public IntPtr pDirtyRects;
        public IntPtr pScrollRect;
        public IntPtr pScrollOffset;
    }
    public class IDXGIFactory2: IDXGIFactory1
    {
        static Guid s_uuid = new Guid("50c83a1c-e072-4c48-87b0-3630fa36a6d0");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int IsWindowedStereoEnabled(
        ){
            var fp = GetFunctionPointer(14);
            var callback = (IsWindowedStereoEnabledFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsWindowedStereoEnabledFunc));
            
            return callback(m_ptr);
        }
        delegate int IsWindowedStereoEnabledFunc(IntPtr self);

        public virtual int CreateSwapChainForHwnd(
            IUnknown pDevice,
            IntPtr hWnd,
            ref DXGI_SWAP_CHAIN_DESC1 pDesc,
            ref DXGI_SWAP_CHAIN_FULLSCREEN_DESC pFullscreenDesc,
            IDXGIOutput pRestrictToOutput,
            out IDXGISwapChain1 ppSwapChain
        ){
            var fp = GetFunctionPointer(15);
            var callback = (CreateSwapChainForHwndFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateSwapChainForHwndFunc));
            ppSwapChain = new IDXGISwapChain1();
            return callback(m_ptr, pDevice!=null ? pDevice.Ptr : IntPtr.Zero, hWnd, ref pDesc, ref pFullscreenDesc, pRestrictToOutput!=null ? pRestrictToOutput.Ptr : IntPtr.Zero, out ppSwapChain.PtrForNew);
        }
        delegate int CreateSwapChainForHwndFunc(IntPtr self, IntPtr pDevice, IntPtr hWnd, ref DXGI_SWAP_CHAIN_DESC1 pDesc, ref DXGI_SWAP_CHAIN_FULLSCREEN_DESC pFullscreenDesc, IntPtr pRestrictToOutput, out IntPtr ppSwapChain);

        public virtual int CreateSwapChainForCoreWindow(
            IUnknown pDevice,
            IUnknown pWindow,
            ref DXGI_SWAP_CHAIN_DESC1 pDesc,
            IDXGIOutput pRestrictToOutput,
            out IDXGISwapChain1 ppSwapChain
        ){
            var fp = GetFunctionPointer(16);
            var callback = (CreateSwapChainForCoreWindowFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateSwapChainForCoreWindowFunc));
            ppSwapChain = new IDXGISwapChain1();
            return callback(m_ptr, pDevice!=null ? pDevice.Ptr : IntPtr.Zero, pWindow!=null ? pWindow.Ptr : IntPtr.Zero, ref pDesc, pRestrictToOutput!=null ? pRestrictToOutput.Ptr : IntPtr.Zero, out ppSwapChain.PtrForNew);
        }
        delegate int CreateSwapChainForCoreWindowFunc(IntPtr self, IntPtr pDevice, IntPtr pWindow, ref DXGI_SWAP_CHAIN_DESC1 pDesc, IntPtr pRestrictToOutput, out IntPtr ppSwapChain);

        public virtual int GetSharedResourceAdapterLuid(
            IntPtr hResource,
            out _LUID pLuid
        ){
            var fp = GetFunctionPointer(17);
            var callback = (GetSharedResourceAdapterLuidFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetSharedResourceAdapterLuidFunc));
            
            return callback(m_ptr, hResource, out pLuid);
        }
        delegate int GetSharedResourceAdapterLuidFunc(IntPtr self, IntPtr hResource, out _LUID pLuid);

        public virtual int RegisterStereoStatusWindow(
            IntPtr WindowHandle,
            uint wMsg,
            out uint pdwCookie
        ){
            var fp = GetFunctionPointer(18);
            var callback = (RegisterStereoStatusWindowFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RegisterStereoStatusWindowFunc));
            
            return callback(m_ptr, WindowHandle, wMsg, out pdwCookie);
        }
        delegate int RegisterStereoStatusWindowFunc(IntPtr self, IntPtr WindowHandle, uint wMsg, out uint pdwCookie);

        public virtual int RegisterStereoStatusEvent(
            IntPtr hEvent,
            out uint pdwCookie
        ){
            var fp = GetFunctionPointer(19);
            var callback = (RegisterStereoStatusEventFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RegisterStereoStatusEventFunc));
            
            return callback(m_ptr, hEvent, out pdwCookie);
        }
        delegate int RegisterStereoStatusEventFunc(IntPtr self, IntPtr hEvent, out uint pdwCookie);

        public virtual void UnregisterStereoStatus(
            uint dwCookie
        ){
            var fp = GetFunctionPointer(20);
            var callback = (UnregisterStereoStatusFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(UnregisterStereoStatusFunc));
            
            callback(m_ptr, dwCookie);
        }
        delegate void UnregisterStereoStatusFunc(IntPtr self, uint dwCookie);

        public virtual int RegisterOcclusionStatusWindow(
            IntPtr WindowHandle,
            uint wMsg,
            out uint pdwCookie
        ){
            var fp = GetFunctionPointer(21);
            var callback = (RegisterOcclusionStatusWindowFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RegisterOcclusionStatusWindowFunc));
            
            return callback(m_ptr, WindowHandle, wMsg, out pdwCookie);
        }
        delegate int RegisterOcclusionStatusWindowFunc(IntPtr self, IntPtr WindowHandle, uint wMsg, out uint pdwCookie);

        public virtual int RegisterOcclusionStatusEvent(
            IntPtr hEvent,
            out uint pdwCookie
        ){
            var fp = GetFunctionPointer(22);
            var callback = (RegisterOcclusionStatusEventFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RegisterOcclusionStatusEventFunc));
            
            return callback(m_ptr, hEvent, out pdwCookie);
        }
        delegate int RegisterOcclusionStatusEventFunc(IntPtr self, IntPtr hEvent, out uint pdwCookie);

        public virtual void UnregisterOcclusionStatus(
            uint dwCookie
        ){
            var fp = GetFunctionPointer(23);
            var callback = (UnregisterOcclusionStatusFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(UnregisterOcclusionStatusFunc));
            
            callback(m_ptr, dwCookie);
        }
        delegate void UnregisterOcclusionStatusFunc(IntPtr self, uint dwCookie);

        public virtual int CreateSwapChainForComposition(
            IUnknown pDevice,
            ref DXGI_SWAP_CHAIN_DESC1 pDesc,
            IDXGIOutput pRestrictToOutput,
            out IDXGISwapChain1 ppSwapChain
        ){
            var fp = GetFunctionPointer(24);
            var callback = (CreateSwapChainForCompositionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateSwapChainForCompositionFunc));
            ppSwapChain = new IDXGISwapChain1();
            return callback(m_ptr, pDevice!=null ? pDevice.Ptr : IntPtr.Zero, ref pDesc, pRestrictToOutput!=null ? pRestrictToOutput.Ptr : IntPtr.Zero, out ppSwapChain.PtrForNew);
        }
        delegate int CreateSwapChainForCompositionFunc(IntPtr self, IntPtr pDevice, ref DXGI_SWAP_CHAIN_DESC1 pDesc, IntPtr pRestrictToOutput, out IntPtr ppSwapChain);

    }
    public class IDXGIAdapter2: IDXGIAdapter1
    {
        static Guid s_uuid = new Guid("0aa1ae0a-fa0e-4b84-8644-e05ff8e5acb5");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int GetDesc2(
            out DXGI_ADAPTER_DESC2 pDesc
        ){
            var fp = GetFunctionPointer(11);
            var callback = (GetDesc2Func)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDesc2Func));
            
            return callback(m_ptr, out pDesc);
        }
        delegate int GetDesc2Func(IntPtr self, out DXGI_ADAPTER_DESC2 pDesc);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DXGI_ADAPTER_DESC2 // 1
    {
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=128)]public ushort[] Description;
        public uint VendorId;
        public uint DeviceId;
        public uint SubSysId;
        public uint Revision;
        public ulong DedicatedVideoMemory;
        public ulong DedicatedSystemMemory;
        public ulong SharedSystemMemory;
        public _LUID AdapterLuid;
        public uint Flags;
        public DXGI_GRAPHICS_PREEMPTION_GRANULARITY GraphicsPreemptionGranularity;
        public DXGI_COMPUTE_PREEMPTION_GRANULARITY ComputePreemptionGranularity;
    }
    public enum DXGI_GRAPHICS_PREEMPTION_GRANULARITY // 1
    {
        _DMA_BUFFER_BOUNDARY = 0x0,
        _PRIMITIVE_BOUNDARY = 0x1,
        _TRIANGLE_BOUNDARY = 0x2,
        _PIXEL_BOUNDARY = 0x3,
        _INSTRUCTION_BOUNDARY = 0x4,
    }
    public enum DXGI_COMPUTE_PREEMPTION_GRANULARITY // 1
    {
        _DMA_BUFFER_BOUNDARY = 0x0,
        _DISPATCH_BOUNDARY = 0x1,
        _THREAD_GROUP_BOUNDARY = 0x2,
        _THREAD_BOUNDARY = 0x3,
        _INSTRUCTION_BOUNDARY = 0x4,
    }
    public class IDXGIOutput1: IDXGIOutput
    {
        static Guid s_uuid = new Guid("00cddea8-939b-4b83-a340-a685226666cc");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int GetDisplayModeList1(
            DXGI_FORMAT EnumFormat,
            uint Flags,
            out uint pNumModes,
            out DXGI_MODE_DESC1 pDesc
        ){
            var fp = GetFunctionPointer(19);
            var callback = (GetDisplayModeList1Func)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDisplayModeList1Func));
            
            return callback(m_ptr, EnumFormat, Flags, out pNumModes, out pDesc);
        }
        delegate int GetDisplayModeList1Func(IntPtr self, DXGI_FORMAT EnumFormat, uint Flags, out uint pNumModes, out DXGI_MODE_DESC1 pDesc);

        public virtual int FindClosestMatchingMode1(
            ref DXGI_MODE_DESC1 pModeToMatch,
            out DXGI_MODE_DESC1 pClosestMatch,
            IUnknown pConcernedDevice
        ){
            var fp = GetFunctionPointer(20);
            var callback = (FindClosestMatchingMode1Func)Marshal.GetDelegateForFunctionPointer(fp, typeof(FindClosestMatchingMode1Func));
            
            return callback(m_ptr, ref pModeToMatch, out pClosestMatch, pConcernedDevice!=null ? pConcernedDevice.Ptr : IntPtr.Zero);
        }
        delegate int FindClosestMatchingMode1Func(IntPtr self, ref DXGI_MODE_DESC1 pModeToMatch, out DXGI_MODE_DESC1 pClosestMatch, IntPtr pConcernedDevice);

        public virtual int GetDisplaySurfaceData1(
            IDXGIResource pDestination
        ){
            var fp = GetFunctionPointer(21);
            var callback = (GetDisplaySurfaceData1Func)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDisplaySurfaceData1Func));
            
            return callback(m_ptr, pDestination!=null ? pDestination.Ptr : IntPtr.Zero);
        }
        delegate int GetDisplaySurfaceData1Func(IntPtr self, IntPtr pDestination);

        public virtual int DuplicateOutput(
            IUnknown pDevice,
            out IDXGIOutputDuplication ppOutputDuplication
        ){
            var fp = GetFunctionPointer(22);
            var callback = (DuplicateOutputFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DuplicateOutputFunc));
            ppOutputDuplication = new IDXGIOutputDuplication();
            return callback(m_ptr, pDevice!=null ? pDevice.Ptr : IntPtr.Zero, out ppOutputDuplication.PtrForNew);
        }
        delegate int DuplicateOutputFunc(IntPtr self, IntPtr pDevice, out IntPtr ppOutputDuplication);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DXGI_MODE_DESC1 // 1
    {
        public uint Width;
        public uint Height;
        public DXGI_RATIONAL RefreshRate;
        public DXGI_FORMAT Format;
        public DXGI_MODE_SCANLINE_ORDER ScanlineOrdering;
        public DXGI_MODE_SCALING Scaling;
        public int Stereo;
    }
    public enum DXGI_OUTDUPL_POINTER_SHAPE_TYPE // 1
    {
        _MONOCHROME = 0x1,
        _COLOR = 0x2,
        _MASKED_COLOR = 0x4,
    }
}
