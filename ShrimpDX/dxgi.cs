// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public static partial class Constants {
        public const int DXGI_CPU_ACCESS_NONE = ( 0 );
        public const int DXGI_CPU_ACCESS_DYNAMIC = ( 1 );
        public const int DXGI_CPU_ACCESS_READ_WRITE = ( 2 );
        public const int DXGI_CPU_ACCESS_SCRATCH = ( 3 );
        public const int DXGI_CPU_ACCESS_FIELD = 15;
        public const ulong DXGI_USAGE_SHADER_INPUT = 0x00000010UL;
        public const ulong DXGI_USAGE_RENDER_TARGET_OUTPUT = 0x00000020UL;
        public const ulong DXGI_USAGE_BACK_BUFFER = 0x00000040UL;
        public const ulong DXGI_USAGE_SHARED = 0x00000080UL;
        public const ulong DXGI_USAGE_READ_ONLY = 0x00000100UL;
        public const ulong DXGI_USAGE_DISCARD_ON_PRESENT = 0x00000200UL;
        public const ulong DXGI_USAGE_UNORDERED_ACCESS = 0x00000400UL;
        public const int DXGI_RESOURCE_PRIORITY_MINIMUM = ( 0x28000000 );
        public const int DXGI_RESOURCE_PRIORITY_LOW = ( 0x50000000 );
        public const int DXGI_RESOURCE_PRIORITY_NORMAL = ( 0x78000000 );
        public const int DXGI_RESOURCE_PRIORITY_HIGH = unchecked ((int) 0xa0000000 );
        public const int DXGI_RESOURCE_PRIORITY_MAXIMUM = unchecked ((int) 0xc8000000 );
        public const ulong DXGI_MAP_READ = ( 1UL );
        public const ulong DXGI_MAP_WRITE = ( 2UL );
        public const ulong DXGI_MAP_DISCARD = ( 4UL );
        public const ulong DXGI_ENUM_MODES_INTERLACED = ( 1UL );
        public const ulong DXGI_ENUM_MODES_SCALING = ( 2UL );
        public const int DXGI_MAX_SWAP_CHAIN_BUFFERS = ( 16 );
        public const ulong DXGI_PRESENT_TEST = 0x00000001UL;
        public const ulong DXGI_PRESENT_DO_NOT_SEQUENCE = 0x00000002UL;
        public const ulong DXGI_PRESENT_RESTART = 0x00000004UL;
        public const ulong DXGI_PRESENT_DO_NOT_WAIT = 0x00000008UL;
        public const ulong DXGI_PRESENT_STEREO_PREFER_RIGHT = 0x00000010UL;
        public const ulong DXGI_PRESENT_STEREO_TEMPORARY_MONO = 0x00000020UL;
        public const ulong DXGI_PRESENT_RESTRICT_TO_OUTPUT = 0x00000040UL;
        public const ulong DXGI_PRESENT_USE_DURATION = 0x00000100UL;
        public const ulong DXGI_PRESENT_ALLOW_TEARING = 0x00000200UL;
        public const int DXGI_MWA_NO_WINDOW_CHANGES = ( 1 << 0 );
        public const int DXGI_MWA_NO_ALT_ENTER = ( 1 << 1 );
        public const int DXGI_MWA_NO_PRINT_SCREEN = ( 1 << 2 );
        public const int DXGI_MWA_VALID = ( 0x7 );
    }
    public class IDXGIAdapter: IDXGIObject
    {
        static Guid s_uuid = new Guid("2411e7e1-12ac-4ccf-bd14-9798e8534dc0");
        public static new ref Guid IID => ref s_uuid;
                    
        public virtual HRESULT EnumOutputs(
            uint Output,
            out IDXGIOutput ppOutput
        ){
            var fp = GetFunctionPointer(7);
            var callback = (EnumOutputsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(EnumOutputsFunc));
            ppOutput = new IDXGIOutput();
            return callback(m_ptr, Output, out ppOutput.PtrForNew);
        }
        delegate HRESULT EnumOutputsFunc(IntPtr self, uint Output, out IntPtr ppOutput);

        public virtual HRESULT GetDesc(
            out DXGI_ADAPTER_DESC pDesc
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            return callback(m_ptr, out pDesc);
        }
        delegate HRESULT GetDescFunc(IntPtr self, out DXGI_ADAPTER_DESC pDesc);

        public virtual HRESULT CheckInterfaceSupport(
            ref Guid InterfaceName,
            out LARGE_INTEGER pUMDVersion
        ){
            var fp = GetFunctionPointer(9);
            var callback = (CheckInterfaceSupportFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CheckInterfaceSupportFunc));
            
            return callback(m_ptr, ref InterfaceName, out pUMDVersion);
        }
        delegate HRESULT CheckInterfaceSupportFunc(IntPtr self, ref Guid InterfaceName, out LARGE_INTEGER pUMDVersion);

    }
    public class IDXGIObject: IUnknown
    {
        static Guid s_uuid = new Guid("aec22fb8-76f3-4639-9be0-28eb43a67a2e");
        public static new ref Guid IID => ref s_uuid;
                    
        public virtual HRESULT SetPrivateData(
            ref Guid Name,
            uint DataSize,
            IntPtr pData
        ){
            var fp = GetFunctionPointer(3);
            var callback = (SetPrivateDataFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetPrivateDataFunc));
            
            return callback(m_ptr, ref Name, DataSize, pData);
        }
        delegate HRESULT SetPrivateDataFunc(IntPtr self, ref Guid Name, uint DataSize, IntPtr pData);

        public virtual HRESULT SetPrivateDataInterface(
            ref Guid Name,
            IUnknown pUnknown
        ){
            var fp = GetFunctionPointer(4);
            var callback = (SetPrivateDataInterfaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetPrivateDataInterfaceFunc));
            
            return callback(m_ptr, ref Name, pUnknown.Ptr);
        }
        delegate HRESULT SetPrivateDataInterfaceFunc(IntPtr self, ref Guid Name, IntPtr pUnknown);

        public virtual HRESULT GetPrivateData(
            ref Guid Name,
            out uint pDataSize,
            IntPtr pData
        ){
            var fp = GetFunctionPointer(5);
            var callback = (GetPrivateDataFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPrivateDataFunc));
            
            return callback(m_ptr, ref Name, out pDataSize, pData);
        }
        delegate HRESULT GetPrivateDataFunc(IntPtr self, ref Guid Name, out uint pDataSize, IntPtr pData);

        public virtual HRESULT GetParent(
            ref Guid riid,
            out IntPtr ppParent
        ){
            var fp = GetFunctionPointer(6);
            var callback = (GetParentFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetParentFunc));
            
            return callback(m_ptr, ref riid, out ppParent);
        }
        delegate HRESULT GetParentFunc(IntPtr self, ref Guid riid, out IntPtr ppParent);

    }
    public class IDXGIOutput: IDXGIObject
    {
        static Guid s_uuid = new Guid("ae02eedb-c735-4690-8d52-5a8dc20213aa");
        public static new ref Guid IID => ref s_uuid;
                    
        public virtual HRESULT GetDesc(
            out DXGI_OUTPUT_DESC pDesc
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            return callback(m_ptr, out pDesc);
        }
        delegate HRESULT GetDescFunc(IntPtr self, out DXGI_OUTPUT_DESC pDesc);

        public virtual HRESULT GetDisplayModeList(
            DXGI_FORMAT EnumFormat,
            uint Flags,
            out uint pNumModes,
            out DXGI_MODE_DESC pDesc
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetDisplayModeListFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDisplayModeListFunc));
            
            return callback(m_ptr, EnumFormat, Flags, out pNumModes, out pDesc);
        }
        delegate HRESULT GetDisplayModeListFunc(IntPtr self, DXGI_FORMAT EnumFormat, uint Flags, out uint pNumModes, out DXGI_MODE_DESC pDesc);

        public virtual HRESULT FindClosestMatchingMode(
            ref DXGI_MODE_DESC pModeToMatch,
            out DXGI_MODE_DESC pClosestMatch,
            IUnknown pConcernedDevice
        ){
            var fp = GetFunctionPointer(9);
            var callback = (FindClosestMatchingModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FindClosestMatchingModeFunc));
            
            return callback(m_ptr, ref pModeToMatch, out pClosestMatch, pConcernedDevice.Ptr);
        }
        delegate HRESULT FindClosestMatchingModeFunc(IntPtr self, ref DXGI_MODE_DESC pModeToMatch, out DXGI_MODE_DESC pClosestMatch, IntPtr pConcernedDevice);

        public virtual HRESULT WaitForVBlank(
        ){
            var fp = GetFunctionPointer(10);
            var callback = (WaitForVBlankFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(WaitForVBlankFunc));
            
            return callback(m_ptr);
        }
        delegate HRESULT WaitForVBlankFunc(IntPtr self);

        public virtual HRESULT TakeOwnership(
            IUnknown pDevice,
            int Exclusive
        ){
            var fp = GetFunctionPointer(11);
            var callback = (TakeOwnershipFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(TakeOwnershipFunc));
            
            return callback(m_ptr, pDevice.Ptr, Exclusive);
        }
        delegate HRESULT TakeOwnershipFunc(IntPtr self, IntPtr pDevice, int Exclusive);

        public virtual void ReleaseOwnership(
        ){
            var fp = GetFunctionPointer(12);
            var callback = (ReleaseOwnershipFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ReleaseOwnershipFunc));
            
            callback(m_ptr);
        }
        delegate void ReleaseOwnershipFunc(IntPtr self);

        public virtual HRESULT GetGammaControlCapabilities(
            out DXGI_GAMMA_CONTROL_CAPABILITIES pGammaCaps
        ){
            var fp = GetFunctionPointer(13);
            var callback = (GetGammaControlCapabilitiesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetGammaControlCapabilitiesFunc));
            
            return callback(m_ptr, out pGammaCaps);
        }
        delegate HRESULT GetGammaControlCapabilitiesFunc(IntPtr self, out DXGI_GAMMA_CONTROL_CAPABILITIES pGammaCaps);

        public virtual HRESULT SetGammaControl(
            ref DXGI_GAMMA_CONTROL pArray
        ){
            var fp = GetFunctionPointer(14);
            var callback = (SetGammaControlFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetGammaControlFunc));
            
            return callback(m_ptr, ref pArray);
        }
        delegate HRESULT SetGammaControlFunc(IntPtr self, ref DXGI_GAMMA_CONTROL pArray);

        public virtual HRESULT GetGammaControl(
            out DXGI_GAMMA_CONTROL pArray
        ){
            var fp = GetFunctionPointer(15);
            var callback = (GetGammaControlFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetGammaControlFunc));
            
            return callback(m_ptr, out pArray);
        }
        delegate HRESULT GetGammaControlFunc(IntPtr self, out DXGI_GAMMA_CONTROL pArray);

        public virtual HRESULT SetDisplaySurface(
            IDXGISurface pScanoutSurface
        ){
            var fp = GetFunctionPointer(16);
            var callback = (SetDisplaySurfaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetDisplaySurfaceFunc));
            
            return callback(m_ptr, pScanoutSurface.Ptr);
        }
        delegate HRESULT SetDisplaySurfaceFunc(IntPtr self, IntPtr pScanoutSurface);

        public virtual HRESULT GetDisplaySurfaceData(
            IDXGISurface pDestination
        ){
            var fp = GetFunctionPointer(17);
            var callback = (GetDisplaySurfaceDataFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDisplaySurfaceDataFunc));
            
            return callback(m_ptr, pDestination.Ptr);
        }
        delegate HRESULT GetDisplaySurfaceDataFunc(IntPtr self, IntPtr pDestination);

        public virtual HRESULT GetFrameStatistics(
            out DXGI_FRAME_STATISTICS pStats
        ){
            var fp = GetFunctionPointer(18);
            var callback = (GetFrameStatisticsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFrameStatisticsFunc));
            
            return callback(m_ptr, out pStats);
        }
        delegate HRESULT GetFrameStatisticsFunc(IntPtr self, out DXGI_FRAME_STATISTICS pStats);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DXGI_OUTPUT_DESC // 1
    {
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=32)]public WCHAR[] DeviceName;
        public RECT DesktopCoordinates;
        public int AttachedToDesktop;
        public DXGI_MODE_ROTATION Rotation;
        public HMONITOR Monitor;
    }
    public class IDXGISurface: IDXGIDeviceSubObject
    {
        static Guid s_uuid = new Guid("cafcb56c-6ac3-4889-bf47-9e23bbd260ec");
        public static new ref Guid IID => ref s_uuid;
                    
        public virtual HRESULT GetDesc(
            out DXGI_SURFACE_DESC pDesc
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            return callback(m_ptr, out pDesc);
        }
        delegate HRESULT GetDescFunc(IntPtr self, out DXGI_SURFACE_DESC pDesc);

        public virtual HRESULT Map(
            out DXGI_MAPPED_RECT pLockedRect,
            uint MapFlags
        ){
            var fp = GetFunctionPointer(9);
            var callback = (MapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(MapFunc));
            
            return callback(m_ptr, out pLockedRect, MapFlags);
        }
        delegate HRESULT MapFunc(IntPtr self, out DXGI_MAPPED_RECT pLockedRect, uint MapFlags);

        public virtual HRESULT Unmap(
        ){
            var fp = GetFunctionPointer(10);
            var callback = (UnmapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(UnmapFunc));
            
            return callback(m_ptr);
        }
        delegate HRESULT UnmapFunc(IntPtr self);

    }
    public class IDXGIDeviceSubObject: IDXGIObject
    {
        static Guid s_uuid = new Guid("3d3e0379-f9de-4d58-bb6c-18d62992f1a6");
        public static new ref Guid IID => ref s_uuid;
                    
        public virtual HRESULT GetDevice(
            ref Guid riid,
            out IntPtr ppDevice
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetDeviceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDeviceFunc));
            
            return callback(m_ptr, ref riid, out ppDevice);
        }
        delegate HRESULT GetDeviceFunc(IntPtr self, ref Guid riid, out IntPtr ppDevice);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DXGI_SURFACE_DESC // 1
    {
        public uint Width;
        public uint Height;
        public DXGI_FORMAT Format;
        public DXGI_SAMPLE_DESC SampleDesc;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DXGI_MAPPED_RECT // 1
    {
        public int Pitch;
        public IntPtr pBits;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DXGI_FRAME_STATISTICS // 1
    {
        public uint PresentCount;
        public uint PresentRefreshCount;
        public uint SyncRefreshCount;
        public LARGE_INTEGER SyncQPCTime;
        public LARGE_INTEGER SyncGPUTime;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DXGI_ADAPTER_DESC // 1
    {
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=128)]public WCHAR[] Description;
        public uint VendorId;
        public uint DeviceId;
        public uint SubSysId;
        public uint Revision;
        public SIZE_T DedicatedVideoMemory;
        public SIZE_T DedicatedSystemMemory;
        public SIZE_T SharedSystemMemory;
        public LUID AdapterLuid;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DXGI_SWAP_CHAIN_DESC // 1
    {
        public DXGI_MODE_DESC BufferDesc;
        public DXGI_SAMPLE_DESC SampleDesc;
        public DXGI_USAGE BufferUsage;
        public uint BufferCount;
        public HWND OutputWindow;
        public int Windowed;
        public DXGI_SWAP_EFFECT SwapEffect;
        public uint Flags;
    }
    public struct DXGI_USAGE { public uint Value; } // 3
    public enum DXGI_SWAP_EFFECT // 1
    {
        _DISCARD = 0x0,
        _SEQUENTIAL = 0x1,
        _FLIP_SEQUENTIAL = 0x3,
        _FLIP_DISCARD = 0x4,
    }
    public class IDXGISwapChain: IDXGIDeviceSubObject
    {
        static Guid s_uuid = new Guid("310d36a0-d2e7-4c0a-aa04-6a9d23b8886a");
        public static new ref Guid IID => ref s_uuid;
                    
        public virtual HRESULT Present(
            uint SyncInterval,
            uint Flags
        ){
            var fp = GetFunctionPointer(8);
            var callback = (PresentFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PresentFunc));
            
            return callback(m_ptr, SyncInterval, Flags);
        }
        delegate HRESULT PresentFunc(IntPtr self, uint SyncInterval, uint Flags);

        public virtual HRESULT GetBuffer(
            uint Buffer,
            ref Guid riid,
            out IntPtr ppSurface
        ){
            var fp = GetFunctionPointer(9);
            var callback = (GetBufferFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetBufferFunc));
            
            return callback(m_ptr, Buffer, ref riid, out ppSurface);
        }
        delegate HRESULT GetBufferFunc(IntPtr self, uint Buffer, ref Guid riid, out IntPtr ppSurface);

        public virtual HRESULT SetFullscreenState(
            int Fullscreen,
            IDXGIOutput pTarget
        ){
            var fp = GetFunctionPointer(10);
            var callback = (SetFullscreenStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetFullscreenStateFunc));
            
            return callback(m_ptr, Fullscreen, pTarget.Ptr);
        }
        delegate HRESULT SetFullscreenStateFunc(IntPtr self, int Fullscreen, IntPtr pTarget);

        public virtual HRESULT GetFullscreenState(
            out int pFullscreen,
            out IDXGIOutput ppTarget
        ){
            var fp = GetFunctionPointer(11);
            var callback = (GetFullscreenStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFullscreenStateFunc));
            ppTarget = new IDXGIOutput();
            return callback(m_ptr, out pFullscreen, out ppTarget.PtrForNew);
        }
        delegate HRESULT GetFullscreenStateFunc(IntPtr self, out int pFullscreen, out IntPtr ppTarget);

        public virtual HRESULT GetDesc(
            out DXGI_SWAP_CHAIN_DESC pDesc
        ){
            var fp = GetFunctionPointer(12);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            return callback(m_ptr, out pDesc);
        }
        delegate HRESULT GetDescFunc(IntPtr self, out DXGI_SWAP_CHAIN_DESC pDesc);

        public virtual HRESULT ResizeBuffers(
            uint BufferCount,
            uint Width,
            uint Height,
            DXGI_FORMAT NewFormat,
            uint SwapChainFlags
        ){
            var fp = GetFunctionPointer(13);
            var callback = (ResizeBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ResizeBuffersFunc));
            
            return callback(m_ptr, BufferCount, Width, Height, NewFormat, SwapChainFlags);
        }
        delegate HRESULT ResizeBuffersFunc(IntPtr self, uint BufferCount, uint Width, uint Height, DXGI_FORMAT NewFormat, uint SwapChainFlags);

        public virtual HRESULT ResizeTarget(
            ref DXGI_MODE_DESC pNewTargetParameters
        ){
            var fp = GetFunctionPointer(14);
            var callback = (ResizeTargetFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ResizeTargetFunc));
            
            return callback(m_ptr, ref pNewTargetParameters);
        }
        delegate HRESULT ResizeTargetFunc(IntPtr self, ref DXGI_MODE_DESC pNewTargetParameters);

        public virtual HRESULT GetContainingOutput(
            out IDXGIOutput ppOutput
        ){
            var fp = GetFunctionPointer(15);
            var callback = (GetContainingOutputFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetContainingOutputFunc));
            ppOutput = new IDXGIOutput();
            return callback(m_ptr, out ppOutput.PtrForNew);
        }
        delegate HRESULT GetContainingOutputFunc(IntPtr self, out IntPtr ppOutput);

        public virtual HRESULT GetFrameStatistics(
            out DXGI_FRAME_STATISTICS pStats
        ){
            var fp = GetFunctionPointer(16);
            var callback = (GetFrameStatisticsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFrameStatisticsFunc));
            
            return callback(m_ptr, out pStats);
        }
        delegate HRESULT GetFrameStatisticsFunc(IntPtr self, out DXGI_FRAME_STATISTICS pStats);

        public virtual HRESULT GetLastPresentCount(
            out uint pLastPresentCount
        ){
            var fp = GetFunctionPointer(17);
            var callback = (GetLastPresentCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetLastPresentCountFunc));
            
            return callback(m_ptr, out pLastPresentCount);
        }
        delegate HRESULT GetLastPresentCountFunc(IntPtr self, out uint pLastPresentCount);

    }
    public class IDXGIResource: IDXGIDeviceSubObject
    {
        static Guid s_uuid = new Guid("035f3ab4-482e-4e50-b41f-8a7f8bd8960b");
        public static new ref Guid IID => ref s_uuid;
                    
        public virtual HRESULT GetSharedHandle(
            out HANDLE pSharedHandle
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetSharedHandleFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetSharedHandleFunc));
            
            return callback(m_ptr, out pSharedHandle);
        }
        delegate HRESULT GetSharedHandleFunc(IntPtr self, out HANDLE pSharedHandle);

        public virtual HRESULT GetUsage(
            out DXGI_USAGE pUsage
        ){
            var fp = GetFunctionPointer(9);
            var callback = (GetUsageFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetUsageFunc));
            
            return callback(m_ptr, out pUsage);
        }
        delegate HRESULT GetUsageFunc(IntPtr self, out DXGI_USAGE pUsage);

        public virtual HRESULT SetEvictionPriority(
            uint EvictionPriority
        ){
            var fp = GetFunctionPointer(10);
            var callback = (SetEvictionPriorityFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetEvictionPriorityFunc));
            
            return callback(m_ptr, EvictionPriority);
        }
        delegate HRESULT SetEvictionPriorityFunc(IntPtr self, uint EvictionPriority);

        public virtual HRESULT GetEvictionPriority(
            out uint pEvictionPriority
        ){
            var fp = GetFunctionPointer(11);
            var callback = (GetEvictionPriorityFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetEvictionPriorityFunc));
            
            return callback(m_ptr, out pEvictionPriority);
        }
        delegate HRESULT GetEvictionPriorityFunc(IntPtr self, out uint pEvictionPriority);

    }
    public class IDXGIKeyedMutex: IDXGIDeviceSubObject
    {
        static Guid s_uuid = new Guid("9d8e1289-d7b3-465f-8126-250e349af85d");
        public static new ref Guid IID => ref s_uuid;
                    
        public virtual HRESULT AcquireSync(
            UINT64 Key,
            DWORD dwMilliseconds
        ){
            var fp = GetFunctionPointer(8);
            var callback = (AcquireSyncFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AcquireSyncFunc));
            
            return callback(m_ptr, Key, dwMilliseconds);
        }
        delegate HRESULT AcquireSyncFunc(IntPtr self, UINT64 Key, DWORD dwMilliseconds);

        public virtual HRESULT ReleaseSync(
            UINT64 Key
        ){
            var fp = GetFunctionPointer(9);
            var callback = (ReleaseSyncFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ReleaseSyncFunc));
            
            return callback(m_ptr, Key);
        }
        delegate HRESULT ReleaseSyncFunc(IntPtr self, UINT64 Key);

    }
    public class IDXGISurface1: IDXGISurface
    {
        static Guid s_uuid = new Guid("4ae63092-6327-4c1b-80ae-bfe12ea32b86");
        public static new ref Guid IID => ref s_uuid;
                    
        public virtual HRESULT GetDC(
            int Discard,
            out HDC phdc
        ){
            var fp = GetFunctionPointer(11);
            var callback = (GetDCFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDCFunc));
            
            return callback(m_ptr, Discard, out phdc);
        }
        delegate HRESULT GetDCFunc(IntPtr self, int Discard, out HDC phdc);

        public virtual HRESULT ReleaseDC(
            out RECT pDirtyRect
        ){
            var fp = GetFunctionPointer(12);
            var callback = (ReleaseDCFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ReleaseDCFunc));
            
            return callback(m_ptr, out pDirtyRect);
        }
        delegate HRESULT ReleaseDCFunc(IntPtr self, out RECT pDirtyRect);

    }
    public class IDXGIFactory: IDXGIObject
    {
        static Guid s_uuid = new Guid("7b7166ec-21c7-44ae-b21a-c9ae321ae369");
        public static new ref Guid IID => ref s_uuid;
                    
        public virtual HRESULT EnumAdapters(
            uint Adapter,
            out IDXGIAdapter ppAdapter
        ){
            var fp = GetFunctionPointer(7);
            var callback = (EnumAdaptersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(EnumAdaptersFunc));
            ppAdapter = new IDXGIAdapter();
            return callback(m_ptr, Adapter, out ppAdapter.PtrForNew);
        }
        delegate HRESULT EnumAdaptersFunc(IntPtr self, uint Adapter, out IntPtr ppAdapter);

        public virtual HRESULT MakeWindowAssociation(
            HWND WindowHandle,
            uint Flags
        ){
            var fp = GetFunctionPointer(8);
            var callback = (MakeWindowAssociationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(MakeWindowAssociationFunc));
            
            return callback(m_ptr, WindowHandle, Flags);
        }
        delegate HRESULT MakeWindowAssociationFunc(IntPtr self, HWND WindowHandle, uint Flags);

        public virtual HRESULT GetWindowAssociation(
            out HWND pWindowHandle
        ){
            var fp = GetFunctionPointer(9);
            var callback = (GetWindowAssociationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetWindowAssociationFunc));
            
            return callback(m_ptr, out pWindowHandle);
        }
        delegate HRESULT GetWindowAssociationFunc(IntPtr self, out HWND pWindowHandle);

        public virtual HRESULT CreateSwapChain(
            IUnknown pDevice,
            out DXGI_SWAP_CHAIN_DESC pDesc,
            out IDXGISwapChain ppSwapChain
        ){
            var fp = GetFunctionPointer(10);
            var callback = (CreateSwapChainFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateSwapChainFunc));
            ppSwapChain = new IDXGISwapChain();
            return callback(m_ptr, pDevice.Ptr, out pDesc, out ppSwapChain.PtrForNew);
        }
        delegate HRESULT CreateSwapChainFunc(IntPtr self, IntPtr pDevice, out DXGI_SWAP_CHAIN_DESC pDesc, out IntPtr ppSwapChain);

        public virtual HRESULT CreateSoftwareAdapter(
            HMODULE Module,
            out IDXGIAdapter ppAdapter
        ){
            var fp = GetFunctionPointer(11);
            var callback = (CreateSoftwareAdapterFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateSoftwareAdapterFunc));
            ppAdapter = new IDXGIAdapter();
            return callback(m_ptr, Module, out ppAdapter.PtrForNew);
        }
        delegate HRESULT CreateSoftwareAdapterFunc(IntPtr self, HMODULE Module, out IntPtr ppAdapter);

    }
    public class IDXGIDevice: IDXGIObject
    {
        static Guid s_uuid = new Guid("54ec77fa-1377-44e6-8c32-88fd5f44c84c");
        public static new ref Guid IID => ref s_uuid;
                    
        public virtual HRESULT GetAdapter(
            out IDXGIAdapter pAdapter
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetAdapterFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetAdapterFunc));
            pAdapter = new IDXGIAdapter();
            return callback(m_ptr, out pAdapter.PtrForNew);
        }
        delegate HRESULT GetAdapterFunc(IntPtr self, out IntPtr pAdapter);

        public virtual HRESULT CreateSurface(
            ref DXGI_SURFACE_DESC pDesc,
            uint NumSurfaces,
            DXGI_USAGE Usage,
            ref DXGI_SHARED_RESOURCE pSharedResource,
            out IDXGISurface ppSurface
        ){
            var fp = GetFunctionPointer(8);
            var callback = (CreateSurfaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateSurfaceFunc));
            ppSurface = new IDXGISurface();
            return callback(m_ptr, ref pDesc, NumSurfaces, Usage, ref pSharedResource, out ppSurface.PtrForNew);
        }
        delegate HRESULT CreateSurfaceFunc(IntPtr self, ref DXGI_SURFACE_DESC pDesc, uint NumSurfaces, DXGI_USAGE Usage, ref DXGI_SHARED_RESOURCE pSharedResource, out IntPtr ppSurface);

        public virtual HRESULT QueryResourceResidency(
            ref IntPtr ppResources,
            out DXGI_RESIDENCY pResidencyStatus,
            uint NumResources
        ){
            var fp = GetFunctionPointer(9);
            var callback = (QueryResourceResidencyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(QueryResourceResidencyFunc));
            
            return callback(m_ptr, ref ppResources, out pResidencyStatus, NumResources);
        }
        delegate HRESULT QueryResourceResidencyFunc(IntPtr self, ref IntPtr ppResources, out DXGI_RESIDENCY pResidencyStatus, uint NumResources);

        public virtual HRESULT SetGPUThreadPriority(
            int Priority
        ){
            var fp = GetFunctionPointer(10);
            var callback = (SetGPUThreadPriorityFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetGPUThreadPriorityFunc));
            
            return callback(m_ptr, Priority);
        }
        delegate HRESULT SetGPUThreadPriorityFunc(IntPtr self, int Priority);

        public virtual HRESULT GetGPUThreadPriority(
            out int pPriority
        ){
            var fp = GetFunctionPointer(11);
            var callback = (GetGPUThreadPriorityFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetGPUThreadPriorityFunc));
            
            return callback(m_ptr, out pPriority);
        }
        delegate HRESULT GetGPUThreadPriorityFunc(IntPtr self, out int pPriority);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DXGI_SHARED_RESOURCE // 1
    {
        public HANDLE Handle;
    }
    public enum DXGI_RESIDENCY // 1
    {
        _FULLY_RESIDENT = 0x1,
        _RESIDENT_IN_SHARED_MEMORY = 0x2,
        _EVICTED_TO_DISK = 0x3,
    }
    public class IDXGIFactory1: IDXGIFactory
    {
        static Guid s_uuid = new Guid("770aae78-f26f-4dba-a829-253c83d1b387");
        public static new ref Guid IID => ref s_uuid;
                    
        public virtual HRESULT EnumAdapters1(
            uint Adapter,
            out IDXGIAdapter1 ppAdapter
        ){
            var fp = GetFunctionPointer(12);
            var callback = (EnumAdapters1Func)Marshal.GetDelegateForFunctionPointer(fp, typeof(EnumAdapters1Func));
            ppAdapter = new IDXGIAdapter1();
            return callback(m_ptr, Adapter, out ppAdapter.PtrForNew);
        }
        delegate HRESULT EnumAdapters1Func(IntPtr self, uint Adapter, out IntPtr ppAdapter);

        public virtual int IsCurrent(
        ){
            var fp = GetFunctionPointer(13);
            var callback = (IsCurrentFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsCurrentFunc));
            
            return callback(m_ptr);
        }
        delegate int IsCurrentFunc(IntPtr self);

    }
    public class IDXGIAdapter1: IDXGIAdapter
    {
        static Guid s_uuid = new Guid("29038f61-3839-4626-91fd-086879011a05");
        public static new ref Guid IID => ref s_uuid;
                    
        public virtual HRESULT GetDesc1(
            out DXGI_ADAPTER_DESC1 pDesc
        ){
            var fp = GetFunctionPointer(10);
            var callback = (GetDesc1Func)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDesc1Func));
            
            return callback(m_ptr, out pDesc);
        }
        delegate HRESULT GetDesc1Func(IntPtr self, out DXGI_ADAPTER_DESC1 pDesc);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DXGI_ADAPTER_DESC1 // 1
    {
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=128)]public WCHAR[] Description;
        public uint VendorId;
        public uint DeviceId;
        public uint SubSysId;
        public uint Revision;
        public SIZE_T DedicatedVideoMemory;
        public SIZE_T DedicatedSystemMemory;
        public SIZE_T SharedSystemMemory;
        public LUID AdapterLuid;
        public uint Flags;
    }
    public class IDXGIDevice1: IDXGIDevice
    {
        static Guid s_uuid = new Guid("77db970f-6276-48ba-ba28-070143b4392c");
        public static new ref Guid IID => ref s_uuid;
                    
        public virtual HRESULT SetMaximumFrameLatency(
            uint MaxLatency
        ){
            var fp = GetFunctionPointer(12);
            var callback = (SetMaximumFrameLatencyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetMaximumFrameLatencyFunc));
            
            return callback(m_ptr, MaxLatency);
        }
        delegate HRESULT SetMaximumFrameLatencyFunc(IntPtr self, uint MaxLatency);

        public virtual HRESULT GetMaximumFrameLatency(
            out uint pMaxLatency
        ){
            var fp = GetFunctionPointer(13);
            var callback = (GetMaximumFrameLatencyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMaximumFrameLatencyFunc));
            
            return callback(m_ptr, out pMaxLatency);
        }
        delegate HRESULT GetMaximumFrameLatencyFunc(IntPtr self, out uint pMaxLatency);

    }
    public enum DXGI_SWAP_CHAIN_FLAG // 1
    {
        _NONPREROTATED = 0x1,
        _ALLOW_MODE_SWITCH = 0x2,
        _GDI_COMPATIBLE = 0x4,
        _RESTRICTED_CONTENT = 0x8,
        _RESTRICT_SHARED_RESOURCE_DRIVER = 0x10,
        _DISPLAY_ONLY = 0x20,
        _FRAME_LATENCY_WAITABLE_OBJECT = 0x40,
        _FOREGROUND_LAYER = 0x80,
        _FULLSCREEN_VIDEO = 0x100,
        _YUV_VIDEO = 0x200,
        _HW_PROTECTED = 0x400,
        _ALLOW_TEARING = 0x800,
        _RESTRICTED_TO_ALL_HOLOGRAPHIC_DISPLAYS = 0x1000,
    }
    public enum DXGI_ADAPTER_FLAG // 1
    {
        _NONE = 0x0,
        _REMOTE = 0x1,
        _SOFTWARE = 0x2,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct DXGI_DISPLAY_COLOR_SPACE // 1
    {
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=8)]public float[][] PrimaryCoordinates;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=16)]public float[][] WhitePoints;
    }
    public static class dxgi {
        [DllImport("dxgi.dll")]
        public static extern HRESULT CreateDXGIFactory(
            ref Guid riid,
            out IntPtr ppFactory
        );
        [DllImport("dxgi.dll")]
        public static extern HRESULT CreateDXGIFactory1(
            ref Guid riid,
            out IntPtr ppFactory
        );
    }
}
