// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public static partial class Constants {
        // unknown type: D2D1_INVALID_TAG ULONGLONG_MAX
        public const float D2D1_DEFAULT_FLATTENING_TOLERANCE = ( 0.25f );
        // unknown type: D2D1FORCEINLINE FORCEINLINE
    }
// enum nameless
    public class ID2D1Image: ID2D1Resource
    {
        static Guid s_uuid = new Guid("65019f75-8da2-497c-b32c-dfa34e48ede6");
        public static new ref Guid IID => ref s_uuid;
                
    }
    public class ID2D1Resource: IUnknown
    {
        static Guid s_uuid = new Guid("2cd90691-12e2-11dc-9fed-001143a055f9");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual void GetFactory(
            out ID2D1Factory factory
        ){
            var fp = GetFunctionPointer(3);
            var callback = (GetFactoryFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFactoryFunc));
            factory = new ID2D1Factory();
            callback(m_ptr, out factory.PtrForNew);
        }
        delegate void GetFactoryFunc(IntPtr self, out IntPtr factory);

    }
    public class ID2D1Factory: IUnknown
    {
        static Guid s_uuid = new Guid("06152247-6f50-465a-9245-118bfd3b6007");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int ReloadSystemMetrics(
        ){
            var fp = GetFunctionPointer(3);
            var callback = (ReloadSystemMetricsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ReloadSystemMetricsFunc));
            
            return callback(m_ptr);
        }
        delegate int ReloadSystemMetricsFunc(IntPtr self);

        public virtual void GetDesktopDpi(
            out float dpiX,
            out float dpiY
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetDesktopDpiFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDesktopDpiFunc));
            
            callback(m_ptr, out dpiX, out dpiY);
        }
        delegate void GetDesktopDpiFunc(IntPtr self, out float dpiX, out float dpiY);

        public virtual int CreateRectangleGeometry(
            ref System.Numerics.Vector4 rectangle,
            out ID2D1RectangleGeometry rectangleGeometry
        ){
            var fp = GetFunctionPointer(5);
            var callback = (CreateRectangleGeometryFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateRectangleGeometryFunc));
            rectangleGeometry = new ID2D1RectangleGeometry();
            return callback(m_ptr, ref rectangle, out rectangleGeometry.PtrForNew);
        }
        delegate int CreateRectangleGeometryFunc(IntPtr self, ref System.Numerics.Vector4 rectangle, out IntPtr rectangleGeometry);

        public virtual int CreateRoundedRectangleGeometry(
            ref D2D1_ROUNDED_RECT roundedRectangle,
            out ID2D1RoundedRectangleGeometry roundedRectangleGeometry
        ){
            var fp = GetFunctionPointer(6);
            var callback = (CreateRoundedRectangleGeometryFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateRoundedRectangleGeometryFunc));
            roundedRectangleGeometry = new ID2D1RoundedRectangleGeometry();
            return callback(m_ptr, ref roundedRectangle, out roundedRectangleGeometry.PtrForNew);
        }
        delegate int CreateRoundedRectangleGeometryFunc(IntPtr self, ref D2D1_ROUNDED_RECT roundedRectangle, out IntPtr roundedRectangleGeometry);

        public virtual int CreateEllipseGeometry(
            ref D2D1_ELLIPSE ellipse,
            out ID2D1EllipseGeometry ellipseGeometry
        ){
            var fp = GetFunctionPointer(7);
            var callback = (CreateEllipseGeometryFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateEllipseGeometryFunc));
            ellipseGeometry = new ID2D1EllipseGeometry();
            return callback(m_ptr, ref ellipse, out ellipseGeometry.PtrForNew);
        }
        delegate int CreateEllipseGeometryFunc(IntPtr self, ref D2D1_ELLIPSE ellipse, out IntPtr ellipseGeometry);

        public virtual int CreateGeometryGroup(
            D2D1_FILL_MODE fillMode,
            out ID2D1Geometry geometries,
            uint geometriesCount,
            out ID2D1GeometryGroup geometryGroup
        ){
            var fp = GetFunctionPointer(8);
            var callback = (CreateGeometryGroupFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateGeometryGroupFunc));
            geometries = new ID2D1Geometry();geometryGroup = new ID2D1GeometryGroup();
            return callback(m_ptr, fillMode, out geometries.PtrForNew, geometriesCount, out geometryGroup.PtrForNew);
        }
        delegate int CreateGeometryGroupFunc(IntPtr self, D2D1_FILL_MODE fillMode, out IntPtr geometries, uint geometriesCount, out IntPtr geometryGroup);

        public virtual int CreateTransformedGeometry(
            ID2D1Geometry sourceGeometry,
            ref System.Numerics.Matrix3x2 transform,
            out ID2D1TransformedGeometry transformedGeometry
        ){
            var fp = GetFunctionPointer(9);
            var callback = (CreateTransformedGeometryFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateTransformedGeometryFunc));
            transformedGeometry = new ID2D1TransformedGeometry();
            return callback(m_ptr, sourceGeometry!=null ? sourceGeometry.Ptr : IntPtr.Zero, ref transform, out transformedGeometry.PtrForNew);
        }
        delegate int CreateTransformedGeometryFunc(IntPtr self, IntPtr sourceGeometry, ref System.Numerics.Matrix3x2 transform, out IntPtr transformedGeometry);

        public virtual int CreatePathGeometry(
            out ID2D1PathGeometry pathGeometry
        ){
            var fp = GetFunctionPointer(10);
            var callback = (CreatePathGeometryFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreatePathGeometryFunc));
            pathGeometry = new ID2D1PathGeometry();
            return callback(m_ptr, out pathGeometry.PtrForNew);
        }
        delegate int CreatePathGeometryFunc(IntPtr self, out IntPtr pathGeometry);

        public virtual int CreateStrokeStyle(
            ref D2D1_STROKE_STYLE_PROPERTIES strokeStyleProperties,
            ref float dashes,
            uint dashesCount,
            out ID2D1StrokeStyle strokeStyle
        ){
            var fp = GetFunctionPointer(11);
            var callback = (CreateStrokeStyleFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateStrokeStyleFunc));
            strokeStyle = new ID2D1StrokeStyle();
            return callback(m_ptr, ref strokeStyleProperties, ref dashes, dashesCount, out strokeStyle.PtrForNew);
        }
        delegate int CreateStrokeStyleFunc(IntPtr self, ref D2D1_STROKE_STYLE_PROPERTIES strokeStyleProperties, ref float dashes, uint dashesCount, out IntPtr strokeStyle);

        public virtual int CreateDrawingStateBlock(
            ref D2D1_DRAWING_STATE_DESCRIPTION drawingStateDescription,
            IDWriteRenderingParams textRenderingParams,
            out ID2D1DrawingStateBlock drawingStateBlock
        ){
            var fp = GetFunctionPointer(12);
            var callback = (CreateDrawingStateBlockFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateDrawingStateBlockFunc));
            drawingStateBlock = new ID2D1DrawingStateBlock();
            return callback(m_ptr, ref drawingStateDescription, textRenderingParams!=null ? textRenderingParams.Ptr : IntPtr.Zero, out drawingStateBlock.PtrForNew);
        }
        delegate int CreateDrawingStateBlockFunc(IntPtr self, ref D2D1_DRAWING_STATE_DESCRIPTION drawingStateDescription, IntPtr textRenderingParams, out IntPtr drawingStateBlock);

        public virtual int CreateWicBitmapRenderTarget(
            IWICBitmap target,
            ref D2D1_RENDER_TARGET_PROPERTIES renderTargetProperties,
            out ID2D1RenderTarget renderTarget
        ){
            var fp = GetFunctionPointer(13);
            var callback = (CreateWicBitmapRenderTargetFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateWicBitmapRenderTargetFunc));
            renderTarget = new ID2D1RenderTarget();
            return callback(m_ptr, target!=null ? target.Ptr : IntPtr.Zero, ref renderTargetProperties, out renderTarget.PtrForNew);
        }
        delegate int CreateWicBitmapRenderTargetFunc(IntPtr self, IntPtr target, ref D2D1_RENDER_TARGET_PROPERTIES renderTargetProperties, out IntPtr renderTarget);

        public virtual int CreateHwndRenderTarget(
            ref D2D1_RENDER_TARGET_PROPERTIES renderTargetProperties,
            ref D2D1_HWND_RENDER_TARGET_PROPERTIES hwndRenderTargetProperties,
            out ID2D1HwndRenderTarget hwndRenderTarget
        ){
            var fp = GetFunctionPointer(14);
            var callback = (CreateHwndRenderTargetFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateHwndRenderTargetFunc));
            hwndRenderTarget = new ID2D1HwndRenderTarget();
            return callback(m_ptr, ref renderTargetProperties, ref hwndRenderTargetProperties, out hwndRenderTarget.PtrForNew);
        }
        delegate int CreateHwndRenderTargetFunc(IntPtr self, ref D2D1_RENDER_TARGET_PROPERTIES renderTargetProperties, ref D2D1_HWND_RENDER_TARGET_PROPERTIES hwndRenderTargetProperties, out IntPtr hwndRenderTarget);

        public virtual int CreateDxgiSurfaceRenderTarget(
            IDXGISurface dxgiSurface,
            ref D2D1_RENDER_TARGET_PROPERTIES renderTargetProperties,
            out ID2D1RenderTarget renderTarget
        ){
            var fp = GetFunctionPointer(15);
            var callback = (CreateDxgiSurfaceRenderTargetFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateDxgiSurfaceRenderTargetFunc));
            renderTarget = new ID2D1RenderTarget();
            return callback(m_ptr, dxgiSurface!=null ? dxgiSurface.Ptr : IntPtr.Zero, ref renderTargetProperties, out renderTarget.PtrForNew);
        }
        delegate int CreateDxgiSurfaceRenderTargetFunc(IntPtr self, IntPtr dxgiSurface, ref D2D1_RENDER_TARGET_PROPERTIES renderTargetProperties, out IntPtr renderTarget);

        public virtual int CreateDCRenderTarget(
            ref D2D1_RENDER_TARGET_PROPERTIES renderTargetProperties,
            out ID2D1DCRenderTarget dcRenderTarget
        ){
            var fp = GetFunctionPointer(16);
            var callback = (CreateDCRenderTargetFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateDCRenderTargetFunc));
            dcRenderTarget = new ID2D1DCRenderTarget();
            return callback(m_ptr, ref renderTargetProperties, out dcRenderTarget.PtrForNew);
        }
        delegate int CreateDCRenderTargetFunc(IntPtr self, ref D2D1_RENDER_TARGET_PROPERTIES renderTargetProperties, out IntPtr dcRenderTarget);

    }
    public class ID2D1RectangleGeometry: ID2D1Geometry
    {
        static Guid s_uuid = new Guid("2cd906a2-12e2-11dc-9fed-001143a055f9");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual void GetRect(
            out System.Numerics.Vector4 rect
        ){
            var fp = GetFunctionPointer(17);
            var callback = (GetRectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetRectFunc));
            
            callback(m_ptr, out rect);
        }
        delegate void GetRectFunc(IntPtr self, out System.Numerics.Vector4 rect);

    }
    public class ID2D1Geometry: ID2D1Resource
    {
        static Guid s_uuid = new Guid("2cd906a1-12e2-11dc-9fed-001143a055f9");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int GetBounds(
            ref System.Numerics.Matrix3x2 worldTransform,
            out System.Numerics.Vector4 bounds
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetBoundsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetBoundsFunc));
            
            return callback(m_ptr, ref worldTransform, out bounds);
        }
        delegate int GetBoundsFunc(IntPtr self, ref System.Numerics.Matrix3x2 worldTransform, out System.Numerics.Vector4 bounds);

        public virtual int GetWidenedBounds(
            float strokeWidth,
            ID2D1StrokeStyle strokeStyle,
            ref System.Numerics.Matrix3x2 worldTransform,
            float flatteningTolerance,
            out System.Numerics.Vector4 bounds
        ){
            var fp = GetFunctionPointer(5);
            var callback = (GetWidenedBoundsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetWidenedBoundsFunc));
            
            return callback(m_ptr, strokeWidth, strokeStyle!=null ? strokeStyle.Ptr : IntPtr.Zero, ref worldTransform, flatteningTolerance, out bounds);
        }
        delegate int GetWidenedBoundsFunc(IntPtr self, float strokeWidth, IntPtr strokeStyle, ref System.Numerics.Matrix3x2 worldTransform, float flatteningTolerance, out System.Numerics.Vector4 bounds);

        public virtual int StrokeContainsPoint(
            System.Numerics.Vector2 point,
            float strokeWidth,
            ID2D1StrokeStyle strokeStyle,
            ref System.Numerics.Matrix3x2 worldTransform,
            float flatteningTolerance,
            out int contains
        ){
            var fp = GetFunctionPointer(6);
            var callback = (StrokeContainsPointFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(StrokeContainsPointFunc));
            
            return callback(m_ptr, point, strokeWidth, strokeStyle!=null ? strokeStyle.Ptr : IntPtr.Zero, ref worldTransform, flatteningTolerance, out contains);
        }
        delegate int StrokeContainsPointFunc(IntPtr self, System.Numerics.Vector2 point, float strokeWidth, IntPtr strokeStyle, ref System.Numerics.Matrix3x2 worldTransform, float flatteningTolerance, out int contains);

        public virtual int FillContainsPoint(
            System.Numerics.Vector2 point,
            ref System.Numerics.Matrix3x2 worldTransform,
            float flatteningTolerance,
            out int contains
        ){
            var fp = GetFunctionPointer(7);
            var callback = (FillContainsPointFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FillContainsPointFunc));
            
            return callback(m_ptr, point, ref worldTransform, flatteningTolerance, out contains);
        }
        delegate int FillContainsPointFunc(IntPtr self, System.Numerics.Vector2 point, ref System.Numerics.Matrix3x2 worldTransform, float flatteningTolerance, out int contains);

        public virtual int CompareWithGeometry(
            ID2D1Geometry inputGeometry,
            ref System.Numerics.Matrix3x2 inputGeometryTransform,
            float flatteningTolerance,
            out D2D1_GEOMETRY_RELATION relation
        ){
            var fp = GetFunctionPointer(8);
            var callback = (CompareWithGeometryFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CompareWithGeometryFunc));
            
            return callback(m_ptr, inputGeometry!=null ? inputGeometry.Ptr : IntPtr.Zero, ref inputGeometryTransform, flatteningTolerance, out relation);
        }
        delegate int CompareWithGeometryFunc(IntPtr self, IntPtr inputGeometry, ref System.Numerics.Matrix3x2 inputGeometryTransform, float flatteningTolerance, out D2D1_GEOMETRY_RELATION relation);

        public virtual int Simplify(
            D2D1_GEOMETRY_SIMPLIFICATION_OPTION simplificationOption,
            ref System.Numerics.Matrix3x2 worldTransform,
            float flatteningTolerance,
            ID2D1SimplifiedGeometrySink geometrySink
        ){
            var fp = GetFunctionPointer(9);
            var callback = (SimplifyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SimplifyFunc));
            
            return callback(m_ptr, simplificationOption, ref worldTransform, flatteningTolerance, geometrySink!=null ? geometrySink.Ptr : IntPtr.Zero);
        }
        delegate int SimplifyFunc(IntPtr self, D2D1_GEOMETRY_SIMPLIFICATION_OPTION simplificationOption, ref System.Numerics.Matrix3x2 worldTransform, float flatteningTolerance, IntPtr geometrySink);

        public virtual int Tessellate(
            ref System.Numerics.Matrix3x2 worldTransform,
            float flatteningTolerance,
            ID2D1TessellationSink tessellationSink
        ){
            var fp = GetFunctionPointer(10);
            var callback = (TessellateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(TessellateFunc));
            
            return callback(m_ptr, ref worldTransform, flatteningTolerance, tessellationSink!=null ? tessellationSink.Ptr : IntPtr.Zero);
        }
        delegate int TessellateFunc(IntPtr self, ref System.Numerics.Matrix3x2 worldTransform, float flatteningTolerance, IntPtr tessellationSink);

        public virtual int CombineWithGeometry(
            ID2D1Geometry inputGeometry,
            D2D1_COMBINE_MODE combineMode,
            ref System.Numerics.Matrix3x2 inputGeometryTransform,
            float flatteningTolerance,
            ID2D1SimplifiedGeometrySink geometrySink
        ){
            var fp = GetFunctionPointer(11);
            var callback = (CombineWithGeometryFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CombineWithGeometryFunc));
            
            return callback(m_ptr, inputGeometry!=null ? inputGeometry.Ptr : IntPtr.Zero, combineMode, ref inputGeometryTransform, flatteningTolerance, geometrySink!=null ? geometrySink.Ptr : IntPtr.Zero);
        }
        delegate int CombineWithGeometryFunc(IntPtr self, IntPtr inputGeometry, D2D1_COMBINE_MODE combineMode, ref System.Numerics.Matrix3x2 inputGeometryTransform, float flatteningTolerance, IntPtr geometrySink);

        public virtual int Outline(
            ref System.Numerics.Matrix3x2 worldTransform,
            float flatteningTolerance,
            ID2D1SimplifiedGeometrySink geometrySink
        ){
            var fp = GetFunctionPointer(12);
            var callback = (OutlineFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OutlineFunc));
            
            return callback(m_ptr, ref worldTransform, flatteningTolerance, geometrySink!=null ? geometrySink.Ptr : IntPtr.Zero);
        }
        delegate int OutlineFunc(IntPtr self, ref System.Numerics.Matrix3x2 worldTransform, float flatteningTolerance, IntPtr geometrySink);

        public virtual int ComputeArea(
            ref System.Numerics.Matrix3x2 worldTransform,
            float flatteningTolerance,
            out float area
        ){
            var fp = GetFunctionPointer(13);
            var callback = (ComputeAreaFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ComputeAreaFunc));
            
            return callback(m_ptr, ref worldTransform, flatteningTolerance, out area);
        }
        delegate int ComputeAreaFunc(IntPtr self, ref System.Numerics.Matrix3x2 worldTransform, float flatteningTolerance, out float area);

        public virtual int ComputeLength(
            ref System.Numerics.Matrix3x2 worldTransform,
            float flatteningTolerance,
            out float length
        ){
            var fp = GetFunctionPointer(14);
            var callback = (ComputeLengthFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ComputeLengthFunc));
            
            return callback(m_ptr, ref worldTransform, flatteningTolerance, out length);
        }
        delegate int ComputeLengthFunc(IntPtr self, ref System.Numerics.Matrix3x2 worldTransform, float flatteningTolerance, out float length);

        public virtual int ComputePointAtLength(
            float length,
            ref System.Numerics.Matrix3x2 worldTransform,
            float flatteningTolerance,
            out System.Numerics.Vector2 point,
            out System.Numerics.Vector2 unitTangentVector
        ){
            var fp = GetFunctionPointer(15);
            var callback = (ComputePointAtLengthFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ComputePointAtLengthFunc));
            
            return callback(m_ptr, length, ref worldTransform, flatteningTolerance, out point, out unitTangentVector);
        }
        delegate int ComputePointAtLengthFunc(IntPtr self, float length, ref System.Numerics.Matrix3x2 worldTransform, float flatteningTolerance, out System.Numerics.Vector2 point, out System.Numerics.Vector2 unitTangentVector);

        public virtual int Widen(
            float strokeWidth,
            ID2D1StrokeStyle strokeStyle,
            ref System.Numerics.Matrix3x2 worldTransform,
            float flatteningTolerance,
            ID2D1SimplifiedGeometrySink geometrySink
        ){
            var fp = GetFunctionPointer(16);
            var callback = (WidenFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(WidenFunc));
            
            return callback(m_ptr, strokeWidth, strokeStyle!=null ? strokeStyle.Ptr : IntPtr.Zero, ref worldTransform, flatteningTolerance, geometrySink!=null ? geometrySink.Ptr : IntPtr.Zero);
        }
        delegate int WidenFunc(IntPtr self, float strokeWidth, IntPtr strokeStyle, ref System.Numerics.Matrix3x2 worldTransform, float flatteningTolerance, IntPtr geometrySink);

    }
    public class ID2D1StrokeStyle: ID2D1Resource
    {
        static Guid s_uuid = new Guid("2cd9069d-12e2-11dc-9fed-001143a055f9");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual D2D1_CAP_STYLE GetStartCap(
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetStartCapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetStartCapFunc));
            
            return callback(m_ptr);
        }
        delegate D2D1_CAP_STYLE GetStartCapFunc(IntPtr self);

        public virtual D2D1_CAP_STYLE GetEndCap(
        ){
            var fp = GetFunctionPointer(5);
            var callback = (GetEndCapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetEndCapFunc));
            
            return callback(m_ptr);
        }
        delegate D2D1_CAP_STYLE GetEndCapFunc(IntPtr self);

        public virtual D2D1_CAP_STYLE GetDashCap(
        ){
            var fp = GetFunctionPointer(6);
            var callback = (GetDashCapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDashCapFunc));
            
            return callback(m_ptr);
        }
        delegate D2D1_CAP_STYLE GetDashCapFunc(IntPtr self);

        public virtual float GetMiterLimit(
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetMiterLimitFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMiterLimitFunc));
            
            return callback(m_ptr);
        }
        delegate float GetMiterLimitFunc(IntPtr self);

        public virtual D2D1_LINE_JOIN GetLineJoin(
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetLineJoinFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetLineJoinFunc));
            
            return callback(m_ptr);
        }
        delegate D2D1_LINE_JOIN GetLineJoinFunc(IntPtr self);

        public virtual float GetDashOffset(
        ){
            var fp = GetFunctionPointer(9);
            var callback = (GetDashOffsetFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDashOffsetFunc));
            
            return callback(m_ptr);
        }
        delegate float GetDashOffsetFunc(IntPtr self);

        public virtual D2D1_DASH_STYLE GetDashStyle(
        ){
            var fp = GetFunctionPointer(10);
            var callback = (GetDashStyleFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDashStyleFunc));
            
            return callback(m_ptr);
        }
        delegate D2D1_DASH_STYLE GetDashStyleFunc(IntPtr self);

        public virtual uint GetDashesCount(
        ){
            var fp = GetFunctionPointer(11);
            var callback = (GetDashesCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDashesCountFunc));
            
            return callback(m_ptr);
        }
        delegate uint GetDashesCountFunc(IntPtr self);

        public virtual void GetDashes(
            out float dashes,
            uint dashesCount
        ){
            var fp = GetFunctionPointer(12);
            var callback = (GetDashesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDashesFunc));
            
            callback(m_ptr, out dashes, dashesCount);
        }
        delegate void GetDashesFunc(IntPtr self, out float dashes, uint dashesCount);

    }
    public enum D2D1_CAP_STYLE // 1
    {
        _FLAT = 0x0,
        _SQUARE = 0x1,
        _ROUND = 0x2,
        _TRIANGLE = 0x3,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public enum D2D1_LINE_JOIN // 1
    {
        _MITER = 0x0,
        _BEVEL = 0x1,
        _ROUND = 0x2,
        _MITER_OR_BEVEL = 0x3,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public enum D2D1_DASH_STYLE // 1
    {
        _SOLID = 0x0,
        _DASH = 0x1,
        _DOT = 0x2,
        _DASH_DOT = 0x3,
        _DASH_DOT_DOT = 0x4,
        _CUSTOM = 0x5,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public enum D2D1_GEOMETRY_RELATION // 1
    {
        _UNKNOWN = 0x0,
        _DISJOINT = 0x1,
        _IS_CONTAINED = 0x2,
        _CONTAINS = 0x3,
        _OVERLAP = 0x4,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public enum D2D1_GEOMETRY_SIMPLIFICATION_OPTION // 1
    {
        _CUBICS_AND_LINES = 0x0,
        _LINES = 0x1,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public class ID2D1SimplifiedGeometrySink: IUnknown
    {
        static Guid s_uuid = new Guid("2cd9069e-12e2-11dc-9fed-001143a055f9");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual void SetFillMode(
            D2D1_FILL_MODE fillMode
        ){
            var fp = GetFunctionPointer(3);
            var callback = (SetFillModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetFillModeFunc));
            
            callback(m_ptr, fillMode);
        }
        delegate void SetFillModeFunc(IntPtr self, D2D1_FILL_MODE fillMode);

        public virtual void SetSegmentFlags(
            D2D1_PATH_SEGMENT vertexFlags
        ){
            var fp = GetFunctionPointer(4);
            var callback = (SetSegmentFlagsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetSegmentFlagsFunc));
            
            callback(m_ptr, vertexFlags);
        }
        delegate void SetSegmentFlagsFunc(IntPtr self, D2D1_PATH_SEGMENT vertexFlags);

        public virtual void BeginFigure(
            System.Numerics.Vector2 startPoint,
            D2D1_FIGURE_BEGIN figureBegin
        ){
            var fp = GetFunctionPointer(5);
            var callback = (BeginFigureFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(BeginFigureFunc));
            
            callback(m_ptr, startPoint, figureBegin);
        }
        delegate void BeginFigureFunc(IntPtr self, System.Numerics.Vector2 startPoint, D2D1_FIGURE_BEGIN figureBegin);

        public virtual void AddLines(
            ref System.Numerics.Vector2 points,
            uint pointsCount
        ){
            var fp = GetFunctionPointer(6);
            var callback = (AddLinesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AddLinesFunc));
            
            callback(m_ptr, ref points, pointsCount);
        }
        delegate void AddLinesFunc(IntPtr self, ref System.Numerics.Vector2 points, uint pointsCount);

        public virtual void AddBeziers(
            ref D2D1_BEZIER_SEGMENT beziers,
            uint beziersCount
        ){
            var fp = GetFunctionPointer(7);
            var callback = (AddBeziersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AddBeziersFunc));
            
            callback(m_ptr, ref beziers, beziersCount);
        }
        delegate void AddBeziersFunc(IntPtr self, ref D2D1_BEZIER_SEGMENT beziers, uint beziersCount);

        public virtual void EndFigure(
            D2D1_FIGURE_END figureEnd
        ){
            var fp = GetFunctionPointer(8);
            var callback = (EndFigureFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(EndFigureFunc));
            
            callback(m_ptr, figureEnd);
        }
        delegate void EndFigureFunc(IntPtr self, D2D1_FIGURE_END figureEnd);

        public virtual int Close(
        ){
            var fp = GetFunctionPointer(9);
            var callback = (CloseFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CloseFunc));
            
            return callback(m_ptr);
        }
        delegate int CloseFunc(IntPtr self);

    }
    public enum D2D1_FILL_MODE // 1
    {
        _ALTERNATE = 0x0,
        _WINDING = 0x1,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public enum D2D1_PATH_SEGMENT // 1
    {
        _NONE = 0x0,
        _FORCE_UNSTROKED = 0x1,
        _FORCE_ROUND_LINE_JOIN = 0x2,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public enum D2D1_FIGURE_BEGIN // 1
    {
        _FILLED = 0x0,
        _HOLLOW = 0x1,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_BEZIER_SEGMENT // 1
    {
        public System.Numerics.Vector2 point1;
        public System.Numerics.Vector2 point2;
        public System.Numerics.Vector2 point3;
    }
    public enum D2D1_FIGURE_END // 1
    {
        _OPEN = 0x0,
        _CLOSED = 0x1,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public class ID2D1TessellationSink: IUnknown
    {
        static Guid s_uuid = new Guid("2cd906c1-12e2-11dc-9fed-001143a055f9");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual void AddTriangles(
            ref D2D1_TRIANGLE triangles,
            uint trianglesCount
        ){
            var fp = GetFunctionPointer(3);
            var callback = (AddTrianglesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AddTrianglesFunc));
            
            callback(m_ptr, ref triangles, trianglesCount);
        }
        delegate void AddTrianglesFunc(IntPtr self, ref D2D1_TRIANGLE triangles, uint trianglesCount);

        public virtual int Close(
        ){
            var fp = GetFunctionPointer(4);
            var callback = (CloseFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CloseFunc));
            
            return callback(m_ptr);
        }
        delegate int CloseFunc(IntPtr self);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_TRIANGLE // 1
    {
        public System.Numerics.Vector2 point1;
        public System.Numerics.Vector2 point2;
        public System.Numerics.Vector2 point3;
    }
    public enum D2D1_COMBINE_MODE // 1
    {
        _UNION = 0x0,
        _INTERSECT = 0x1,
        _XOR = 0x2,
        _EXCLUDE = 0x3,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_ROUNDED_RECT // 1
    {
        public System.Numerics.Vector4 rect;
        public float radiusX;
        public float radiusY;
    }
    public class ID2D1RoundedRectangleGeometry: ID2D1Geometry
    {
        static Guid s_uuid = new Guid("2cd906a3-12e2-11dc-9fed-001143a055f9");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual void GetRoundedRect(
            out D2D1_ROUNDED_RECT roundedRect
        ){
            var fp = GetFunctionPointer(17);
            var callback = (GetRoundedRectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetRoundedRectFunc));
            
            callback(m_ptr, out roundedRect);
        }
        delegate void GetRoundedRectFunc(IntPtr self, out D2D1_ROUNDED_RECT roundedRect);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_ELLIPSE // 1
    {
        public System.Numerics.Vector2 point;
        public float radiusX;
        public float radiusY;
    }
    public class ID2D1EllipseGeometry: ID2D1Geometry
    {
        static Guid s_uuid = new Guid("2cd906a4-12e2-11dc-9fed-001143a055f9");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual void GetEllipse(
            out D2D1_ELLIPSE ellipse
        ){
            var fp = GetFunctionPointer(17);
            var callback = (GetEllipseFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetEllipseFunc));
            
            callback(m_ptr, out ellipse);
        }
        delegate void GetEllipseFunc(IntPtr self, out D2D1_ELLIPSE ellipse);

    }
    public class ID2D1GeometryGroup: ID2D1Geometry
    {
        static Guid s_uuid = new Guid("2cd906a6-12e2-11dc-9fed-001143a055f9");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual D2D1_FILL_MODE GetFillMode(
        ){
            var fp = GetFunctionPointer(17);
            var callback = (GetFillModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFillModeFunc));
            
            return callback(m_ptr);
        }
        delegate D2D1_FILL_MODE GetFillModeFunc(IntPtr self);

        public virtual uint GetSourceGeometryCount(
        ){
            var fp = GetFunctionPointer(18);
            var callback = (GetSourceGeometryCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetSourceGeometryCountFunc));
            
            return callback(m_ptr);
        }
        delegate uint GetSourceGeometryCountFunc(IntPtr self);

        public virtual void GetSourceGeometries(
            out ID2D1Geometry geometries,
            uint geometriesCount
        ){
            var fp = GetFunctionPointer(19);
            var callback = (GetSourceGeometriesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetSourceGeometriesFunc));
            geometries = new ID2D1Geometry();
            callback(m_ptr, out geometries.PtrForNew, geometriesCount);
        }
        delegate void GetSourceGeometriesFunc(IntPtr self, out IntPtr geometries, uint geometriesCount);

    }
    public class ID2D1TransformedGeometry: ID2D1Geometry
    {
        static Guid s_uuid = new Guid("2cd906bb-12e2-11dc-9fed-001143a055f9");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual void GetSourceGeometry(
            out ID2D1Geometry sourceGeometry
        ){
            var fp = GetFunctionPointer(17);
            var callback = (GetSourceGeometryFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetSourceGeometryFunc));
            sourceGeometry = new ID2D1Geometry();
            callback(m_ptr, out sourceGeometry.PtrForNew);
        }
        delegate void GetSourceGeometryFunc(IntPtr self, out IntPtr sourceGeometry);

        public virtual void GetTransform(
            out System.Numerics.Matrix3x2 transform
        ){
            var fp = GetFunctionPointer(18);
            var callback = (GetTransformFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTransformFunc));
            
            callback(m_ptr, out transform);
        }
        delegate void GetTransformFunc(IntPtr self, out System.Numerics.Matrix3x2 transform);

    }
    public class ID2D1PathGeometry: ID2D1Geometry
    {
        static Guid s_uuid = new Guid("2cd906a5-12e2-11dc-9fed-001143a055f9");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int Open(
            out ID2D1GeometrySink geometrySink
        ){
            var fp = GetFunctionPointer(17);
            var callback = (OpenFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OpenFunc));
            geometrySink = new ID2D1GeometrySink();
            return callback(m_ptr, out geometrySink.PtrForNew);
        }
        delegate int OpenFunc(IntPtr self, out IntPtr geometrySink);

        public virtual int Stream(
            ID2D1GeometrySink geometrySink
        ){
            var fp = GetFunctionPointer(18);
            var callback = (StreamFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(StreamFunc));
            
            return callback(m_ptr, geometrySink!=null ? geometrySink.Ptr : IntPtr.Zero);
        }
        delegate int StreamFunc(IntPtr self, IntPtr geometrySink);

        public virtual int GetSegmentCount(
            out uint count
        ){
            var fp = GetFunctionPointer(19);
            var callback = (GetSegmentCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetSegmentCountFunc));
            
            return callback(m_ptr, out count);
        }
        delegate int GetSegmentCountFunc(IntPtr self, out uint count);

        public virtual int GetFigureCount(
            out uint count
        ){
            var fp = GetFunctionPointer(20);
            var callback = (GetFigureCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFigureCountFunc));
            
            return callback(m_ptr, out count);
        }
        delegate int GetFigureCountFunc(IntPtr self, out uint count);

    }
    public class ID2D1GeometrySink: ID2D1SimplifiedGeometrySink
    {
        static Guid s_uuid = new Guid("2cd9069f-12e2-11dc-9fed-001143a055f9");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual void AddLine(
            System.Numerics.Vector2 point
        ){
            var fp = GetFunctionPointer(10);
            var callback = (AddLineFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AddLineFunc));
            
            callback(m_ptr, point);
        }
        delegate void AddLineFunc(IntPtr self, System.Numerics.Vector2 point);

        public virtual void AddBezier(
            ref D2D1_BEZIER_SEGMENT bezier
        ){
            var fp = GetFunctionPointer(11);
            var callback = (AddBezierFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AddBezierFunc));
            
            callback(m_ptr, ref bezier);
        }
        delegate void AddBezierFunc(IntPtr self, ref D2D1_BEZIER_SEGMENT bezier);

        public virtual void AddQuadraticBezier(
            ref D2D1_QUADRATIC_BEZIER_SEGMENT bezier
        ){
            var fp = GetFunctionPointer(12);
            var callback = (AddQuadraticBezierFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AddQuadraticBezierFunc));
            
            callback(m_ptr, ref bezier);
        }
        delegate void AddQuadraticBezierFunc(IntPtr self, ref D2D1_QUADRATIC_BEZIER_SEGMENT bezier);

        public virtual void AddQuadraticBeziers(
            ref D2D1_QUADRATIC_BEZIER_SEGMENT beziers,
            uint beziersCount
        ){
            var fp = GetFunctionPointer(13);
            var callback = (AddQuadraticBeziersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AddQuadraticBeziersFunc));
            
            callback(m_ptr, ref beziers, beziersCount);
        }
        delegate void AddQuadraticBeziersFunc(IntPtr self, ref D2D1_QUADRATIC_BEZIER_SEGMENT beziers, uint beziersCount);

        public virtual void AddArc(
            ref D2D1_ARC_SEGMENT arc
        ){
            var fp = GetFunctionPointer(14);
            var callback = (AddArcFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AddArcFunc));
            
            callback(m_ptr, ref arc);
        }
        delegate void AddArcFunc(IntPtr self, ref D2D1_ARC_SEGMENT arc);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_QUADRATIC_BEZIER_SEGMENT // 1
    {
        public System.Numerics.Vector2 point1;
        public System.Numerics.Vector2 point2;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_ARC_SEGMENT // 1
    {
        public System.Numerics.Vector2 point;
        public D2D_SIZE_F size;
        public float rotationAngle;
        public D2D1_SWEEP_DIRECTION sweepDirection;
        public D2D1_ARC_SIZE arcSize;
    }
    public enum D2D1_SWEEP_DIRECTION // 1
    {
        _COUNTER_CLOCKWISE = 0x0,
        _CLOCKWISE = 0x1,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public enum D2D1_ARC_SIZE // 1
    {
        _SMALL = 0x0,
        _LARGE = 0x1,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_STROKE_STYLE_PROPERTIES // 1
    {
        public D2D1_CAP_STYLE startCap;
        public D2D1_CAP_STYLE endCap;
        public D2D1_CAP_STYLE dashCap;
        public D2D1_LINE_JOIN lineJoin;
        public float miterLimit;
        public D2D1_DASH_STYLE dashStyle;
        public float dashOffset;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_DRAWING_STATE_DESCRIPTION // 1
    {
        public D2D1_ANTIALIAS_MODE antialiasMode;
        public D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode;
        public ulong tag1;
        public ulong tag2;
        public System.Numerics.Matrix3x2 transform;
    }
    public enum D2D1_ANTIALIAS_MODE // 1
    {
        _PER_PRIMITIVE = 0x0,
        _ALIASED = 0x1,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public enum D2D1_TEXT_ANTIALIAS_MODE // 1
    {
        _DEFAULT = 0x0,
        _CLEARTYPE = 0x1,
        _GRAYSCALE = 0x2,
        _ALIASED = 0x3,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public class ID2D1DrawingStateBlock: ID2D1Resource
    {
        static Guid s_uuid = new Guid("28506e39-ebf6-46a1-bb47-fd85565ab957");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual void GetDescription(
            out D2D1_DRAWING_STATE_DESCRIPTION stateDescription
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetDescriptionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescriptionFunc));
            
            callback(m_ptr, out stateDescription);
        }
        delegate void GetDescriptionFunc(IntPtr self, out D2D1_DRAWING_STATE_DESCRIPTION stateDescription);

        public virtual void SetDescription(
            ref D2D1_DRAWING_STATE_DESCRIPTION stateDescription
        ){
            var fp = GetFunctionPointer(5);
            var callback = (SetDescriptionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetDescriptionFunc));
            
            callback(m_ptr, ref stateDescription);
        }
        delegate void SetDescriptionFunc(IntPtr self, ref D2D1_DRAWING_STATE_DESCRIPTION stateDescription);

        public virtual void SetTextRenderingParams(
            IDWriteRenderingParams textRenderingParams
        ){
            var fp = GetFunctionPointer(6);
            var callback = (SetTextRenderingParamsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetTextRenderingParamsFunc));
            
            callback(m_ptr, textRenderingParams!=null ? textRenderingParams.Ptr : IntPtr.Zero);
        }
        delegate void SetTextRenderingParamsFunc(IntPtr self, IntPtr textRenderingParams);

        public virtual void GetTextRenderingParams(
            out IDWriteRenderingParams textRenderingParams
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetTextRenderingParamsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTextRenderingParamsFunc));
            textRenderingParams = new IDWriteRenderingParams();
            callback(m_ptr, out textRenderingParams.PtrForNew);
        }
        delegate void GetTextRenderingParamsFunc(IntPtr self, out IntPtr textRenderingParams);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_RENDER_TARGET_PROPERTIES // 1
    {
        public D2D1_RENDER_TARGET_TYPE type;
        public D2D1_PIXEL_FORMAT pixelFormat;
        public float dpiX;
        public float dpiY;
        public D2D1_RENDER_TARGET_USAGE usage;
        public D2D1_FEATURE_LEVEL minLevel;
    }
    public enum D2D1_RENDER_TARGET_TYPE // 1
    {
        _DEFAULT = 0x0,
        _SOFTWARE = 0x1,
        _HARDWARE = 0x2,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public enum D2D1_RENDER_TARGET_USAGE // 1
    {
        _NONE = 0x0,
        _FORCE_BITMAP_REMOTING = 0x1,
        _GDI_COMPATIBLE = 0x2,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public enum D2D1_FEATURE_LEVEL // 1
    {
        _DEFAULT = 0x0,
        _9 = 0x9100,
        _10 = 0xa000,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public class ID2D1RenderTarget: ID2D1Resource
    {
        static Guid s_uuid = new Guid("2cd90694-12e2-11dc-9fed-001143a055f9");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int CreateBitmap(
            D2D_SIZE_U size,
            IntPtr srcData,
            uint pitch,
            ref D2D1_BITMAP_PROPERTIES bitmapProperties,
            out ID2D1Bitmap bitmap
        ){
            var fp = GetFunctionPointer(4);
            var callback = (CreateBitmapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateBitmapFunc));
            bitmap = new ID2D1Bitmap();
            return callback(m_ptr, size, srcData, pitch, ref bitmapProperties, out bitmap.PtrForNew);
        }
        delegate int CreateBitmapFunc(IntPtr self, D2D_SIZE_U size, IntPtr srcData, uint pitch, ref D2D1_BITMAP_PROPERTIES bitmapProperties, out IntPtr bitmap);

        public virtual int CreateBitmapFromWicBitmap(
            IWICBitmapSource wicBitmapSource,
            ref D2D1_BITMAP_PROPERTIES bitmapProperties,
            out ID2D1Bitmap bitmap
        ){
            var fp = GetFunctionPointer(5);
            var callback = (CreateBitmapFromWicBitmapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateBitmapFromWicBitmapFunc));
            bitmap = new ID2D1Bitmap();
            return callback(m_ptr, wicBitmapSource!=null ? wicBitmapSource.Ptr : IntPtr.Zero, ref bitmapProperties, out bitmap.PtrForNew);
        }
        delegate int CreateBitmapFromWicBitmapFunc(IntPtr self, IntPtr wicBitmapSource, ref D2D1_BITMAP_PROPERTIES bitmapProperties, out IntPtr bitmap);

        public virtual int CreateSharedBitmap(
            ref Guid riid,
            IntPtr data,
            ref D2D1_BITMAP_PROPERTIES bitmapProperties,
            out ID2D1Bitmap bitmap
        ){
            var fp = GetFunctionPointer(6);
            var callback = (CreateSharedBitmapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateSharedBitmapFunc));
            bitmap = new ID2D1Bitmap();
            return callback(m_ptr, ref riid, data, ref bitmapProperties, out bitmap.PtrForNew);
        }
        delegate int CreateSharedBitmapFunc(IntPtr self, ref Guid riid, IntPtr data, ref D2D1_BITMAP_PROPERTIES bitmapProperties, out IntPtr bitmap);

        public virtual int CreateBitmapBrush(
            ID2D1Bitmap bitmap,
            ref D2D1_BITMAP_BRUSH_PROPERTIES bitmapBrushProperties,
            ref D2D1_BRUSH_PROPERTIES brushProperties,
            out ID2D1BitmapBrush bitmapBrush
        ){
            var fp = GetFunctionPointer(7);
            var callback = (CreateBitmapBrushFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateBitmapBrushFunc));
            bitmapBrush = new ID2D1BitmapBrush();
            return callback(m_ptr, bitmap!=null ? bitmap.Ptr : IntPtr.Zero, ref bitmapBrushProperties, ref brushProperties, out bitmapBrush.PtrForNew);
        }
        delegate int CreateBitmapBrushFunc(IntPtr self, IntPtr bitmap, ref D2D1_BITMAP_BRUSH_PROPERTIES bitmapBrushProperties, ref D2D1_BRUSH_PROPERTIES brushProperties, out IntPtr bitmapBrush);

        public virtual int CreateSolidColorBrush(
            ref System.Numerics.Vector4 color,
            ref D2D1_BRUSH_PROPERTIES brushProperties,
            out ID2D1SolidColorBrush solidColorBrush
        ){
            var fp = GetFunctionPointer(8);
            var callback = (CreateSolidColorBrushFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateSolidColorBrushFunc));
            solidColorBrush = new ID2D1SolidColorBrush();
            return callback(m_ptr, ref color, ref brushProperties, out solidColorBrush.PtrForNew);
        }
        delegate int CreateSolidColorBrushFunc(IntPtr self, ref System.Numerics.Vector4 color, ref D2D1_BRUSH_PROPERTIES brushProperties, out IntPtr solidColorBrush);

        public virtual int CreateGradientStopCollection(
            ref D2D1_GRADIENT_STOP gradientStops,
            uint gradientStopsCount,
            D2D1_GAMMA colorInterpolationGamma,
            D2D1_EXTEND_MODE extendMode,
            out ID2D1GradientStopCollection gradientStopCollection
        ){
            var fp = GetFunctionPointer(9);
            var callback = (CreateGradientStopCollectionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateGradientStopCollectionFunc));
            gradientStopCollection = new ID2D1GradientStopCollection();
            return callback(m_ptr, ref gradientStops, gradientStopsCount, colorInterpolationGamma, extendMode, out gradientStopCollection.PtrForNew);
        }
        delegate int CreateGradientStopCollectionFunc(IntPtr self, ref D2D1_GRADIENT_STOP gradientStops, uint gradientStopsCount, D2D1_GAMMA colorInterpolationGamma, D2D1_EXTEND_MODE extendMode, out IntPtr gradientStopCollection);

        public virtual int CreateLinearGradientBrush(
            ref D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES linearGradientBrushProperties,
            ref D2D1_BRUSH_PROPERTIES brushProperties,
            ID2D1GradientStopCollection gradientStopCollection,
            out ID2D1LinearGradientBrush linearGradientBrush
        ){
            var fp = GetFunctionPointer(10);
            var callback = (CreateLinearGradientBrushFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateLinearGradientBrushFunc));
            linearGradientBrush = new ID2D1LinearGradientBrush();
            return callback(m_ptr, ref linearGradientBrushProperties, ref brushProperties, gradientStopCollection!=null ? gradientStopCollection.Ptr : IntPtr.Zero, out linearGradientBrush.PtrForNew);
        }
        delegate int CreateLinearGradientBrushFunc(IntPtr self, ref D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES linearGradientBrushProperties, ref D2D1_BRUSH_PROPERTIES brushProperties, IntPtr gradientStopCollection, out IntPtr linearGradientBrush);

        public virtual int CreateRadialGradientBrush(
            ref D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES radialGradientBrushProperties,
            ref D2D1_BRUSH_PROPERTIES brushProperties,
            ID2D1GradientStopCollection gradientStopCollection,
            out ID2D1RadialGradientBrush radialGradientBrush
        ){
            var fp = GetFunctionPointer(11);
            var callback = (CreateRadialGradientBrushFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateRadialGradientBrushFunc));
            radialGradientBrush = new ID2D1RadialGradientBrush();
            return callback(m_ptr, ref radialGradientBrushProperties, ref brushProperties, gradientStopCollection!=null ? gradientStopCollection.Ptr : IntPtr.Zero, out radialGradientBrush.PtrForNew);
        }
        delegate int CreateRadialGradientBrushFunc(IntPtr self, ref D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES radialGradientBrushProperties, ref D2D1_BRUSH_PROPERTIES brushProperties, IntPtr gradientStopCollection, out IntPtr radialGradientBrush);

        public virtual int CreateCompatibleRenderTarget(
            ref D2D_SIZE_F desiredSize,
            ref D2D_SIZE_U desiredPixelSize,
            ref D2D1_PIXEL_FORMAT desiredFormat,
            D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options,
            out ID2D1BitmapRenderTarget bitmapRenderTarget
        ){
            var fp = GetFunctionPointer(12);
            var callback = (CreateCompatibleRenderTargetFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateCompatibleRenderTargetFunc));
            bitmapRenderTarget = new ID2D1BitmapRenderTarget();
            return callback(m_ptr, ref desiredSize, ref desiredPixelSize, ref desiredFormat, options, out bitmapRenderTarget.PtrForNew);
        }
        delegate int CreateCompatibleRenderTargetFunc(IntPtr self, ref D2D_SIZE_F desiredSize, ref D2D_SIZE_U desiredPixelSize, ref D2D1_PIXEL_FORMAT desiredFormat, D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS options, out IntPtr bitmapRenderTarget);

        public virtual int CreateLayer(
            ref D2D_SIZE_F size,
            out ID2D1Layer layer
        ){
            var fp = GetFunctionPointer(13);
            var callback = (CreateLayerFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateLayerFunc));
            layer = new ID2D1Layer();
            return callback(m_ptr, ref size, out layer.PtrForNew);
        }
        delegate int CreateLayerFunc(IntPtr self, ref D2D_SIZE_F size, out IntPtr layer);

        public virtual int CreateMesh(
            out ID2D1Mesh mesh
        ){
            var fp = GetFunctionPointer(14);
            var callback = (CreateMeshFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateMeshFunc));
            mesh = new ID2D1Mesh();
            return callback(m_ptr, out mesh.PtrForNew);
        }
        delegate int CreateMeshFunc(IntPtr self, out IntPtr mesh);

        public virtual void DrawLine(
            System.Numerics.Vector2 point0,
            System.Numerics.Vector2 point1,
            ID2D1Brush brush,
            float strokeWidth,
            ID2D1StrokeStyle strokeStyle
        ){
            var fp = GetFunctionPointer(15);
            var callback = (DrawLineFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawLineFunc));
            
            callback(m_ptr, point0, point1, brush!=null ? brush.Ptr : IntPtr.Zero, strokeWidth, strokeStyle!=null ? strokeStyle.Ptr : IntPtr.Zero);
        }
        delegate void DrawLineFunc(IntPtr self, System.Numerics.Vector2 point0, System.Numerics.Vector2 point1, IntPtr brush, float strokeWidth, IntPtr strokeStyle);

        public virtual void DrawRectangle(
            ref System.Numerics.Vector4 rect,
            ID2D1Brush brush,
            float strokeWidth,
            ID2D1StrokeStyle strokeStyle
        ){
            var fp = GetFunctionPointer(16);
            var callback = (DrawRectangleFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawRectangleFunc));
            
            callback(m_ptr, ref rect, brush!=null ? brush.Ptr : IntPtr.Zero, strokeWidth, strokeStyle!=null ? strokeStyle.Ptr : IntPtr.Zero);
        }
        delegate void DrawRectangleFunc(IntPtr self, ref System.Numerics.Vector4 rect, IntPtr brush, float strokeWidth, IntPtr strokeStyle);

        public virtual void FillRectangle(
            ref System.Numerics.Vector4 rect,
            ID2D1Brush brush
        ){
            var fp = GetFunctionPointer(17);
            var callback = (FillRectangleFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FillRectangleFunc));
            
            callback(m_ptr, ref rect, brush!=null ? brush.Ptr : IntPtr.Zero);
        }
        delegate void FillRectangleFunc(IntPtr self, ref System.Numerics.Vector4 rect, IntPtr brush);

        public virtual void DrawRoundedRectangle(
            ref D2D1_ROUNDED_RECT roundedRect,
            ID2D1Brush brush,
            float strokeWidth,
            ID2D1StrokeStyle strokeStyle
        ){
            var fp = GetFunctionPointer(18);
            var callback = (DrawRoundedRectangleFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawRoundedRectangleFunc));
            
            callback(m_ptr, ref roundedRect, brush!=null ? brush.Ptr : IntPtr.Zero, strokeWidth, strokeStyle!=null ? strokeStyle.Ptr : IntPtr.Zero);
        }
        delegate void DrawRoundedRectangleFunc(IntPtr self, ref D2D1_ROUNDED_RECT roundedRect, IntPtr brush, float strokeWidth, IntPtr strokeStyle);

        public virtual void FillRoundedRectangle(
            ref D2D1_ROUNDED_RECT roundedRect,
            ID2D1Brush brush
        ){
            var fp = GetFunctionPointer(19);
            var callback = (FillRoundedRectangleFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FillRoundedRectangleFunc));
            
            callback(m_ptr, ref roundedRect, brush!=null ? brush.Ptr : IntPtr.Zero);
        }
        delegate void FillRoundedRectangleFunc(IntPtr self, ref D2D1_ROUNDED_RECT roundedRect, IntPtr brush);

        public virtual void DrawEllipse(
            ref D2D1_ELLIPSE ellipse,
            ID2D1Brush brush,
            float strokeWidth,
            ID2D1StrokeStyle strokeStyle
        ){
            var fp = GetFunctionPointer(20);
            var callback = (DrawEllipseFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawEllipseFunc));
            
            callback(m_ptr, ref ellipse, brush!=null ? brush.Ptr : IntPtr.Zero, strokeWidth, strokeStyle!=null ? strokeStyle.Ptr : IntPtr.Zero);
        }
        delegate void DrawEllipseFunc(IntPtr self, ref D2D1_ELLIPSE ellipse, IntPtr brush, float strokeWidth, IntPtr strokeStyle);

        public virtual void FillEllipse(
            ref D2D1_ELLIPSE ellipse,
            ID2D1Brush brush
        ){
            var fp = GetFunctionPointer(21);
            var callback = (FillEllipseFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FillEllipseFunc));
            
            callback(m_ptr, ref ellipse, brush!=null ? brush.Ptr : IntPtr.Zero);
        }
        delegate void FillEllipseFunc(IntPtr self, ref D2D1_ELLIPSE ellipse, IntPtr brush);

        public virtual void DrawGeometry(
            ID2D1Geometry geometry,
            ID2D1Brush brush,
            float strokeWidth,
            ID2D1StrokeStyle strokeStyle
        ){
            var fp = GetFunctionPointer(22);
            var callback = (DrawGeometryFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawGeometryFunc));
            
            callback(m_ptr, geometry!=null ? geometry.Ptr : IntPtr.Zero, brush!=null ? brush.Ptr : IntPtr.Zero, strokeWidth, strokeStyle!=null ? strokeStyle.Ptr : IntPtr.Zero);
        }
        delegate void DrawGeometryFunc(IntPtr self, IntPtr geometry, IntPtr brush, float strokeWidth, IntPtr strokeStyle);

        public virtual void FillGeometry(
            ID2D1Geometry geometry,
            ID2D1Brush brush,
            ID2D1Brush opacityBrush
        ){
            var fp = GetFunctionPointer(23);
            var callback = (FillGeometryFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FillGeometryFunc));
            
            callback(m_ptr, geometry!=null ? geometry.Ptr : IntPtr.Zero, brush!=null ? brush.Ptr : IntPtr.Zero, opacityBrush!=null ? opacityBrush.Ptr : IntPtr.Zero);
        }
        delegate void FillGeometryFunc(IntPtr self, IntPtr geometry, IntPtr brush, IntPtr opacityBrush);

        public virtual void FillMesh(
            ID2D1Mesh mesh,
            ID2D1Brush brush
        ){
            var fp = GetFunctionPointer(24);
            var callback = (FillMeshFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FillMeshFunc));
            
            callback(m_ptr, mesh!=null ? mesh.Ptr : IntPtr.Zero, brush!=null ? brush.Ptr : IntPtr.Zero);
        }
        delegate void FillMeshFunc(IntPtr self, IntPtr mesh, IntPtr brush);

        public virtual void FillOpacityMask(
            ID2D1Bitmap opacityMask,
            ID2D1Brush brush,
            D2D1_OPACITY_MASK_CONTENT content,
            ref System.Numerics.Vector4 destinationRectangle,
            ref System.Numerics.Vector4 sourceRectangle
        ){
            var fp = GetFunctionPointer(25);
            var callback = (FillOpacityMaskFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FillOpacityMaskFunc));
            
            callback(m_ptr, opacityMask!=null ? opacityMask.Ptr : IntPtr.Zero, brush!=null ? brush.Ptr : IntPtr.Zero, content, ref destinationRectangle, ref sourceRectangle);
        }
        delegate void FillOpacityMaskFunc(IntPtr self, IntPtr opacityMask, IntPtr brush, D2D1_OPACITY_MASK_CONTENT content, ref System.Numerics.Vector4 destinationRectangle, ref System.Numerics.Vector4 sourceRectangle);

        public virtual void DrawBitmap(
            ID2D1Bitmap bitmap,
            ref System.Numerics.Vector4 destinationRectangle,
            float opacity,
            D2D1_BITMAP_INTERPOLATION_MODE interpolationMode,
            ref System.Numerics.Vector4 sourceRectangle
        ){
            var fp = GetFunctionPointer(26);
            var callback = (DrawBitmapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawBitmapFunc));
            
            callback(m_ptr, bitmap!=null ? bitmap.Ptr : IntPtr.Zero, ref destinationRectangle, opacity, interpolationMode, ref sourceRectangle);
        }
        delegate void DrawBitmapFunc(IntPtr self, IntPtr bitmap, ref System.Numerics.Vector4 destinationRectangle, float opacity, D2D1_BITMAP_INTERPOLATION_MODE interpolationMode, ref System.Numerics.Vector4 sourceRectangle);

        public virtual void DrawText(
            ref ushort _string,
            uint stringLength,
            IDWriteTextFormat textFormat,
            ref System.Numerics.Vector4 layoutRect,
            ID2D1Brush defaultFillBrush,
            D2D1_DRAW_TEXT_OPTIONS options,
            DWRITE_MEASURING_MODE measuringMode
        ){
            var fp = GetFunctionPointer(27);
            var callback = (DrawTextWFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawTextWFunc));
            
            callback(m_ptr, ref _string, stringLength, textFormat!=null ? textFormat.Ptr : IntPtr.Zero, ref layoutRect, defaultFillBrush!=null ? defaultFillBrush.Ptr : IntPtr.Zero, options, measuringMode);
        }
        delegate void DrawTextWFunc(IntPtr self, ref ushort _string, uint stringLength, IntPtr textFormat, ref System.Numerics.Vector4 layoutRect, IntPtr defaultFillBrush, D2D1_DRAW_TEXT_OPTIONS options, DWRITE_MEASURING_MODE measuringMode);

        public virtual void DrawTextLayout(
            System.Numerics.Vector2 origin,
            IDWriteTextLayout textLayout,
            ID2D1Brush defaultFillBrush,
            D2D1_DRAW_TEXT_OPTIONS options
        ){
            var fp = GetFunctionPointer(28);
            var callback = (DrawTextLayoutFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawTextLayoutFunc));
            
            callback(m_ptr, origin, textLayout!=null ? textLayout.Ptr : IntPtr.Zero, defaultFillBrush!=null ? defaultFillBrush.Ptr : IntPtr.Zero, options);
        }
        delegate void DrawTextLayoutFunc(IntPtr self, System.Numerics.Vector2 origin, IntPtr textLayout, IntPtr defaultFillBrush, D2D1_DRAW_TEXT_OPTIONS options);

        public virtual void DrawGlyphRun(
            System.Numerics.Vector2 baselineOrigin,
            ref DWRITE_GLYPH_RUN glyphRun,
            ID2D1Brush foregroundBrush,
            DWRITE_MEASURING_MODE measuringMode
        ){
            var fp = GetFunctionPointer(29);
            var callback = (DrawGlyphRunFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawGlyphRunFunc));
            
            callback(m_ptr, baselineOrigin, ref glyphRun, foregroundBrush!=null ? foregroundBrush.Ptr : IntPtr.Zero, measuringMode);
        }
        delegate void DrawGlyphRunFunc(IntPtr self, System.Numerics.Vector2 baselineOrigin, ref DWRITE_GLYPH_RUN glyphRun, IntPtr foregroundBrush, DWRITE_MEASURING_MODE measuringMode);

        public virtual void SetTransform(
            ref System.Numerics.Matrix3x2 transform
        ){
            var fp = GetFunctionPointer(30);
            var callback = (SetTransformFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetTransformFunc));
            
            callback(m_ptr, ref transform);
        }
        delegate void SetTransformFunc(IntPtr self, ref System.Numerics.Matrix3x2 transform);

        public virtual void GetTransform(
            out System.Numerics.Matrix3x2 transform
        ){
            var fp = GetFunctionPointer(31);
            var callback = (GetTransformFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTransformFunc));
            
            callback(m_ptr, out transform);
        }
        delegate void GetTransformFunc(IntPtr self, out System.Numerics.Matrix3x2 transform);

        public virtual void SetAntialiasMode(
            D2D1_ANTIALIAS_MODE antialiasMode
        ){
            var fp = GetFunctionPointer(32);
            var callback = (SetAntialiasModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetAntialiasModeFunc));
            
            callback(m_ptr, antialiasMode);
        }
        delegate void SetAntialiasModeFunc(IntPtr self, D2D1_ANTIALIAS_MODE antialiasMode);

        public virtual D2D1_ANTIALIAS_MODE GetAntialiasMode(
        ){
            var fp = GetFunctionPointer(33);
            var callback = (GetAntialiasModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetAntialiasModeFunc));
            
            return callback(m_ptr);
        }
        delegate D2D1_ANTIALIAS_MODE GetAntialiasModeFunc(IntPtr self);

        public virtual void SetTextAntialiasMode(
            D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode
        ){
            var fp = GetFunctionPointer(34);
            var callback = (SetTextAntialiasModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetTextAntialiasModeFunc));
            
            callback(m_ptr, textAntialiasMode);
        }
        delegate void SetTextAntialiasModeFunc(IntPtr self, D2D1_TEXT_ANTIALIAS_MODE textAntialiasMode);

        public virtual D2D1_TEXT_ANTIALIAS_MODE GetTextAntialiasMode(
        ){
            var fp = GetFunctionPointer(35);
            var callback = (GetTextAntialiasModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTextAntialiasModeFunc));
            
            return callback(m_ptr);
        }
        delegate D2D1_TEXT_ANTIALIAS_MODE GetTextAntialiasModeFunc(IntPtr self);

        public virtual void SetTextRenderingParams(
            IDWriteRenderingParams textRenderingParams
        ){
            var fp = GetFunctionPointer(36);
            var callback = (SetTextRenderingParamsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetTextRenderingParamsFunc));
            
            callback(m_ptr, textRenderingParams!=null ? textRenderingParams.Ptr : IntPtr.Zero);
        }
        delegate void SetTextRenderingParamsFunc(IntPtr self, IntPtr textRenderingParams);

        public virtual void GetTextRenderingParams(
            out IDWriteRenderingParams textRenderingParams
        ){
            var fp = GetFunctionPointer(37);
            var callback = (GetTextRenderingParamsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTextRenderingParamsFunc));
            textRenderingParams = new IDWriteRenderingParams();
            callback(m_ptr, out textRenderingParams.PtrForNew);
        }
        delegate void GetTextRenderingParamsFunc(IntPtr self, out IntPtr textRenderingParams);

        public virtual void SetTags(
            ulong tag1,
            ulong tag2
        ){
            var fp = GetFunctionPointer(38);
            var callback = (SetTagsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetTagsFunc));
            
            callback(m_ptr, tag1, tag2);
        }
        delegate void SetTagsFunc(IntPtr self, ulong tag1, ulong tag2);

        public virtual void GetTags(
            out ulong tag1,
            out ulong tag2
        ){
            var fp = GetFunctionPointer(39);
            var callback = (GetTagsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTagsFunc));
            
            callback(m_ptr, out tag1, out tag2);
        }
        delegate void GetTagsFunc(IntPtr self, out ulong tag1, out ulong tag2);

        public virtual void PushLayer(
            ref D2D1_LAYER_PARAMETERS layerParameters,
            ID2D1Layer layer
        ){
            var fp = GetFunctionPointer(40);
            var callback = (PushLayerFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PushLayerFunc));
            
            callback(m_ptr, ref layerParameters, layer!=null ? layer.Ptr : IntPtr.Zero);
        }
        delegate void PushLayerFunc(IntPtr self, ref D2D1_LAYER_PARAMETERS layerParameters, IntPtr layer);

        public virtual void PopLayer(
        ){
            var fp = GetFunctionPointer(41);
            var callback = (PopLayerFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PopLayerFunc));
            
            callback(m_ptr);
        }
        delegate void PopLayerFunc(IntPtr self);

        public virtual int Flush(
            out ulong tag1,
            out ulong tag2
        ){
            var fp = GetFunctionPointer(42);
            var callback = (FlushFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FlushFunc));
            
            return callback(m_ptr, out tag1, out tag2);
        }
        delegate int FlushFunc(IntPtr self, out ulong tag1, out ulong tag2);

        public virtual void SaveDrawingState(
            ID2D1DrawingStateBlock drawingStateBlock
        ){
            var fp = GetFunctionPointer(43);
            var callback = (SaveDrawingStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SaveDrawingStateFunc));
            
            callback(m_ptr, drawingStateBlock!=null ? drawingStateBlock.Ptr : IntPtr.Zero);
        }
        delegate void SaveDrawingStateFunc(IntPtr self, IntPtr drawingStateBlock);

        public virtual void RestoreDrawingState(
            ID2D1DrawingStateBlock drawingStateBlock
        ){
            var fp = GetFunctionPointer(44);
            var callback = (RestoreDrawingStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RestoreDrawingStateFunc));
            
            callback(m_ptr, drawingStateBlock!=null ? drawingStateBlock.Ptr : IntPtr.Zero);
        }
        delegate void RestoreDrawingStateFunc(IntPtr self, IntPtr drawingStateBlock);

        public virtual void PushAxisAlignedClip(
            ref System.Numerics.Vector4 clipRect,
            D2D1_ANTIALIAS_MODE antialiasMode
        ){
            var fp = GetFunctionPointer(45);
            var callback = (PushAxisAlignedClipFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PushAxisAlignedClipFunc));
            
            callback(m_ptr, ref clipRect, antialiasMode);
        }
        delegate void PushAxisAlignedClipFunc(IntPtr self, ref System.Numerics.Vector4 clipRect, D2D1_ANTIALIAS_MODE antialiasMode);

        public virtual void PopAxisAlignedClip(
        ){
            var fp = GetFunctionPointer(46);
            var callback = (PopAxisAlignedClipFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PopAxisAlignedClipFunc));
            
            callback(m_ptr);
        }
        delegate void PopAxisAlignedClipFunc(IntPtr self);

        public virtual void Clear(
            ref System.Numerics.Vector4 clearColor
        ){
            var fp = GetFunctionPointer(47);
            var callback = (ClearFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ClearFunc));
            
            callback(m_ptr, ref clearColor);
        }
        delegate void ClearFunc(IntPtr self, ref System.Numerics.Vector4 clearColor);

        public virtual void BeginDraw(
        ){
            var fp = GetFunctionPointer(48);
            var callback = (BeginDrawFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(BeginDrawFunc));
            
            callback(m_ptr);
        }
        delegate void BeginDrawFunc(IntPtr self);

        public virtual int EndDraw(
            out ulong tag1,
            out ulong tag2
        ){
            var fp = GetFunctionPointer(49);
            var callback = (EndDrawFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(EndDrawFunc));
            
            return callback(m_ptr, out tag1, out tag2);
        }
        delegate int EndDrawFunc(IntPtr self, out ulong tag1, out ulong tag2);

        public virtual D2D1_PIXEL_FORMAT GetPixelFormat(
        ){
            var fp = GetFunctionPointer(50);
            var callback = (GetPixelFormatFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPixelFormatFunc));
            
            return callback(m_ptr);
        }
        delegate D2D1_PIXEL_FORMAT GetPixelFormatFunc(IntPtr self);

        public virtual void SetDpi(
            float dpiX,
            float dpiY
        ){
            var fp = GetFunctionPointer(51);
            var callback = (SetDpiFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetDpiFunc));
            
            callback(m_ptr, dpiX, dpiY);
        }
        delegate void SetDpiFunc(IntPtr self, float dpiX, float dpiY);

        public virtual void GetDpi(
            out float dpiX,
            out float dpiY
        ){
            var fp = GetFunctionPointer(52);
            var callback = (GetDpiFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDpiFunc));
            
            callback(m_ptr, out dpiX, out dpiY);
        }
        delegate void GetDpiFunc(IntPtr self, out float dpiX, out float dpiY);

        public virtual D2D_SIZE_F GetSize(
        ){
            var fp = GetFunctionPointer(53);
            var callback = (GetSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetSizeFunc));
            
            return callback(m_ptr);
        }
        delegate D2D_SIZE_F GetSizeFunc(IntPtr self);

        public virtual D2D_SIZE_U GetPixelSize(
        ){
            var fp = GetFunctionPointer(54);
            var callback = (GetPixelSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPixelSizeFunc));
            
            return callback(m_ptr);
        }
        delegate D2D_SIZE_U GetPixelSizeFunc(IntPtr self);

        public virtual uint GetMaximumBitmapSize(
        ){
            var fp = GetFunctionPointer(55);
            var callback = (GetMaximumBitmapSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMaximumBitmapSizeFunc));
            
            return callback(m_ptr);
        }
        delegate uint GetMaximumBitmapSizeFunc(IntPtr self);

        public virtual int IsSupported(
            ref D2D1_RENDER_TARGET_PROPERTIES renderTargetProperties
        ){
            var fp = GetFunctionPointer(56);
            var callback = (IsSupportedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsSupportedFunc));
            
            return callback(m_ptr, ref renderTargetProperties);
        }
        delegate int IsSupportedFunc(IntPtr self, ref D2D1_RENDER_TARGET_PROPERTIES renderTargetProperties);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_BITMAP_PROPERTIES // 1
    {
        public D2D1_PIXEL_FORMAT pixelFormat;
        public float dpiX;
        public float dpiY;
    }
    public class ID2D1Bitmap: ID2D1Image
    {
        static Guid s_uuid = new Guid("a2296057-ea42-4099-983b-539fb6505426");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual D2D_SIZE_F GetSize(
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetSizeFunc));
            
            return callback(m_ptr);
        }
        delegate D2D_SIZE_F GetSizeFunc(IntPtr self);

        public virtual D2D_SIZE_U GetPixelSize(
        ){
            var fp = GetFunctionPointer(5);
            var callback = (GetPixelSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPixelSizeFunc));
            
            return callback(m_ptr);
        }
        delegate D2D_SIZE_U GetPixelSizeFunc(IntPtr self);

        public virtual D2D1_PIXEL_FORMAT GetPixelFormat(
        ){
            var fp = GetFunctionPointer(6);
            var callback = (GetPixelFormatFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPixelFormatFunc));
            
            return callback(m_ptr);
        }
        delegate D2D1_PIXEL_FORMAT GetPixelFormatFunc(IntPtr self);

        public virtual void GetDpi(
            out float dpiX,
            out float dpiY
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetDpiFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDpiFunc));
            
            callback(m_ptr, out dpiX, out dpiY);
        }
        delegate void GetDpiFunc(IntPtr self, out float dpiX, out float dpiY);

        public virtual int CopyFromBitmap(
            ref D2D_POINT_2U destPoint,
            ID2D1Bitmap bitmap,
            ref D2D_RECT_U srcRect
        ){
            var fp = GetFunctionPointer(8);
            var callback = (CopyFromBitmapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopyFromBitmapFunc));
            
            return callback(m_ptr, ref destPoint, bitmap!=null ? bitmap.Ptr : IntPtr.Zero, ref srcRect);
        }
        delegate int CopyFromBitmapFunc(IntPtr self, ref D2D_POINT_2U destPoint, IntPtr bitmap, ref D2D_RECT_U srcRect);

        public virtual int CopyFromRenderTarget(
            ref D2D_POINT_2U destPoint,
            ID2D1RenderTarget renderTarget,
            ref D2D_RECT_U srcRect
        ){
            var fp = GetFunctionPointer(9);
            var callback = (CopyFromRenderTargetFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopyFromRenderTargetFunc));
            
            return callback(m_ptr, ref destPoint, renderTarget!=null ? renderTarget.Ptr : IntPtr.Zero, ref srcRect);
        }
        delegate int CopyFromRenderTargetFunc(IntPtr self, ref D2D_POINT_2U destPoint, IntPtr renderTarget, ref D2D_RECT_U srcRect);

        public virtual int CopyFromMemory(
            ref D2D_RECT_U dstRect,
            IntPtr srcData,
            uint pitch
        ){
            var fp = GetFunctionPointer(10);
            var callback = (CopyFromMemoryFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopyFromMemoryFunc));
            
            return callback(m_ptr, ref dstRect, srcData, pitch);
        }
        delegate int CopyFromMemoryFunc(IntPtr self, ref D2D_RECT_U dstRect, IntPtr srcData, uint pitch);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_BITMAP_BRUSH_PROPERTIES // 1
    {
        public D2D1_EXTEND_MODE extendModeX;
        public D2D1_EXTEND_MODE extendModeY;
        public D2D1_BITMAP_INTERPOLATION_MODE interpolationMode;
    }
    public enum D2D1_EXTEND_MODE // 1
    {
        _CLAMP = 0x0,
        _WRAP = 0x1,
        _MIRROR = 0x2,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public enum D2D1_BITMAP_INTERPOLATION_MODE // 1
    {
        _NEAREST_NEIGHBOR = 0x0,
        _LINEAR = 0x1,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_BRUSH_PROPERTIES // 1
    {
        public float opacity;
        public System.Numerics.Matrix3x2 transform;
    }
    public class ID2D1BitmapBrush: ID2D1Brush
    {
        static Guid s_uuid = new Guid("2cd906aa-12e2-11dc-9fed-001143a055f9");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual void SetExtendModeX(
            D2D1_EXTEND_MODE extendModeX
        ){
            var fp = GetFunctionPointer(8);
            var callback = (SetExtendModeXFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetExtendModeXFunc));
            
            callback(m_ptr, extendModeX);
        }
        delegate void SetExtendModeXFunc(IntPtr self, D2D1_EXTEND_MODE extendModeX);

        public virtual void SetExtendModeY(
            D2D1_EXTEND_MODE extendModeY
        ){
            var fp = GetFunctionPointer(9);
            var callback = (SetExtendModeYFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetExtendModeYFunc));
            
            callback(m_ptr, extendModeY);
        }
        delegate void SetExtendModeYFunc(IntPtr self, D2D1_EXTEND_MODE extendModeY);

        public virtual void SetInterpolationMode(
            D2D1_BITMAP_INTERPOLATION_MODE interpolationMode
        ){
            var fp = GetFunctionPointer(10);
            var callback = (SetInterpolationModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetInterpolationModeFunc));
            
            callback(m_ptr, interpolationMode);
        }
        delegate void SetInterpolationModeFunc(IntPtr self, D2D1_BITMAP_INTERPOLATION_MODE interpolationMode);

        public virtual void SetBitmap(
            ID2D1Bitmap bitmap
        ){
            var fp = GetFunctionPointer(11);
            var callback = (SetBitmapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetBitmapFunc));
            
            callback(m_ptr, bitmap!=null ? bitmap.Ptr : IntPtr.Zero);
        }
        delegate void SetBitmapFunc(IntPtr self, IntPtr bitmap);

        public virtual D2D1_EXTEND_MODE GetExtendModeX(
        ){
            var fp = GetFunctionPointer(12);
            var callback = (GetExtendModeXFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetExtendModeXFunc));
            
            return callback(m_ptr);
        }
        delegate D2D1_EXTEND_MODE GetExtendModeXFunc(IntPtr self);

        public virtual D2D1_EXTEND_MODE GetExtendModeY(
        ){
            var fp = GetFunctionPointer(13);
            var callback = (GetExtendModeYFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetExtendModeYFunc));
            
            return callback(m_ptr);
        }
        delegate D2D1_EXTEND_MODE GetExtendModeYFunc(IntPtr self);

        public virtual D2D1_BITMAP_INTERPOLATION_MODE GetInterpolationMode(
        ){
            var fp = GetFunctionPointer(14);
            var callback = (GetInterpolationModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetInterpolationModeFunc));
            
            return callback(m_ptr);
        }
        delegate D2D1_BITMAP_INTERPOLATION_MODE GetInterpolationModeFunc(IntPtr self);

        public virtual void GetBitmap(
            out ID2D1Bitmap bitmap
        ){
            var fp = GetFunctionPointer(15);
            var callback = (GetBitmapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetBitmapFunc));
            bitmap = new ID2D1Bitmap();
            callback(m_ptr, out bitmap.PtrForNew);
        }
        delegate void GetBitmapFunc(IntPtr self, out IntPtr bitmap);

    }
    public class ID2D1Brush: ID2D1Resource
    {
        static Guid s_uuid = new Guid("2cd906a8-12e2-11dc-9fed-001143a055f9");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual void SetOpacity(
            float opacity
        ){
            var fp = GetFunctionPointer(4);
            var callback = (SetOpacityFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetOpacityFunc));
            
            callback(m_ptr, opacity);
        }
        delegate void SetOpacityFunc(IntPtr self, float opacity);

        public virtual void SetTransform(
            ref System.Numerics.Matrix3x2 transform
        ){
            var fp = GetFunctionPointer(5);
            var callback = (SetTransformFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetTransformFunc));
            
            callback(m_ptr, ref transform);
        }
        delegate void SetTransformFunc(IntPtr self, ref System.Numerics.Matrix3x2 transform);

        public virtual float GetOpacity(
        ){
            var fp = GetFunctionPointer(6);
            var callback = (GetOpacityFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetOpacityFunc));
            
            return callback(m_ptr);
        }
        delegate float GetOpacityFunc(IntPtr self);

        public virtual void GetTransform(
            out System.Numerics.Matrix3x2 transform
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetTransformFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTransformFunc));
            
            callback(m_ptr, out transform);
        }
        delegate void GetTransformFunc(IntPtr self, out System.Numerics.Matrix3x2 transform);

    }
    public class ID2D1SolidColorBrush: ID2D1Brush
    {
        static Guid s_uuid = new Guid("2cd906a9-12e2-11dc-9fed-001143a055f9");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual void SetColor(
            ref System.Numerics.Vector4 color
        ){
            var fp = GetFunctionPointer(8);
            var callback = (SetColorFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetColorFunc));
            
            callback(m_ptr, ref color);
        }
        delegate void SetColorFunc(IntPtr self, ref System.Numerics.Vector4 color);

        public virtual System.Numerics.Vector4 GetColor(
        ){
            var fp = GetFunctionPointer(9);
            var callback = (GetColorFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetColorFunc));
            
            return callback(m_ptr);
        }
        delegate System.Numerics.Vector4 GetColorFunc(IntPtr self);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_GRADIENT_STOP // 1
    {
        public float position;
        public System.Numerics.Vector4 color;
    }
    public enum D2D1_GAMMA // 1
    {
        _2_2 = 0x0,
        _1_0 = 0x1,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public class ID2D1GradientStopCollection: ID2D1Resource
    {
        static Guid s_uuid = new Guid("2cd906a7-12e2-11dc-9fed-001143a055f9");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual uint GetGradientStopCount(
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetGradientStopCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetGradientStopCountFunc));
            
            return callback(m_ptr);
        }
        delegate uint GetGradientStopCountFunc(IntPtr self);

        public virtual void GetGradientStops(
            out D2D1_GRADIENT_STOP gradientStops,
            uint gradientStopsCount
        ){
            var fp = GetFunctionPointer(5);
            var callback = (GetGradientStopsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetGradientStopsFunc));
            
            callback(m_ptr, out gradientStops, gradientStopsCount);
        }
        delegate void GetGradientStopsFunc(IntPtr self, out D2D1_GRADIENT_STOP gradientStops, uint gradientStopsCount);

        public virtual D2D1_GAMMA GetColorInterpolationGamma(
        ){
            var fp = GetFunctionPointer(6);
            var callback = (GetColorInterpolationGammaFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetColorInterpolationGammaFunc));
            
            return callback(m_ptr);
        }
        delegate D2D1_GAMMA GetColorInterpolationGammaFunc(IntPtr self);

        public virtual D2D1_EXTEND_MODE GetExtendMode(
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetExtendModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetExtendModeFunc));
            
            return callback(m_ptr);
        }
        delegate D2D1_EXTEND_MODE GetExtendModeFunc(IntPtr self);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_LINEAR_GRADIENT_BRUSH_PROPERTIES // 1
    {
        public System.Numerics.Vector2 startPoint;
        public System.Numerics.Vector2 endPoint;
    }
    public class ID2D1LinearGradientBrush: ID2D1Brush
    {
        static Guid s_uuid = new Guid("2cd906ab-12e2-11dc-9fed-001143a055f9");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual void SetStartPoint(
            System.Numerics.Vector2 startPoint
        ){
            var fp = GetFunctionPointer(8);
            var callback = (SetStartPointFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetStartPointFunc));
            
            callback(m_ptr, startPoint);
        }
        delegate void SetStartPointFunc(IntPtr self, System.Numerics.Vector2 startPoint);

        public virtual void SetEndPoint(
            System.Numerics.Vector2 endPoint
        ){
            var fp = GetFunctionPointer(9);
            var callback = (SetEndPointFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetEndPointFunc));
            
            callback(m_ptr, endPoint);
        }
        delegate void SetEndPointFunc(IntPtr self, System.Numerics.Vector2 endPoint);

        public virtual System.Numerics.Vector2 GetStartPoint(
        ){
            var fp = GetFunctionPointer(10);
            var callback = (GetStartPointFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetStartPointFunc));
            
            return callback(m_ptr);
        }
        delegate System.Numerics.Vector2 GetStartPointFunc(IntPtr self);

        public virtual System.Numerics.Vector2 GetEndPoint(
        ){
            var fp = GetFunctionPointer(11);
            var callback = (GetEndPointFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetEndPointFunc));
            
            return callback(m_ptr);
        }
        delegate System.Numerics.Vector2 GetEndPointFunc(IntPtr self);

        public virtual void GetGradientStopCollection(
            out ID2D1GradientStopCollection gradientStopCollection
        ){
            var fp = GetFunctionPointer(12);
            var callback = (GetGradientStopCollectionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetGradientStopCollectionFunc));
            gradientStopCollection = new ID2D1GradientStopCollection();
            callback(m_ptr, out gradientStopCollection.PtrForNew);
        }
        delegate void GetGradientStopCollectionFunc(IntPtr self, out IntPtr gradientStopCollection);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_RADIAL_GRADIENT_BRUSH_PROPERTIES // 1
    {
        public System.Numerics.Vector2 center;
        public System.Numerics.Vector2 gradientOriginOffset;
        public float radiusX;
        public float radiusY;
    }
    public class ID2D1RadialGradientBrush: ID2D1Brush
    {
        static Guid s_uuid = new Guid("2cd906ac-12e2-11dc-9fed-001143a055f9");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual void SetCenter(
            System.Numerics.Vector2 center
        ){
            var fp = GetFunctionPointer(8);
            var callback = (SetCenterFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetCenterFunc));
            
            callback(m_ptr, center);
        }
        delegate void SetCenterFunc(IntPtr self, System.Numerics.Vector2 center);

        public virtual void SetGradientOriginOffset(
            System.Numerics.Vector2 gradientOriginOffset
        ){
            var fp = GetFunctionPointer(9);
            var callback = (SetGradientOriginOffsetFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetGradientOriginOffsetFunc));
            
            callback(m_ptr, gradientOriginOffset);
        }
        delegate void SetGradientOriginOffsetFunc(IntPtr self, System.Numerics.Vector2 gradientOriginOffset);

        public virtual void SetRadiusX(
            float radiusX
        ){
            var fp = GetFunctionPointer(10);
            var callback = (SetRadiusXFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetRadiusXFunc));
            
            callback(m_ptr, radiusX);
        }
        delegate void SetRadiusXFunc(IntPtr self, float radiusX);

        public virtual void SetRadiusY(
            float radiusY
        ){
            var fp = GetFunctionPointer(11);
            var callback = (SetRadiusYFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetRadiusYFunc));
            
            callback(m_ptr, radiusY);
        }
        delegate void SetRadiusYFunc(IntPtr self, float radiusY);

        public virtual System.Numerics.Vector2 GetCenter(
        ){
            var fp = GetFunctionPointer(12);
            var callback = (GetCenterFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetCenterFunc));
            
            return callback(m_ptr);
        }
        delegate System.Numerics.Vector2 GetCenterFunc(IntPtr self);

        public virtual System.Numerics.Vector2 GetGradientOriginOffset(
        ){
            var fp = GetFunctionPointer(13);
            var callback = (GetGradientOriginOffsetFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetGradientOriginOffsetFunc));
            
            return callback(m_ptr);
        }
        delegate System.Numerics.Vector2 GetGradientOriginOffsetFunc(IntPtr self);

        public virtual float GetRadiusX(
        ){
            var fp = GetFunctionPointer(14);
            var callback = (GetRadiusXFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetRadiusXFunc));
            
            return callback(m_ptr);
        }
        delegate float GetRadiusXFunc(IntPtr self);

        public virtual float GetRadiusY(
        ){
            var fp = GetFunctionPointer(15);
            var callback = (GetRadiusYFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetRadiusYFunc));
            
            return callback(m_ptr);
        }
        delegate float GetRadiusYFunc(IntPtr self);

        public virtual void GetGradientStopCollection(
            out ID2D1GradientStopCollection gradientStopCollection
        ){
            var fp = GetFunctionPointer(16);
            var callback = (GetGradientStopCollectionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetGradientStopCollectionFunc));
            gradientStopCollection = new ID2D1GradientStopCollection();
            callback(m_ptr, out gradientStopCollection.PtrForNew);
        }
        delegate void GetGradientStopCollectionFunc(IntPtr self, out IntPtr gradientStopCollection);

    }
    public enum D2D1_COMPATIBLE_RENDER_TARGET_OPTIONS // 1
    {
        _NONE = 0x0,
        _GDI_COMPATIBLE = 0x1,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public class ID2D1BitmapRenderTarget: ID2D1RenderTarget
    {
        static Guid s_uuid = new Guid("2cd90695-12e2-11dc-9fed-001143a055f9");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int GetBitmap(
            out ID2D1Bitmap bitmap
        ){
            var fp = GetFunctionPointer(57);
            var callback = (GetBitmapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetBitmapFunc));
            bitmap = new ID2D1Bitmap();
            return callback(m_ptr, out bitmap.PtrForNew);
        }
        delegate int GetBitmapFunc(IntPtr self, out IntPtr bitmap);

    }
    public class ID2D1Layer: ID2D1Resource
    {
        static Guid s_uuid = new Guid("2cd9069b-12e2-11dc-9fed-001143a055f9");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual D2D_SIZE_F GetSize(
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetSizeFunc));
            
            return callback(m_ptr);
        }
        delegate D2D_SIZE_F GetSizeFunc(IntPtr self);

    }
    public class ID2D1Mesh: ID2D1Resource
    {
        static Guid s_uuid = new Guid("2cd906c2-12e2-11dc-9fed-001143a055f9");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int Open(
            out ID2D1TessellationSink tessellationSink
        ){
            var fp = GetFunctionPointer(4);
            var callback = (OpenFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OpenFunc));
            tessellationSink = new ID2D1TessellationSink();
            return callback(m_ptr, out tessellationSink.PtrForNew);
        }
        delegate int OpenFunc(IntPtr self, out IntPtr tessellationSink);

    }
    public enum D2D1_OPACITY_MASK_CONTENT // 1
    {
        _GRAPHICS = 0x0,
        _TEXT_NATURAL = 0x1,
        _TEXT_GDI_COMPATIBLE = 0x2,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public enum D2D1_DRAW_TEXT_OPTIONS // 1
    {
        _NO_SNAP = 0x1,
        _CLIP = 0x2,
        _ENABLE_COLOR_FONT = 0x4,
        _DISABLE_COLOR_BITMAP_SNAPPING = 0x8,
        _NONE = 0x0,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_LAYER_PARAMETERS // 1
    {
        public System.Numerics.Vector4 contentBounds;
        public ID2D1Geometry geometricMask;
        public D2D1_ANTIALIAS_MODE maskAntialiasMode;
        public System.Numerics.Matrix3x2 maskTransform;
        public float opacity;
        public ID2D1Brush opacityBrush;
        public D2D1_LAYER_OPTIONS layerOptions;
    }
    public enum D2D1_LAYER_OPTIONS // 1
    {
        _NONE = 0x0,
        _INITIALIZE_FOR_CLEARTYPE = 0x1,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_HWND_RENDER_TARGET_PROPERTIES // 1
    {
        public IntPtr hwnd;
        public D2D_SIZE_U pixelSize;
        public D2D1_PRESENT_OPTIONS presentOptions;
    }
    public enum D2D1_PRESENT_OPTIONS // 1
    {
        _NONE = 0x0,
        _RETAIN_CONTENTS = 0x1,
        _IMMEDIATELY = 0x2,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public class ID2D1HwndRenderTarget: ID2D1RenderTarget
    {
        static Guid s_uuid = new Guid("2cd90698-12e2-11dc-9fed-001143a055f9");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual D2D1_WINDOW_STATE CheckWindowState(
        ){
            var fp = GetFunctionPointer(57);
            var callback = (CheckWindowStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CheckWindowStateFunc));
            
            return callback(m_ptr);
        }
        delegate D2D1_WINDOW_STATE CheckWindowStateFunc(IntPtr self);

        public virtual int Resize(
            ref D2D_SIZE_U pixelSize
        ){
            var fp = GetFunctionPointer(58);
            var callback = (ResizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ResizeFunc));
            
            return callback(m_ptr, ref pixelSize);
        }
        delegate int ResizeFunc(IntPtr self, ref D2D_SIZE_U pixelSize);

        public virtual IntPtr GetHwnd(
        ){
            var fp = GetFunctionPointer(59);
            var callback = (GetHwndFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetHwndFunc));
            
            return callback(m_ptr);
        }
        delegate IntPtr GetHwndFunc(IntPtr self);

    }
    public enum D2D1_WINDOW_STATE // 1
    {
        _NONE = 0x0,
        _OCCLUDED = 0x1,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public class ID2D1DCRenderTarget: ID2D1RenderTarget
    {
        static Guid s_uuid = new Guid("1c51bc64-de61-46fd-9899-63a5d8f03950");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int BindDC(
            IntPtr hDC,
            ref tagRECT pSubRect
        ){
            var fp = GetFunctionPointer(57);
            var callback = (BindDCFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(BindDCFunc));
            
            return callback(m_ptr, hDC, ref pSubRect);
        }
        delegate int BindDCFunc(IntPtr self, IntPtr hDC, ref tagRECT pSubRect);

    }
    // forward declaration ID2D1SimplifiedGeometrySink;
    public enum D2D1_DC_INITIALIZE_MODE // 1
    {
        _COPY = 0x0,
        _CLEAR = 0x1,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public enum D2D1_DEBUG_LEVEL // 1
    {
        _NONE = 0x0,
        _ERROR = 0x1,
        _WARNING = 0x2,
        _INFORMATION = 0x3,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    public enum D2D1_FACTORY_TYPE // 1
    {
        _SINGLE_THREADED = 0x0,
        _MULTI_THREADED = 0x1,
        _FORCE_DWORD = unchecked((int)0xffffffff),
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D2D1_FACTORY_OPTIONS // 1
    {
        public D2D1_DEBUG_LEVEL debugLevel;
    }
    public class ID2D1GdiInteropRenderTarget: IUnknown
    {
        static Guid s_uuid = new Guid("e0db51c3-6f77-4bae-b3d5-e47509b35838");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int GetDC(
            D2D1_DC_INITIALIZE_MODE mode,
            out IntPtr hdc
        ){
            var fp = GetFunctionPointer(3);
            var callback = (GetDCFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDCFunc));
            
            return callback(m_ptr, mode, out hdc);
        }
        delegate int GetDCFunc(IntPtr self, D2D1_DC_INITIALIZE_MODE mode, out IntPtr hdc);

        public virtual int ReleaseDC(
            ref tagRECT update
        ){
            var fp = GetFunctionPointer(4);
            var callback = (ReleaseDCFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ReleaseDCFunc));
            
            return callback(m_ptr, ref update);
        }
        delegate int ReleaseDCFunc(IntPtr self, ref tagRECT update);

    }
    public static class d2d1 {
        [DllImport("d2d1.dll")]
        public static extern int D2D1CreateFactory(
            D2D1_FACTORY_TYPE factoryType,
            ref Guid riid,
            ref D2D1_FACTORY_OPTIONS pFactoryOptions,
            out IntPtr ppIFactory
        );
        [DllImport("d2d1.dll")]
        public static extern void D2D1MakeRotateMatrix(
            float angle,
            System.Numerics.Vector2 center,
            out System.Numerics.Matrix3x2 matrix
        );
        [DllImport("d2d1.dll")]
        public static extern void D2D1MakeSkewMatrix(
            float angleX,
            float angleY,
            System.Numerics.Vector2 center,
            out System.Numerics.Matrix3x2 matrix
        );
        [DllImport("d2d1.dll")]
        public static extern int D2D1IsMatrixInvertible(
            ref System.Numerics.Matrix3x2 matrix
        );
        [DllImport("d2d1.dll")]
        public static extern int D2D1InvertMatrix(
            out System.Numerics.Matrix3x2 matrix
        );
    }
}
