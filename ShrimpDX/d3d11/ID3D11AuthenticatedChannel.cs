// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class ID3D11AuthenticatedChannel: ID3D11DeviceChild
    {
        static Guid s_uuid = new Guid("3015a308-dcbd-47aa-a747-192486d14d4a");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int GetCertificateSize(
            out uint pCertificateSize
        ){
            var fp = GetFunctionPointer(7);
            if(m_GetCertificateSizeFunc==null) m_GetCertificateSizeFunc = (GetCertificateSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetCertificateSizeFunc));
            
            return m_GetCertificateSizeFunc(m_ptr, out pCertificateSize);
        }
        delegate int GetCertificateSizeFunc(IntPtr self, out uint pCertificateSize);
        GetCertificateSizeFunc m_GetCertificateSizeFunc;

        public virtual int GetCertificate(
            uint CertificateSize,
            out byte pCertificate
        ){
            var fp = GetFunctionPointer(8);
            if(m_GetCertificateFunc==null) m_GetCertificateFunc = (GetCertificateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetCertificateFunc));
            
            return m_GetCertificateFunc(m_ptr, CertificateSize, out pCertificate);
        }
        delegate int GetCertificateFunc(IntPtr self, uint CertificateSize, out byte pCertificate);
        GetCertificateFunc m_GetCertificateFunc;

        public virtual void GetChannelHandle(
            out IntPtr pChannelHandle
        ){
            var fp = GetFunctionPointer(9);
            if(m_GetChannelHandleFunc==null) m_GetChannelHandleFunc = (GetChannelHandleFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetChannelHandleFunc));
            
            m_GetChannelHandleFunc(m_ptr, out pChannelHandle);
        }
        delegate void GetChannelHandleFunc(IntPtr self, out IntPtr pChannelHandle);
        GetChannelHandleFunc m_GetChannelHandleFunc;

    }
}
