// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class ID3D11DeviceContext: ID3D11DeviceChild
    {
        static Guid s_uuid = new Guid("c0bfa96c-e089-44fb-8eaf-26f8796190da");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual void VSSetConstantBuffers(
            uint StartSlot,
            uint NumBuffers,
            ref IntPtr ppConstantBuffers
        ){
            var fp = GetFunctionPointer(7);
            if(m_VSSetConstantBuffersFunc==null) m_VSSetConstantBuffersFunc = (VSSetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSSetConstantBuffersFunc));
            
            m_VSSetConstantBuffersFunc(m_ptr, StartSlot, NumBuffers, ref ppConstantBuffers);
        }
        delegate void VSSetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers);
        VSSetConstantBuffersFunc m_VSSetConstantBuffersFunc;

        public virtual void PSSetShaderResources(
            uint StartSlot,
            uint NumViews,
            ref IntPtr ppShaderResourceViews
        ){
            var fp = GetFunctionPointer(8);
            if(m_PSSetShaderResourcesFunc==null) m_PSSetShaderResourcesFunc = (PSSetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSSetShaderResourcesFunc));
            
            m_PSSetShaderResourcesFunc(m_ptr, StartSlot, NumViews, ref ppShaderResourceViews);
        }
        delegate void PSSetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews);
        PSSetShaderResourcesFunc m_PSSetShaderResourcesFunc;

        public virtual void PSSetShader(
            ID3D11PixelShader pPixelShader,
            ref IntPtr ppClassInstances,
            uint NumClassInstances
        ){
            var fp = GetFunctionPointer(9);
            if(m_PSSetShaderFunc==null) m_PSSetShaderFunc = (PSSetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSSetShaderFunc));
            
            m_PSSetShaderFunc(m_ptr, pPixelShader!=null ? pPixelShader.Ptr : IntPtr.Zero, ref ppClassInstances, NumClassInstances);
        }
        delegate void PSSetShaderFunc(IntPtr self, IntPtr pPixelShader, ref IntPtr ppClassInstances, uint NumClassInstances);
        PSSetShaderFunc m_PSSetShaderFunc;

        public virtual void PSSetSamplers(
            uint StartSlot,
            uint NumSamplers,
            ref IntPtr ppSamplers
        ){
            var fp = GetFunctionPointer(10);
            if(m_PSSetSamplersFunc==null) m_PSSetSamplersFunc = (PSSetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSSetSamplersFunc));
            
            m_PSSetSamplersFunc(m_ptr, StartSlot, NumSamplers, ref ppSamplers);
        }
        delegate void PSSetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers);
        PSSetSamplersFunc m_PSSetSamplersFunc;

        public virtual void VSSetShader(
            ID3D11VertexShader pVertexShader,
            ref IntPtr ppClassInstances,
            uint NumClassInstances
        ){
            var fp = GetFunctionPointer(11);
            if(m_VSSetShaderFunc==null) m_VSSetShaderFunc = (VSSetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSSetShaderFunc));
            
            m_VSSetShaderFunc(m_ptr, pVertexShader!=null ? pVertexShader.Ptr : IntPtr.Zero, ref ppClassInstances, NumClassInstances);
        }
        delegate void VSSetShaderFunc(IntPtr self, IntPtr pVertexShader, ref IntPtr ppClassInstances, uint NumClassInstances);
        VSSetShaderFunc m_VSSetShaderFunc;

        public virtual void DrawIndexed(
            uint IndexCount,
            uint StartIndexLocation,
            int BaseVertexLocation
        ){
            var fp = GetFunctionPointer(12);
            if(m_DrawIndexedFunc==null) m_DrawIndexedFunc = (DrawIndexedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawIndexedFunc));
            
            m_DrawIndexedFunc(m_ptr, IndexCount, StartIndexLocation, BaseVertexLocation);
        }
        delegate void DrawIndexedFunc(IntPtr self, uint IndexCount, uint StartIndexLocation, int BaseVertexLocation);
        DrawIndexedFunc m_DrawIndexedFunc;

        public virtual void Draw(
            uint VertexCount,
            uint StartVertexLocation
        ){
            var fp = GetFunctionPointer(13);
            if(m_DrawFunc==null) m_DrawFunc = (DrawFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawFunc));
            
            m_DrawFunc(m_ptr, VertexCount, StartVertexLocation);
        }
        delegate void DrawFunc(IntPtr self, uint VertexCount, uint StartVertexLocation);
        DrawFunc m_DrawFunc;

        public virtual int Map(
            ID3D11Resource pResource,
            uint Subresource,
            D3D11_MAP MapType,
            uint MapFlags,
            out D3D11_MAPPED_SUBRESOURCE pMappedResource
        ){
            var fp = GetFunctionPointer(14);
            if(m_MapFunc==null) m_MapFunc = (MapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(MapFunc));
            
            return m_MapFunc(m_ptr, pResource!=null ? pResource.Ptr : IntPtr.Zero, Subresource, MapType, MapFlags, out pMappedResource);
        }
        delegate int MapFunc(IntPtr self, IntPtr pResource, uint Subresource, D3D11_MAP MapType, uint MapFlags, out D3D11_MAPPED_SUBRESOURCE pMappedResource);
        MapFunc m_MapFunc;

        public virtual void Unmap(
            ID3D11Resource pResource,
            uint Subresource
        ){
            var fp = GetFunctionPointer(15);
            if(m_UnmapFunc==null) m_UnmapFunc = (UnmapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(UnmapFunc));
            
            m_UnmapFunc(m_ptr, pResource!=null ? pResource.Ptr : IntPtr.Zero, Subresource);
        }
        delegate void UnmapFunc(IntPtr self, IntPtr pResource, uint Subresource);
        UnmapFunc m_UnmapFunc;

        public virtual void PSSetConstantBuffers(
            uint StartSlot,
            uint NumBuffers,
            ref IntPtr ppConstantBuffers
        ){
            var fp = GetFunctionPointer(16);
            if(m_PSSetConstantBuffersFunc==null) m_PSSetConstantBuffersFunc = (PSSetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSSetConstantBuffersFunc));
            
            m_PSSetConstantBuffersFunc(m_ptr, StartSlot, NumBuffers, ref ppConstantBuffers);
        }
        delegate void PSSetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers);
        PSSetConstantBuffersFunc m_PSSetConstantBuffersFunc;

        public virtual void IASetInputLayout(
            ID3D11InputLayout pInputLayout
        ){
            var fp = GetFunctionPointer(17);
            if(m_IASetInputLayoutFunc==null) m_IASetInputLayoutFunc = (IASetInputLayoutFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IASetInputLayoutFunc));
            
            m_IASetInputLayoutFunc(m_ptr, pInputLayout!=null ? pInputLayout.Ptr : IntPtr.Zero);
        }
        delegate void IASetInputLayoutFunc(IntPtr self, IntPtr pInputLayout);
        IASetInputLayoutFunc m_IASetInputLayoutFunc;

        public virtual void IASetVertexBuffers(
            uint StartSlot,
            uint NumBuffers,
            ref IntPtr ppVertexBuffers,
            ref uint pStrides,
            ref uint pOffsets
        ){
            var fp = GetFunctionPointer(18);
            if(m_IASetVertexBuffersFunc==null) m_IASetVertexBuffersFunc = (IASetVertexBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IASetVertexBuffersFunc));
            
            m_IASetVertexBuffersFunc(m_ptr, StartSlot, NumBuffers, ref ppVertexBuffers, ref pStrides, ref pOffsets);
        }
        delegate void IASetVertexBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppVertexBuffers, ref uint pStrides, ref uint pOffsets);
        IASetVertexBuffersFunc m_IASetVertexBuffersFunc;

        public virtual void IASetIndexBuffer(
            ID3D11Buffer pIndexBuffer,
            DXGI_FORMAT Format,
            uint Offset
        ){
            var fp = GetFunctionPointer(19);
            if(m_IASetIndexBufferFunc==null) m_IASetIndexBufferFunc = (IASetIndexBufferFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IASetIndexBufferFunc));
            
            m_IASetIndexBufferFunc(m_ptr, pIndexBuffer!=null ? pIndexBuffer.Ptr : IntPtr.Zero, Format, Offset);
        }
        delegate void IASetIndexBufferFunc(IntPtr self, IntPtr pIndexBuffer, DXGI_FORMAT Format, uint Offset);
        IASetIndexBufferFunc m_IASetIndexBufferFunc;

        public virtual void DrawIndexedInstanced(
            uint IndexCountPerInstance,
            uint InstanceCount,
            uint StartIndexLocation,
            int BaseVertexLocation,
            uint StartInstanceLocation
        ){
            var fp = GetFunctionPointer(20);
            if(m_DrawIndexedInstancedFunc==null) m_DrawIndexedInstancedFunc = (DrawIndexedInstancedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawIndexedInstancedFunc));
            
            m_DrawIndexedInstancedFunc(m_ptr, IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation);
        }
        delegate void DrawIndexedInstancedFunc(IntPtr self, uint IndexCountPerInstance, uint InstanceCount, uint StartIndexLocation, int BaseVertexLocation, uint StartInstanceLocation);
        DrawIndexedInstancedFunc m_DrawIndexedInstancedFunc;

        public virtual void DrawInstanced(
            uint VertexCountPerInstance,
            uint InstanceCount,
            uint StartVertexLocation,
            uint StartInstanceLocation
        ){
            var fp = GetFunctionPointer(21);
            if(m_DrawInstancedFunc==null) m_DrawInstancedFunc = (DrawInstancedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawInstancedFunc));
            
            m_DrawInstancedFunc(m_ptr, VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation);
        }
        delegate void DrawInstancedFunc(IntPtr self, uint VertexCountPerInstance, uint InstanceCount, uint StartVertexLocation, uint StartInstanceLocation);
        DrawInstancedFunc m_DrawInstancedFunc;

        public virtual void GSSetConstantBuffers(
            uint StartSlot,
            uint NumBuffers,
            ref IntPtr ppConstantBuffers
        ){
            var fp = GetFunctionPointer(22);
            if(m_GSSetConstantBuffersFunc==null) m_GSSetConstantBuffersFunc = (GSSetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSSetConstantBuffersFunc));
            
            m_GSSetConstantBuffersFunc(m_ptr, StartSlot, NumBuffers, ref ppConstantBuffers);
        }
        delegate void GSSetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers);
        GSSetConstantBuffersFunc m_GSSetConstantBuffersFunc;

        public virtual void GSSetShader(
            ID3D11GeometryShader pShader,
            ref IntPtr ppClassInstances,
            uint NumClassInstances
        ){
            var fp = GetFunctionPointer(23);
            if(m_GSSetShaderFunc==null) m_GSSetShaderFunc = (GSSetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSSetShaderFunc));
            
            m_GSSetShaderFunc(m_ptr, pShader!=null ? pShader.Ptr : IntPtr.Zero, ref ppClassInstances, NumClassInstances);
        }
        delegate void GSSetShaderFunc(IntPtr self, IntPtr pShader, ref IntPtr ppClassInstances, uint NumClassInstances);
        GSSetShaderFunc m_GSSetShaderFunc;

        public virtual void IASetPrimitiveTopology(
            D3D_PRIMITIVE_TOPOLOGY Topology
        ){
            var fp = GetFunctionPointer(24);
            if(m_IASetPrimitiveTopologyFunc==null) m_IASetPrimitiveTopologyFunc = (IASetPrimitiveTopologyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IASetPrimitiveTopologyFunc));
            
            m_IASetPrimitiveTopologyFunc(m_ptr, Topology);
        }
        delegate void IASetPrimitiveTopologyFunc(IntPtr self, D3D_PRIMITIVE_TOPOLOGY Topology);
        IASetPrimitiveTopologyFunc m_IASetPrimitiveTopologyFunc;

        public virtual void VSSetShaderResources(
            uint StartSlot,
            uint NumViews,
            ref IntPtr ppShaderResourceViews
        ){
            var fp = GetFunctionPointer(25);
            if(m_VSSetShaderResourcesFunc==null) m_VSSetShaderResourcesFunc = (VSSetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSSetShaderResourcesFunc));
            
            m_VSSetShaderResourcesFunc(m_ptr, StartSlot, NumViews, ref ppShaderResourceViews);
        }
        delegate void VSSetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews);
        VSSetShaderResourcesFunc m_VSSetShaderResourcesFunc;

        public virtual void VSSetSamplers(
            uint StartSlot,
            uint NumSamplers,
            ref IntPtr ppSamplers
        ){
            var fp = GetFunctionPointer(26);
            if(m_VSSetSamplersFunc==null) m_VSSetSamplersFunc = (VSSetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSSetSamplersFunc));
            
            m_VSSetSamplersFunc(m_ptr, StartSlot, NumSamplers, ref ppSamplers);
        }
        delegate void VSSetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers);
        VSSetSamplersFunc m_VSSetSamplersFunc;

        public virtual void Begin(
            ID3D11Asynchronous pAsync
        ){
            var fp = GetFunctionPointer(27);
            if(m_BeginFunc==null) m_BeginFunc = (BeginFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(BeginFunc));
            
            m_BeginFunc(m_ptr, pAsync!=null ? pAsync.Ptr : IntPtr.Zero);
        }
        delegate void BeginFunc(IntPtr self, IntPtr pAsync);
        BeginFunc m_BeginFunc;

        public virtual void End(
            ID3D11Asynchronous pAsync
        ){
            var fp = GetFunctionPointer(28);
            if(m_EndFunc==null) m_EndFunc = (EndFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(EndFunc));
            
            m_EndFunc(m_ptr, pAsync!=null ? pAsync.Ptr : IntPtr.Zero);
        }
        delegate void EndFunc(IntPtr self, IntPtr pAsync);
        EndFunc m_EndFunc;

        public virtual int GetData(
            ID3D11Asynchronous pAsync,
            IntPtr pData,
            uint DataSize,
            uint GetDataFlags
        ){
            var fp = GetFunctionPointer(29);
            if(m_GetDataFunc==null) m_GetDataFunc = (GetDataFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDataFunc));
            
            return m_GetDataFunc(m_ptr, pAsync!=null ? pAsync.Ptr : IntPtr.Zero, pData, DataSize, GetDataFlags);
        }
        delegate int GetDataFunc(IntPtr self, IntPtr pAsync, IntPtr pData, uint DataSize, uint GetDataFlags);
        GetDataFunc m_GetDataFunc;

        public virtual void SetPredication(
            ID3D11Predicate pPredicate,
            int PredicateValue
        ){
            var fp = GetFunctionPointer(30);
            if(m_SetPredicationFunc==null) m_SetPredicationFunc = (SetPredicationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetPredicationFunc));
            
            m_SetPredicationFunc(m_ptr, pPredicate!=null ? pPredicate.Ptr : IntPtr.Zero, PredicateValue);
        }
        delegate void SetPredicationFunc(IntPtr self, IntPtr pPredicate, int PredicateValue);
        SetPredicationFunc m_SetPredicationFunc;

        public virtual void GSSetShaderResources(
            uint StartSlot,
            uint NumViews,
            ref IntPtr ppShaderResourceViews
        ){
            var fp = GetFunctionPointer(31);
            if(m_GSSetShaderResourcesFunc==null) m_GSSetShaderResourcesFunc = (GSSetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSSetShaderResourcesFunc));
            
            m_GSSetShaderResourcesFunc(m_ptr, StartSlot, NumViews, ref ppShaderResourceViews);
        }
        delegate void GSSetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews);
        GSSetShaderResourcesFunc m_GSSetShaderResourcesFunc;

        public virtual void GSSetSamplers(
            uint StartSlot,
            uint NumSamplers,
            ref IntPtr ppSamplers
        ){
            var fp = GetFunctionPointer(32);
            if(m_GSSetSamplersFunc==null) m_GSSetSamplersFunc = (GSSetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSSetSamplersFunc));
            
            m_GSSetSamplersFunc(m_ptr, StartSlot, NumSamplers, ref ppSamplers);
        }
        delegate void GSSetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers);
        GSSetSamplersFunc m_GSSetSamplersFunc;

        public virtual void OMSetRenderTargets(
            uint NumViews,
            ref IntPtr ppRenderTargetViews,
            ID3D11DepthStencilView pDepthStencilView
        ){
            var fp = GetFunctionPointer(33);
            if(m_OMSetRenderTargetsFunc==null) m_OMSetRenderTargetsFunc = (OMSetRenderTargetsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMSetRenderTargetsFunc));
            
            m_OMSetRenderTargetsFunc(m_ptr, NumViews, ref ppRenderTargetViews, pDepthStencilView!=null ? pDepthStencilView.Ptr : IntPtr.Zero);
        }
        delegate void OMSetRenderTargetsFunc(IntPtr self, uint NumViews, ref IntPtr ppRenderTargetViews, IntPtr pDepthStencilView);
        OMSetRenderTargetsFunc m_OMSetRenderTargetsFunc;

        public virtual void OMSetRenderTargetsAndUnorderedAccessViews(
            uint NumRTVs,
            ref IntPtr ppRenderTargetViews,
            ID3D11DepthStencilView pDepthStencilView,
            uint UAVStartSlot,
            uint NumUAVs,
            ref IntPtr ppUnorderedAccessViews,
            ref uint pUAVInitialCounts
        ){
            var fp = GetFunctionPointer(34);
            if(m_OMSetRenderTargetsAndUnorderedAccessViewsFunc==null) m_OMSetRenderTargetsAndUnorderedAccessViewsFunc = (OMSetRenderTargetsAndUnorderedAccessViewsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMSetRenderTargetsAndUnorderedAccessViewsFunc));
            
            m_OMSetRenderTargetsAndUnorderedAccessViewsFunc(m_ptr, NumRTVs, ref ppRenderTargetViews, pDepthStencilView!=null ? pDepthStencilView.Ptr : IntPtr.Zero, UAVStartSlot, NumUAVs, ref ppUnorderedAccessViews, ref pUAVInitialCounts);
        }
        delegate void OMSetRenderTargetsAndUnorderedAccessViewsFunc(IntPtr self, uint NumRTVs, ref IntPtr ppRenderTargetViews, IntPtr pDepthStencilView, uint UAVStartSlot, uint NumUAVs, ref IntPtr ppUnorderedAccessViews, ref uint pUAVInitialCounts);
        OMSetRenderTargetsAndUnorderedAccessViewsFunc m_OMSetRenderTargetsAndUnorderedAccessViewsFunc;

        public virtual void OMSetBlendState(
            ID3D11BlendState pBlendState,
            ref float BlendFactor,
            uint SampleMask
        ){
            var fp = GetFunctionPointer(35);
            if(m_OMSetBlendStateFunc==null) m_OMSetBlendStateFunc = (OMSetBlendStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMSetBlendStateFunc));
            
            m_OMSetBlendStateFunc(m_ptr, pBlendState!=null ? pBlendState.Ptr : IntPtr.Zero, ref BlendFactor, SampleMask);
        }
        delegate void OMSetBlendStateFunc(IntPtr self, IntPtr pBlendState, ref float BlendFactor, uint SampleMask);
        OMSetBlendStateFunc m_OMSetBlendStateFunc;

        public virtual void OMSetDepthStencilState(
            ID3D11DepthStencilState pDepthStencilState,
            uint StencilRef
        ){
            var fp = GetFunctionPointer(36);
            if(m_OMSetDepthStencilStateFunc==null) m_OMSetDepthStencilStateFunc = (OMSetDepthStencilStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMSetDepthStencilStateFunc));
            
            m_OMSetDepthStencilStateFunc(m_ptr, pDepthStencilState!=null ? pDepthStencilState.Ptr : IntPtr.Zero, StencilRef);
        }
        delegate void OMSetDepthStencilStateFunc(IntPtr self, IntPtr pDepthStencilState, uint StencilRef);
        OMSetDepthStencilStateFunc m_OMSetDepthStencilStateFunc;

        public virtual void SOSetTargets(
            uint NumBuffers,
            ref IntPtr ppSOTargets,
            ref uint pOffsets
        ){
            var fp = GetFunctionPointer(37);
            if(m_SOSetTargetsFunc==null) m_SOSetTargetsFunc = (SOSetTargetsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SOSetTargetsFunc));
            
            m_SOSetTargetsFunc(m_ptr, NumBuffers, ref ppSOTargets, ref pOffsets);
        }
        delegate void SOSetTargetsFunc(IntPtr self, uint NumBuffers, ref IntPtr ppSOTargets, ref uint pOffsets);
        SOSetTargetsFunc m_SOSetTargetsFunc;

        public virtual void DrawAuto(
        ){
            var fp = GetFunctionPointer(38);
            if(m_DrawAutoFunc==null) m_DrawAutoFunc = (DrawAutoFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawAutoFunc));
            
            m_DrawAutoFunc(m_ptr);
        }
        delegate void DrawAutoFunc(IntPtr self);
        DrawAutoFunc m_DrawAutoFunc;

        public virtual void DrawIndexedInstancedIndirect(
            ID3D11Buffer pBufferForArgs,
            uint AlignedByteOffsetForArgs
        ){
            var fp = GetFunctionPointer(39);
            if(m_DrawIndexedInstancedIndirectFunc==null) m_DrawIndexedInstancedIndirectFunc = (DrawIndexedInstancedIndirectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawIndexedInstancedIndirectFunc));
            
            m_DrawIndexedInstancedIndirectFunc(m_ptr, pBufferForArgs!=null ? pBufferForArgs.Ptr : IntPtr.Zero, AlignedByteOffsetForArgs);
        }
        delegate void DrawIndexedInstancedIndirectFunc(IntPtr self, IntPtr pBufferForArgs, uint AlignedByteOffsetForArgs);
        DrawIndexedInstancedIndirectFunc m_DrawIndexedInstancedIndirectFunc;

        public virtual void DrawInstancedIndirect(
            ID3D11Buffer pBufferForArgs,
            uint AlignedByteOffsetForArgs
        ){
            var fp = GetFunctionPointer(40);
            if(m_DrawInstancedIndirectFunc==null) m_DrawInstancedIndirectFunc = (DrawInstancedIndirectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawInstancedIndirectFunc));
            
            m_DrawInstancedIndirectFunc(m_ptr, pBufferForArgs!=null ? pBufferForArgs.Ptr : IntPtr.Zero, AlignedByteOffsetForArgs);
        }
        delegate void DrawInstancedIndirectFunc(IntPtr self, IntPtr pBufferForArgs, uint AlignedByteOffsetForArgs);
        DrawInstancedIndirectFunc m_DrawInstancedIndirectFunc;

        public virtual void Dispatch(
            uint ThreadGroupCountX,
            uint ThreadGroupCountY,
            uint ThreadGroupCountZ
        ){
            var fp = GetFunctionPointer(41);
            if(m_DispatchFunc==null) m_DispatchFunc = (DispatchFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DispatchFunc));
            
            m_DispatchFunc(m_ptr, ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
        }
        delegate void DispatchFunc(IntPtr self, uint ThreadGroupCountX, uint ThreadGroupCountY, uint ThreadGroupCountZ);
        DispatchFunc m_DispatchFunc;

        public virtual void DispatchIndirect(
            ID3D11Buffer pBufferForArgs,
            uint AlignedByteOffsetForArgs
        ){
            var fp = GetFunctionPointer(42);
            if(m_DispatchIndirectFunc==null) m_DispatchIndirectFunc = (DispatchIndirectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DispatchIndirectFunc));
            
            m_DispatchIndirectFunc(m_ptr, pBufferForArgs!=null ? pBufferForArgs.Ptr : IntPtr.Zero, AlignedByteOffsetForArgs);
        }
        delegate void DispatchIndirectFunc(IntPtr self, IntPtr pBufferForArgs, uint AlignedByteOffsetForArgs);
        DispatchIndirectFunc m_DispatchIndirectFunc;

        public virtual void RSSetState(
            ID3D11RasterizerState pRasterizerState
        ){
            var fp = GetFunctionPointer(43);
            if(m_RSSetStateFunc==null) m_RSSetStateFunc = (RSSetStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RSSetStateFunc));
            
            m_RSSetStateFunc(m_ptr, pRasterizerState!=null ? pRasterizerState.Ptr : IntPtr.Zero);
        }
        delegate void RSSetStateFunc(IntPtr self, IntPtr pRasterizerState);
        RSSetStateFunc m_RSSetStateFunc;

        public virtual void RSSetViewports(
            uint NumViewports,
            ref D3D11_VIEWPORT pViewports
        ){
            var fp = GetFunctionPointer(44);
            if(m_RSSetViewportsFunc==null) m_RSSetViewportsFunc = (RSSetViewportsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RSSetViewportsFunc));
            
            m_RSSetViewportsFunc(m_ptr, NumViewports, ref pViewports);
        }
        delegate void RSSetViewportsFunc(IntPtr self, uint NumViewports, ref D3D11_VIEWPORT pViewports);
        RSSetViewportsFunc m_RSSetViewportsFunc;

        public virtual void RSSetScissorRects(
            uint NumRects,
            ref tagRECT pRects
        ){
            var fp = GetFunctionPointer(45);
            if(m_RSSetScissorRectsFunc==null) m_RSSetScissorRectsFunc = (RSSetScissorRectsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RSSetScissorRectsFunc));
            
            m_RSSetScissorRectsFunc(m_ptr, NumRects, ref pRects);
        }
        delegate void RSSetScissorRectsFunc(IntPtr self, uint NumRects, ref tagRECT pRects);
        RSSetScissorRectsFunc m_RSSetScissorRectsFunc;

        public virtual void CopySubresourceRegion(
            ID3D11Resource pDstResource,
            uint DstSubresource,
            uint DstX,
            uint DstY,
            uint DstZ,
            ID3D11Resource pSrcResource,
            uint SrcSubresource,
            ref D3D11_BOX pSrcBox
        ){
            var fp = GetFunctionPointer(46);
            if(m_CopySubresourceRegionFunc==null) m_CopySubresourceRegionFunc = (CopySubresourceRegionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopySubresourceRegionFunc));
            
            m_CopySubresourceRegionFunc(m_ptr, pDstResource!=null ? pDstResource.Ptr : IntPtr.Zero, DstSubresource, DstX, DstY, DstZ, pSrcResource!=null ? pSrcResource.Ptr : IntPtr.Zero, SrcSubresource, ref pSrcBox);
        }
        delegate void CopySubresourceRegionFunc(IntPtr self, IntPtr pDstResource, uint DstSubresource, uint DstX, uint DstY, uint DstZ, IntPtr pSrcResource, uint SrcSubresource, ref D3D11_BOX pSrcBox);
        CopySubresourceRegionFunc m_CopySubresourceRegionFunc;

        public virtual void CopyResource(
            ID3D11Resource pDstResource,
            ID3D11Resource pSrcResource
        ){
            var fp = GetFunctionPointer(47);
            if(m_CopyResourceFunc==null) m_CopyResourceFunc = (CopyResourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopyResourceFunc));
            
            m_CopyResourceFunc(m_ptr, pDstResource!=null ? pDstResource.Ptr : IntPtr.Zero, pSrcResource!=null ? pSrcResource.Ptr : IntPtr.Zero);
        }
        delegate void CopyResourceFunc(IntPtr self, IntPtr pDstResource, IntPtr pSrcResource);
        CopyResourceFunc m_CopyResourceFunc;

        public virtual void UpdateSubresource(
            ID3D11Resource pDstResource,
            uint DstSubresource,
            ref D3D11_BOX pDstBox,
            IntPtr pSrcData,
            uint SrcRowPitch,
            uint SrcDepthPitch
        ){
            var fp = GetFunctionPointer(48);
            if(m_UpdateSubresourceFunc==null) m_UpdateSubresourceFunc = (UpdateSubresourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(UpdateSubresourceFunc));
            
            m_UpdateSubresourceFunc(m_ptr, pDstResource!=null ? pDstResource.Ptr : IntPtr.Zero, DstSubresource, ref pDstBox, pSrcData, SrcRowPitch, SrcDepthPitch);
        }
        delegate void UpdateSubresourceFunc(IntPtr self, IntPtr pDstResource, uint DstSubresource, ref D3D11_BOX pDstBox, IntPtr pSrcData, uint SrcRowPitch, uint SrcDepthPitch);
        UpdateSubresourceFunc m_UpdateSubresourceFunc;

        public virtual void CopyStructureCount(
            ID3D11Buffer pDstBuffer,
            uint DstAlignedByteOffset,
            ID3D11UnorderedAccessView pSrcView
        ){
            var fp = GetFunctionPointer(49);
            if(m_CopyStructureCountFunc==null) m_CopyStructureCountFunc = (CopyStructureCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopyStructureCountFunc));
            
            m_CopyStructureCountFunc(m_ptr, pDstBuffer!=null ? pDstBuffer.Ptr : IntPtr.Zero, DstAlignedByteOffset, pSrcView!=null ? pSrcView.Ptr : IntPtr.Zero);
        }
        delegate void CopyStructureCountFunc(IntPtr self, IntPtr pDstBuffer, uint DstAlignedByteOffset, IntPtr pSrcView);
        CopyStructureCountFunc m_CopyStructureCountFunc;

        public virtual void ClearRenderTargetView(
            ID3D11RenderTargetView pRenderTargetView,
            ref float ColorRGBA
        ){
            var fp = GetFunctionPointer(50);
            if(m_ClearRenderTargetViewFunc==null) m_ClearRenderTargetViewFunc = (ClearRenderTargetViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ClearRenderTargetViewFunc));
            
            m_ClearRenderTargetViewFunc(m_ptr, pRenderTargetView!=null ? pRenderTargetView.Ptr : IntPtr.Zero, ref ColorRGBA);
        }
        delegate void ClearRenderTargetViewFunc(IntPtr self, IntPtr pRenderTargetView, ref float ColorRGBA);
        ClearRenderTargetViewFunc m_ClearRenderTargetViewFunc;

        public virtual void ClearUnorderedAccessViewUint(
            ID3D11UnorderedAccessView pUnorderedAccessView,
            ref uint Values
        ){
            var fp = GetFunctionPointer(51);
            if(m_ClearUnorderedAccessViewUintFunc==null) m_ClearUnorderedAccessViewUintFunc = (ClearUnorderedAccessViewUintFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ClearUnorderedAccessViewUintFunc));
            
            m_ClearUnorderedAccessViewUintFunc(m_ptr, pUnorderedAccessView!=null ? pUnorderedAccessView.Ptr : IntPtr.Zero, ref Values);
        }
        delegate void ClearUnorderedAccessViewUintFunc(IntPtr self, IntPtr pUnorderedAccessView, ref uint Values);
        ClearUnorderedAccessViewUintFunc m_ClearUnorderedAccessViewUintFunc;

        public virtual void ClearUnorderedAccessViewFloat(
            ID3D11UnorderedAccessView pUnorderedAccessView,
            ref float Values
        ){
            var fp = GetFunctionPointer(52);
            if(m_ClearUnorderedAccessViewFloatFunc==null) m_ClearUnorderedAccessViewFloatFunc = (ClearUnorderedAccessViewFloatFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ClearUnorderedAccessViewFloatFunc));
            
            m_ClearUnorderedAccessViewFloatFunc(m_ptr, pUnorderedAccessView!=null ? pUnorderedAccessView.Ptr : IntPtr.Zero, ref Values);
        }
        delegate void ClearUnorderedAccessViewFloatFunc(IntPtr self, IntPtr pUnorderedAccessView, ref float Values);
        ClearUnorderedAccessViewFloatFunc m_ClearUnorderedAccessViewFloatFunc;

        public virtual void ClearDepthStencilView(
            ID3D11DepthStencilView pDepthStencilView,
            uint ClearFlags,
            float Depth,
            byte Stencil
        ){
            var fp = GetFunctionPointer(53);
            if(m_ClearDepthStencilViewFunc==null) m_ClearDepthStencilViewFunc = (ClearDepthStencilViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ClearDepthStencilViewFunc));
            
            m_ClearDepthStencilViewFunc(m_ptr, pDepthStencilView!=null ? pDepthStencilView.Ptr : IntPtr.Zero, ClearFlags, Depth, Stencil);
        }
        delegate void ClearDepthStencilViewFunc(IntPtr self, IntPtr pDepthStencilView, uint ClearFlags, float Depth, byte Stencil);
        ClearDepthStencilViewFunc m_ClearDepthStencilViewFunc;

        public virtual void GenerateMips(
            ID3D11ShaderResourceView pShaderResourceView
        ){
            var fp = GetFunctionPointer(54);
            if(m_GenerateMipsFunc==null) m_GenerateMipsFunc = (GenerateMipsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GenerateMipsFunc));
            
            m_GenerateMipsFunc(m_ptr, pShaderResourceView!=null ? pShaderResourceView.Ptr : IntPtr.Zero);
        }
        delegate void GenerateMipsFunc(IntPtr self, IntPtr pShaderResourceView);
        GenerateMipsFunc m_GenerateMipsFunc;

        public virtual void SetResourceMinLOD(
            ID3D11Resource pResource,
            float MinLOD
        ){
            var fp = GetFunctionPointer(55);
            if(m_SetResourceMinLODFunc==null) m_SetResourceMinLODFunc = (SetResourceMinLODFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetResourceMinLODFunc));
            
            m_SetResourceMinLODFunc(m_ptr, pResource!=null ? pResource.Ptr : IntPtr.Zero, MinLOD);
        }
        delegate void SetResourceMinLODFunc(IntPtr self, IntPtr pResource, float MinLOD);
        SetResourceMinLODFunc m_SetResourceMinLODFunc;

        public virtual float GetResourceMinLOD(
            ID3D11Resource pResource
        ){
            var fp = GetFunctionPointer(56);
            if(m_GetResourceMinLODFunc==null) m_GetResourceMinLODFunc = (GetResourceMinLODFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetResourceMinLODFunc));
            
            return m_GetResourceMinLODFunc(m_ptr, pResource!=null ? pResource.Ptr : IntPtr.Zero);
        }
        delegate float GetResourceMinLODFunc(IntPtr self, IntPtr pResource);
        GetResourceMinLODFunc m_GetResourceMinLODFunc;

        public virtual void ResolveSubresource(
            ID3D11Resource pDstResource,
            uint DstSubresource,
            ID3D11Resource pSrcResource,
            uint SrcSubresource,
            DXGI_FORMAT Format
        ){
            var fp = GetFunctionPointer(57);
            if(m_ResolveSubresourceFunc==null) m_ResolveSubresourceFunc = (ResolveSubresourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ResolveSubresourceFunc));
            
            m_ResolveSubresourceFunc(m_ptr, pDstResource!=null ? pDstResource.Ptr : IntPtr.Zero, DstSubresource, pSrcResource!=null ? pSrcResource.Ptr : IntPtr.Zero, SrcSubresource, Format);
        }
        delegate void ResolveSubresourceFunc(IntPtr self, IntPtr pDstResource, uint DstSubresource, IntPtr pSrcResource, uint SrcSubresource, DXGI_FORMAT Format);
        ResolveSubresourceFunc m_ResolveSubresourceFunc;

        public virtual void ExecuteCommandList(
            ID3D11CommandList pCommandList,
            int RestoreContextState
        ){
            var fp = GetFunctionPointer(58);
            if(m_ExecuteCommandListFunc==null) m_ExecuteCommandListFunc = (ExecuteCommandListFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ExecuteCommandListFunc));
            
            m_ExecuteCommandListFunc(m_ptr, pCommandList!=null ? pCommandList.Ptr : IntPtr.Zero, RestoreContextState);
        }
        delegate void ExecuteCommandListFunc(IntPtr self, IntPtr pCommandList, int RestoreContextState);
        ExecuteCommandListFunc m_ExecuteCommandListFunc;

        public virtual void HSSetShaderResources(
            uint StartSlot,
            uint NumViews,
            ref IntPtr ppShaderResourceViews
        ){
            var fp = GetFunctionPointer(59);
            if(m_HSSetShaderResourcesFunc==null) m_HSSetShaderResourcesFunc = (HSSetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(HSSetShaderResourcesFunc));
            
            m_HSSetShaderResourcesFunc(m_ptr, StartSlot, NumViews, ref ppShaderResourceViews);
        }
        delegate void HSSetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews);
        HSSetShaderResourcesFunc m_HSSetShaderResourcesFunc;

        public virtual void HSSetShader(
            ID3D11HullShader pHullShader,
            ref IntPtr ppClassInstances,
            uint NumClassInstances
        ){
            var fp = GetFunctionPointer(60);
            if(m_HSSetShaderFunc==null) m_HSSetShaderFunc = (HSSetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(HSSetShaderFunc));
            
            m_HSSetShaderFunc(m_ptr, pHullShader!=null ? pHullShader.Ptr : IntPtr.Zero, ref ppClassInstances, NumClassInstances);
        }
        delegate void HSSetShaderFunc(IntPtr self, IntPtr pHullShader, ref IntPtr ppClassInstances, uint NumClassInstances);
        HSSetShaderFunc m_HSSetShaderFunc;

        public virtual void HSSetSamplers(
            uint StartSlot,
            uint NumSamplers,
            ref IntPtr ppSamplers
        ){
            var fp = GetFunctionPointer(61);
            if(m_HSSetSamplersFunc==null) m_HSSetSamplersFunc = (HSSetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(HSSetSamplersFunc));
            
            m_HSSetSamplersFunc(m_ptr, StartSlot, NumSamplers, ref ppSamplers);
        }
        delegate void HSSetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers);
        HSSetSamplersFunc m_HSSetSamplersFunc;

        public virtual void HSSetConstantBuffers(
            uint StartSlot,
            uint NumBuffers,
            ref IntPtr ppConstantBuffers
        ){
            var fp = GetFunctionPointer(62);
            if(m_HSSetConstantBuffersFunc==null) m_HSSetConstantBuffersFunc = (HSSetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(HSSetConstantBuffersFunc));
            
            m_HSSetConstantBuffersFunc(m_ptr, StartSlot, NumBuffers, ref ppConstantBuffers);
        }
        delegate void HSSetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers);
        HSSetConstantBuffersFunc m_HSSetConstantBuffersFunc;

        public virtual void DSSetShaderResources(
            uint StartSlot,
            uint NumViews,
            ref IntPtr ppShaderResourceViews
        ){
            var fp = GetFunctionPointer(63);
            if(m_DSSetShaderResourcesFunc==null) m_DSSetShaderResourcesFunc = (DSSetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DSSetShaderResourcesFunc));
            
            m_DSSetShaderResourcesFunc(m_ptr, StartSlot, NumViews, ref ppShaderResourceViews);
        }
        delegate void DSSetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews);
        DSSetShaderResourcesFunc m_DSSetShaderResourcesFunc;

        public virtual void DSSetShader(
            ID3D11DomainShader pDomainShader,
            ref IntPtr ppClassInstances,
            uint NumClassInstances
        ){
            var fp = GetFunctionPointer(64);
            if(m_DSSetShaderFunc==null) m_DSSetShaderFunc = (DSSetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DSSetShaderFunc));
            
            m_DSSetShaderFunc(m_ptr, pDomainShader!=null ? pDomainShader.Ptr : IntPtr.Zero, ref ppClassInstances, NumClassInstances);
        }
        delegate void DSSetShaderFunc(IntPtr self, IntPtr pDomainShader, ref IntPtr ppClassInstances, uint NumClassInstances);
        DSSetShaderFunc m_DSSetShaderFunc;

        public virtual void DSSetSamplers(
            uint StartSlot,
            uint NumSamplers,
            ref IntPtr ppSamplers
        ){
            var fp = GetFunctionPointer(65);
            if(m_DSSetSamplersFunc==null) m_DSSetSamplersFunc = (DSSetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DSSetSamplersFunc));
            
            m_DSSetSamplersFunc(m_ptr, StartSlot, NumSamplers, ref ppSamplers);
        }
        delegate void DSSetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers);
        DSSetSamplersFunc m_DSSetSamplersFunc;

        public virtual void DSSetConstantBuffers(
            uint StartSlot,
            uint NumBuffers,
            ref IntPtr ppConstantBuffers
        ){
            var fp = GetFunctionPointer(66);
            if(m_DSSetConstantBuffersFunc==null) m_DSSetConstantBuffersFunc = (DSSetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DSSetConstantBuffersFunc));
            
            m_DSSetConstantBuffersFunc(m_ptr, StartSlot, NumBuffers, ref ppConstantBuffers);
        }
        delegate void DSSetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers);
        DSSetConstantBuffersFunc m_DSSetConstantBuffersFunc;

        public virtual void CSSetShaderResources(
            uint StartSlot,
            uint NumViews,
            ref IntPtr ppShaderResourceViews
        ){
            var fp = GetFunctionPointer(67);
            if(m_CSSetShaderResourcesFunc==null) m_CSSetShaderResourcesFunc = (CSSetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CSSetShaderResourcesFunc));
            
            m_CSSetShaderResourcesFunc(m_ptr, StartSlot, NumViews, ref ppShaderResourceViews);
        }
        delegate void CSSetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews);
        CSSetShaderResourcesFunc m_CSSetShaderResourcesFunc;

        public virtual void CSSetUnorderedAccessViews(
            uint StartSlot,
            uint NumUAVs,
            ref IntPtr ppUnorderedAccessViews,
            ref uint pUAVInitialCounts
        ){
            var fp = GetFunctionPointer(68);
            if(m_CSSetUnorderedAccessViewsFunc==null) m_CSSetUnorderedAccessViewsFunc = (CSSetUnorderedAccessViewsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CSSetUnorderedAccessViewsFunc));
            
            m_CSSetUnorderedAccessViewsFunc(m_ptr, StartSlot, NumUAVs, ref ppUnorderedAccessViews, ref pUAVInitialCounts);
        }
        delegate void CSSetUnorderedAccessViewsFunc(IntPtr self, uint StartSlot, uint NumUAVs, ref IntPtr ppUnorderedAccessViews, ref uint pUAVInitialCounts);
        CSSetUnorderedAccessViewsFunc m_CSSetUnorderedAccessViewsFunc;

        public virtual void CSSetShader(
            ID3D11ComputeShader pComputeShader,
            ref IntPtr ppClassInstances,
            uint NumClassInstances
        ){
            var fp = GetFunctionPointer(69);
            if(m_CSSetShaderFunc==null) m_CSSetShaderFunc = (CSSetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CSSetShaderFunc));
            
            m_CSSetShaderFunc(m_ptr, pComputeShader!=null ? pComputeShader.Ptr : IntPtr.Zero, ref ppClassInstances, NumClassInstances);
        }
        delegate void CSSetShaderFunc(IntPtr self, IntPtr pComputeShader, ref IntPtr ppClassInstances, uint NumClassInstances);
        CSSetShaderFunc m_CSSetShaderFunc;

        public virtual void CSSetSamplers(
            uint StartSlot,
            uint NumSamplers,
            ref IntPtr ppSamplers
        ){
            var fp = GetFunctionPointer(70);
            if(m_CSSetSamplersFunc==null) m_CSSetSamplersFunc = (CSSetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CSSetSamplersFunc));
            
            m_CSSetSamplersFunc(m_ptr, StartSlot, NumSamplers, ref ppSamplers);
        }
        delegate void CSSetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers);
        CSSetSamplersFunc m_CSSetSamplersFunc;

        public virtual void CSSetConstantBuffers(
            uint StartSlot,
            uint NumBuffers,
            ref IntPtr ppConstantBuffers
        ){
            var fp = GetFunctionPointer(71);
            if(m_CSSetConstantBuffersFunc==null) m_CSSetConstantBuffersFunc = (CSSetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CSSetConstantBuffersFunc));
            
            m_CSSetConstantBuffersFunc(m_ptr, StartSlot, NumBuffers, ref ppConstantBuffers);
        }
        delegate void CSSetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers);
        CSSetConstantBuffersFunc m_CSSetConstantBuffersFunc;

        public virtual void VSGetConstantBuffers(
            uint StartSlot,
            uint NumBuffers,
            out ID3D11Buffer ppConstantBuffers
        ){
            var fp = GetFunctionPointer(72);
            if(m_VSGetConstantBuffersFunc==null) m_VSGetConstantBuffersFunc = (VSGetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSGetConstantBuffersFunc));
            ppConstantBuffers = new ID3D11Buffer();
            m_VSGetConstantBuffersFunc(m_ptr, StartSlot, NumBuffers, out ppConstantBuffers.PtrForNew);
        }
        delegate void VSGetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, out IntPtr ppConstantBuffers);
        VSGetConstantBuffersFunc m_VSGetConstantBuffersFunc;

        public virtual void PSGetShaderResources(
            uint StartSlot,
            uint NumViews,
            out ID3D11ShaderResourceView ppShaderResourceViews
        ){
            var fp = GetFunctionPointer(73);
            if(m_PSGetShaderResourcesFunc==null) m_PSGetShaderResourcesFunc = (PSGetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSGetShaderResourcesFunc));
            ppShaderResourceViews = new ID3D11ShaderResourceView();
            m_PSGetShaderResourcesFunc(m_ptr, StartSlot, NumViews, out ppShaderResourceViews.PtrForNew);
        }
        delegate void PSGetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, out IntPtr ppShaderResourceViews);
        PSGetShaderResourcesFunc m_PSGetShaderResourcesFunc;

        public virtual void PSGetShader(
            out ID3D11PixelShader ppPixelShader,
            out ID3D11ClassInstance ppClassInstances,
            out uint pNumClassInstances
        ){
            var fp = GetFunctionPointer(74);
            if(m_PSGetShaderFunc==null) m_PSGetShaderFunc = (PSGetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSGetShaderFunc));
            ppPixelShader = new ID3D11PixelShader();ppClassInstances = new ID3D11ClassInstance();
            m_PSGetShaderFunc(m_ptr, out ppPixelShader.PtrForNew, out ppClassInstances.PtrForNew, out pNumClassInstances);
        }
        delegate void PSGetShaderFunc(IntPtr self, out IntPtr ppPixelShader, out IntPtr ppClassInstances, out uint pNumClassInstances);
        PSGetShaderFunc m_PSGetShaderFunc;

        public virtual void PSGetSamplers(
            uint StartSlot,
            uint NumSamplers,
            out ID3D11SamplerState ppSamplers
        ){
            var fp = GetFunctionPointer(75);
            if(m_PSGetSamplersFunc==null) m_PSGetSamplersFunc = (PSGetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSGetSamplersFunc));
            ppSamplers = new ID3D11SamplerState();
            m_PSGetSamplersFunc(m_ptr, StartSlot, NumSamplers, out ppSamplers.PtrForNew);
        }
        delegate void PSGetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, out IntPtr ppSamplers);
        PSGetSamplersFunc m_PSGetSamplersFunc;

        public virtual void VSGetShader(
            out ID3D11VertexShader ppVertexShader,
            out ID3D11ClassInstance ppClassInstances,
            out uint pNumClassInstances
        ){
            var fp = GetFunctionPointer(76);
            if(m_VSGetShaderFunc==null) m_VSGetShaderFunc = (VSGetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSGetShaderFunc));
            ppVertexShader = new ID3D11VertexShader();ppClassInstances = new ID3D11ClassInstance();
            m_VSGetShaderFunc(m_ptr, out ppVertexShader.PtrForNew, out ppClassInstances.PtrForNew, out pNumClassInstances);
        }
        delegate void VSGetShaderFunc(IntPtr self, out IntPtr ppVertexShader, out IntPtr ppClassInstances, out uint pNumClassInstances);
        VSGetShaderFunc m_VSGetShaderFunc;

        public virtual void PSGetConstantBuffers(
            uint StartSlot,
            uint NumBuffers,
            out ID3D11Buffer ppConstantBuffers
        ){
            var fp = GetFunctionPointer(77);
            if(m_PSGetConstantBuffersFunc==null) m_PSGetConstantBuffersFunc = (PSGetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSGetConstantBuffersFunc));
            ppConstantBuffers = new ID3D11Buffer();
            m_PSGetConstantBuffersFunc(m_ptr, StartSlot, NumBuffers, out ppConstantBuffers.PtrForNew);
        }
        delegate void PSGetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, out IntPtr ppConstantBuffers);
        PSGetConstantBuffersFunc m_PSGetConstantBuffersFunc;

        public virtual void IAGetInputLayout(
            out ID3D11InputLayout ppInputLayout
        ){
            var fp = GetFunctionPointer(78);
            if(m_IAGetInputLayoutFunc==null) m_IAGetInputLayoutFunc = (IAGetInputLayoutFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IAGetInputLayoutFunc));
            ppInputLayout = new ID3D11InputLayout();
            m_IAGetInputLayoutFunc(m_ptr, out ppInputLayout.PtrForNew);
        }
        delegate void IAGetInputLayoutFunc(IntPtr self, out IntPtr ppInputLayout);
        IAGetInputLayoutFunc m_IAGetInputLayoutFunc;

        public virtual void IAGetVertexBuffers(
            uint StartSlot,
            uint NumBuffers,
            out ID3D11Buffer ppVertexBuffers,
            out uint pStrides,
            out uint pOffsets
        ){
            var fp = GetFunctionPointer(79);
            if(m_IAGetVertexBuffersFunc==null) m_IAGetVertexBuffersFunc = (IAGetVertexBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IAGetVertexBuffersFunc));
            ppVertexBuffers = new ID3D11Buffer();
            m_IAGetVertexBuffersFunc(m_ptr, StartSlot, NumBuffers, out ppVertexBuffers.PtrForNew, out pStrides, out pOffsets);
        }
        delegate void IAGetVertexBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, out IntPtr ppVertexBuffers, out uint pStrides, out uint pOffsets);
        IAGetVertexBuffersFunc m_IAGetVertexBuffersFunc;

        public virtual void IAGetIndexBuffer(
            out ID3D11Buffer pIndexBuffer,
            out DXGI_FORMAT Format,
            out uint Offset
        ){
            var fp = GetFunctionPointer(80);
            if(m_IAGetIndexBufferFunc==null) m_IAGetIndexBufferFunc = (IAGetIndexBufferFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IAGetIndexBufferFunc));
            pIndexBuffer = new ID3D11Buffer();
            m_IAGetIndexBufferFunc(m_ptr, out pIndexBuffer.PtrForNew, out Format, out Offset);
        }
        delegate void IAGetIndexBufferFunc(IntPtr self, out IntPtr pIndexBuffer, out DXGI_FORMAT Format, out uint Offset);
        IAGetIndexBufferFunc m_IAGetIndexBufferFunc;

        public virtual void GSGetConstantBuffers(
            uint StartSlot,
            uint NumBuffers,
            out ID3D11Buffer ppConstantBuffers
        ){
            var fp = GetFunctionPointer(81);
            if(m_GSGetConstantBuffersFunc==null) m_GSGetConstantBuffersFunc = (GSGetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSGetConstantBuffersFunc));
            ppConstantBuffers = new ID3D11Buffer();
            m_GSGetConstantBuffersFunc(m_ptr, StartSlot, NumBuffers, out ppConstantBuffers.PtrForNew);
        }
        delegate void GSGetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, out IntPtr ppConstantBuffers);
        GSGetConstantBuffersFunc m_GSGetConstantBuffersFunc;

        public virtual void GSGetShader(
            out ID3D11GeometryShader ppGeometryShader,
            out ID3D11ClassInstance ppClassInstances,
            out uint pNumClassInstances
        ){
            var fp = GetFunctionPointer(82);
            if(m_GSGetShaderFunc==null) m_GSGetShaderFunc = (GSGetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSGetShaderFunc));
            ppGeometryShader = new ID3D11GeometryShader();ppClassInstances = new ID3D11ClassInstance();
            m_GSGetShaderFunc(m_ptr, out ppGeometryShader.PtrForNew, out ppClassInstances.PtrForNew, out pNumClassInstances);
        }
        delegate void GSGetShaderFunc(IntPtr self, out IntPtr ppGeometryShader, out IntPtr ppClassInstances, out uint pNumClassInstances);
        GSGetShaderFunc m_GSGetShaderFunc;

        public virtual void IAGetPrimitiveTopology(
            out D3D_PRIMITIVE_TOPOLOGY pTopology
        ){
            var fp = GetFunctionPointer(83);
            if(m_IAGetPrimitiveTopologyFunc==null) m_IAGetPrimitiveTopologyFunc = (IAGetPrimitiveTopologyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IAGetPrimitiveTopologyFunc));
            
            m_IAGetPrimitiveTopologyFunc(m_ptr, out pTopology);
        }
        delegate void IAGetPrimitiveTopologyFunc(IntPtr self, out D3D_PRIMITIVE_TOPOLOGY pTopology);
        IAGetPrimitiveTopologyFunc m_IAGetPrimitiveTopologyFunc;

        public virtual void VSGetShaderResources(
            uint StartSlot,
            uint NumViews,
            out ID3D11ShaderResourceView ppShaderResourceViews
        ){
            var fp = GetFunctionPointer(84);
            if(m_VSGetShaderResourcesFunc==null) m_VSGetShaderResourcesFunc = (VSGetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSGetShaderResourcesFunc));
            ppShaderResourceViews = new ID3D11ShaderResourceView();
            m_VSGetShaderResourcesFunc(m_ptr, StartSlot, NumViews, out ppShaderResourceViews.PtrForNew);
        }
        delegate void VSGetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, out IntPtr ppShaderResourceViews);
        VSGetShaderResourcesFunc m_VSGetShaderResourcesFunc;

        public virtual void VSGetSamplers(
            uint StartSlot,
            uint NumSamplers,
            out ID3D11SamplerState ppSamplers
        ){
            var fp = GetFunctionPointer(85);
            if(m_VSGetSamplersFunc==null) m_VSGetSamplersFunc = (VSGetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSGetSamplersFunc));
            ppSamplers = new ID3D11SamplerState();
            m_VSGetSamplersFunc(m_ptr, StartSlot, NumSamplers, out ppSamplers.PtrForNew);
        }
        delegate void VSGetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, out IntPtr ppSamplers);
        VSGetSamplersFunc m_VSGetSamplersFunc;

        public virtual void GetPredication(
            out ID3D11Predicate ppPredicate,
            out int pPredicateValue
        ){
            var fp = GetFunctionPointer(86);
            if(m_GetPredicationFunc==null) m_GetPredicationFunc = (GetPredicationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPredicationFunc));
            ppPredicate = new ID3D11Predicate();
            m_GetPredicationFunc(m_ptr, out ppPredicate.PtrForNew, out pPredicateValue);
        }
        delegate void GetPredicationFunc(IntPtr self, out IntPtr ppPredicate, out int pPredicateValue);
        GetPredicationFunc m_GetPredicationFunc;

        public virtual void GSGetShaderResources(
            uint StartSlot,
            uint NumViews,
            out ID3D11ShaderResourceView ppShaderResourceViews
        ){
            var fp = GetFunctionPointer(87);
            if(m_GSGetShaderResourcesFunc==null) m_GSGetShaderResourcesFunc = (GSGetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSGetShaderResourcesFunc));
            ppShaderResourceViews = new ID3D11ShaderResourceView();
            m_GSGetShaderResourcesFunc(m_ptr, StartSlot, NumViews, out ppShaderResourceViews.PtrForNew);
        }
        delegate void GSGetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, out IntPtr ppShaderResourceViews);
        GSGetShaderResourcesFunc m_GSGetShaderResourcesFunc;

        public virtual void GSGetSamplers(
            uint StartSlot,
            uint NumSamplers,
            out ID3D11SamplerState ppSamplers
        ){
            var fp = GetFunctionPointer(88);
            if(m_GSGetSamplersFunc==null) m_GSGetSamplersFunc = (GSGetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSGetSamplersFunc));
            ppSamplers = new ID3D11SamplerState();
            m_GSGetSamplersFunc(m_ptr, StartSlot, NumSamplers, out ppSamplers.PtrForNew);
        }
        delegate void GSGetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, out IntPtr ppSamplers);
        GSGetSamplersFunc m_GSGetSamplersFunc;

        public virtual void OMGetRenderTargets(
            uint NumViews,
            out ID3D11RenderTargetView ppRenderTargetViews,
            out ID3D11DepthStencilView ppDepthStencilView
        ){
            var fp = GetFunctionPointer(89);
            if(m_OMGetRenderTargetsFunc==null) m_OMGetRenderTargetsFunc = (OMGetRenderTargetsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMGetRenderTargetsFunc));
            ppRenderTargetViews = new ID3D11RenderTargetView();ppDepthStencilView = new ID3D11DepthStencilView();
            m_OMGetRenderTargetsFunc(m_ptr, NumViews, out ppRenderTargetViews.PtrForNew, out ppDepthStencilView.PtrForNew);
        }
        delegate void OMGetRenderTargetsFunc(IntPtr self, uint NumViews, out IntPtr ppRenderTargetViews, out IntPtr ppDepthStencilView);
        OMGetRenderTargetsFunc m_OMGetRenderTargetsFunc;

        public virtual void OMGetRenderTargetsAndUnorderedAccessViews(
            uint NumRTVs,
            out ID3D11RenderTargetView ppRenderTargetViews,
            out ID3D11DepthStencilView ppDepthStencilView,
            uint UAVStartSlot,
            uint NumUAVs,
            out ID3D11UnorderedAccessView ppUnorderedAccessViews
        ){
            var fp = GetFunctionPointer(90);
            if(m_OMGetRenderTargetsAndUnorderedAccessViewsFunc==null) m_OMGetRenderTargetsAndUnorderedAccessViewsFunc = (OMGetRenderTargetsAndUnorderedAccessViewsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMGetRenderTargetsAndUnorderedAccessViewsFunc));
            ppRenderTargetViews = new ID3D11RenderTargetView();ppDepthStencilView = new ID3D11DepthStencilView();ppUnorderedAccessViews = new ID3D11UnorderedAccessView();
            m_OMGetRenderTargetsAndUnorderedAccessViewsFunc(m_ptr, NumRTVs, out ppRenderTargetViews.PtrForNew, out ppDepthStencilView.PtrForNew, UAVStartSlot, NumUAVs, out ppUnorderedAccessViews.PtrForNew);
        }
        delegate void OMGetRenderTargetsAndUnorderedAccessViewsFunc(IntPtr self, uint NumRTVs, out IntPtr ppRenderTargetViews, out IntPtr ppDepthStencilView, uint UAVStartSlot, uint NumUAVs, out IntPtr ppUnorderedAccessViews);
        OMGetRenderTargetsAndUnorderedAccessViewsFunc m_OMGetRenderTargetsAndUnorderedAccessViewsFunc;

        public virtual void OMGetBlendState(
            out ID3D11BlendState ppBlendState,
            ref float BlendFactor,
            out uint pSampleMask
        ){
            var fp = GetFunctionPointer(91);
            if(m_OMGetBlendStateFunc==null) m_OMGetBlendStateFunc = (OMGetBlendStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMGetBlendStateFunc));
            ppBlendState = new ID3D11BlendState();
            m_OMGetBlendStateFunc(m_ptr, out ppBlendState.PtrForNew, ref BlendFactor, out pSampleMask);
        }
        delegate void OMGetBlendStateFunc(IntPtr self, out IntPtr ppBlendState, ref float BlendFactor, out uint pSampleMask);
        OMGetBlendStateFunc m_OMGetBlendStateFunc;

        public virtual void OMGetDepthStencilState(
            out ID3D11DepthStencilState ppDepthStencilState,
            out uint pStencilRef
        ){
            var fp = GetFunctionPointer(92);
            if(m_OMGetDepthStencilStateFunc==null) m_OMGetDepthStencilStateFunc = (OMGetDepthStencilStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMGetDepthStencilStateFunc));
            ppDepthStencilState = new ID3D11DepthStencilState();
            m_OMGetDepthStencilStateFunc(m_ptr, out ppDepthStencilState.PtrForNew, out pStencilRef);
        }
        delegate void OMGetDepthStencilStateFunc(IntPtr self, out IntPtr ppDepthStencilState, out uint pStencilRef);
        OMGetDepthStencilStateFunc m_OMGetDepthStencilStateFunc;

        public virtual void SOGetTargets(
            uint NumBuffers,
            out ID3D11Buffer ppSOTargets
        ){
            var fp = GetFunctionPointer(93);
            if(m_SOGetTargetsFunc==null) m_SOGetTargetsFunc = (SOGetTargetsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SOGetTargetsFunc));
            ppSOTargets = new ID3D11Buffer();
            m_SOGetTargetsFunc(m_ptr, NumBuffers, out ppSOTargets.PtrForNew);
        }
        delegate void SOGetTargetsFunc(IntPtr self, uint NumBuffers, out IntPtr ppSOTargets);
        SOGetTargetsFunc m_SOGetTargetsFunc;

        public virtual void RSGetState(
            out ID3D11RasterizerState ppRasterizerState
        ){
            var fp = GetFunctionPointer(94);
            if(m_RSGetStateFunc==null) m_RSGetStateFunc = (RSGetStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RSGetStateFunc));
            ppRasterizerState = new ID3D11RasterizerState();
            m_RSGetStateFunc(m_ptr, out ppRasterizerState.PtrForNew);
        }
        delegate void RSGetStateFunc(IntPtr self, out IntPtr ppRasterizerState);
        RSGetStateFunc m_RSGetStateFunc;

        public virtual void RSGetViewports(
            out uint pNumViewports,
            out D3D11_VIEWPORT pViewports
        ){
            var fp = GetFunctionPointer(95);
            if(m_RSGetViewportsFunc==null) m_RSGetViewportsFunc = (RSGetViewportsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RSGetViewportsFunc));
            
            m_RSGetViewportsFunc(m_ptr, out pNumViewports, out pViewports);
        }
        delegate void RSGetViewportsFunc(IntPtr self, out uint pNumViewports, out D3D11_VIEWPORT pViewports);
        RSGetViewportsFunc m_RSGetViewportsFunc;

        public virtual void RSGetScissorRects(
            out uint pNumRects,
            out tagRECT pRects
        ){
            var fp = GetFunctionPointer(96);
            if(m_RSGetScissorRectsFunc==null) m_RSGetScissorRectsFunc = (RSGetScissorRectsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RSGetScissorRectsFunc));
            
            m_RSGetScissorRectsFunc(m_ptr, out pNumRects, out pRects);
        }
        delegate void RSGetScissorRectsFunc(IntPtr self, out uint pNumRects, out tagRECT pRects);
        RSGetScissorRectsFunc m_RSGetScissorRectsFunc;

        public virtual void HSGetShaderResources(
            uint StartSlot,
            uint NumViews,
            out ID3D11ShaderResourceView ppShaderResourceViews
        ){
            var fp = GetFunctionPointer(97);
            if(m_HSGetShaderResourcesFunc==null) m_HSGetShaderResourcesFunc = (HSGetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(HSGetShaderResourcesFunc));
            ppShaderResourceViews = new ID3D11ShaderResourceView();
            m_HSGetShaderResourcesFunc(m_ptr, StartSlot, NumViews, out ppShaderResourceViews.PtrForNew);
        }
        delegate void HSGetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, out IntPtr ppShaderResourceViews);
        HSGetShaderResourcesFunc m_HSGetShaderResourcesFunc;

        public virtual void HSGetShader(
            out ID3D11HullShader ppHullShader,
            out ID3D11ClassInstance ppClassInstances,
            out uint pNumClassInstances
        ){
            var fp = GetFunctionPointer(98);
            if(m_HSGetShaderFunc==null) m_HSGetShaderFunc = (HSGetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(HSGetShaderFunc));
            ppHullShader = new ID3D11HullShader();ppClassInstances = new ID3D11ClassInstance();
            m_HSGetShaderFunc(m_ptr, out ppHullShader.PtrForNew, out ppClassInstances.PtrForNew, out pNumClassInstances);
        }
        delegate void HSGetShaderFunc(IntPtr self, out IntPtr ppHullShader, out IntPtr ppClassInstances, out uint pNumClassInstances);
        HSGetShaderFunc m_HSGetShaderFunc;

        public virtual void HSGetSamplers(
            uint StartSlot,
            uint NumSamplers,
            out ID3D11SamplerState ppSamplers
        ){
            var fp = GetFunctionPointer(99);
            if(m_HSGetSamplersFunc==null) m_HSGetSamplersFunc = (HSGetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(HSGetSamplersFunc));
            ppSamplers = new ID3D11SamplerState();
            m_HSGetSamplersFunc(m_ptr, StartSlot, NumSamplers, out ppSamplers.PtrForNew);
        }
        delegate void HSGetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, out IntPtr ppSamplers);
        HSGetSamplersFunc m_HSGetSamplersFunc;

        public virtual void HSGetConstantBuffers(
            uint StartSlot,
            uint NumBuffers,
            out ID3D11Buffer ppConstantBuffers
        ){
            var fp = GetFunctionPointer(100);
            if(m_HSGetConstantBuffersFunc==null) m_HSGetConstantBuffersFunc = (HSGetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(HSGetConstantBuffersFunc));
            ppConstantBuffers = new ID3D11Buffer();
            m_HSGetConstantBuffersFunc(m_ptr, StartSlot, NumBuffers, out ppConstantBuffers.PtrForNew);
        }
        delegate void HSGetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, out IntPtr ppConstantBuffers);
        HSGetConstantBuffersFunc m_HSGetConstantBuffersFunc;

        public virtual void DSGetShaderResources(
            uint StartSlot,
            uint NumViews,
            out ID3D11ShaderResourceView ppShaderResourceViews
        ){
            var fp = GetFunctionPointer(101);
            if(m_DSGetShaderResourcesFunc==null) m_DSGetShaderResourcesFunc = (DSGetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DSGetShaderResourcesFunc));
            ppShaderResourceViews = new ID3D11ShaderResourceView();
            m_DSGetShaderResourcesFunc(m_ptr, StartSlot, NumViews, out ppShaderResourceViews.PtrForNew);
        }
        delegate void DSGetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, out IntPtr ppShaderResourceViews);
        DSGetShaderResourcesFunc m_DSGetShaderResourcesFunc;

        public virtual void DSGetShader(
            out ID3D11DomainShader ppDomainShader,
            out ID3D11ClassInstance ppClassInstances,
            out uint pNumClassInstances
        ){
            var fp = GetFunctionPointer(102);
            if(m_DSGetShaderFunc==null) m_DSGetShaderFunc = (DSGetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DSGetShaderFunc));
            ppDomainShader = new ID3D11DomainShader();ppClassInstances = new ID3D11ClassInstance();
            m_DSGetShaderFunc(m_ptr, out ppDomainShader.PtrForNew, out ppClassInstances.PtrForNew, out pNumClassInstances);
        }
        delegate void DSGetShaderFunc(IntPtr self, out IntPtr ppDomainShader, out IntPtr ppClassInstances, out uint pNumClassInstances);
        DSGetShaderFunc m_DSGetShaderFunc;

        public virtual void DSGetSamplers(
            uint StartSlot,
            uint NumSamplers,
            out ID3D11SamplerState ppSamplers
        ){
            var fp = GetFunctionPointer(103);
            if(m_DSGetSamplersFunc==null) m_DSGetSamplersFunc = (DSGetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DSGetSamplersFunc));
            ppSamplers = new ID3D11SamplerState();
            m_DSGetSamplersFunc(m_ptr, StartSlot, NumSamplers, out ppSamplers.PtrForNew);
        }
        delegate void DSGetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, out IntPtr ppSamplers);
        DSGetSamplersFunc m_DSGetSamplersFunc;

        public virtual void DSGetConstantBuffers(
            uint StartSlot,
            uint NumBuffers,
            out ID3D11Buffer ppConstantBuffers
        ){
            var fp = GetFunctionPointer(104);
            if(m_DSGetConstantBuffersFunc==null) m_DSGetConstantBuffersFunc = (DSGetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DSGetConstantBuffersFunc));
            ppConstantBuffers = new ID3D11Buffer();
            m_DSGetConstantBuffersFunc(m_ptr, StartSlot, NumBuffers, out ppConstantBuffers.PtrForNew);
        }
        delegate void DSGetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, out IntPtr ppConstantBuffers);
        DSGetConstantBuffersFunc m_DSGetConstantBuffersFunc;

        public virtual void CSGetShaderResources(
            uint StartSlot,
            uint NumViews,
            out ID3D11ShaderResourceView ppShaderResourceViews
        ){
            var fp = GetFunctionPointer(105);
            if(m_CSGetShaderResourcesFunc==null) m_CSGetShaderResourcesFunc = (CSGetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CSGetShaderResourcesFunc));
            ppShaderResourceViews = new ID3D11ShaderResourceView();
            m_CSGetShaderResourcesFunc(m_ptr, StartSlot, NumViews, out ppShaderResourceViews.PtrForNew);
        }
        delegate void CSGetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, out IntPtr ppShaderResourceViews);
        CSGetShaderResourcesFunc m_CSGetShaderResourcesFunc;

        public virtual void CSGetUnorderedAccessViews(
            uint StartSlot,
            uint NumUAVs,
            out ID3D11UnorderedAccessView ppUnorderedAccessViews
        ){
            var fp = GetFunctionPointer(106);
            if(m_CSGetUnorderedAccessViewsFunc==null) m_CSGetUnorderedAccessViewsFunc = (CSGetUnorderedAccessViewsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CSGetUnorderedAccessViewsFunc));
            ppUnorderedAccessViews = new ID3D11UnorderedAccessView();
            m_CSGetUnorderedAccessViewsFunc(m_ptr, StartSlot, NumUAVs, out ppUnorderedAccessViews.PtrForNew);
        }
        delegate void CSGetUnorderedAccessViewsFunc(IntPtr self, uint StartSlot, uint NumUAVs, out IntPtr ppUnorderedAccessViews);
        CSGetUnorderedAccessViewsFunc m_CSGetUnorderedAccessViewsFunc;

        public virtual void CSGetShader(
            out ID3D11ComputeShader ppComputeShader,
            out ID3D11ClassInstance ppClassInstances,
            out uint pNumClassInstances
        ){
            var fp = GetFunctionPointer(107);
            if(m_CSGetShaderFunc==null) m_CSGetShaderFunc = (CSGetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CSGetShaderFunc));
            ppComputeShader = new ID3D11ComputeShader();ppClassInstances = new ID3D11ClassInstance();
            m_CSGetShaderFunc(m_ptr, out ppComputeShader.PtrForNew, out ppClassInstances.PtrForNew, out pNumClassInstances);
        }
        delegate void CSGetShaderFunc(IntPtr self, out IntPtr ppComputeShader, out IntPtr ppClassInstances, out uint pNumClassInstances);
        CSGetShaderFunc m_CSGetShaderFunc;

        public virtual void CSGetSamplers(
            uint StartSlot,
            uint NumSamplers,
            out ID3D11SamplerState ppSamplers
        ){
            var fp = GetFunctionPointer(108);
            if(m_CSGetSamplersFunc==null) m_CSGetSamplersFunc = (CSGetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CSGetSamplersFunc));
            ppSamplers = new ID3D11SamplerState();
            m_CSGetSamplersFunc(m_ptr, StartSlot, NumSamplers, out ppSamplers.PtrForNew);
        }
        delegate void CSGetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, out IntPtr ppSamplers);
        CSGetSamplersFunc m_CSGetSamplersFunc;

        public virtual void CSGetConstantBuffers(
            uint StartSlot,
            uint NumBuffers,
            out ID3D11Buffer ppConstantBuffers
        ){
            var fp = GetFunctionPointer(109);
            if(m_CSGetConstantBuffersFunc==null) m_CSGetConstantBuffersFunc = (CSGetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CSGetConstantBuffersFunc));
            ppConstantBuffers = new ID3D11Buffer();
            m_CSGetConstantBuffersFunc(m_ptr, StartSlot, NumBuffers, out ppConstantBuffers.PtrForNew);
        }
        delegate void CSGetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, out IntPtr ppConstantBuffers);
        CSGetConstantBuffersFunc m_CSGetConstantBuffersFunc;

        public virtual void ClearState(
        ){
            var fp = GetFunctionPointer(110);
            if(m_ClearStateFunc==null) m_ClearStateFunc = (ClearStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ClearStateFunc));
            
            m_ClearStateFunc(m_ptr);
        }
        delegate void ClearStateFunc(IntPtr self);
        ClearStateFunc m_ClearStateFunc;

        public virtual void Flush(
        ){
            var fp = GetFunctionPointer(111);
            if(m_FlushFunc==null) m_FlushFunc = (FlushFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FlushFunc));
            
            m_FlushFunc(m_ptr);
        }
        delegate void FlushFunc(IntPtr self);
        FlushFunc m_FlushFunc;

        public virtual D3D11_DEVICE_CONTEXT_TYPE GetComType(
        ){
            var fp = GetFunctionPointer(112);
            if(m_GetTypeFunc==null) m_GetTypeFunc = (GetTypeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypeFunc));
            
            return m_GetTypeFunc(m_ptr);
        }
        delegate D3D11_DEVICE_CONTEXT_TYPE GetTypeFunc(IntPtr self);
        GetTypeFunc m_GetTypeFunc;

        public virtual uint GetContextFlags(
        ){
            var fp = GetFunctionPointer(113);
            if(m_GetContextFlagsFunc==null) m_GetContextFlagsFunc = (GetContextFlagsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetContextFlagsFunc));
            
            return m_GetContextFlagsFunc(m_ptr);
        }
        delegate uint GetContextFlagsFunc(IntPtr self);
        GetContextFlagsFunc m_GetContextFlagsFunc;

        public virtual int FinishCommandList(
            int RestoreDeferredContextState,
            out ID3D11CommandList ppCommandList
        ){
            var fp = GetFunctionPointer(114);
            if(m_FinishCommandListFunc==null) m_FinishCommandListFunc = (FinishCommandListFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FinishCommandListFunc));
            ppCommandList = new ID3D11CommandList();
            return m_FinishCommandListFunc(m_ptr, RestoreDeferredContextState, out ppCommandList.PtrForNew);
        }
        delegate int FinishCommandListFunc(IntPtr self, int RestoreDeferredContextState, out IntPtr ppCommandList);
        FinishCommandListFunc m_FinishCommandListFunc;

    }
}
