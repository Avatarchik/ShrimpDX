// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class ID3D11VideoProcessorEnumerator: ID3D11DeviceChild
    {
        static Guid s_uuid = new Guid("31627037-53ab-4200-9061-05faa9ab45f9");
        public static new ref Guid IID =>ref s_uuid;
        public override ref Guid GetIID(){ return ref s_uuid; }
                
        public virtual int GetVideoProcessorContentDesc(
            out D3D11_VIDEO_PROCESSOR_CONTENT_DESC pContentDesc
        ){
            var fp = GetFunctionPointer(7);
            if(m_GetVideoProcessorContentDescFunc==null) m_GetVideoProcessorContentDescFunc = (GetVideoProcessorContentDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetVideoProcessorContentDescFunc));
            
            return m_GetVideoProcessorContentDescFunc(m_ptr, out pContentDesc);
        }
        delegate int GetVideoProcessorContentDescFunc(IntPtr self, out D3D11_VIDEO_PROCESSOR_CONTENT_DESC pContentDesc);
        GetVideoProcessorContentDescFunc m_GetVideoProcessorContentDescFunc;

        public virtual int CheckVideoProcessorFormat(
            DXGI_FORMAT Format,
            out uint pFlags
        ){
            var fp = GetFunctionPointer(8);
            if(m_CheckVideoProcessorFormatFunc==null) m_CheckVideoProcessorFormatFunc = (CheckVideoProcessorFormatFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CheckVideoProcessorFormatFunc));
            
            return m_CheckVideoProcessorFormatFunc(m_ptr, Format, out pFlags);
        }
        delegate int CheckVideoProcessorFormatFunc(IntPtr self, DXGI_FORMAT Format, out uint pFlags);
        CheckVideoProcessorFormatFunc m_CheckVideoProcessorFormatFunc;

        public virtual int GetVideoProcessorCaps(
            out D3D11_VIDEO_PROCESSOR_CAPS pCaps
        ){
            var fp = GetFunctionPointer(9);
            if(m_GetVideoProcessorCapsFunc==null) m_GetVideoProcessorCapsFunc = (GetVideoProcessorCapsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetVideoProcessorCapsFunc));
            
            return m_GetVideoProcessorCapsFunc(m_ptr, out pCaps);
        }
        delegate int GetVideoProcessorCapsFunc(IntPtr self, out D3D11_VIDEO_PROCESSOR_CAPS pCaps);
        GetVideoProcessorCapsFunc m_GetVideoProcessorCapsFunc;

        public virtual int GetVideoProcessorRateConversionCaps(
            uint TypeIndex,
            out D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS pCaps
        ){
            var fp = GetFunctionPointer(10);
            if(m_GetVideoProcessorRateConversionCapsFunc==null) m_GetVideoProcessorRateConversionCapsFunc = (GetVideoProcessorRateConversionCapsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetVideoProcessorRateConversionCapsFunc));
            
            return m_GetVideoProcessorRateConversionCapsFunc(m_ptr, TypeIndex, out pCaps);
        }
        delegate int GetVideoProcessorRateConversionCapsFunc(IntPtr self, uint TypeIndex, out D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS pCaps);
        GetVideoProcessorRateConversionCapsFunc m_GetVideoProcessorRateConversionCapsFunc;

        public virtual int GetVideoProcessorCustomRate(
            uint TypeIndex,
            uint CustomRateIndex,
            out D3D11_VIDEO_PROCESSOR_CUSTOM_RATE pRate
        ){
            var fp = GetFunctionPointer(11);
            if(m_GetVideoProcessorCustomRateFunc==null) m_GetVideoProcessorCustomRateFunc = (GetVideoProcessorCustomRateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetVideoProcessorCustomRateFunc));
            
            return m_GetVideoProcessorCustomRateFunc(m_ptr, TypeIndex, CustomRateIndex, out pRate);
        }
        delegate int GetVideoProcessorCustomRateFunc(IntPtr self, uint TypeIndex, uint CustomRateIndex, out D3D11_VIDEO_PROCESSOR_CUSTOM_RATE pRate);
        GetVideoProcessorCustomRateFunc m_GetVideoProcessorCustomRateFunc;

        public virtual int GetVideoProcessorFilterRange(
            D3D11_VIDEO_PROCESSOR_FILTER Filter,
            out D3D11_VIDEO_PROCESSOR_FILTER_RANGE pRange
        ){
            var fp = GetFunctionPointer(12);
            if(m_GetVideoProcessorFilterRangeFunc==null) m_GetVideoProcessorFilterRangeFunc = (GetVideoProcessorFilterRangeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetVideoProcessorFilterRangeFunc));
            
            return m_GetVideoProcessorFilterRangeFunc(m_ptr, Filter, out pRange);
        }
        delegate int GetVideoProcessorFilterRangeFunc(IntPtr self, D3D11_VIDEO_PROCESSOR_FILTER Filter, out D3D11_VIDEO_PROCESSOR_FILTER_RANGE pRange);
        GetVideoProcessorFilterRangeFunc m_GetVideoProcessorFilterRangeFunc;

    }
}
