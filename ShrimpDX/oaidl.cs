// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    [StructLayout(LayoutKind.Explicit)]
    public struct tagTYPEDESC__anonymous_12 // 1
    {
        [FieldOffset(0)]
        public IntPtr lptdesc;
        [FieldOffset(0)]
        public IntPtr lpadesc;
        [FieldOffset(0)]
        public uint hreftype;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct tagELEMDESC__anonymous_29 // 1
    {
        [FieldOffset(0)]
        public tagIDLDESC idldesc;
        [FieldOffset(0)]
        public tagPARAMDESC paramdesc;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct tagVARIANT__anonymous_37 // 1
    {
       // anonymous struct __param__;
        [FieldOffset(0)]
        public tagDEC decVal;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagVARIANT___anonymous_38 // 1
    {
        public ushort vt;
        public ushort wReserved1;
        public ushort wReserved2;
        public ushort wReserved3;
        // anonymous union
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct tagVARIANT____anonymous_39 // 1
    {
        [FieldOffset(0)]
        public long llVal;
        [FieldOffset(0)]
        public int lVal;
        [FieldOffset(0)]
        public byte bVal;
        [FieldOffset(0)]
        public short iVal;
        [FieldOffset(0)]
        public float fltVal;
        [FieldOffset(0)]
        public double dblVal;
        [FieldOffset(0)]
        public short boolVal;
        [FieldOffset(0)]
        public int scode;
        [FieldOffset(0)]
        public tagCY cyVal;
        [FieldOffset(0)]
        public double date;
        [FieldOffset(0)]
        public IntPtr bstrVal;
        [FieldOffset(0)]
        public IUnknown punkVal;
        [FieldOffset(0)]
        public IDispatch pdispVal;
        [FieldOffset(0)]
        public IntPtr parray;
        [FieldOffset(0)]
        public IntPtr pbVal;
        [FieldOffset(0)]
        public IntPtr piVal;
        [FieldOffset(0)]
        public IntPtr plVal;
        [FieldOffset(0)]
        public IntPtr pllVal;
        [FieldOffset(0)]
        public IntPtr pfltVal;
        [FieldOffset(0)]
        public IntPtr pdblVal;
        [FieldOffset(0)]
        public IntPtr pboolVal;
        [FieldOffset(0)]
        public IntPtr pscode;
        [FieldOffset(0)]
        public IntPtr pcyVal;
        [FieldOffset(0)]
        public IntPtr pdate;
        [FieldOffset(0)]
        public IntPtr pbstrVal;
        [FieldOffset(0)]
        public IntPtr ppunkVal;
        [FieldOffset(0)]
        public IntPtr ppdispVal;
        [FieldOffset(0)]
        public IntPtr pparray;
        [FieldOffset(0)]
        public IntPtr pvarVal;
        [FieldOffset(0)]
        public IntPtr byref;
        [FieldOffset(0)]
        public sbyte cVal;
        [FieldOffset(0)]
        public ushort uiVal;
        [FieldOffset(0)]
        public uint ulVal;
        [FieldOffset(0)]
        public ulong ullVal;
        [FieldOffset(0)]
        public int intVal;
        [FieldOffset(0)]
        public uint uintVal;
        [FieldOffset(0)]
        public IntPtr pdecVal;
        [FieldOffset(0)]
        public IntPtr pcVal;
        [FieldOffset(0)]
        public IntPtr puiVal;
        [FieldOffset(0)]
        public IntPtr pulVal;
        [FieldOffset(0)]
        public IntPtr pullVal;
        [FieldOffset(0)]
        public IntPtr pintVal;
        [FieldOffset(0)]
        public IntPtr puintVal;
       // anonymous struct __param__;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagVARIANT_____anonymous_43 // 1
    {
        public IntPtr pvRecord;
        public IRecordInfo pRecInfo;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct tagVARDESC__anonymous_54 // 1
    {
        [FieldOffset(0)]
        public uint oInst;
        [FieldOffset(0)]
        public IntPtr lpvarValue;
    }
    public class IDispatch: IUnknown
    {
        static Guid s_uuid = new Guid("00020400-0000-0000-c000-000000000046");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int GetTypeInfoCount(
            out uint pctinfo
        ){
            var fp = GetFunctionPointer(3);
            var callback = (GetTypeInfoCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypeInfoCountFunc));
            
            return callback(m_ptr, out pctinfo);
        }
        delegate int GetTypeInfoCountFunc(IntPtr self, out uint pctinfo);

        public virtual int GetTypeInfo(
            uint iTInfo,
            uint lcid,
            out ITypeInfo ppTInfo
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetTypeInfoFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypeInfoFunc));
            ppTInfo = new ITypeInfo();
            return callback(m_ptr, iTInfo, lcid, out ppTInfo.PtrForNew);
        }
        delegate int GetTypeInfoFunc(IntPtr self, uint iTInfo, uint lcid, out IntPtr ppTInfo);

        public virtual int GetIDsOfNames(
            ref Guid riid,
            out IntPtr rgszNames,
            uint cNames,
            uint lcid,
            out int rgDispId
        ){
            var fp = GetFunctionPointer(5);
            var callback = (GetIDsOfNamesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetIDsOfNamesFunc));
            
            return callback(m_ptr, ref riid, out rgszNames, cNames, lcid, out rgDispId);
        }
        delegate int GetIDsOfNamesFunc(IntPtr self, ref Guid riid, out IntPtr rgszNames, uint cNames, uint lcid, out int rgDispId);

        public virtual int Invoke(
            int dispIdMember,
            ref Guid riid,
            uint lcid,
            ushort wFlags,
            out tagDISPPARAMS pDispParams,
            out tagVARIANT pVarResult,
            out tagEXCEPINFO pExcepInfo,
            out uint puArgErr
        ){
            var fp = GetFunctionPointer(6);
            var callback = (InvokeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(InvokeFunc));
            
            return callback(m_ptr, dispIdMember, ref riid, lcid, wFlags, out pDispParams, out pVarResult, out pExcepInfo, out puArgErr);
        }
        delegate int InvokeFunc(IntPtr self, int dispIdMember, ref Guid riid, uint lcid, ushort wFlags, out tagDISPPARAMS pDispParams, out tagVARIANT pVarResult, out tagEXCEPINFO pExcepInfo, out uint puArgErr);

    }
    public class ITypeInfo: IUnknown
    {
        static Guid s_uuid = new Guid("00020401-0000-0000-c000-000000000046");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int GetTypeAttr(
            out IntPtr ppTypeAttr
        ){
            var fp = GetFunctionPointer(3);
            var callback = (GetTypeAttrFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypeAttrFunc));
            
            return callback(m_ptr, out ppTypeAttr);
        }
        delegate int GetTypeAttrFunc(IntPtr self, out IntPtr ppTypeAttr);

        public virtual int GetTypeComp(
            out ITypeComp ppTComp
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetTypeCompFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypeCompFunc));
            ppTComp = new ITypeComp();
            return callback(m_ptr, out ppTComp.PtrForNew);
        }
        delegate int GetTypeCompFunc(IntPtr self, out IntPtr ppTComp);

        public virtual int GetFuncDesc(
            uint index,
            out IntPtr ppFuncDesc
        ){
            var fp = GetFunctionPointer(5);
            var callback = (GetFuncDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFuncDescFunc));
            
            return callback(m_ptr, index, out ppFuncDesc);
        }
        delegate int GetFuncDescFunc(IntPtr self, uint index, out IntPtr ppFuncDesc);

        public virtual int GetVarDesc(
            uint index,
            out IntPtr ppVarDesc
        ){
            var fp = GetFunctionPointer(6);
            var callback = (GetVarDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetVarDescFunc));
            
            return callback(m_ptr, index, out ppVarDesc);
        }
        delegate int GetVarDescFunc(IntPtr self, uint index, out IntPtr ppVarDesc);

        public virtual int GetNames(
            int memid,
            out IntPtr rgBstrNames,
            uint cMaxNames,
            out uint pcNames
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetNamesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetNamesFunc));
            
            return callback(m_ptr, memid, out rgBstrNames, cMaxNames, out pcNames);
        }
        delegate int GetNamesFunc(IntPtr self, int memid, out IntPtr rgBstrNames, uint cMaxNames, out uint pcNames);

        public virtual int GetRefTypeOfImplType(
            uint index,
            out uint pRefType
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetRefTypeOfImplTypeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetRefTypeOfImplTypeFunc));
            
            return callback(m_ptr, index, out pRefType);
        }
        delegate int GetRefTypeOfImplTypeFunc(IntPtr self, uint index, out uint pRefType);

        public virtual int GetImplTypeFlags(
            uint index,
            out int pImplTypeFlags
        ){
            var fp = GetFunctionPointer(9);
            var callback = (GetImplTypeFlagsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetImplTypeFlagsFunc));
            
            return callback(m_ptr, index, out pImplTypeFlags);
        }
        delegate int GetImplTypeFlagsFunc(IntPtr self, uint index, out int pImplTypeFlags);

        public virtual int GetIDsOfNames(
            out IntPtr rgszNames,
            uint cNames,
            out int pMemId
        ){
            var fp = GetFunctionPointer(10);
            var callback = (GetIDsOfNamesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetIDsOfNamesFunc));
            
            return callback(m_ptr, out rgszNames, cNames, out pMemId);
        }
        delegate int GetIDsOfNamesFunc(IntPtr self, out IntPtr rgszNames, uint cNames, out int pMemId);

        public virtual int Invoke(
            IntPtr pvInstance,
            int memid,
            ushort wFlags,
            out tagDISPPARAMS pDispParams,
            out tagVARIANT pVarResult,
            out tagEXCEPINFO pExcepInfo,
            out uint puArgErr
        ){
            var fp = GetFunctionPointer(11);
            var callback = (InvokeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(InvokeFunc));
            
            return callback(m_ptr, pvInstance, memid, wFlags, out pDispParams, out pVarResult, out pExcepInfo, out puArgErr);
        }
        delegate int InvokeFunc(IntPtr self, IntPtr pvInstance, int memid, ushort wFlags, out tagDISPPARAMS pDispParams, out tagVARIANT pVarResult, out tagEXCEPINFO pExcepInfo, out uint puArgErr);

        public virtual int GetDocumentation(
            int memid,
            out IntPtr pBstrName,
            out IntPtr pBstrDocString,
            out uint pdwHelpContext,
            out IntPtr pBstrHelpFile
        ){
            var fp = GetFunctionPointer(12);
            var callback = (GetDocumentationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDocumentationFunc));
            
            return callback(m_ptr, memid, out pBstrName, out pBstrDocString, out pdwHelpContext, out pBstrHelpFile);
        }
        delegate int GetDocumentationFunc(IntPtr self, int memid, out IntPtr pBstrName, out IntPtr pBstrDocString, out uint pdwHelpContext, out IntPtr pBstrHelpFile);

        public virtual int GetDllEntry(
            int memid,
            tagINVOKEKIND invKind,
            out IntPtr pBstrDllName,
            out IntPtr pBstrName,
            out ushort pwOrdinal
        ){
            var fp = GetFunctionPointer(13);
            var callback = (GetDllEntryFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDllEntryFunc));
            
            return callback(m_ptr, memid, invKind, out pBstrDllName, out pBstrName, out pwOrdinal);
        }
        delegate int GetDllEntryFunc(IntPtr self, int memid, tagINVOKEKIND invKind, out IntPtr pBstrDllName, out IntPtr pBstrName, out ushort pwOrdinal);

        public virtual int GetRefTypeInfo(
            uint hRefType,
            out ITypeInfo ppTInfo
        ){
            var fp = GetFunctionPointer(14);
            var callback = (GetRefTypeInfoFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetRefTypeInfoFunc));
            ppTInfo = new ITypeInfo();
            return callback(m_ptr, hRefType, out ppTInfo.PtrForNew);
        }
        delegate int GetRefTypeInfoFunc(IntPtr self, uint hRefType, out IntPtr ppTInfo);

        public virtual int AddressOfMember(
            int memid,
            tagINVOKEKIND invKind,
            out IntPtr ppv
        ){
            var fp = GetFunctionPointer(15);
            var callback = (AddressOfMemberFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AddressOfMemberFunc));
            
            return callback(m_ptr, memid, invKind, out ppv);
        }
        delegate int AddressOfMemberFunc(IntPtr self, int memid, tagINVOKEKIND invKind, out IntPtr ppv);

        public virtual int CreateInstance(
            IUnknown pUnkOuter,
            ref Guid riid,
            out IntPtr ppvObj
        ){
            var fp = GetFunctionPointer(16);
            var callback = (CreateInstanceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateInstanceFunc));
            
            return callback(m_ptr, pUnkOuter!=null ? pUnkOuter.Ptr : IntPtr.Zero, ref riid, out ppvObj);
        }
        delegate int CreateInstanceFunc(IntPtr self, IntPtr pUnkOuter, ref Guid riid, out IntPtr ppvObj);

        public virtual int GetMops(
            int memid,
            out IntPtr pBstrMops
        ){
            var fp = GetFunctionPointer(17);
            var callback = (GetMopsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetMopsFunc));
            
            return callback(m_ptr, memid, out pBstrMops);
        }
        delegate int GetMopsFunc(IntPtr self, int memid, out IntPtr pBstrMops);

        public virtual int GetContainingTypeLib(
            out ITypeLib ppTLib,
            out uint pIndex
        ){
            var fp = GetFunctionPointer(18);
            var callback = (GetContainingTypeLibFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetContainingTypeLibFunc));
            ppTLib = new ITypeLib();
            return callback(m_ptr, out ppTLib.PtrForNew, out pIndex);
        }
        delegate int GetContainingTypeLibFunc(IntPtr self, out IntPtr ppTLib, out uint pIndex);

        public virtual void ReleaseTypeAttr(
            out tagTYPEATTR pTypeAttr
        ){
            var fp = GetFunctionPointer(19);
            var callback = (ReleaseTypeAttrFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ReleaseTypeAttrFunc));
            
            callback(m_ptr, out pTypeAttr);
        }
        delegate void ReleaseTypeAttrFunc(IntPtr self, out tagTYPEATTR pTypeAttr);

        public virtual void ReleaseFuncDesc(
            out tagFUNCDESC pFuncDesc
        ){
            var fp = GetFunctionPointer(20);
            var callback = (ReleaseFuncDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ReleaseFuncDescFunc));
            
            callback(m_ptr, out pFuncDesc);
        }
        delegate void ReleaseFuncDescFunc(IntPtr self, out tagFUNCDESC pFuncDesc);

        public virtual void ReleaseVarDesc(
            out tagVARDESC pVarDesc
        ){
            var fp = GetFunctionPointer(21);
            var callback = (ReleaseVarDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ReleaseVarDescFunc));
            
            callback(m_ptr, out pVarDesc);
        }
        delegate void ReleaseVarDescFunc(IntPtr self, out tagVARDESC pVarDesc);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagTYPEATTR // 2
    {
        public Guid guid;
        public uint lcid;
        public uint dwReserved;
        public int memidConstructor;
        public int memidDestructor;
        public IntPtr lpstrSchema;
        public uint cbSizeInstance;
        public tagTYPEKIND typekind;
        public ushort cFuncs;
        public ushort cVars;
        public ushort cImplTypes;
        public ushort cbSizeVft;
        public ushort cbAlignment;
        public ushort wTypeFlags;
        public ushort wMajorVerNum;
        public ushort wMinorVerNum;
        public tagTYPEDESC tdescAlias;
        public tagIDLDESC idldescType;
    }
    public enum tagTYPEKIND // 1
    {
        _ENUM = 0x0,
        _RECORD = 0x1,
        _MODULE = 0x2,
        _INTERFACE = 0x3,
        _DISPATCH = 0x4,
        _COCLASS = 0x5,
        _ALIAS = 0x6,
        _UNION = 0x7,
        _MAX = 0x8,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagTYPEDESC // 2
    {
        public tagTYPEDESC__anonymous_12 __param__1;
        public ushort vt;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagARRAYDESC // 1
    {
        public tagTYPEDESC tdescElem;
        public ushort cDims;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=1)]public tagSAFEARRAYBOUND[] rgbounds;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagSAFEARRAYBOUND // 2
    {
        public uint cElements;
        public int lLbound;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagIDLDESC // 2
    {
        public ulong dwReserved;
        public ushort wIDLFlags;
    }
    public class ITypeComp: IUnknown
    {
        static Guid s_uuid = new Guid("00020403-0000-0000-c000-000000000046");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int Bind(
            out ushort szName,
            uint lHashVal,
            ushort wFlags,
            out ITypeInfo ppTInfo,
            out tagDESCKIND pDescKind,
            out tagBINDPTR pBindPtr
        ){
            var fp = GetFunctionPointer(3);
            var callback = (BindFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(BindFunc));
            ppTInfo = new ITypeInfo();
            return callback(m_ptr, out szName, lHashVal, wFlags, out ppTInfo.PtrForNew, out pDescKind, out pBindPtr);
        }
        delegate int BindFunc(IntPtr self, out ushort szName, uint lHashVal, ushort wFlags, out IntPtr ppTInfo, out tagDESCKIND pDescKind, out tagBINDPTR pBindPtr);

        public virtual int BindType(
            out ushort szName,
            uint lHashVal,
            out ITypeInfo ppTInfo,
            out ITypeComp ppTComp
        ){
            var fp = GetFunctionPointer(4);
            var callback = (BindTypeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(BindTypeFunc));
            ppTInfo = new ITypeInfo();ppTComp = new ITypeComp();
            return callback(m_ptr, out szName, lHashVal, out ppTInfo.PtrForNew, out ppTComp.PtrForNew);
        }
        delegate int BindTypeFunc(IntPtr self, out ushort szName, uint lHashVal, out IntPtr ppTInfo, out IntPtr ppTComp);

    }
    public enum tagDESCKIND // 1
    {
        _NONE = 0x0,
        _FUNCDESC = 0x1,
        _VARDESC = 0x2,
        _TYPECOMP = 0x3,
        _IMPLICITAPPOBJ = 0x4,
        _MAX = 0x5,
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct tagBINDPTR // 2
    {
        [FieldOffset(0)]
        public IntPtr lpfuncdesc;
        [FieldOffset(0)]
        public IntPtr lpvardesc;
        [FieldOffset(0)]
        public ITypeComp lptcomp;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagFUNCDESC // 2
    {
        public int memid;
        public IntPtr lprgscode;
        public IntPtr lprgelemdescParam;
        public tagFUNCKIND funckind;
        public tagINVOKEKIND invkind;
        public tagCALLCONV callconv;
        public short cParams;
        public short cParamsOpt;
        public short oVft;
        public short cScodes;
        public tagELEMDESC elemdescFunc;
        public ushort wFuncFlags;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagELEMDESC // 2
    {
        public tagTYPEDESC tdesc;
        public tagELEMDESC__anonymous_29 __param__2;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagPARAMDESC // 2
    {
        public IntPtr pparamdescex;
        public ushort wParamFlags;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagPARAMDESCEX // 2
    {
        public uint cBytes;
        public tagVARIANT varDefaultValue;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagVARIANT // 0
    {
        public tagVARIANT__anonymous_37 __param__1;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagSAFEARRAY // 1
    {
        public ushort cDims;
        public ushort fFeatures;
        public uint cbElements;
        public uint cLocks;
        public IntPtr pvData;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=1)]public tagSAFEARRAYBOUND[] rgsabound;
    }
    public class IRecordInfo: IUnknown
    {
        static Guid s_uuid = new Guid("0000002f-0000-0000-c000-000000000046");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int RecordInit(
            IntPtr pvNew
        ){
            var fp = GetFunctionPointer(3);
            var callback = (RecordInitFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RecordInitFunc));
            
            return callback(m_ptr, pvNew);
        }
        delegate int RecordInitFunc(IntPtr self, IntPtr pvNew);

        public virtual int RecordClear(
            IntPtr pvExisting
        ){
            var fp = GetFunctionPointer(4);
            var callback = (RecordClearFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RecordClearFunc));
            
            return callback(m_ptr, pvExisting);
        }
        delegate int RecordClearFunc(IntPtr self, IntPtr pvExisting);

        public virtual int RecordCopy(
            IntPtr pvExisting,
            IntPtr pvNew
        ){
            var fp = GetFunctionPointer(5);
            var callback = (RecordCopyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RecordCopyFunc));
            
            return callback(m_ptr, pvExisting, pvNew);
        }
        delegate int RecordCopyFunc(IntPtr self, IntPtr pvExisting, IntPtr pvNew);

        public virtual int GetGuid(
            out Guid pguid
        ){
            var fp = GetFunctionPointer(6);
            var callback = (GetGuidFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetGuidFunc));
            
            return callback(m_ptr, out pguid);
        }
        delegate int GetGuidFunc(IntPtr self, out Guid pguid);

        public virtual int GetName(
            out IntPtr pbstrName
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetNameFunc));
            
            return callback(m_ptr, out pbstrName);
        }
        delegate int GetNameFunc(IntPtr self, out IntPtr pbstrName);

        public virtual int GetSize(
            out uint pcbSize
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetSizeFunc));
            
            return callback(m_ptr, out pcbSize);
        }
        delegate int GetSizeFunc(IntPtr self, out uint pcbSize);

        public virtual int GetTypeInfo(
            out ITypeInfo ppTypeInfo
        ){
            var fp = GetFunctionPointer(9);
            var callback = (GetTypeInfoFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypeInfoFunc));
            ppTypeInfo = new ITypeInfo();
            return callback(m_ptr, out ppTypeInfo.PtrForNew);
        }
        delegate int GetTypeInfoFunc(IntPtr self, out IntPtr ppTypeInfo);

        public virtual int GetField(
            IntPtr pvData,
            ref ushort szFieldName,
            out tagVARIANT pvarField
        ){
            var fp = GetFunctionPointer(10);
            var callback = (GetFieldFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFieldFunc));
            
            return callback(m_ptr, pvData, ref szFieldName, out pvarField);
        }
        delegate int GetFieldFunc(IntPtr self, IntPtr pvData, ref ushort szFieldName, out tagVARIANT pvarField);

        public virtual int GetFieldNoCopy(
            IntPtr pvData,
            ref ushort szFieldName,
            out tagVARIANT pvarField,
            out IntPtr ppvDataCArray
        ){
            var fp = GetFunctionPointer(11);
            var callback = (GetFieldNoCopyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFieldNoCopyFunc));
            
            return callback(m_ptr, pvData, ref szFieldName, out pvarField, out ppvDataCArray);
        }
        delegate int GetFieldNoCopyFunc(IntPtr self, IntPtr pvData, ref ushort szFieldName, out tagVARIANT pvarField, out IntPtr ppvDataCArray);

        public virtual int PutField(
            uint wFlags,
            IntPtr pvData,
            ref ushort szFieldName,
            out tagVARIANT pvarField
        ){
            var fp = GetFunctionPointer(12);
            var callback = (PutFieldFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PutFieldFunc));
            
            return callback(m_ptr, wFlags, pvData, ref szFieldName, out pvarField);
        }
        delegate int PutFieldFunc(IntPtr self, uint wFlags, IntPtr pvData, ref ushort szFieldName, out tagVARIANT pvarField);

        public virtual int PutFieldNoCopy(
            uint wFlags,
            IntPtr pvData,
            ref ushort szFieldName,
            out tagVARIANT pvarField
        ){
            var fp = GetFunctionPointer(13);
            var callback = (PutFieldNoCopyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PutFieldNoCopyFunc));
            
            return callback(m_ptr, wFlags, pvData, ref szFieldName, out pvarField);
        }
        delegate int PutFieldNoCopyFunc(IntPtr self, uint wFlags, IntPtr pvData, ref ushort szFieldName, out tagVARIANT pvarField);

        public virtual int GetFieldNames(
            out uint pcNames,
            out IntPtr rgBstrNames
        ){
            var fp = GetFunctionPointer(14);
            var callback = (GetFieldNamesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFieldNamesFunc));
            
            return callback(m_ptr, out pcNames, out rgBstrNames);
        }
        delegate int GetFieldNamesFunc(IntPtr self, out uint pcNames, out IntPtr rgBstrNames);

        public virtual int IsMatchingType(
            IRecordInfo pRecordInfo
        ){
            var fp = GetFunctionPointer(15);
            var callback = (IsMatchingTypeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsMatchingTypeFunc));
            
            return callback(m_ptr, pRecordInfo!=null ? pRecordInfo.Ptr : IntPtr.Zero);
        }
        delegate int IsMatchingTypeFunc(IntPtr self, IntPtr pRecordInfo);

        public virtual IntPtr RecordCreate(
        ){
            var fp = GetFunctionPointer(16);
            var callback = (RecordCreateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RecordCreateFunc));
            
            return callback(m_ptr);
        }
        delegate IntPtr RecordCreateFunc(IntPtr self);

        public virtual int RecordCreateCopy(
            IntPtr pvSource,
            out IntPtr ppvDest
        ){
            var fp = GetFunctionPointer(17);
            var callback = (RecordCreateCopyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RecordCreateCopyFunc));
            
            return callback(m_ptr, pvSource, out ppvDest);
        }
        delegate int RecordCreateCopyFunc(IntPtr self, IntPtr pvSource, out IntPtr ppvDest);

        public virtual int RecordDestroy(
            IntPtr pvRecord
        ){
            var fp = GetFunctionPointer(18);
            var callback = (RecordDestroyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RecordDestroyFunc));
            
            return callback(m_ptr, pvRecord);
        }
        delegate int RecordDestroyFunc(IntPtr self, IntPtr pvRecord);

    }
    public enum tagFUNCKIND // 1
    {
        _VIRTUAL = 0x0,
        _PUREVIRTUAL = 0x1,
        _NONVIRTUAL = 0x2,
        _STATIC = 0x3,
        _DISPATCH = 0x4,
    }
    public enum tagINVOKEKIND // 1
    {
        _FUNC = 0x1,
        _PROPERTYGET = 0x2,
        _PROPERTYPUT = 0x4,
        _PROPERTYPUTREF = 0x8,
    }
    public enum tagCALLCONV // 1
    {
        _FASTCALL = 0x0,
        _CDECL = 0x1,
        _MSCPASCAL = 0x2,
        _PASCAL = 0x2,
        _MACPASCAL = 0x3,
        _STDCALL = 0x4,
        _FPFASTCALL = 0x5,
        _SYSCALL = 0x6,
        _MPWCDECL = 0x7,
        _MPWPASCAL = 0x8,
        _MAX = 0x9,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagVARDESC // 2
    {
        public int memid;
        public IntPtr lpstrSchema;
        public tagVARDESC__anonymous_54 __param__3;
        public tagELEMDESC elemdescVar;
        public ushort wVarFlags;
        public tagVARKIND varkind;
    }
    public enum tagVARKIND // 1
    {
        _PERINSTANCE = 0x0,
        _STATIC = 0x1,
        _CONST = 0x2,
        _DISPATCH = 0x3,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagDISPPARAMS // 1
    {
        public IntPtr rgvarg;
        public IntPtr rgdispidNamedArgs;
        public uint cArgs;
        public uint cNamedArgs;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagEXCEPINFO // 3
    {
        public ushort wCode;
        public ushort wReserved;
        public IntPtr bstrSource;
        public IntPtr bstrDescription;
        public IntPtr bstrHelpFile;
        public uint dwHelpContext;
        public IntPtr pvReserved;
        public IntPtr pfnDeferredFillIn;
        public int scode;
    }
    public class ITypeLib: IUnknown
    {
        static Guid s_uuid = new Guid("00020402-0000-0000-c000-000000000046");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual uint GetTypeInfoCount(
        ){
            var fp = GetFunctionPointer(3);
            var callback = (GetTypeInfoCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypeInfoCountFunc));
            
            return callback(m_ptr);
        }
        delegate uint GetTypeInfoCountFunc(IntPtr self);

        public virtual int GetTypeInfo(
            uint index,
            out ITypeInfo ppTInfo
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetTypeInfoFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypeInfoFunc));
            ppTInfo = new ITypeInfo();
            return callback(m_ptr, index, out ppTInfo.PtrForNew);
        }
        delegate int GetTypeInfoFunc(IntPtr self, uint index, out IntPtr ppTInfo);

        public virtual int GetTypeInfoType(
            uint index,
            out tagTYPEKIND pTKind
        ){
            var fp = GetFunctionPointer(5);
            var callback = (GetTypeInfoTypeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypeInfoTypeFunc));
            
            return callback(m_ptr, index, out pTKind);
        }
        delegate int GetTypeInfoTypeFunc(IntPtr self, uint index, out tagTYPEKIND pTKind);

        public virtual int GetTypeInfoOfGuid(
            ref Guid guid,
            out ITypeInfo ppTinfo
        ){
            var fp = GetFunctionPointer(6);
            var callback = (GetTypeInfoOfGuidFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypeInfoOfGuidFunc));
            ppTinfo = new ITypeInfo();
            return callback(m_ptr, ref guid, out ppTinfo.PtrForNew);
        }
        delegate int GetTypeInfoOfGuidFunc(IntPtr self, ref Guid guid, out IntPtr ppTinfo);

        public virtual int GetLibAttr(
            out IntPtr ppTLibAttr
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetLibAttrFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetLibAttrFunc));
            
            return callback(m_ptr, out ppTLibAttr);
        }
        delegate int GetLibAttrFunc(IntPtr self, out IntPtr ppTLibAttr);

        public virtual int GetTypeComp(
            out ITypeComp ppTComp
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetTypeCompFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypeCompFunc));
            ppTComp = new ITypeComp();
            return callback(m_ptr, out ppTComp.PtrForNew);
        }
        delegate int GetTypeCompFunc(IntPtr self, out IntPtr ppTComp);

        public virtual int GetDocumentation(
            int index,
            out IntPtr pBstrName,
            out IntPtr pBstrDocString,
            out uint pdwHelpContext,
            out IntPtr pBstrHelpFile
        ){
            var fp = GetFunctionPointer(9);
            var callback = (GetDocumentationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDocumentationFunc));
            
            return callback(m_ptr, index, out pBstrName, out pBstrDocString, out pdwHelpContext, out pBstrHelpFile);
        }
        delegate int GetDocumentationFunc(IntPtr self, int index, out IntPtr pBstrName, out IntPtr pBstrDocString, out uint pdwHelpContext, out IntPtr pBstrHelpFile);

        public virtual int IsName(
            out ushort szNameBuf,
            uint lHashVal,
            out int pfName
        ){
            var fp = GetFunctionPointer(10);
            var callback = (IsNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IsNameFunc));
            
            return callback(m_ptr, out szNameBuf, lHashVal, out pfName);
        }
        delegate int IsNameFunc(IntPtr self, out ushort szNameBuf, uint lHashVal, out int pfName);

        public virtual int FindName(
            out ushort szNameBuf,
            uint lHashVal,
            out ITypeInfo ppTInfo,
            out int rgMemId,
            out ushort pcFound
        ){
            var fp = GetFunctionPointer(11);
            var callback = (FindNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FindNameFunc));
            ppTInfo = new ITypeInfo();
            return callback(m_ptr, out szNameBuf, lHashVal, out ppTInfo.PtrForNew, out rgMemId, out pcFound);
        }
        delegate int FindNameFunc(IntPtr self, out ushort szNameBuf, uint lHashVal, out IntPtr ppTInfo, out int rgMemId, out ushort pcFound);

        public virtual void ReleaseTLibAttr(
            out tagTLIBATTR pTLibAttr
        ){
            var fp = GetFunctionPointer(12);
            var callback = (ReleaseTLibAttrFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ReleaseTLibAttrFunc));
            
            callback(m_ptr, out pTLibAttr);
        }
        delegate void ReleaseTLibAttrFunc(IntPtr self, out tagTLIBATTR pTLibAttr);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct tagTLIBATTR // 2
    {
        public Guid guid;
        public uint lcid;
        public tagSYSKIND syskind;
        public ushort wMajorVerNum;
        public ushort wMinorVerNum;
        public ushort wLibFlags;
    }
    public enum tagSYSKIND // 1
    {
        _WIN16 = 0x0,
        _WIN32 = 0x1,
        _MAC = 0x2,
        _WIN64 = 0x3,
    }
    public class IErrorLog: IUnknown
    {
        static Guid s_uuid = new Guid("3127ca40-446e-11ce-8135-00aa004bb851");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int AddError(
            ref ushort pszPropName,
            out tagEXCEPINFO pExcepInfo
        ){
            var fp = GetFunctionPointer(3);
            var callback = (AddErrorFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AddErrorFunc));
            
            return callback(m_ptr, ref pszPropName, out pExcepInfo);
        }
        delegate int AddErrorFunc(IntPtr self, ref ushort pszPropName, out tagEXCEPINFO pExcepInfo);

    }
}
