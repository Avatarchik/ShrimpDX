// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;

namespace ShrimpDX {
    public class ID3D11Linker: IUnknown
    {
        static Guid s_uuid = new Guid("59a6cd0e-e10d-4c1f-88c0-63aba1daf30e");
        public static new ref Guid IID => ref s_uuid;
                
        public virtual int Link(
            ID3D11ModuleInstance pEntry,
            string pEntryName,
            string pTargetName,
            uint uFlags,
            out ID3D10Blob ppShaderBlob,
            out ID3D10Blob ppErrorBuffer
        ){
            var fp = GetFunctionPointer(3);
            if(m_LinkFunc==null) m_LinkFunc = (LinkFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(LinkFunc));
            ppShaderBlob = new ID3D10Blob();ppErrorBuffer = new ID3D10Blob();
            return m_LinkFunc(m_ptr, pEntry!=null ? pEntry.Ptr : IntPtr.Zero, pEntryName, pTargetName, uFlags, out ppShaderBlob.PtrForNew, out ppErrorBuffer.PtrForNew);
        }
        delegate int LinkFunc(IntPtr self, IntPtr pEntry, string pEntryName, string pTargetName, uint uFlags, out IntPtr ppShaderBlob, out IntPtr ppErrorBuffer);
        LinkFunc m_LinkFunc;

        public virtual int UseLibrary(
            ID3D11ModuleInstance pLibraryMI
        ){
            var fp = GetFunctionPointer(4);
            if(m_UseLibraryFunc==null) m_UseLibraryFunc = (UseLibraryFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(UseLibraryFunc));
            
            return m_UseLibraryFunc(m_ptr, pLibraryMI!=null ? pLibraryMI.Ptr : IntPtr.Zero);
        }
        delegate int UseLibraryFunc(IntPtr self, IntPtr pLibraryMI);
        UseLibraryFunc m_UseLibraryFunc;

        public virtual int AddClipPlaneFromCBuffer(
            uint uCBufferSlot,
            uint uCBufferEntry
        ){
            var fp = GetFunctionPointer(5);
            if(m_AddClipPlaneFromCBufferFunc==null) m_AddClipPlaneFromCBufferFunc = (AddClipPlaneFromCBufferFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(AddClipPlaneFromCBufferFunc));
            
            return m_AddClipPlaneFromCBufferFunc(m_ptr, uCBufferSlot, uCBufferEntry);
        }
        delegate int AddClipPlaneFromCBufferFunc(IntPtr self, uint uCBufferSlot, uint uCBufferEntry);
        AddClipPlaneFromCBufferFunc m_AddClipPlaneFromCBufferFunc;

    }
}
