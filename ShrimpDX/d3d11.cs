// This source code was generated by regenerator"
using System;
using System.Runtime.InteropServices;
using HRESULT = System.Int32;

namespace ShrimpDX {
    public static partial class Constants {
        public const int __REQUIRED_RPCNDR_H_VERSION__ = 500;
        public const int __REQUIRED_RPCSAL_H_VERSION__ = 100;
        public const float D3D11_16BIT_INDEX_STRIP_CUT_VALUE = ( 0xffff );
        public const float D3D11_32BIT_INDEX_STRIP_CUT_VALUE = ( 0xffffffff );
        public const float D3D11_8BIT_INDEX_STRIP_CUT_VALUE = ( 0xff );
        public const int D3D11_ARRAY_AXIS_ADDRESS_RANGE_BIT_COUNT = ( 9 );
        public const int D3D11_CLIP_OR_CULL_DISTANCE_COUNT = ( 8 );
        public const int D3D11_CLIP_OR_CULL_DISTANCE_ELEMENT_COUNT = ( 2 );
        public const int D3D11_COMMONSHADER_CONSTANT_BUFFER_API_SLOT_COUNT = ( 14 );
        public const int D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENTS = ( 4 );
        public const int D3D11_COMMONSHADER_CONSTANT_BUFFER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D11_COMMONSHADER_CONSTANT_BUFFER_HW_SLOT_COUNT = ( 15 );
        public const int D3D11_COMMONSHADER_CONSTANT_BUFFER_PARTIAL_UPDATE_EXTENTS_BYTE_ALIGNMENT = ( 16 );
        public const int D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COMPONENTS = ( 4 );
        public const int D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_COUNT = ( 15 );
        public const int D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READS_PER_INST = ( 1 );
        public const int D3D11_COMMONSHADER_CONSTANT_BUFFER_REGISTER_READ_PORTS = ( 1 );
        public const int D3D11_COMMONSHADER_FLOWCONTROL_NESTING_LIMIT = ( 64 );
        public const int D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COMPONENTS = ( 4 );
        public const int D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_COUNT = ( 1 );
        public const int D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READS_PER_INST = ( 1 );
        public const int D3D11_COMMONSHADER_IMMEDIATE_CONSTANT_BUFFER_REGISTER_READ_PORTS = ( 1 );
        public const int D3D11_COMMONSHADER_IMMEDIATE_VALUE_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COMPONENTS = ( 1 );
        public const int D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_COUNT = ( 128 );
        public const int D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READS_PER_INST = ( 1 );
        public const int D3D11_COMMONSHADER_INPUT_RESOURCE_REGISTER_READ_PORTS = ( 1 );
        public const int D3D11_COMMONSHADER_INPUT_RESOURCE_SLOT_COUNT = ( 128 );
        public const int D3D11_COMMONSHADER_SAMPLER_REGISTER_COMPONENTS = ( 1 );
        public const int D3D11_COMMONSHADER_SAMPLER_REGISTER_COUNT = ( 16 );
        public const int D3D11_COMMONSHADER_SAMPLER_REGISTER_READS_PER_INST = ( 1 );
        public const int D3D11_COMMONSHADER_SAMPLER_REGISTER_READ_PORTS = ( 1 );
        public const int D3D11_COMMONSHADER_SAMPLER_SLOT_COUNT = ( 16 );
        public const int D3D11_COMMONSHADER_SUBROUTINE_NESTING_LIMIT = ( 32 );
        public const int D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENTS = ( 4 );
        public const int D3D11_COMMONSHADER_TEMP_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D11_COMMONSHADER_TEMP_REGISTER_COUNT = ( 4096 );
        public const int D3D11_COMMONSHADER_TEMP_REGISTER_READS_PER_INST = ( 3 );
        public const int D3D11_COMMONSHADER_TEMP_REGISTER_READ_PORTS = ( 3 );
        public const int D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MAX = ( 10 );
        public const int D3D11_COMMONSHADER_TEXCOORD_RANGE_REDUCTION_MIN = ( - 10 );
        public const int D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_NEGATIVE = ( - 8 );
        public const int D3D11_COMMONSHADER_TEXEL_OFFSET_MAX_POSITIVE = ( 7 );
        public const int D3D11_CS_4_X_BUCKET00_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 256 );
        public const int D3D11_CS_4_X_BUCKET00_MAX_NUM_THREADS_PER_GROUP = ( 64 );
        public const int D3D11_CS_4_X_BUCKET01_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 240 );
        public const int D3D11_CS_4_X_BUCKET01_MAX_NUM_THREADS_PER_GROUP = ( 68 );
        public const int D3D11_CS_4_X_BUCKET02_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 224 );
        public const int D3D11_CS_4_X_BUCKET02_MAX_NUM_THREADS_PER_GROUP = ( 72 );
        public const int D3D11_CS_4_X_BUCKET03_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 208 );
        public const int D3D11_CS_4_X_BUCKET03_MAX_NUM_THREADS_PER_GROUP = ( 76 );
        public const int D3D11_CS_4_X_BUCKET04_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 192 );
        public const int D3D11_CS_4_X_BUCKET04_MAX_NUM_THREADS_PER_GROUP = ( 84 );
        public const int D3D11_CS_4_X_BUCKET05_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 176 );
        public const int D3D11_CS_4_X_BUCKET05_MAX_NUM_THREADS_PER_GROUP = ( 92 );
        public const int D3D11_CS_4_X_BUCKET06_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 160 );
        public const int D3D11_CS_4_X_BUCKET06_MAX_NUM_THREADS_PER_GROUP = ( 100 );
        public const int D3D11_CS_4_X_BUCKET07_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 144 );
        public const int D3D11_CS_4_X_BUCKET07_MAX_NUM_THREADS_PER_GROUP = ( 112 );
        public const int D3D11_CS_4_X_BUCKET08_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 128 );
        public const int D3D11_CS_4_X_BUCKET08_MAX_NUM_THREADS_PER_GROUP = ( 128 );
        public const int D3D11_CS_4_X_BUCKET09_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 112 );
        public const int D3D11_CS_4_X_BUCKET09_MAX_NUM_THREADS_PER_GROUP = ( 144 );
        public const int D3D11_CS_4_X_BUCKET10_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 96 );
        public const int D3D11_CS_4_X_BUCKET10_MAX_NUM_THREADS_PER_GROUP = ( 168 );
        public const int D3D11_CS_4_X_BUCKET11_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 80 );
        public const int D3D11_CS_4_X_BUCKET11_MAX_NUM_THREADS_PER_GROUP = ( 204 );
        public const int D3D11_CS_4_X_BUCKET12_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 64 );
        public const int D3D11_CS_4_X_BUCKET12_MAX_NUM_THREADS_PER_GROUP = ( 256 );
        public const int D3D11_CS_4_X_BUCKET13_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 48 );
        public const int D3D11_CS_4_X_BUCKET13_MAX_NUM_THREADS_PER_GROUP = ( 340 );
        public const int D3D11_CS_4_X_BUCKET14_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 32 );
        public const int D3D11_CS_4_X_BUCKET14_MAX_NUM_THREADS_PER_GROUP = ( 512 );
        public const int D3D11_CS_4_X_BUCKET15_MAX_BYTES_TGSM_WRITABLE_PER_THREAD = ( 16 );
        public const int D3D11_CS_4_X_BUCKET15_MAX_NUM_THREADS_PER_GROUP = ( 768 );
        public const int D3D11_CS_4_X_DISPATCH_MAX_THREAD_GROUPS_IN_Z_DIMENSION = ( 1 );
        public const int D3D11_CS_4_X_RAW_UAV_BYTE_ALIGNMENT = ( 256 );
        public const int D3D11_CS_4_X_THREAD_GROUP_MAX_THREADS_PER_GROUP = ( 768 );
        public const int D3D11_CS_4_X_THREAD_GROUP_MAX_X = ( 768 );
        public const int D3D11_CS_4_X_THREAD_GROUP_MAX_Y = ( 768 );
        public const int D3D11_CS_4_X_UAV_REGISTER_COUNT = ( 1 );
        public const int D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION = ( 65535 );
        public const int D3D11_CS_TGSM_REGISTER_COUNT = ( 8192 );
        public const int D3D11_CS_TGSM_REGISTER_READS_PER_INST = ( 1 );
        public const int D3D11_CS_TGSM_RESOURCE_REGISTER_COMPONENTS = ( 1 );
        public const int D3D11_CS_TGSM_RESOURCE_REGISTER_READ_PORTS = ( 1 );
        public const int D3D11_CS_THREADGROUPID_REGISTER_COMPONENTS = ( 3 );
        public const int D3D11_CS_THREADGROUPID_REGISTER_COUNT = ( 1 );
        public const int D3D11_CS_THREADIDINGROUPFLATTENED_REGISTER_COMPONENTS = ( 1 );
        public const int D3D11_CS_THREADIDINGROUPFLATTENED_REGISTER_COUNT = ( 1 );
        public const int D3D11_CS_THREADIDINGROUP_REGISTER_COMPONENTS = ( 3 );
        public const int D3D11_CS_THREADIDINGROUP_REGISTER_COUNT = ( 1 );
        public const int D3D11_CS_THREADID_REGISTER_COMPONENTS = ( 3 );
        public const int D3D11_CS_THREADID_REGISTER_COUNT = ( 1 );
        public const int D3D11_CS_THREAD_GROUP_MAX_THREADS_PER_GROUP = ( 1024 );
        public const int D3D11_CS_THREAD_GROUP_MAX_X = ( 1024 );
        public const int D3D11_CS_THREAD_GROUP_MAX_Y = ( 1024 );
        public const int D3D11_CS_THREAD_GROUP_MAX_Z = ( 64 );
        public const int D3D11_CS_THREAD_GROUP_MIN_X = ( 1 );
        public const int D3D11_CS_THREAD_GROUP_MIN_Y = ( 1 );
        public const int D3D11_CS_THREAD_GROUP_MIN_Z = ( 1 );
        public const int D3D11_CS_THREAD_LOCAL_TEMP_REGISTER_POOL = ( 16384 );
        public const float D3D11_DEFAULT_BLEND_FACTOR_ALPHA = ( 1.0f );
        public const float D3D11_DEFAULT_BLEND_FACTOR_BLUE = ( 1.0f );
        public const float D3D11_DEFAULT_BLEND_FACTOR_GREEN = ( 1.0f );
        public const float D3D11_DEFAULT_BLEND_FACTOR_RED = ( 1.0f );
        public const float D3D11_DEFAULT_BORDER_COLOR_COMPONENT = ( 0.0f );
        public const int D3D11_DEFAULT_DEPTH_BIAS = ( 0 );
        public const float D3D11_DEFAULT_DEPTH_BIAS_CLAMP = ( 0.0f );
        public const int D3D11_DEFAULT_MAX_ANISOTROPY = ( 16 );
        public const float D3D11_DEFAULT_MIP_LOD_BIAS = ( 0.0f );
        public const int D3D11_DEFAULT_RENDER_TARGET_ARRAY_INDEX = ( 0 );
        public const float D3D11_DEFAULT_SAMPLE_MASK = ( 0xffffffff );
        public const int D3D11_DEFAULT_SCISSOR_ENDX = ( 0 );
        public const int D3D11_DEFAULT_SCISSOR_ENDY = ( 0 );
        public const int D3D11_DEFAULT_SCISSOR_STARTX = ( 0 );
        public const int D3D11_DEFAULT_SCISSOR_STARTY = ( 0 );
        public const float D3D11_DEFAULT_SLOPE_SCALED_DEPTH_BIAS = ( 0.0f );
        public const float D3D11_DEFAULT_STENCIL_READ_MASK = ( 0xff );
        public const int D3D11_DEFAULT_STENCIL_REFERENCE = ( 0 );
        public const float D3D11_DEFAULT_STENCIL_WRITE_MASK = ( 0xff );
        public const int D3D11_DEFAULT_VIEWPORT_AND_SCISSORRECT_INDEX = ( 0 );
        public const int D3D11_DEFAULT_VIEWPORT_HEIGHT = ( 0 );
        public const float D3D11_DEFAULT_VIEWPORT_MAX_DEPTH = ( 0.0f );
        public const float D3D11_DEFAULT_VIEWPORT_MIN_DEPTH = ( 0.0f );
        public const int D3D11_DEFAULT_VIEWPORT_TOPLEFTX = ( 0 );
        public const int D3D11_DEFAULT_VIEWPORT_TOPLEFTY = ( 0 );
        public const int D3D11_DEFAULT_VIEWPORT_WIDTH = ( 0 );
        public const int D3D11_DS_INPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = ( 3968 );
        public const int D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENTS = ( 4 );
        public const int D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D11_DS_INPUT_CONTROL_POINT_REGISTER_COUNT = ( 32 );
        public const int D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READS_PER_INST = ( 2 );
        public const int D3D11_DS_INPUT_CONTROL_POINT_REGISTER_READ_PORTS = ( 1 );
        public const int D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENTS = ( 3 );
        public const int D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_COUNT = ( 1 );
        public const int D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READS_PER_INST = ( 2 );
        public const int D3D11_DS_INPUT_DOMAIN_POINT_REGISTER_READ_PORTS = ( 1 );
        public const int D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = ( 4 );
        public const int D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_COUNT = ( 32 );
        public const int D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = ( 2 );
        public const int D3D11_DS_INPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = ( 1 );
        public const int D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = ( 1 );
        public const int D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = ( 1 );
        public const int D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = ( 2 );
        public const int D3D11_DS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = ( 1 );
        public const int D3D11_DS_OUTPUT_REGISTER_COMPONENTS = ( 4 );
        public const int D3D11_DS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D11_DS_OUTPUT_REGISTER_COUNT = ( 32 );
        public const double D3D11_FLOAT16_FUSED_TOLERANCE_IN_ULP = ( 0.6 );
        public const float D3D11_FLOAT32_MAX = ( 3.402823466e+38f );
        public const float D3D11_FLOAT32_TO_INTEGER_TOLERANCE_IN_ULP = ( 0.6f );
        public const float D3D11_FLOAT_TO_SRGB_EXPONENT_DENOMINATOR = ( 2.4f );
        public const float D3D11_FLOAT_TO_SRGB_EXPONENT_NUMERATOR = ( 1.0f );
        public const float D3D11_FLOAT_TO_SRGB_OFFSET = ( 0.055f );
        public const float D3D11_FLOAT_TO_SRGB_SCALE_1 = ( 12.92f );
        public const float D3D11_FLOAT_TO_SRGB_SCALE_2 = ( 1.055f );
        public const float D3D11_FLOAT_TO_SRGB_THRESHOLD = ( 0.0031308f );
        public const float D3D11_FTOI_INSTRUCTION_MAX_INPUT = ( 2147483647.999f );
        public const float D3D11_FTOI_INSTRUCTION_MIN_INPUT = ( - 2147483648.999f );
        public const float D3D11_FTOU_INSTRUCTION_MAX_INPUT = ( 4294967295.999f );
        public const float D3D11_FTOU_INSTRUCTION_MIN_INPUT = ( 0.0f );
        public const int D3D11_GS_INPUT_INSTANCE_ID_READS_PER_INST = ( 2 );
        public const int D3D11_GS_INPUT_INSTANCE_ID_READ_PORTS = ( 1 );
        public const int D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENTS = ( 1 );
        public const int D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D11_GS_INPUT_INSTANCE_ID_REGISTER_COUNT = ( 1 );
        public const int D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENTS = ( 1 );
        public const int D3D11_GS_INPUT_PRIM_CONST_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D11_GS_INPUT_PRIM_CONST_REGISTER_COUNT = ( 1 );
        public const int D3D11_GS_INPUT_PRIM_CONST_REGISTER_READS_PER_INST = ( 2 );
        public const int D3D11_GS_INPUT_PRIM_CONST_REGISTER_READ_PORTS = ( 1 );
        public const int D3D11_GS_INPUT_REGISTER_COMPONENTS = ( 4 );
        public const int D3D11_GS_INPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D11_GS_INPUT_REGISTER_COUNT = ( 32 );
        public const int D3D11_GS_INPUT_REGISTER_READS_PER_INST = ( 2 );
        public const int D3D11_GS_INPUT_REGISTER_READ_PORTS = ( 1 );
        public const int D3D11_GS_INPUT_REGISTER_VERTICES = ( 32 );
        public const int D3D11_GS_MAX_INSTANCE_COUNT = ( 32 );
        public const int D3D11_GS_MAX_OUTPUT_VERTEX_COUNT_ACROSS_INSTANCES = ( 1024 );
        public const int D3D11_GS_OUTPUT_ELEMENTS = ( 32 );
        public const int D3D11_GS_OUTPUT_REGISTER_COMPONENTS = ( 4 );
        public const int D3D11_GS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D11_GS_OUTPUT_REGISTER_COUNT = ( 32 );
        public const int D3D11_HS_CONTROL_POINT_PHASE_INPUT_REGISTER_COUNT = ( 32 );
        public const int D3D11_HS_CONTROL_POINT_PHASE_OUTPUT_REGISTER_COUNT = ( 32 );
        public const int D3D11_HS_CONTROL_POINT_REGISTER_COMPONENTS = ( 4 );
        public const int D3D11_HS_CONTROL_POINT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D11_HS_CONTROL_POINT_REGISTER_READS_PER_INST = ( 2 );
        public const int D3D11_HS_CONTROL_POINT_REGISTER_READ_PORTS = ( 1 );
        public const float D3D11_HS_FORK_PHASE_INSTANCE_COUNT_UPPER_BOUND = ( 0xffffffff );
        public const int D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENTS = ( 1 );
        public const int D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_COUNT = ( 1 );
        public const int D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READS_PER_INST = ( 2 );
        public const int D3D11_HS_INPUT_FORK_INSTANCE_ID_REGISTER_READ_PORTS = ( 1 );
        public const int D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENTS = ( 1 );
        public const int D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_COUNT = ( 1 );
        public const int D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READS_PER_INST = ( 2 );
        public const int D3D11_HS_INPUT_JOIN_INSTANCE_ID_REGISTER_READ_PORTS = ( 1 );
        public const int D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENTS = ( 1 );
        public const int D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_COUNT = ( 1 );
        public const int D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READS_PER_INST = ( 2 );
        public const int D3D11_HS_INPUT_PRIMITIVE_ID_REGISTER_READ_PORTS = ( 1 );
        public const float D3D11_HS_JOIN_PHASE_INSTANCE_COUNT_UPPER_BOUND = ( 0xffffffff );
        public const float D3D11_HS_MAXTESSFACTOR_LOWER_BOUND = ( 1.0f );
        public const float D3D11_HS_MAXTESSFACTOR_UPPER_BOUND = ( 64.0f );
        public const int D3D11_HS_OUTPUT_CONTROL_POINTS_MAX_TOTAL_SCALARS = ( 3968 );
        public const int D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENTS = ( 1 );
        public const int D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_COUNT = ( 1 );
        public const int D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READS_PER_INST = ( 2 );
        public const int D3D11_HS_OUTPUT_CONTROL_POINT_ID_REGISTER_READ_PORTS = ( 1 );
        public const int D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENTS = ( 4 );
        public const int D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_COUNT = ( 32 );
        public const int D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READS_PER_INST = ( 2 );
        public const int D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_READ_PORTS = ( 1 );
        public const int D3D11_HS_OUTPUT_PATCH_CONSTANT_REGISTER_SCALAR_COMPONENTS = ( 128 );
        public const int D3D11_IA_DEFAULT_INDEX_BUFFER_OFFSET_IN_BYTES = ( 0 );
        public const int D3D11_IA_DEFAULT_PRIMITIVE_TOPOLOGY = ( 0 );
        public const int D3D11_IA_DEFAULT_VERTEX_BUFFER_OFFSET_IN_BYTES = ( 0 );
        public const int D3D11_IA_INDEX_INPUT_RESOURCE_SLOT_COUNT = ( 1 );
        public const int D3D11_IA_INSTANCE_ID_BIT_COUNT = ( 32 );
        public const int D3D11_IA_INTEGER_ARITHMETIC_BIT_COUNT = ( 32 );
        public const int D3D11_IA_PATCH_MAX_CONTROL_POINT_COUNT = ( 32 );
        public const int D3D11_IA_PRIMITIVE_ID_BIT_COUNT = ( 32 );
        public const int D3D11_IA_VERTEX_ID_BIT_COUNT = ( 32 );
        public const int D3D11_IA_VERTEX_INPUT_RESOURCE_SLOT_COUNT = ( 32 );
        public const int D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENTS_COMPONENTS = ( 128 );
        public const int D3D11_IA_VERTEX_INPUT_STRUCTURE_ELEMENT_COUNT = ( 32 );
        public const float D3D11_INTEGER_DIVIDE_BY_ZERO_QUOTIENT = ( 0xffffffff );
        public const float D3D11_INTEGER_DIVIDE_BY_ZERO_REMAINDER = ( 0xffffffff );
        public const float D3D11_KEEP_RENDER_TARGETS_AND_DEPTH_STENCIL = ( 0xffffffff );
        public const float D3D11_KEEP_UNORDERED_ACCESS_VIEWS = ( 0xffffffff );
        public const float D3D11_LINEAR_GAMMA = ( 1.0f );
        public const int D3D11_MAJOR_VERSION = ( 11 );
        public const float D3D11_MAX_BORDER_COLOR_COMPONENT = ( 1.0f );
        public const float D3D11_MAX_DEPTH = ( 1.0f );
        public const int D3D11_MAX_MAXANISOTROPY = ( 16 );
        public const int D3D11_MAX_MULTISAMPLE_SAMPLE_COUNT = ( 32 );
        public const float D3D11_MAX_POSITION_VALUE = ( 3.402823466e+34f );
        public const int D3D11_MAX_TEXTURE_DIMENSION_2_TO_EXP = ( 17 );
        public const int D3D11_MINOR_VERSION = ( 0 );
        public const float D3D11_MIN_BORDER_COLOR_COMPONENT = ( 0.0f );
        public const float D3D11_MIN_DEPTH = ( 0.0f );
        public const int D3D11_MIN_MAXANISOTROPY = ( 0 );
        public const float D3D11_MIP_LOD_BIAS_MAX = ( 15.99f );
        public const float D3D11_MIP_LOD_BIAS_MIN = ( - 16.0f );
        public const int D3D11_MIP_LOD_FRACTIONAL_BIT_COUNT = ( 8 );
        public const int D3D11_MIP_LOD_RANGE_BIT_COUNT = ( 8 );
        public const float D3D11_MULTISAMPLE_ANTIALIAS_LINE_WIDTH = ( 1.4f );
        public const int D3D11_NONSAMPLE_FETCH_OUT_OF_RANGE_ACCESS_RESULT = ( 0 );
        public const int D3D11_PIXEL_ADDRESS_RANGE_BIT_COUNT = ( 15 );
        public const int D3D11_PRE_SCISSOR_PIXEL_ADDRESS_RANGE_BIT_COUNT = ( 16 );
        public const int D3D11_PS_CS_UAV_REGISTER_COMPONENTS = ( 1 );
        public const int D3D11_PS_CS_UAV_REGISTER_COUNT = ( 8 );
        public const int D3D11_PS_CS_UAV_REGISTER_READS_PER_INST = ( 1 );
        public const int D3D11_PS_CS_UAV_REGISTER_READ_PORTS = ( 1 );
        public const float D3D11_PS_FRONTFACING_DEFAULT_VALUE = ( 0xffffffff );
        public const int D3D11_PS_FRONTFACING_FALSE_VALUE = ( 0 );
        public const float D3D11_PS_FRONTFACING_TRUE_VALUE = ( 0xffffffff );
        public const int D3D11_PS_INPUT_REGISTER_COMPONENTS = ( 4 );
        public const int D3D11_PS_INPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D11_PS_INPUT_REGISTER_COUNT = ( 32 );
        public const int D3D11_PS_INPUT_REGISTER_READS_PER_INST = ( 2 );
        public const int D3D11_PS_INPUT_REGISTER_READ_PORTS = ( 1 );
        public const float D3D11_PS_LEGACY_PIXEL_CENTER_FRACTIONAL_COMPONENT = ( 0.0f );
        public const int D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENTS = ( 1 );
        public const int D3D11_PS_OUTPUT_DEPTH_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D11_PS_OUTPUT_DEPTH_REGISTER_COUNT = ( 1 );
        public const int D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENTS = ( 1 );
        public const int D3D11_PS_OUTPUT_MASK_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D11_PS_OUTPUT_MASK_REGISTER_COUNT = ( 1 );
        public const int D3D11_PS_OUTPUT_REGISTER_COMPONENTS = ( 4 );
        public const int D3D11_PS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D11_PS_OUTPUT_REGISTER_COUNT = ( 8 );
        public const float D3D11_PS_PIXEL_CENTER_FRACTIONAL_COMPONENT = ( 0.5f );
        public const int D3D11_RAW_UAV_SRV_BYTE_ALIGNMENT = ( 16 );
        public const int D3D11_REQ_BLEND_OBJECT_COUNT_PER_DEVICE = ( 4096 );
        public const int D3D11_REQ_BUFFER_RESOURCE_TEXEL_COUNT_2_TO_EXP = ( 27 );
        public const int D3D11_REQ_CONSTANT_BUFFER_ELEMENT_COUNT = ( 4096 );
        public const int D3D11_REQ_DEPTH_STENCIL_OBJECT_COUNT_PER_DEVICE = ( 4096 );
        public const int D3D11_REQ_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = ( 32 );
        public const int D3D11_REQ_DRAW_VERTEX_COUNT_2_TO_EXP = ( 32 );
        public const int D3D11_REQ_FILTERING_HW_ADDRESSABLE_RESOURCE_DIMENSION = ( 16384 );
        public const int D3D11_REQ_GS_INVOCATION_32BIT_OUTPUT_COMPONENT_LIMIT = ( 1024 );
        public const int D3D11_REQ_IMMEDIATE_CONSTANT_BUFFER_ELEMENT_COUNT = ( 4096 );
        public const int D3D11_REQ_MAXANISOTROPY = ( 16 );
        public const int D3D11_REQ_MIP_LEVELS = ( 15 );
        public const int D3D11_REQ_MULTI_ELEMENT_STRUCTURE_SIZE_IN_BYTES = ( 2048 );
        public const int D3D11_REQ_RASTERIZER_OBJECT_COUNT_PER_DEVICE = ( 4096 );
        public const int D3D11_REQ_RENDER_TO_BUFFER_WINDOW_WIDTH = ( 16384 );
        public const int D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_A_TERM = ( 128 );
        public const float D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_B_TERM = ( 0.25f );
        public const int D3D11_REQ_RESOURCE_SIZE_IN_MEGABYTES_EXPRESSION_C_TERM = ( 2048 );
        public const int D3D11_REQ_RESOURCE_VIEW_COUNT_PER_DEVICE_2_TO_EXP = ( 20 );
        public const int D3D11_REQ_SAMPLER_OBJECT_COUNT_PER_DEVICE = ( 4096 );
        public const int D3D11_REQ_TEXTURE1D_ARRAY_AXIS_DIMENSION = ( 2048 );
        public const int D3D11_REQ_TEXTURE1D_U_DIMENSION = ( 16384 );
        public const int D3D11_REQ_TEXTURE2D_ARRAY_AXIS_DIMENSION = ( 2048 );
        public const int D3D11_REQ_TEXTURE2D_U_OR_V_DIMENSION = ( 16384 );
        public const int D3D11_REQ_TEXTURE3D_U_V_OR_W_DIMENSION = ( 2048 );
        public const int D3D11_REQ_TEXTURECUBE_DIMENSION = ( 16384 );
        public const int D3D11_RESINFO_INSTRUCTION_MISSING_COMPONENT_RETVAL = ( 0 );
        public const int D3D11_SHADER_MAJOR_VERSION = ( 5 );
        public const int D3D11_SHADER_MAX_INSTANCES = ( 65535 );
        public const int D3D11_SHADER_MAX_INTERFACES = ( 253 );
        public const int D3D11_SHADER_MAX_INTERFACE_CALL_SITES = ( 4096 );
        public const int D3D11_SHADER_MAX_TYPES = ( 65535 );
        public const int D3D11_SHADER_MINOR_VERSION = ( 0 );
        public const int D3D11_SHIFT_INSTRUCTION_PAD_VALUE = ( 0 );
        public const int D3D11_SHIFT_INSTRUCTION_SHIFT_VALUE_BIT_COUNT = ( 5 );
        public const int D3D11_SIMULTANEOUS_RENDER_TARGET_COUNT = ( 8 );
        public const int D3D11_SO_BUFFER_MAX_STRIDE_IN_BYTES = ( 2048 );
        public const int D3D11_SO_BUFFER_MAX_WRITE_WINDOW_IN_BYTES = ( 512 );
        public const int D3D11_SO_BUFFER_SLOT_COUNT = ( 4 );
        public const float D3D11_SO_DDI_REGISTER_INDEX_DENOTING_GAP = ( 0xffffffff );
        public const float D3D11_SO_NO_RASTERIZED_STREAM = ( 0xffffffff );
        public const int D3D11_SO_OUTPUT_COMPONENT_COUNT = ( 128 );
        public const int D3D11_SO_STREAM_COUNT = ( 4 );
        public const int D3D11_SPEC_DATE_DAY = ( 16 );
        public const int D3D11_SPEC_DATE_MONTH = ( 05 );
        public const int D3D11_SPEC_DATE_YEAR = ( 2011 );
        public const double D3D11_SPEC_VERSION = ( 1.07 );
        public const float D3D11_SRGB_GAMMA = ( 2.2f );
        public const float D3D11_SRGB_TO_FLOAT_DENOMINATOR_1 = ( 12.92f );
        public const float D3D11_SRGB_TO_FLOAT_DENOMINATOR_2 = ( 1.055f );
        public const float D3D11_SRGB_TO_FLOAT_EXPONENT = ( 2.4f );
        public const float D3D11_SRGB_TO_FLOAT_OFFSET = ( 0.055f );
        public const float D3D11_SRGB_TO_FLOAT_THRESHOLD = ( 0.04045f );
        public const float D3D11_SRGB_TO_FLOAT_TOLERANCE_IN_ULP = ( 0.5f );
        public const int D3D11_STANDARD_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D11_STANDARD_COMPONENT_BIT_COUNT_DOUBLED = ( 64 );
        public const int D3D11_STANDARD_MAXIMUM_ELEMENT_ALIGNMENT_BYTE_MULTIPLE = ( 4 );
        public const int D3D11_STANDARD_PIXEL_COMPONENT_COUNT = ( 128 );
        public const int D3D11_STANDARD_PIXEL_ELEMENT_COUNT = ( 32 );
        public const int D3D11_STANDARD_VECTOR_SIZE = ( 4 );
        public const int D3D11_STANDARD_VERTEX_ELEMENT_COUNT = ( 32 );
        public const int D3D11_STANDARD_VERTEX_TOTAL_COMPONENT_COUNT = ( 64 );
        public const int D3D11_SUBPIXEL_FRACTIONAL_BIT_COUNT = ( 8 );
        public const int D3D11_SUBTEXEL_FRACTIONAL_BIT_COUNT = ( 8 );
        public const int D3D11_TESSELLATOR_MAX_EVEN_TESSELLATION_FACTOR = ( 64 );
        public const int D3D11_TESSELLATOR_MAX_ISOLINE_DENSITY_TESSELLATION_FACTOR = ( 64 );
        public const int D3D11_TESSELLATOR_MAX_ODD_TESSELLATION_FACTOR = ( 63 );
        public const int D3D11_TESSELLATOR_MAX_TESSELLATION_FACTOR = ( 64 );
        public const int D3D11_TESSELLATOR_MIN_EVEN_TESSELLATION_FACTOR = ( 2 );
        public const int D3D11_TESSELLATOR_MIN_ISOLINE_DENSITY_TESSELLATION_FACTOR = ( 1 );
        public const int D3D11_TESSELLATOR_MIN_ODD_TESSELLATION_FACTOR = ( 1 );
        public const int D3D11_TEXEL_ADDRESS_RANGE_BIT_COUNT = ( 16 );
        public const int D3D11_UNBOUND_MEMORY_ACCESS_RESULT = ( 0 );
        public const int D3D11_VIEWPORT_AND_SCISSORRECT_MAX_INDEX = ( 15 );
        public const int D3D11_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE = ( 16 );
        public const int D3D11_VIEWPORT_BOUNDS_MAX = ( 32767 );
        public const int D3D11_VIEWPORT_BOUNDS_MIN = ( - 32768 );
        public const int D3D11_VS_INPUT_REGISTER_COMPONENTS = ( 4 );
        public const int D3D11_VS_INPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D11_VS_INPUT_REGISTER_COUNT = ( 32 );
        public const int D3D11_VS_INPUT_REGISTER_READS_PER_INST = ( 2 );
        public const int D3D11_VS_INPUT_REGISTER_READ_PORTS = ( 1 );
        public const int D3D11_VS_OUTPUT_REGISTER_COMPONENTS = ( 4 );
        public const int D3D11_VS_OUTPUT_REGISTER_COMPONENT_BIT_COUNT = ( 32 );
        public const int D3D11_VS_OUTPUT_REGISTER_COUNT = ( 32 );
        public const int D3D11_WHQL_CONTEXT_COUNT_FOR_RESOURCE_LIMIT = ( 10 );
        public const int D3D11_WHQL_DRAWINDEXED_INDEX_COUNT_2_TO_EXP = ( 25 );
        public const int D3D11_WHQL_DRAW_VERTEX_COUNT_2_TO_EXP = ( 25 );
        public const int D3D11_1_UAV_SLOT_COUNT = ( 64 );
        public const int D3D11_2_TILED_RESOURCE_TILE_SIZE_IN_BYTES = ( 65536 );
        public const int D3D11_4_VIDEO_DECODER_MAX_HISTOGRAM_COMPONENTS = ( 4 );
        public const int D3D11_4_VIDEO_DECODER_HISTOGRAM_OFFSET_ALIGNMENT = ( 256 );
        public const int _FACD3D11 = ( 0x87c );
        public const int _FACD3D11DEBUG = ( ( _FACD3D11 + 1 ) );
        public const float D3D11_APPEND_ALIGNED_ELEMENT = ( 0xffffffff );
        public const int D3D11_FILTER_REDUCTION_TYPE_MASK = ( 0x3 );
        public const int D3D11_FILTER_REDUCTION_TYPE_SHIFT = ( 7 );
        public const int D3D11_FILTER_TYPE_MASK = ( 0x3 );
        public const int D3D11_MIN_FILTER_SHIFT = ( 4 );
        public const int D3D11_MAG_FILTER_SHIFT = ( 2 );
        public const int D3D11_MIP_FILTER_SHIFT = ( 0 );
        public const int D3D11_COMPARISON_FILTERING_BIT = ( 0x80 );
        public const int D3D11_ANISOTROPIC_FILTERING_BIT = ( 0x40 );
        public const int D3D11_SDK_VERSION = ( 7 );
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct D3D11_SHADER_RESOURCE_VIEW_DESC__anonymous_32
    {
        [FieldOffset(0)]
        public D3D11_BUFFER_SRV Buffer;
        [FieldOffset(0)]
        public D3D11_TEX1D_SRV Texture1D;
        [FieldOffset(0)]
        public D3D11_TEX1D_ARRAY_SRV Texture1DArray;
        [FieldOffset(0)]
        public D3D11_TEX2D_SRV Texture2D;
        [FieldOffset(0)]
        public D3D11_TEX2D_ARRAY_SRV Texture2DArray;
        [FieldOffset(0)]
        public D3D11_TEX2DMS_SRV Texture2DMS;
        [FieldOffset(0)]
        public D3D11_TEX2DMS_ARRAY_SRV Texture2DMSArray;
        [FieldOffset(0)]
        public D3D11_TEX3D_SRV Texture3D;
        [FieldOffset(0)]
        public D3D11_TEXCUBE_SRV TextureCube;
        [FieldOffset(0)]
        public D3D11_TEXCUBE_ARRAY_SRV TextureCubeArray;
        [FieldOffset(0)]
        public D3D11_BUFFEREX_SRV BufferEx;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct D3D11_BUFFER_SRV__anonymous_35
    {
        [FieldOffset(0)]
        public uint FirstElement;
        [FieldOffset(0)]
        public uint ElementOffset;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct D3D11_BUFFER_SRV__anonymous_36
    {
        [FieldOffset(0)]
        public uint NumElements;
        [FieldOffset(0)]
        public uint ElementWidth;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct D3D11_UNORDERED_ACCESS_VIEW_DESC__anonymous_65
    {
        [FieldOffset(0)]
        public D3D11_BUFFER_UAV Buffer;
        [FieldOffset(0)]
        public D3D11_TEX1D_UAV Texture1D;
        [FieldOffset(0)]
        public D3D11_TEX1D_ARRAY_UAV Texture1DArray;
        [FieldOffset(0)]
        public D3D11_TEX2D_UAV Texture2D;
        [FieldOffset(0)]
        public D3D11_TEX2D_ARRAY_UAV Texture2DArray;
        [FieldOffset(0)]
        public D3D11_TEX3D_UAV Texture3D;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct D3D11_RENDER_TARGET_VIEW_DESC__anonymous_84
    {
        [FieldOffset(0)]
        public D3D11_BUFFER_RTV Buffer;
        [FieldOffset(0)]
        public D3D11_TEX1D_RTV Texture1D;
        [FieldOffset(0)]
        public D3D11_TEX1D_ARRAY_RTV Texture1DArray;
        [FieldOffset(0)]
        public D3D11_TEX2D_RTV Texture2D;
        [FieldOffset(0)]
        public D3D11_TEX2D_ARRAY_RTV Texture2DArray;
        [FieldOffset(0)]
        public D3D11_TEX2DMS_RTV Texture2DMS;
        [FieldOffset(0)]
        public D3D11_TEX2DMS_ARRAY_RTV Texture2DMSArray;
        [FieldOffset(0)]
        public D3D11_TEX3D_RTV Texture3D;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct D3D11_BUFFER_RTV__anonymous_87
    {
        [FieldOffset(0)]
        public uint FirstElement;
        [FieldOffset(0)]
        public uint ElementOffset;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct D3D11_BUFFER_RTV__anonymous_88
    {
        [FieldOffset(0)]
        public uint NumElements;
        [FieldOffset(0)]
        public uint ElementWidth;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct D3D11_DEPTH_STENCIL_VIEW_DESC__anonymous_109
    {
        [FieldOffset(0)]
        public D3D11_TEX1D_DSV Texture1D;
        [FieldOffset(0)]
        public D3D11_TEX1D_ARRAY_DSV Texture1DArray;
        [FieldOffset(0)]
        public D3D11_TEX2D_DSV Texture2D;
        [FieldOffset(0)]
        public D3D11_TEX2D_ARRAY_DSV Texture2DArray;
        [FieldOffset(0)]
        public D3D11_TEX2DMS_DSV Texture2DMS;
        [FieldOffset(0)]
        public D3D11_TEX2DMS_ARRAY_DSV Texture2DMSArray;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC__anonymous_261
    {
        [FieldOffset(0)]
        public D3D11_TEX2D_VDOV Texture2D;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC__anonymous_270
    {
        [FieldOffset(0)]
        public D3D11_TEX2D_VPIV Texture2D;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC__anonymous_279
    {
        [FieldOffset(0)]
        public D3D11_TEX2D_VPOV Texture2D;
        [FieldOffset(0)]
        public D3D11_TEX2D_ARRAY_VPOV Texture2DArray;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct D3D11_VIDEO_COLOR__anonymous_297
    {
        [FieldOffset(0)]
        public D3D11_VIDEO_COLOR_YCbCrA YCbCr;
        [FieldOffset(0)]
        public D3D11_VIDEO_COLOR_RGBA RGBA;
    }
    public class ID3D11DeviceChild: IUnknown
    {
        static /*readonly*/ Guid s_uuid = new Guid("1841e5c8-16b0-489b-bcc8-44cfb0d5deae");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public void GetDevice(
            ref ID3D11Device ppDevice
        ){
            var fp = GetFunctionPointer(3);
            var callback = (GetDeviceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDeviceFunc));
            ppDevice = new ID3D11Device();
            callback(Self, ref ppDevice.PtrForNew);
        }
        delegate void GetDeviceFunc(IntPtr self, ref IntPtr ppDevice);

        public HRESULT GetPrivateData(
            ref Guid guid,
            ref uint pDataSize,
            IntPtr pData
        ){
            var fp = GetFunctionPointer(4);
            var callback = (GetPrivateDataFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPrivateDataFunc));
            
            return callback(Self, ref guid, ref pDataSize, pData);
        }
        delegate HRESULT GetPrivateDataFunc(IntPtr self, ref Guid guid, ref uint pDataSize, IntPtr pData);

        public HRESULT SetPrivateData(
            ref Guid guid,
            uint DataSize,
            IntPtr pData
        ){
            var fp = GetFunctionPointer(5);
            var callback = (SetPrivateDataFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetPrivateDataFunc));
            
            return callback(Self, ref guid, DataSize, pData);
        }
        delegate HRESULT SetPrivateDataFunc(IntPtr self, ref Guid guid, uint DataSize, IntPtr pData);

        public HRESULT SetPrivateDataInterface(
            ref Guid guid,
            IUnknown pData
        ){
            var fp = GetFunctionPointer(6);
            var callback = (SetPrivateDataInterfaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetPrivateDataInterfaceFunc));
            
            return callback(Self, ref guid, pData.Ptr);
        }
        delegate HRESULT SetPrivateDataInterfaceFunc(IntPtr self, ref Guid guid, IntPtr pData);

    }
    public class ID3D11Device: IUnknown
    {
        static /*readonly*/ Guid s_uuid = new Guid("db6f6ddb-ac77-4e88-8253-819df9bbf140");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public HRESULT CreateBuffer(
            ref D3D11_BUFFER_DESC pDesc,
            ref D3D11_SUBRESOURCE_DATA pInitialData,
            ref ID3D11Buffer ppBuffer
        ){
            var fp = GetFunctionPointer(3);
            var callback = (CreateBufferFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateBufferFunc));
            ppBuffer = new ID3D11Buffer();
            return callback(Self, ref pDesc, ref pInitialData, ref ppBuffer.PtrForNew);
        }
        delegate HRESULT CreateBufferFunc(IntPtr self, ref D3D11_BUFFER_DESC pDesc, ref D3D11_SUBRESOURCE_DATA pInitialData, ref IntPtr ppBuffer);

        public HRESULT CreateTexture1D(
            ref D3D11_TEXTURE1D_DESC pDesc,
            ref D3D11_SUBRESOURCE_DATA pInitialData,
            ref ID3D11Texture1D ppTexture1D
        ){
            var fp = GetFunctionPointer(4);
            var callback = (CreateTexture1DFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateTexture1DFunc));
            ppTexture1D = new ID3D11Texture1D();
            return callback(Self, ref pDesc, ref pInitialData, ref ppTexture1D.PtrForNew);
        }
        delegate HRESULT CreateTexture1DFunc(IntPtr self, ref D3D11_TEXTURE1D_DESC pDesc, ref D3D11_SUBRESOURCE_DATA pInitialData, ref IntPtr ppTexture1D);

        public HRESULT CreateTexture2D(
            ref D3D11_TEXTURE2D_DESC pDesc,
            ref D3D11_SUBRESOURCE_DATA pInitialData,
            ref ID3D11Texture2D ppTexture2D
        ){
            var fp = GetFunctionPointer(5);
            var callback = (CreateTexture2DFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateTexture2DFunc));
            ppTexture2D = new ID3D11Texture2D();
            return callback(Self, ref pDesc, ref pInitialData, ref ppTexture2D.PtrForNew);
        }
        delegate HRESULT CreateTexture2DFunc(IntPtr self, ref D3D11_TEXTURE2D_DESC pDesc, ref D3D11_SUBRESOURCE_DATA pInitialData, ref IntPtr ppTexture2D);

        public HRESULT CreateTexture3D(
            ref D3D11_TEXTURE3D_DESC pDesc,
            ref D3D11_SUBRESOURCE_DATA pInitialData,
            ref ID3D11Texture3D ppTexture3D
        ){
            var fp = GetFunctionPointer(6);
            var callback = (CreateTexture3DFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateTexture3DFunc));
            ppTexture3D = new ID3D11Texture3D();
            return callback(Self, ref pDesc, ref pInitialData, ref ppTexture3D.PtrForNew);
        }
        delegate HRESULT CreateTexture3DFunc(IntPtr self, ref D3D11_TEXTURE3D_DESC pDesc, ref D3D11_SUBRESOURCE_DATA pInitialData, ref IntPtr ppTexture3D);

        public HRESULT CreateShaderResourceView(
            ID3D11Resource pResource,
            ref D3D11_SHADER_RESOURCE_VIEW_DESC pDesc,
            ref ID3D11ShaderResourceView ppSRView
        ){
            var fp = GetFunctionPointer(7);
            var callback = (CreateShaderResourceViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateShaderResourceViewFunc));
            ppSRView = new ID3D11ShaderResourceView();
            return callback(Self, pResource.Ptr, ref pDesc, ref ppSRView.PtrForNew);
        }
        delegate HRESULT CreateShaderResourceViewFunc(IntPtr self, IntPtr pResource, ref D3D11_SHADER_RESOURCE_VIEW_DESC pDesc, ref IntPtr ppSRView);

        public HRESULT CreateUnorderedAccessView(
            ID3D11Resource pResource,
            ref D3D11_UNORDERED_ACCESS_VIEW_DESC pDesc,
            ref ID3D11UnorderedAccessView ppUAView
        ){
            var fp = GetFunctionPointer(8);
            var callback = (CreateUnorderedAccessViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateUnorderedAccessViewFunc));
            ppUAView = new ID3D11UnorderedAccessView();
            return callback(Self, pResource.Ptr, ref pDesc, ref ppUAView.PtrForNew);
        }
        delegate HRESULT CreateUnorderedAccessViewFunc(IntPtr self, IntPtr pResource, ref D3D11_UNORDERED_ACCESS_VIEW_DESC pDesc, ref IntPtr ppUAView);

        public HRESULT CreateRenderTargetView(
            ID3D11Resource pResource,
            ref D3D11_RENDER_TARGET_VIEW_DESC pDesc,
            ref ID3D11RenderTargetView ppRTView
        ){
            var fp = GetFunctionPointer(9);
            var callback = (CreateRenderTargetViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateRenderTargetViewFunc));
            ppRTView = new ID3D11RenderTargetView();
            return callback(Self, pResource.Ptr, ref pDesc, ref ppRTView.PtrForNew);
        }
        delegate HRESULT CreateRenderTargetViewFunc(IntPtr self, IntPtr pResource, ref D3D11_RENDER_TARGET_VIEW_DESC pDesc, ref IntPtr ppRTView);

        public HRESULT CreateDepthStencilView(
            ID3D11Resource pResource,
            ref D3D11_DEPTH_STENCIL_VIEW_DESC pDesc,
            ref ID3D11DepthStencilView ppDepthStencilView
        ){
            var fp = GetFunctionPointer(10);
            var callback = (CreateDepthStencilViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateDepthStencilViewFunc));
            ppDepthStencilView = new ID3D11DepthStencilView();
            return callback(Self, pResource.Ptr, ref pDesc, ref ppDepthStencilView.PtrForNew);
        }
        delegate HRESULT CreateDepthStencilViewFunc(IntPtr self, IntPtr pResource, ref D3D11_DEPTH_STENCIL_VIEW_DESC pDesc, ref IntPtr ppDepthStencilView);

        public HRESULT CreateInputLayout(
            ref D3D11_INPUT_ELEMENT_DESC pInputElementDescs,
            uint NumElements,
            IntPtr pShaderBytecodeWithInputSignature,
            SIZE_T BytecodeLength,
            ref ID3D11InputLayout ppInputLayout
        ){
            var fp = GetFunctionPointer(11);
            var callback = (CreateInputLayoutFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateInputLayoutFunc));
            ppInputLayout = new ID3D11InputLayout();
            return callback(Self, ref pInputElementDescs, NumElements, pShaderBytecodeWithInputSignature, BytecodeLength, ref ppInputLayout.PtrForNew);
        }
        delegate HRESULT CreateInputLayoutFunc(IntPtr self, ref D3D11_INPUT_ELEMENT_DESC pInputElementDescs, uint NumElements, IntPtr pShaderBytecodeWithInputSignature, SIZE_T BytecodeLength, ref IntPtr ppInputLayout);

        public HRESULT CreateVertexShader(
            IntPtr pShaderBytecode,
            SIZE_T BytecodeLength,
            ID3D11ClassLinkage pClassLinkage,
            ref ID3D11VertexShader ppVertexShader
        ){
            var fp = GetFunctionPointer(12);
            var callback = (CreateVertexShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateVertexShaderFunc));
            ppVertexShader = new ID3D11VertexShader();
            return callback(Self, pShaderBytecode, BytecodeLength, pClassLinkage.Ptr, ref ppVertexShader.PtrForNew);
        }
        delegate HRESULT CreateVertexShaderFunc(IntPtr self, IntPtr pShaderBytecode, SIZE_T BytecodeLength, IntPtr pClassLinkage, ref IntPtr ppVertexShader);

        public HRESULT CreateGeometryShader(
            IntPtr pShaderBytecode,
            SIZE_T BytecodeLength,
            ID3D11ClassLinkage pClassLinkage,
            ref ID3D11GeometryShader ppGeometryShader
        ){
            var fp = GetFunctionPointer(13);
            var callback = (CreateGeometryShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateGeometryShaderFunc));
            ppGeometryShader = new ID3D11GeometryShader();
            return callback(Self, pShaderBytecode, BytecodeLength, pClassLinkage.Ptr, ref ppGeometryShader.PtrForNew);
        }
        delegate HRESULT CreateGeometryShaderFunc(IntPtr self, IntPtr pShaderBytecode, SIZE_T BytecodeLength, IntPtr pClassLinkage, ref IntPtr ppGeometryShader);

        public HRESULT CreateGeometryShaderWithStreamOutput(
            IntPtr pShaderBytecode,
            SIZE_T BytecodeLength,
            ref D3D11_SO_DECLARATION_ENTRY pSODeclaration,
            uint NumEntries,
            ref uint pBufferStrides,
            uint NumStrides,
            uint RasterizedStream,
            ID3D11ClassLinkage pClassLinkage,
            ref ID3D11GeometryShader ppGeometryShader
        ){
            var fp = GetFunctionPointer(14);
            var callback = (CreateGeometryShaderWithStreamOutputFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateGeometryShaderWithStreamOutputFunc));
            ppGeometryShader = new ID3D11GeometryShader();
            return callback(Self, pShaderBytecode, BytecodeLength, ref pSODeclaration, NumEntries, ref pBufferStrides, NumStrides, RasterizedStream, pClassLinkage.Ptr, ref ppGeometryShader.PtrForNew);
        }
        delegate HRESULT CreateGeometryShaderWithStreamOutputFunc(IntPtr self, IntPtr pShaderBytecode, SIZE_T BytecodeLength, ref D3D11_SO_DECLARATION_ENTRY pSODeclaration, uint NumEntries, ref uint pBufferStrides, uint NumStrides, uint RasterizedStream, IntPtr pClassLinkage, ref IntPtr ppGeometryShader);

        public HRESULT CreatePixelShader(
            IntPtr pShaderBytecode,
            SIZE_T BytecodeLength,
            ID3D11ClassLinkage pClassLinkage,
            ref ID3D11PixelShader ppPixelShader
        ){
            var fp = GetFunctionPointer(15);
            var callback = (CreatePixelShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreatePixelShaderFunc));
            ppPixelShader = new ID3D11PixelShader();
            return callback(Self, pShaderBytecode, BytecodeLength, pClassLinkage.Ptr, ref ppPixelShader.PtrForNew);
        }
        delegate HRESULT CreatePixelShaderFunc(IntPtr self, IntPtr pShaderBytecode, SIZE_T BytecodeLength, IntPtr pClassLinkage, ref IntPtr ppPixelShader);

        public HRESULT CreateHullShader(
            IntPtr pShaderBytecode,
            SIZE_T BytecodeLength,
            ID3D11ClassLinkage pClassLinkage,
            ref ID3D11HullShader ppHullShader
        ){
            var fp = GetFunctionPointer(16);
            var callback = (CreateHullShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateHullShaderFunc));
            ppHullShader = new ID3D11HullShader();
            return callback(Self, pShaderBytecode, BytecodeLength, pClassLinkage.Ptr, ref ppHullShader.PtrForNew);
        }
        delegate HRESULT CreateHullShaderFunc(IntPtr self, IntPtr pShaderBytecode, SIZE_T BytecodeLength, IntPtr pClassLinkage, ref IntPtr ppHullShader);

        public HRESULT CreateDomainShader(
            IntPtr pShaderBytecode,
            SIZE_T BytecodeLength,
            ID3D11ClassLinkage pClassLinkage,
            ref ID3D11DomainShader ppDomainShader
        ){
            var fp = GetFunctionPointer(17);
            var callback = (CreateDomainShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateDomainShaderFunc));
            ppDomainShader = new ID3D11DomainShader();
            return callback(Self, pShaderBytecode, BytecodeLength, pClassLinkage.Ptr, ref ppDomainShader.PtrForNew);
        }
        delegate HRESULT CreateDomainShaderFunc(IntPtr self, IntPtr pShaderBytecode, SIZE_T BytecodeLength, IntPtr pClassLinkage, ref IntPtr ppDomainShader);

        public HRESULT CreateComputeShader(
            IntPtr pShaderBytecode,
            SIZE_T BytecodeLength,
            ID3D11ClassLinkage pClassLinkage,
            ref ID3D11ComputeShader ppComputeShader
        ){
            var fp = GetFunctionPointer(18);
            var callback = (CreateComputeShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateComputeShaderFunc));
            ppComputeShader = new ID3D11ComputeShader();
            return callback(Self, pShaderBytecode, BytecodeLength, pClassLinkage.Ptr, ref ppComputeShader.PtrForNew);
        }
        delegate HRESULT CreateComputeShaderFunc(IntPtr self, IntPtr pShaderBytecode, SIZE_T BytecodeLength, IntPtr pClassLinkage, ref IntPtr ppComputeShader);

        public HRESULT CreateClassLinkage(
            ref ID3D11ClassLinkage ppLinkage
        ){
            var fp = GetFunctionPointer(19);
            var callback = (CreateClassLinkageFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateClassLinkageFunc));
            ppLinkage = new ID3D11ClassLinkage();
            return callback(Self, ref ppLinkage.PtrForNew);
        }
        delegate HRESULT CreateClassLinkageFunc(IntPtr self, ref IntPtr ppLinkage);

        public HRESULT CreateBlendState(
            ref D3D11_BLEND_DESC pBlendStateDesc,
            ref ID3D11BlendState ppBlendState
        ){
            var fp = GetFunctionPointer(20);
            var callback = (CreateBlendStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateBlendStateFunc));
            ppBlendState = new ID3D11BlendState();
            return callback(Self, ref pBlendStateDesc, ref ppBlendState.PtrForNew);
        }
        delegate HRESULT CreateBlendStateFunc(IntPtr self, ref D3D11_BLEND_DESC pBlendStateDesc, ref IntPtr ppBlendState);

        public HRESULT CreateDepthStencilState(
            ref D3D11_DEPTH_STENCIL_DESC pDepthStencilDesc,
            ref ID3D11DepthStencilState ppDepthStencilState
        ){
            var fp = GetFunctionPointer(21);
            var callback = (CreateDepthStencilStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateDepthStencilStateFunc));
            ppDepthStencilState = new ID3D11DepthStencilState();
            return callback(Self, ref pDepthStencilDesc, ref ppDepthStencilState.PtrForNew);
        }
        delegate HRESULT CreateDepthStencilStateFunc(IntPtr self, ref D3D11_DEPTH_STENCIL_DESC pDepthStencilDesc, ref IntPtr ppDepthStencilState);

        public HRESULT CreateRasterizerState(
            ref D3D11_RASTERIZER_DESC pRasterizerDesc,
            ref ID3D11RasterizerState ppRasterizerState
        ){
            var fp = GetFunctionPointer(22);
            var callback = (CreateRasterizerStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateRasterizerStateFunc));
            ppRasterizerState = new ID3D11RasterizerState();
            return callback(Self, ref pRasterizerDesc, ref ppRasterizerState.PtrForNew);
        }
        delegate HRESULT CreateRasterizerStateFunc(IntPtr self, ref D3D11_RASTERIZER_DESC pRasterizerDesc, ref IntPtr ppRasterizerState);

        public HRESULT CreateSamplerState(
            ref D3D11_SAMPLER_DESC pSamplerDesc,
            ref ID3D11SamplerState ppSamplerState
        ){
            var fp = GetFunctionPointer(23);
            var callback = (CreateSamplerStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateSamplerStateFunc));
            ppSamplerState = new ID3D11SamplerState();
            return callback(Self, ref pSamplerDesc, ref ppSamplerState.PtrForNew);
        }
        delegate HRESULT CreateSamplerStateFunc(IntPtr self, ref D3D11_SAMPLER_DESC pSamplerDesc, ref IntPtr ppSamplerState);

        public HRESULT CreateQuery(
            ref D3D11_QUERY_DESC pQueryDesc,
            ref ID3D11Query ppQuery
        ){
            var fp = GetFunctionPointer(24);
            var callback = (CreateQueryFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateQueryFunc));
            ppQuery = new ID3D11Query();
            return callback(Self, ref pQueryDesc, ref ppQuery.PtrForNew);
        }
        delegate HRESULT CreateQueryFunc(IntPtr self, ref D3D11_QUERY_DESC pQueryDesc, ref IntPtr ppQuery);

        public HRESULT CreatePredicate(
            ref D3D11_QUERY_DESC pPredicateDesc,
            ref ID3D11Predicate ppPredicate
        ){
            var fp = GetFunctionPointer(25);
            var callback = (CreatePredicateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreatePredicateFunc));
            ppPredicate = new ID3D11Predicate();
            return callback(Self, ref pPredicateDesc, ref ppPredicate.PtrForNew);
        }
        delegate HRESULT CreatePredicateFunc(IntPtr self, ref D3D11_QUERY_DESC pPredicateDesc, ref IntPtr ppPredicate);

        public HRESULT CreateCounter(
            ref D3D11_COUNTER_DESC pCounterDesc,
            ref ID3D11Counter ppCounter
        ){
            var fp = GetFunctionPointer(26);
            var callback = (CreateCounterFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateCounterFunc));
            ppCounter = new ID3D11Counter();
            return callback(Self, ref pCounterDesc, ref ppCounter.PtrForNew);
        }
        delegate HRESULT CreateCounterFunc(IntPtr self, ref D3D11_COUNTER_DESC pCounterDesc, ref IntPtr ppCounter);

        public HRESULT CreateDeferredContext(
            uint ContextFlags,
            ref ID3D11DeviceContext ppDeferredContext
        ){
            var fp = GetFunctionPointer(27);
            var callback = (CreateDeferredContextFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateDeferredContextFunc));
            ppDeferredContext = new ID3D11DeviceContext();
            return callback(Self, ContextFlags, ref ppDeferredContext.PtrForNew);
        }
        delegate HRESULT CreateDeferredContextFunc(IntPtr self, uint ContextFlags, ref IntPtr ppDeferredContext);

        public HRESULT OpenSharedResource(
            HANDLE hResource,
            ref Guid ReturnedInterface,
            ref IntPtr ppResource
        ){
            var fp = GetFunctionPointer(28);
            var callback = (OpenSharedResourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OpenSharedResourceFunc));
            
            return callback(Self, hResource, ref ReturnedInterface, ref ppResource);
        }
        delegate HRESULT OpenSharedResourceFunc(IntPtr self, HANDLE hResource, ref Guid ReturnedInterface, ref IntPtr ppResource);

        public HRESULT CheckFormatSupport(
            DXGI_FORMAT Format,
            ref uint pFormatSupport
        ){
            var fp = GetFunctionPointer(29);
            var callback = (CheckFormatSupportFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CheckFormatSupportFunc));
            
            return callback(Self, Format, ref pFormatSupport);
        }
        delegate HRESULT CheckFormatSupportFunc(IntPtr self, DXGI_FORMAT Format, ref uint pFormatSupport);

        public HRESULT CheckMultisampleQualityLevels(
            DXGI_FORMAT Format,
            uint SampleCount,
            ref uint pNumQualityLevels
        ){
            var fp = GetFunctionPointer(30);
            var callback = (CheckMultisampleQualityLevelsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CheckMultisampleQualityLevelsFunc));
            
            return callback(Self, Format, SampleCount, ref pNumQualityLevels);
        }
        delegate HRESULT CheckMultisampleQualityLevelsFunc(IntPtr self, DXGI_FORMAT Format, uint SampleCount, ref uint pNumQualityLevels);

        public void CheckCounterInfo(
            ref D3D11_COUNTER_INFO pCounterInfo
        ){
            var fp = GetFunctionPointer(31);
            var callback = (CheckCounterInfoFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CheckCounterInfoFunc));
            
            callback(Self, ref pCounterInfo);
        }
        delegate void CheckCounterInfoFunc(IntPtr self, ref D3D11_COUNTER_INFO pCounterInfo);

        public HRESULT CheckCounter(
            ref D3D11_COUNTER_DESC pDesc,
            ref D3D11_COUNTER_TYPE pType,
            ref uint pActiveCounters,
            string szName,
            ref uint pNameLength,
            string szUnits,
            ref uint pUnitsLength,
            string szDescription,
            ref uint pDescriptionLength
        ){
            var fp = GetFunctionPointer(32);
            var callback = (CheckCounterFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CheckCounterFunc));
            
            return callback(Self, ref pDesc, ref pType, ref pActiveCounters, szName, ref pNameLength, szUnits, ref pUnitsLength, szDescription, ref pDescriptionLength);
        }
        delegate HRESULT CheckCounterFunc(IntPtr self, ref D3D11_COUNTER_DESC pDesc, ref D3D11_COUNTER_TYPE pType, ref uint pActiveCounters, string szName, ref uint pNameLength, string szUnits, ref uint pUnitsLength, string szDescription, ref uint pDescriptionLength);

        public HRESULT CheckFeatureSupport(
            D3D11_FEATURE Feature,
            IntPtr pFeatureSupportData,
            uint FeatureSupportDataSize
        ){
            var fp = GetFunctionPointer(33);
            var callback = (CheckFeatureSupportFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CheckFeatureSupportFunc));
            
            return callback(Self, Feature, pFeatureSupportData, FeatureSupportDataSize);
        }
        delegate HRESULT CheckFeatureSupportFunc(IntPtr self, D3D11_FEATURE Feature, IntPtr pFeatureSupportData, uint FeatureSupportDataSize);

        public HRESULT GetPrivateData(
            ref Guid guid,
            ref uint pDataSize,
            IntPtr pData
        ){
            var fp = GetFunctionPointer(34);
            var callback = (GetPrivateDataFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPrivateDataFunc));
            
            return callback(Self, ref guid, ref pDataSize, pData);
        }
        delegate HRESULT GetPrivateDataFunc(IntPtr self, ref Guid guid, ref uint pDataSize, IntPtr pData);

        public HRESULT SetPrivateData(
            ref Guid guid,
            uint DataSize,
            IntPtr pData
        ){
            var fp = GetFunctionPointer(35);
            var callback = (SetPrivateDataFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetPrivateDataFunc));
            
            return callback(Self, ref guid, DataSize, pData);
        }
        delegate HRESULT SetPrivateDataFunc(IntPtr self, ref Guid guid, uint DataSize, IntPtr pData);

        public HRESULT SetPrivateDataInterface(
            ref Guid guid,
            IUnknown pData
        ){
            var fp = GetFunctionPointer(36);
            var callback = (SetPrivateDataInterfaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetPrivateDataInterfaceFunc));
            
            return callback(Self, ref guid, pData.Ptr);
        }
        delegate HRESULT SetPrivateDataInterfaceFunc(IntPtr self, ref Guid guid, IntPtr pData);

        public D3D_FEATURE_LEVEL GetFeatureLevel(
        ){
            var fp = GetFunctionPointer(37);
            var callback = (GetFeatureLevelFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetFeatureLevelFunc));
            
            return callback(Self);
        }
        delegate D3D_FEATURE_LEVEL GetFeatureLevelFunc(IntPtr self);

        public uint GetCreationFlags(
        ){
            var fp = GetFunctionPointer(38);
            var callback = (GetCreationFlagsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetCreationFlagsFunc));
            
            return callback(Self);
        }
        delegate uint GetCreationFlagsFunc(IntPtr self);

        public HRESULT GetDeviceRemovedReason(
        ){
            var fp = GetFunctionPointer(39);
            var callback = (GetDeviceRemovedReasonFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDeviceRemovedReasonFunc));
            
            return callback(Self);
        }
        delegate HRESULT GetDeviceRemovedReasonFunc(IntPtr self);

        public void GetImmediateContext(
            ref ID3D11DeviceContext ppImmediateContext
        ){
            var fp = GetFunctionPointer(40);
            var callback = (GetImmediateContextFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetImmediateContextFunc));
            ppImmediateContext = new ID3D11DeviceContext();
            callback(Self, ref ppImmediateContext.PtrForNew);
        }
        delegate void GetImmediateContextFunc(IntPtr self, ref IntPtr ppImmediateContext);

        public HRESULT SetExceptionMode(
            uint RaiseFlags
        ){
            var fp = GetFunctionPointer(41);
            var callback = (SetExceptionModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetExceptionModeFunc));
            
            return callback(Self, RaiseFlags);
        }
        delegate HRESULT SetExceptionModeFunc(IntPtr self, uint RaiseFlags);

        public uint GetExceptionMode(
        ){
            var fp = GetFunctionPointer(42);
            var callback = (GetExceptionModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetExceptionModeFunc));
            
            return callback(Self);
        }
        delegate uint GetExceptionModeFunc(IntPtr self);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_BUFFER_DESC
    {
        public uint ByteWidth;
        public D3D11_USAGE Usage;
        public uint BindFlags;
        public uint CPUAccessFlags;
        public uint MiscFlags;
        public uint StructureByteStride;
    }
    public enum D3D11_USAGE
    {
        _DEFAULT = 0x0,
        _IMMUTABLE = 0x1,
        _DYNAMIC = 0x2,
        _STAGING = 0x3,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_SUBRESOURCE_DATA
    {
        public IntPtr pSysMem;
        public uint SysMemPitch;
        public uint SysMemSlicePitch;
    }
    public class ID3D11Buffer: ID3D11Resource
    {
        static /*readonly*/ Guid s_uuid = new Guid("48570b85-d1ee-4fcd-a250-eb350722b037");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public void GetDesc(
            ref D3D11_BUFFER_DESC pDesc
        ){
            var fp = GetFunctionPointer(10);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            callback(Self, ref pDesc);
        }
        delegate void GetDescFunc(IntPtr self, ref D3D11_BUFFER_DESC pDesc);

    }
    public class ID3D11Resource: ID3D11DeviceChild
    {
        static /*readonly*/ Guid s_uuid = new Guid("dc8e63f3-d12b-4952-b47b-5e45026a862d");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public void GetType(
            ref D3D11_RESOURCE_DIMENSION pResourceDimension
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetTypeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypeFunc));
            
            callback(Self, ref pResourceDimension);
        }
        delegate void GetTypeFunc(IntPtr self, ref D3D11_RESOURCE_DIMENSION pResourceDimension);

        public void SetEvictionPriority(
            uint EvictionPriority
        ){
            var fp = GetFunctionPointer(8);
            var callback = (SetEvictionPriorityFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetEvictionPriorityFunc));
            
            callback(Self, EvictionPriority);
        }
        delegate void SetEvictionPriorityFunc(IntPtr self, uint EvictionPriority);

        public uint GetEvictionPriority(
        ){
            var fp = GetFunctionPointer(9);
            var callback = (GetEvictionPriorityFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetEvictionPriorityFunc));
            
            return callback(Self);
        }
        delegate uint GetEvictionPriorityFunc(IntPtr self);

    }
    public enum D3D11_RESOURCE_DIMENSION
    {
        _UNKNOWN = 0x0,
        _BUFFER = 0x1,
        _TEXTURE1D = 0x2,
        _TEXTURE2D = 0x3,
        _TEXTURE3D = 0x4,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_TEXTURE1D_DESC
    {
        public uint Width;
        public uint MipLevels;
        public uint ArraySize;
        public DXGI_FORMAT Format;
        public D3D11_USAGE Usage;
        public uint BindFlags;
        public uint CPUAccessFlags;
        public uint MiscFlags;
    }
    public class ID3D11Texture1D: ID3D11Resource
    {
        static /*readonly*/ Guid s_uuid = new Guid("f8fb5c27-c6b3-4f75-a4c8-439af2ef564c");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public void GetDesc(
            ref D3D11_TEXTURE1D_DESC pDesc
        ){
            var fp = GetFunctionPointer(10);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            callback(Self, ref pDesc);
        }
        delegate void GetDescFunc(IntPtr self, ref D3D11_TEXTURE1D_DESC pDesc);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_TEXTURE2D_DESC
    {
        public uint Width;
        public uint Height;
        public uint MipLevels;
        public uint ArraySize;
        public DXGI_FORMAT Format;
        public DXGI_SAMPLE_DESC SampleDesc;
        public D3D11_USAGE Usage;
        public uint BindFlags;
        public uint CPUAccessFlags;
        public uint MiscFlags;
    }
    public class ID3D11Texture2D: ID3D11Resource
    {
        static /*readonly*/ Guid s_uuid = new Guid("6f15aaf2-d208-4e89-9ab4-489535d34f9c");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public void GetDesc(
            ref D3D11_TEXTURE2D_DESC pDesc
        ){
            var fp = GetFunctionPointer(10);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            callback(Self, ref pDesc);
        }
        delegate void GetDescFunc(IntPtr self, ref D3D11_TEXTURE2D_DESC pDesc);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_TEXTURE3D_DESC
    {
        public uint Width;
        public uint Height;
        public uint Depth;
        public uint MipLevels;
        public DXGI_FORMAT Format;
        public D3D11_USAGE Usage;
        public uint BindFlags;
        public uint CPUAccessFlags;
        public uint MiscFlags;
    }
    public class ID3D11Texture3D: ID3D11Resource
    {
        static /*readonly*/ Guid s_uuid = new Guid("037e866e-f56d-4357-a8af-9dabbe6e250e");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public void GetDesc(
            ref D3D11_TEXTURE3D_DESC pDesc
        ){
            var fp = GetFunctionPointer(10);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            callback(Self, ref pDesc);
        }
        delegate void GetDescFunc(IntPtr self, ref D3D11_TEXTURE3D_DESC pDesc);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_SHADER_RESOURCE_VIEW_DESC
    {
        public DXGI_FORMAT Format;
        public D3D11_SRV_DIMENSION ViewDimension;
        public D3D11_SHADER_RESOURCE_VIEW_DESC__anonymous_32 __anonymous__3;
    }
    public struct D3D11_SRV_DIMENSION { public D3D_SRV_DIMENSION Value; }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_BUFFER_SRV
    {
        public D3D11_BUFFER_SRV__anonymous_35 __anonymous__1;
        public D3D11_BUFFER_SRV__anonymous_36 __anonymous__2;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_TEX1D_SRV
    {
        public uint MostDetailedMip;
        public uint MipLevels;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_TEX1D_ARRAY_SRV
    {
        public uint MostDetailedMip;
        public uint MipLevels;
        public uint FirstArraySlice;
        public uint ArraySize;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_TEX2D_SRV
    {
        public uint MostDetailedMip;
        public uint MipLevels;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_TEX2D_ARRAY_SRV
    {
        public uint MostDetailedMip;
        public uint MipLevels;
        public uint FirstArraySlice;
        public uint ArraySize;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_TEX2DMS_SRV
    {
        public uint UnusedField_NothingToDefine;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_TEX2DMS_ARRAY_SRV
    {
        public uint FirstArraySlice;
        public uint ArraySize;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_TEX3D_SRV
    {
        public uint MostDetailedMip;
        public uint MipLevels;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_TEXCUBE_SRV
    {
        public uint MostDetailedMip;
        public uint MipLevels;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_TEXCUBE_ARRAY_SRV
    {
        public uint MostDetailedMip;
        public uint MipLevels;
        public uint First2DArrayFace;
        public uint NumCubes;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_BUFFEREX_SRV
    {
        public uint FirstElement;
        public uint NumElements;
        public uint Flags;
    }
    public class ID3D11ShaderResourceView: ID3D11View
    {
        static /*readonly*/ Guid s_uuid = new Guid("b0e06fe0-8192-4e1a-b1ca-36d7414710b2");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public void GetDesc(
            ref D3D11_SHADER_RESOURCE_VIEW_DESC pDesc
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            callback(Self, ref pDesc);
        }
        delegate void GetDescFunc(IntPtr self, ref D3D11_SHADER_RESOURCE_VIEW_DESC pDesc);

    }
    public class ID3D11View: ID3D11DeviceChild
    {
        static /*readonly*/ Guid s_uuid = new Guid("839d1216-bb2e-412b-b7f4-a9dbebe08ed1");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public void GetResource(
            ref ID3D11Resource ppResource
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetResourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetResourceFunc));
            ppResource = new ID3D11Resource();
            callback(Self, ref ppResource.PtrForNew);
        }
        delegate void GetResourceFunc(IntPtr self, ref IntPtr ppResource);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_UNORDERED_ACCESS_VIEW_DESC
    {
        public DXGI_FORMAT Format;
        public D3D11_UAV_DIMENSION ViewDimension;
        public D3D11_UNORDERED_ACCESS_VIEW_DESC__anonymous_65 __anonymous__3;
    }
    public enum D3D11_UAV_DIMENSION
    {
        _UNKNOWN = 0x0,
        _BUFFER = 0x1,
        _TEXTURE1D = 0x2,
        _TEXTURE1DARRAY = 0x3,
        _TEXTURE2D = 0x4,
        _TEXTURE2DARRAY = 0x5,
        _TEXTURE3D = 0x8,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_BUFFER_UAV
    {
        public uint FirstElement;
        public uint NumElements;
        public uint Flags;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_TEX1D_UAV
    {
        public uint MipSlice;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_TEX1D_ARRAY_UAV
    {
        public uint MipSlice;
        public uint FirstArraySlice;
        public uint ArraySize;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_TEX2D_UAV
    {
        public uint MipSlice;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_TEX2D_ARRAY_UAV
    {
        public uint MipSlice;
        public uint FirstArraySlice;
        public uint ArraySize;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_TEX3D_UAV
    {
        public uint MipSlice;
        public uint FirstWSlice;
        public uint WSize;
    }
    public class ID3D11UnorderedAccessView: ID3D11View
    {
        static /*readonly*/ Guid s_uuid = new Guid("28acf509-7f5c-48f6-8611-f316010a6380");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public void GetDesc(
            ref D3D11_UNORDERED_ACCESS_VIEW_DESC pDesc
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            callback(Self, ref pDesc);
        }
        delegate void GetDescFunc(IntPtr self, ref D3D11_UNORDERED_ACCESS_VIEW_DESC pDesc);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_RENDER_TARGET_VIEW_DESC
    {
        public DXGI_FORMAT Format;
        public D3D11_RTV_DIMENSION ViewDimension;
        public D3D11_RENDER_TARGET_VIEW_DESC__anonymous_84 __anonymous__3;
    }
    public enum D3D11_RTV_DIMENSION
    {
        _UNKNOWN = 0x0,
        _BUFFER = 0x1,
        _TEXTURE1D = 0x2,
        _TEXTURE1DARRAY = 0x3,
        _TEXTURE2D = 0x4,
        _TEXTURE2DARRAY = 0x5,
        _TEXTURE2DMS = 0x6,
        _TEXTURE2DMSARRAY = 0x7,
        _TEXTURE3D = 0x8,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_BUFFER_RTV
    {
        public D3D11_BUFFER_RTV__anonymous_87 __anonymous__1;
        public D3D11_BUFFER_RTV__anonymous_88 __anonymous__2;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_TEX1D_RTV
    {
        public uint MipSlice;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_TEX1D_ARRAY_RTV
    {
        public uint MipSlice;
        public uint FirstArraySlice;
        public uint ArraySize;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_TEX2D_RTV
    {
        public uint MipSlice;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_TEX2D_ARRAY_RTV
    {
        public uint MipSlice;
        public uint FirstArraySlice;
        public uint ArraySize;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_TEX2DMS_RTV
    {
        public uint UnusedField_NothingToDefine;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_TEX2DMS_ARRAY_RTV
    {
        public uint FirstArraySlice;
        public uint ArraySize;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_TEX3D_RTV
    {
        public uint MipSlice;
        public uint FirstWSlice;
        public uint WSize;
    }
    public class ID3D11RenderTargetView: ID3D11View
    {
        static /*readonly*/ Guid s_uuid = new Guid("dfdba067-0b8d-4865-875b-d7b4516cc164");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public void GetDesc(
            ref D3D11_RENDER_TARGET_VIEW_DESC pDesc
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            callback(Self, ref pDesc);
        }
        delegate void GetDescFunc(IntPtr self, ref D3D11_RENDER_TARGET_VIEW_DESC pDesc);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_DEPTH_STENCIL_VIEW_DESC
    {
        public DXGI_FORMAT Format;
        public D3D11_DSV_DIMENSION ViewDimension;
        public uint Flags;
        public D3D11_DEPTH_STENCIL_VIEW_DESC__anonymous_109 __anonymous__4;
    }
    public enum D3D11_DSV_DIMENSION
    {
        _UNKNOWN = 0x0,
        _TEXTURE1D = 0x1,
        _TEXTURE1DARRAY = 0x2,
        _TEXTURE2D = 0x3,
        _TEXTURE2DARRAY = 0x4,
        _TEXTURE2DMS = 0x5,
        _TEXTURE2DMSARRAY = 0x6,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_TEX1D_DSV
    {
        public uint MipSlice;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_TEX1D_ARRAY_DSV
    {
        public uint MipSlice;
        public uint FirstArraySlice;
        public uint ArraySize;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_TEX2D_DSV
    {
        public uint MipSlice;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_TEX2D_ARRAY_DSV
    {
        public uint MipSlice;
        public uint FirstArraySlice;
        public uint ArraySize;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_TEX2DMS_DSV
    {
        public uint UnusedField_NothingToDefine;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_TEX2DMS_ARRAY_DSV
    {
        public uint FirstArraySlice;
        public uint ArraySize;
    }
    public class ID3D11DepthStencilView: ID3D11View
    {
        static /*readonly*/ Guid s_uuid = new Guid("9fdac92a-1876-48c3-afad-25b94f84a9b6");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public void GetDesc(
            ref D3D11_DEPTH_STENCIL_VIEW_DESC pDesc
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            callback(Self, ref pDesc);
        }
        delegate void GetDescFunc(IntPtr self, ref D3D11_DEPTH_STENCIL_VIEW_DESC pDesc);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_INPUT_ELEMENT_DESC
    {
        public string SemanticName;
        public uint SemanticIndex;
        public DXGI_FORMAT Format;
        public uint InputSlot;
        public uint AlignedByteOffset;
        public D3D11_INPUT_CLASSIFICATION InputSlotClass;
        public uint InstanceDataStepRate;
    }
    public enum D3D11_INPUT_CLASSIFICATION
    {
        _VERTEX_DATA = 0x0,
        _INSTANCE_DATA = 0x1,
    }
    public class ID3D11InputLayout: ID3D11DeviceChild
    {
        static /*readonly*/ Guid s_uuid = new Guid("e4819ddc-4cf0-4025-bd26-5de82a3e07b7");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
    }
    public class ID3D11ClassLinkage: ID3D11DeviceChild
    {
        static /*readonly*/ Guid s_uuid = new Guid("ddf57cba-9543-46e4-a12b-f207a0fe7fed");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public HRESULT GetClassInstance(
            string pClassInstanceName,
            uint InstanceIndex,
            ref ID3D11ClassInstance ppInstance
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetClassInstanceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetClassInstanceFunc));
            ppInstance = new ID3D11ClassInstance();
            return callback(Self, pClassInstanceName, InstanceIndex, ref ppInstance.PtrForNew);
        }
        delegate HRESULT GetClassInstanceFunc(IntPtr self, string pClassInstanceName, uint InstanceIndex, ref IntPtr ppInstance);

        public HRESULT CreateClassInstance(
            string pClassTypeName,
            uint ConstantBufferOffset,
            uint ConstantVectorOffset,
            uint TextureOffset,
            uint SamplerOffset,
            ref ID3D11ClassInstance ppInstance
        ){
            var fp = GetFunctionPointer(8);
            var callback = (CreateClassInstanceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateClassInstanceFunc));
            ppInstance = new ID3D11ClassInstance();
            return callback(Self, pClassTypeName, ConstantBufferOffset, ConstantVectorOffset, TextureOffset, SamplerOffset, ref ppInstance.PtrForNew);
        }
        delegate HRESULT CreateClassInstanceFunc(IntPtr self, string pClassTypeName, uint ConstantBufferOffset, uint ConstantVectorOffset, uint TextureOffset, uint SamplerOffset, ref IntPtr ppInstance);

    }
    public class ID3D11ClassInstance: ID3D11DeviceChild
    {
        static /*readonly*/ Guid s_uuid = new Guid("a6cd7faa-b0b7-4a2f-9436-8662a65797cb");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public void GetClassLinkage(
            ref ID3D11ClassLinkage ppLinkage
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetClassLinkageFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetClassLinkageFunc));
            ppLinkage = new ID3D11ClassLinkage();
            callback(Self, ref ppLinkage.PtrForNew);
        }
        delegate void GetClassLinkageFunc(IntPtr self, ref IntPtr ppLinkage);

        public void GetDesc(
            ref D3D11_CLASS_INSTANCE_DESC pDesc
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            callback(Self, ref pDesc);
        }
        delegate void GetDescFunc(IntPtr self, ref D3D11_CLASS_INSTANCE_DESC pDesc);

        public void GetInstanceName(
            string pInstanceName,
            ref SIZE_T pBufferLength
        ){
            var fp = GetFunctionPointer(9);
            var callback = (GetInstanceNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetInstanceNameFunc));
            
            callback(Self, pInstanceName, ref pBufferLength);
        }
        delegate void GetInstanceNameFunc(IntPtr self, string pInstanceName, ref SIZE_T pBufferLength);

        public void GetTypeName(
            string pTypeName,
            ref SIZE_T pBufferLength
        ){
            var fp = GetFunctionPointer(10);
            var callback = (GetTypeNameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypeNameFunc));
            
            callback(Self, pTypeName, ref pBufferLength);
        }
        delegate void GetTypeNameFunc(IntPtr self, string pTypeName, ref SIZE_T pBufferLength);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_CLASS_INSTANCE_DESC
    {
        public uint InstanceId;
        public uint InstanceIndex;
        public uint TypeId;
        public uint ConstantBuffer;
        public uint BaseConstantBufferOffset;
        public uint BaseTexture;
        public uint BaseSampler;
        public int Created;
    }
    public class ID3D11VertexShader: ID3D11DeviceChild
    {
        static /*readonly*/ Guid s_uuid = new Guid("3b301d64-d678-4289-8897-22f8928b72f3");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
    }
    public class ID3D11GeometryShader: ID3D11DeviceChild
    {
        static /*readonly*/ Guid s_uuid = new Guid("38325b96-effb-4022-ba02-2e795b70275c");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_SO_DECLARATION_ENTRY
    {
        public uint Stream;
        public string SemanticName;
        public uint SemanticIndex;
        public byte StartComponent;
        public byte ComponentCount;
        public byte OutputSlot;
    }
    public class ID3D11PixelShader: ID3D11DeviceChild
    {
        static /*readonly*/ Guid s_uuid = new Guid("ea82e40d-51dc-4f33-93d4-db7c9125ae8c");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
    }
    public class ID3D11HullShader: ID3D11DeviceChild
    {
        static /*readonly*/ Guid s_uuid = new Guid("8e5c6061-628a-4c8e-8264-bbe45cb3d5dd");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
    }
    public class ID3D11DomainShader: ID3D11DeviceChild
    {
        static /*readonly*/ Guid s_uuid = new Guid("f582c508-0f36-490c-9977-31eece268cfa");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
    }
    public class ID3D11ComputeShader: ID3D11DeviceChild
    {
        static /*readonly*/ Guid s_uuid = new Guid("4f5b196e-c2bd-495e-bd01-1fded38e4969");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_BLEND_DESC
    {
        public int AlphaToCoverageEnable;
        public int IndependentBlendEnable;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=8)]public D3D11_RENDER_TARGET_BLEND_DESC[] RenderTarget;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_RENDER_TARGET_BLEND_DESC
    {
        public int BlendEnable;
        public D3D11_BLEND SrcBlend;
        public D3D11_BLEND DestBlend;
        public D3D11_BLEND_OP BlendOp;
        public D3D11_BLEND SrcBlendAlpha;
        public D3D11_BLEND DestBlendAlpha;
        public D3D11_BLEND_OP BlendOpAlpha;
        public UINT8 RenderTargetWriteMask;
    }
    public enum D3D11_BLEND
    {
        _ZERO = 0x1,
        _ONE = 0x2,
        _SRC_COLOR = 0x3,
        _INV_SRC_COLOR = 0x4,
        _SRC_ALPHA = 0x5,
        _INV_SRC_ALPHA = 0x6,
        _DEST_ALPHA = 0x7,
        _INV_DEST_ALPHA = 0x8,
        _DEST_COLOR = 0x9,
        _INV_DEST_COLOR = 0xa,
        _SRC_ALPHA_SAT = 0xb,
        _BLEND_FACTOR = 0xe,
        _INV_BLEND_FACTOR = 0xf,
        _SRC1_COLOR = 0x10,
        _INV_SRC1_COLOR = 0x11,
        _SRC1_ALPHA = 0x12,
        _INV_SRC1_ALPHA = 0x13,
    }
    public enum D3D11_BLEND_OP
    {
        _ADD = 0x1,
        _SUBTRACT = 0x2,
        _REV_SUBTRACT = 0x3,
        _MIN = 0x4,
        _MAX = 0x5,
    }
    public class ID3D11BlendState: ID3D11DeviceChild
    {
        static /*readonly*/ Guid s_uuid = new Guid("75b68faa-347d-4159-8f45-a0640f01cd9a");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public void GetDesc(
            ref D3D11_BLEND_DESC pDesc
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            callback(Self, ref pDesc);
        }
        delegate void GetDescFunc(IntPtr self, ref D3D11_BLEND_DESC pDesc);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_DEPTH_STENCIL_DESC
    {
        public int DepthEnable;
        public D3D11_DEPTH_WRITE_MASK DepthWriteMask;
        public D3D11_COMPARISON_FUNC DepthFunc;
        public int StencilEnable;
        public UINT8 StencilReadMask;
        public UINT8 StencilWriteMask;
        public D3D11_DEPTH_STENCILOP_DESC FrontFace;
        public D3D11_DEPTH_STENCILOP_DESC BackFace;
    }
    public enum D3D11_DEPTH_WRITE_MASK
    {
        _ZERO = 0x0,
        _ALL = 0x1,
    }
    public enum D3D11_COMPARISON_FUNC
    {
        _NEVER = 0x1,
        _LESS = 0x2,
        _EQUAL = 0x3,
        _LESS_EQUAL = 0x4,
        _GREATER = 0x5,
        _NOT_EQUAL = 0x6,
        _GREATER_EQUAL = 0x7,
        _ALWAYS = 0x8,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_DEPTH_STENCILOP_DESC
    {
        public D3D11_STENCIL_OP StencilFailOp;
        public D3D11_STENCIL_OP StencilDepthFailOp;
        public D3D11_STENCIL_OP StencilPassOp;
        public D3D11_COMPARISON_FUNC StencilFunc;
    }
    public enum D3D11_STENCIL_OP
    {
        _KEEP = 0x1,
        _ZERO = 0x2,
        _REPLACE = 0x3,
        _INCR_SAT = 0x4,
        _DECR_SAT = 0x5,
        _INVERT = 0x6,
        _INCR = 0x7,
        _DECR = 0x8,
    }
    public class ID3D11DepthStencilState: ID3D11DeviceChild
    {
        static /*readonly*/ Guid s_uuid = new Guid("03823efb-8d8f-4e1c-9aa2-f64bb2cbfdf1");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public void GetDesc(
            ref D3D11_DEPTH_STENCIL_DESC pDesc
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            callback(Self, ref pDesc);
        }
        delegate void GetDescFunc(IntPtr self, ref D3D11_DEPTH_STENCIL_DESC pDesc);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_RASTERIZER_DESC
    {
        public D3D11_FILL_MODE FillMode;
        public D3D11_CULL_MODE CullMode;
        public int FrontCounterClockwise;
        public int DepthBias;
        public float DepthBiasClamp;
        public float SlopeScaledDepthBias;
        public int DepthClipEnable;
        public int ScissorEnable;
        public int MultisampleEnable;
        public int AntialiasedLineEnable;
    }
    public enum D3D11_FILL_MODE
    {
        _WIREFRAME = 0x2,
        _SOLID = 0x3,
    }
    public enum D3D11_CULL_MODE
    {
        _NONE = 0x1,
        _FRONT = 0x2,
        _BACK = 0x3,
    }
    public class ID3D11RasterizerState: ID3D11DeviceChild
    {
        static /*readonly*/ Guid s_uuid = new Guid("9bb4ab81-ab1a-4d8f-b506-fc04200b6ee7");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public void GetDesc(
            ref D3D11_RASTERIZER_DESC pDesc
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            callback(Self, ref pDesc);
        }
        delegate void GetDescFunc(IntPtr self, ref D3D11_RASTERIZER_DESC pDesc);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_SAMPLER_DESC
    {
        public D3D11_FILTER Filter;
        public D3D11_TEXTURE_ADDRESS_MODE AddressU;
        public D3D11_TEXTURE_ADDRESS_MODE AddressV;
        public D3D11_TEXTURE_ADDRESS_MODE AddressW;
        public float MipLODBias;
        public uint MaxAnisotropy;
        public D3D11_COMPARISON_FUNC ComparisonFunc;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=4)]public float[] BorderColor;
        public float MinLOD;
        public float MaxLOD;
    }
    public enum D3D11_FILTER
    {
        _MIN_MAG_MIP_POINT = 0x0,
        _MIN_MAG_POINT_MIP_LINEAR = 0x1,
        _MIN_POINT_MAG_LINEAR_MIP_POINT = 0x4,
        _MIN_POINT_MAG_MIP_LINEAR = 0x5,
        _MIN_LINEAR_MAG_MIP_POINT = 0x10,
        _MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x11,
        _MIN_MAG_LINEAR_MIP_POINT = 0x14,
        _MIN_MAG_MIP_LINEAR = 0x15,
        _ANISOTROPIC = 0x55,
        _COMPARISON_MIN_MAG_MIP_POINT = 0x80,
        _COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 0x81,
        _COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x84,
        _COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 0x85,
        _COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 0x90,
        _COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x91,
        _COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 0x94,
        _COMPARISON_MIN_MAG_MIP_LINEAR = 0x95,
        _COMPARISON_ANISOTROPIC = 0xd5,
        _MINIMUM_MIN_MAG_MIP_POINT = 0x100,
        _MINIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x101,
        _MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x104,
        _MINIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x105,
        _MINIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x110,
        _MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x111,
        _MINIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x114,
        _MINIMUM_MIN_MAG_MIP_LINEAR = 0x115,
        _MINIMUM_ANISOTROPIC = 0x155,
        _MAXIMUM_MIN_MAG_MIP_POINT = 0x180,
        _MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x181,
        _MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x184,
        _MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x185,
        _MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x190,
        _MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x191,
        _MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x194,
        _MAXIMUM_MIN_MAG_MIP_LINEAR = 0x195,
        _MAXIMUM_ANISOTROPIC = 0x1d5,
    }
    public enum D3D11_TEXTURE_ADDRESS_MODE
    {
        _WRAP = 0x1,
        _MIRROR = 0x2,
        _CLAMP = 0x3,
        _BORDER = 0x4,
        _MIRROR_ONCE = 0x5,
    }
    public class ID3D11SamplerState: ID3D11DeviceChild
    {
        static /*readonly*/ Guid s_uuid = new Guid("da6fea51-564c-4487-9810-f0d0f9b4e3a5");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public void GetDesc(
            ref D3D11_SAMPLER_DESC pDesc
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            callback(Self, ref pDesc);
        }
        delegate void GetDescFunc(IntPtr self, ref D3D11_SAMPLER_DESC pDesc);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_QUERY_DESC
    {
        public D3D11_QUERY Query;
        public uint MiscFlags;
    }
    public enum D3D11_QUERY
    {
        _EVENT = 0x0,
        _OCCLUSION = 0x1,
        _TIMESTAMP = 0x2,
        _TIMESTAMP_DISJOINT = 0x3,
        _PIPELINE_STATISTICS = 0x4,
        _OCCLUSION_PREDICATE = 0x5,
        _SO_STATISTICS = 0x6,
        _SO_OVERFLOW_PREDICATE = 0x7,
        _SO_STATISTICS_STREAM0 = 0x8,
        _SO_OVERFLOW_PREDICATE_STREAM0 = 0x9,
        _SO_STATISTICS_STREAM1 = 0xa,
        _SO_OVERFLOW_PREDICATE_STREAM1 = 0xb,
        _SO_STATISTICS_STREAM2 = 0xc,
        _SO_OVERFLOW_PREDICATE_STREAM2 = 0xd,
        _SO_STATISTICS_STREAM3 = 0xe,
        _SO_OVERFLOW_PREDICATE_STREAM3 = 0xf,
    }
    public class ID3D11Query: ID3D11Asynchronous
    {
        static /*readonly*/ Guid s_uuid = new Guid("d6c00747-87b7-425e-b84d-44d108560afd");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public void GetDesc(
            ref D3D11_QUERY_DESC pDesc
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            callback(Self, ref pDesc);
        }
        delegate void GetDescFunc(IntPtr self, ref D3D11_QUERY_DESC pDesc);

    }
    public class ID3D11Asynchronous: ID3D11DeviceChild
    {
        static /*readonly*/ Guid s_uuid = new Guid("4b35d0cd-1e15-4258-9c98-1b1333f6dd3b");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public uint GetDataSize(
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetDataSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDataSizeFunc));
            
            return callback(Self);
        }
        delegate uint GetDataSizeFunc(IntPtr self);

    }
    public class ID3D11Predicate: ID3D11Query
    {
        static /*readonly*/ Guid s_uuid = new Guid("9eb576dd-9f77-4d86-81aa-8bab5fe490e2");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_COUNTER_DESC
    {
        public D3D11_COUNTER Counter;
        public uint MiscFlags;
    }
    public enum D3D11_COUNTER
    {
        _DEVICE_DEPENDENT_0 = 0x40000000,
    }
    public class ID3D11Counter: ID3D11Asynchronous
    {
        static /*readonly*/ Guid s_uuid = new Guid("6e8c49fb-a371-4770-b440-29086022b741");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public void GetDesc(
            ref D3D11_COUNTER_DESC pDesc
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            callback(Self, ref pDesc);
        }
        delegate void GetDescFunc(IntPtr self, ref D3D11_COUNTER_DESC pDesc);

    }
    public class ID3D11DeviceContext: ID3D11DeviceChild
    {
        static /*readonly*/ Guid s_uuid = new Guid("c0bfa96c-e089-44fb-8eaf-26f8796190da");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public void VSSetConstantBuffers(
            uint StartSlot,
            uint NumBuffers,
            ref ID3D11Buffer ppConstantBuffers
        ){
            var fp = GetFunctionPointer(7);
            var callback = (VSSetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSSetConstantBuffersFunc));
            
            callback(Self, StartSlot, NumBuffers, ref ppConstantBuffers);
        }
        delegate void VSSetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref ID3D11Buffer ppConstantBuffers);

        public void PSSetShaderResources(
            uint StartSlot,
            uint NumViews,
            ref ID3D11ShaderResourceView ppShaderResourceViews
        ){
            var fp = GetFunctionPointer(8);
            var callback = (PSSetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSSetShaderResourcesFunc));
            
            callback(Self, StartSlot, NumViews, ref ppShaderResourceViews);
        }
        delegate void PSSetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref ID3D11ShaderResourceView ppShaderResourceViews);

        public void PSSetShader(
            ID3D11PixelShader pPixelShader,
            ref ID3D11ClassInstance ppClassInstances,
            uint NumClassInstances
        ){
            var fp = GetFunctionPointer(9);
            var callback = (PSSetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSSetShaderFunc));
            
            callback(Self, pPixelShader.Ptr, ref ppClassInstances, NumClassInstances);
        }
        delegate void PSSetShaderFunc(IntPtr self, IntPtr pPixelShader, ref ID3D11ClassInstance ppClassInstances, uint NumClassInstances);

        public void PSSetSamplers(
            uint StartSlot,
            uint NumSamplers,
            ref ID3D11SamplerState ppSamplers
        ){
            var fp = GetFunctionPointer(10);
            var callback = (PSSetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSSetSamplersFunc));
            
            callback(Self, StartSlot, NumSamplers, ref ppSamplers);
        }
        delegate void PSSetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref ID3D11SamplerState ppSamplers);

        public void VSSetShader(
            ID3D11VertexShader pVertexShader,
            ref ID3D11ClassInstance ppClassInstances,
            uint NumClassInstances
        ){
            var fp = GetFunctionPointer(11);
            var callback = (VSSetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSSetShaderFunc));
            
            callback(Self, pVertexShader.Ptr, ref ppClassInstances, NumClassInstances);
        }
        delegate void VSSetShaderFunc(IntPtr self, IntPtr pVertexShader, ref ID3D11ClassInstance ppClassInstances, uint NumClassInstances);

        public void DrawIndexed(
            uint IndexCount,
            uint StartIndexLocation,
            int BaseVertexLocation
        ){
            var fp = GetFunctionPointer(12);
            var callback = (DrawIndexedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawIndexedFunc));
            
            callback(Self, IndexCount, StartIndexLocation, BaseVertexLocation);
        }
        delegate void DrawIndexedFunc(IntPtr self, uint IndexCount, uint StartIndexLocation, int BaseVertexLocation);

        public void Draw(
            uint VertexCount,
            uint StartVertexLocation
        ){
            var fp = GetFunctionPointer(13);
            var callback = (DrawFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawFunc));
            
            callback(Self, VertexCount, StartVertexLocation);
        }
        delegate void DrawFunc(IntPtr self, uint VertexCount, uint StartVertexLocation);

        public HRESULT Map(
            ID3D11Resource pResource,
            uint Subresource,
            D3D11_MAP MapType,
            uint MapFlags,
            ref D3D11_MAPPED_SUBRESOURCE pMappedResource
        ){
            var fp = GetFunctionPointer(14);
            var callback = (MapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(MapFunc));
            
            return callback(Self, pResource.Ptr, Subresource, MapType, MapFlags, ref pMappedResource);
        }
        delegate HRESULT MapFunc(IntPtr self, IntPtr pResource, uint Subresource, D3D11_MAP MapType, uint MapFlags, ref D3D11_MAPPED_SUBRESOURCE pMappedResource);

        public void Unmap(
            ID3D11Resource pResource,
            uint Subresource
        ){
            var fp = GetFunctionPointer(15);
            var callback = (UnmapFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(UnmapFunc));
            
            callback(Self, pResource.Ptr, Subresource);
        }
        delegate void UnmapFunc(IntPtr self, IntPtr pResource, uint Subresource);

        public void PSSetConstantBuffers(
            uint StartSlot,
            uint NumBuffers,
            ref ID3D11Buffer ppConstantBuffers
        ){
            var fp = GetFunctionPointer(16);
            var callback = (PSSetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSSetConstantBuffersFunc));
            
            callback(Self, StartSlot, NumBuffers, ref ppConstantBuffers);
        }
        delegate void PSSetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref ID3D11Buffer ppConstantBuffers);

        public void IASetInputLayout(
            ID3D11InputLayout pInputLayout
        ){
            var fp = GetFunctionPointer(17);
            var callback = (IASetInputLayoutFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IASetInputLayoutFunc));
            
            callback(Self, pInputLayout.Ptr);
        }
        delegate void IASetInputLayoutFunc(IntPtr self, IntPtr pInputLayout);

        public void IASetVertexBuffers(
            uint StartSlot,
            uint NumBuffers,
            ref ID3D11Buffer ppVertexBuffers,
            ref uint pStrides,
            ref uint pOffsets
        ){
            var fp = GetFunctionPointer(18);
            var callback = (IASetVertexBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IASetVertexBuffersFunc));
            
            callback(Self, StartSlot, NumBuffers, ref ppVertexBuffers, ref pStrides, ref pOffsets);
        }
        delegate void IASetVertexBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref ID3D11Buffer ppVertexBuffers, ref uint pStrides, ref uint pOffsets);

        public void IASetIndexBuffer(
            ID3D11Buffer pIndexBuffer,
            DXGI_FORMAT Format,
            uint Offset
        ){
            var fp = GetFunctionPointer(19);
            var callback = (IASetIndexBufferFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IASetIndexBufferFunc));
            
            callback(Self, pIndexBuffer.Ptr, Format, Offset);
        }
        delegate void IASetIndexBufferFunc(IntPtr self, IntPtr pIndexBuffer, DXGI_FORMAT Format, uint Offset);

        public void DrawIndexedInstanced(
            uint IndexCountPerInstance,
            uint InstanceCount,
            uint StartIndexLocation,
            int BaseVertexLocation,
            uint StartInstanceLocation
        ){
            var fp = GetFunctionPointer(20);
            var callback = (DrawIndexedInstancedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawIndexedInstancedFunc));
            
            callback(Self, IndexCountPerInstance, InstanceCount, StartIndexLocation, BaseVertexLocation, StartInstanceLocation);
        }
        delegate void DrawIndexedInstancedFunc(IntPtr self, uint IndexCountPerInstance, uint InstanceCount, uint StartIndexLocation, int BaseVertexLocation, uint StartInstanceLocation);

        public void DrawInstanced(
            uint VertexCountPerInstance,
            uint InstanceCount,
            uint StartVertexLocation,
            uint StartInstanceLocation
        ){
            var fp = GetFunctionPointer(21);
            var callback = (DrawInstancedFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawInstancedFunc));
            
            callback(Self, VertexCountPerInstance, InstanceCount, StartVertexLocation, StartInstanceLocation);
        }
        delegate void DrawInstancedFunc(IntPtr self, uint VertexCountPerInstance, uint InstanceCount, uint StartVertexLocation, uint StartInstanceLocation);

        public void GSSetConstantBuffers(
            uint StartSlot,
            uint NumBuffers,
            ref ID3D11Buffer ppConstantBuffers
        ){
            var fp = GetFunctionPointer(22);
            var callback = (GSSetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSSetConstantBuffersFunc));
            
            callback(Self, StartSlot, NumBuffers, ref ppConstantBuffers);
        }
        delegate void GSSetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref ID3D11Buffer ppConstantBuffers);

        public void GSSetShader(
            ID3D11GeometryShader pShader,
            ref ID3D11ClassInstance ppClassInstances,
            uint NumClassInstances
        ){
            var fp = GetFunctionPointer(23);
            var callback = (GSSetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSSetShaderFunc));
            
            callback(Self, pShader.Ptr, ref ppClassInstances, NumClassInstances);
        }
        delegate void GSSetShaderFunc(IntPtr self, IntPtr pShader, ref ID3D11ClassInstance ppClassInstances, uint NumClassInstances);

        public void IASetPrimitiveTopology(
            D3D11_PRIMITIVE_TOPOLOGY Topology
        ){
            var fp = GetFunctionPointer(24);
            var callback = (IASetPrimitiveTopologyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IASetPrimitiveTopologyFunc));
            
            callback(Self, Topology);
        }
        delegate void IASetPrimitiveTopologyFunc(IntPtr self, D3D11_PRIMITIVE_TOPOLOGY Topology);

        public void VSSetShaderResources(
            uint StartSlot,
            uint NumViews,
            ref ID3D11ShaderResourceView ppShaderResourceViews
        ){
            var fp = GetFunctionPointer(25);
            var callback = (VSSetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSSetShaderResourcesFunc));
            
            callback(Self, StartSlot, NumViews, ref ppShaderResourceViews);
        }
        delegate void VSSetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref ID3D11ShaderResourceView ppShaderResourceViews);

        public void VSSetSamplers(
            uint StartSlot,
            uint NumSamplers,
            ref ID3D11SamplerState ppSamplers
        ){
            var fp = GetFunctionPointer(26);
            var callback = (VSSetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSSetSamplersFunc));
            
            callback(Self, StartSlot, NumSamplers, ref ppSamplers);
        }
        delegate void VSSetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref ID3D11SamplerState ppSamplers);

        public void Begin(
            ID3D11Asynchronous pAsync
        ){
            var fp = GetFunctionPointer(27);
            var callback = (BeginFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(BeginFunc));
            
            callback(Self, pAsync.Ptr);
        }
        delegate void BeginFunc(IntPtr self, IntPtr pAsync);

        public void End(
            ID3D11Asynchronous pAsync
        ){
            var fp = GetFunctionPointer(28);
            var callback = (EndFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(EndFunc));
            
            callback(Self, pAsync.Ptr);
        }
        delegate void EndFunc(IntPtr self, IntPtr pAsync);

        public HRESULT GetData(
            ID3D11Asynchronous pAsync,
            IntPtr pData,
            uint DataSize,
            uint GetDataFlags
        ){
            var fp = GetFunctionPointer(29);
            var callback = (GetDataFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDataFunc));
            
            return callback(Self, pAsync.Ptr, pData, DataSize, GetDataFlags);
        }
        delegate HRESULT GetDataFunc(IntPtr self, IntPtr pAsync, IntPtr pData, uint DataSize, uint GetDataFlags);

        public void SetPredication(
            ID3D11Predicate pPredicate,
            int PredicateValue
        ){
            var fp = GetFunctionPointer(30);
            var callback = (SetPredicationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetPredicationFunc));
            
            callback(Self, pPredicate.Ptr, PredicateValue);
        }
        delegate void SetPredicationFunc(IntPtr self, IntPtr pPredicate, int PredicateValue);

        public void GSSetShaderResources(
            uint StartSlot,
            uint NumViews,
            ref ID3D11ShaderResourceView ppShaderResourceViews
        ){
            var fp = GetFunctionPointer(31);
            var callback = (GSSetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSSetShaderResourcesFunc));
            
            callback(Self, StartSlot, NumViews, ref ppShaderResourceViews);
        }
        delegate void GSSetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref ID3D11ShaderResourceView ppShaderResourceViews);

        public void GSSetSamplers(
            uint StartSlot,
            uint NumSamplers,
            ref ID3D11SamplerState ppSamplers
        ){
            var fp = GetFunctionPointer(32);
            var callback = (GSSetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSSetSamplersFunc));
            
            callback(Self, StartSlot, NumSamplers, ref ppSamplers);
        }
        delegate void GSSetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref ID3D11SamplerState ppSamplers);

        public void OMSetRenderTargets(
            uint NumViews,
            ref ID3D11RenderTargetView ppRenderTargetViews,
            ID3D11DepthStencilView pDepthStencilView
        ){
            var fp = GetFunctionPointer(33);
            var callback = (OMSetRenderTargetsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMSetRenderTargetsFunc));
            
            callback(Self, NumViews, ref ppRenderTargetViews, pDepthStencilView.Ptr);
        }
        delegate void OMSetRenderTargetsFunc(IntPtr self, uint NumViews, ref ID3D11RenderTargetView ppRenderTargetViews, IntPtr pDepthStencilView);

        public void OMSetRenderTargetsAndUnorderedAccessViews(
            uint NumRTVs,
            ref ID3D11RenderTargetView ppRenderTargetViews,
            ID3D11DepthStencilView pDepthStencilView,
            uint UAVStartSlot,
            uint NumUAVs,
            ref ID3D11UnorderedAccessView ppUnorderedAccessViews,
            ref uint pUAVInitialCounts
        ){
            var fp = GetFunctionPointer(34);
            var callback = (OMSetRenderTargetsAndUnorderedAccessViewsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMSetRenderTargetsAndUnorderedAccessViewsFunc));
            
            callback(Self, NumRTVs, ref ppRenderTargetViews, pDepthStencilView.Ptr, UAVStartSlot, NumUAVs, ref ppUnorderedAccessViews, ref pUAVInitialCounts);
        }
        delegate void OMSetRenderTargetsAndUnorderedAccessViewsFunc(IntPtr self, uint NumRTVs, ref ID3D11RenderTargetView ppRenderTargetViews, IntPtr pDepthStencilView, uint UAVStartSlot, uint NumUAVs, ref ID3D11UnorderedAccessView ppUnorderedAccessViews, ref uint pUAVInitialCounts);

        public void OMSetBlendState(
            ID3D11BlendState pBlendState,
            ref float BlendFactor,
            uint SampleMask
        ){
            var fp = GetFunctionPointer(35);
            var callback = (OMSetBlendStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMSetBlendStateFunc));
            
            callback(Self, pBlendState.Ptr, ref BlendFactor, SampleMask);
        }
        delegate void OMSetBlendStateFunc(IntPtr self, IntPtr pBlendState, ref float BlendFactor, uint SampleMask);

        public void OMSetDepthStencilState(
            ID3D11DepthStencilState pDepthStencilState,
            uint StencilRef
        ){
            var fp = GetFunctionPointer(36);
            var callback = (OMSetDepthStencilStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMSetDepthStencilStateFunc));
            
            callback(Self, pDepthStencilState.Ptr, StencilRef);
        }
        delegate void OMSetDepthStencilStateFunc(IntPtr self, IntPtr pDepthStencilState, uint StencilRef);

        public void SOSetTargets(
            uint NumBuffers,
            ref ID3D11Buffer ppSOTargets,
            ref uint pOffsets
        ){
            var fp = GetFunctionPointer(37);
            var callback = (SOSetTargetsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SOSetTargetsFunc));
            
            callback(Self, NumBuffers, ref ppSOTargets, ref pOffsets);
        }
        delegate void SOSetTargetsFunc(IntPtr self, uint NumBuffers, ref ID3D11Buffer ppSOTargets, ref uint pOffsets);

        public void DrawAuto(
        ){
            var fp = GetFunctionPointer(38);
            var callback = (DrawAutoFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawAutoFunc));
            
            callback(Self);
        }
        delegate void DrawAutoFunc(IntPtr self);

        public void DrawIndexedInstancedIndirect(
            ID3D11Buffer pBufferForArgs,
            uint AlignedByteOffsetForArgs
        ){
            var fp = GetFunctionPointer(39);
            var callback = (DrawIndexedInstancedIndirectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawIndexedInstancedIndirectFunc));
            
            callback(Self, pBufferForArgs.Ptr, AlignedByteOffsetForArgs);
        }
        delegate void DrawIndexedInstancedIndirectFunc(IntPtr self, IntPtr pBufferForArgs, uint AlignedByteOffsetForArgs);

        public void DrawInstancedIndirect(
            ID3D11Buffer pBufferForArgs,
            uint AlignedByteOffsetForArgs
        ){
            var fp = GetFunctionPointer(40);
            var callback = (DrawInstancedIndirectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DrawInstancedIndirectFunc));
            
            callback(Self, pBufferForArgs.Ptr, AlignedByteOffsetForArgs);
        }
        delegate void DrawInstancedIndirectFunc(IntPtr self, IntPtr pBufferForArgs, uint AlignedByteOffsetForArgs);

        public void Dispatch(
            uint ThreadGroupCountX,
            uint ThreadGroupCountY,
            uint ThreadGroupCountZ
        ){
            var fp = GetFunctionPointer(41);
            var callback = (DispatchFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DispatchFunc));
            
            callback(Self, ThreadGroupCountX, ThreadGroupCountY, ThreadGroupCountZ);
        }
        delegate void DispatchFunc(IntPtr self, uint ThreadGroupCountX, uint ThreadGroupCountY, uint ThreadGroupCountZ);

        public void DispatchIndirect(
            ID3D11Buffer pBufferForArgs,
            uint AlignedByteOffsetForArgs
        ){
            var fp = GetFunctionPointer(42);
            var callback = (DispatchIndirectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DispatchIndirectFunc));
            
            callback(Self, pBufferForArgs.Ptr, AlignedByteOffsetForArgs);
        }
        delegate void DispatchIndirectFunc(IntPtr self, IntPtr pBufferForArgs, uint AlignedByteOffsetForArgs);

        public void RSSetState(
            ID3D11RasterizerState pRasterizerState
        ){
            var fp = GetFunctionPointer(43);
            var callback = (RSSetStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RSSetStateFunc));
            
            callback(Self, pRasterizerState.Ptr);
        }
        delegate void RSSetStateFunc(IntPtr self, IntPtr pRasterizerState);

        public void RSSetViewports(
            uint NumViewports,
            ref D3D11_VIEWPORT pViewports
        ){
            var fp = GetFunctionPointer(44);
            var callback = (RSSetViewportsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RSSetViewportsFunc));
            
            callback(Self, NumViewports, ref pViewports);
        }
        delegate void RSSetViewportsFunc(IntPtr self, uint NumViewports, ref D3D11_VIEWPORT pViewports);

        public void RSSetScissorRects(
            uint NumRects,
            ref D3D11_RECT pRects
        ){
            var fp = GetFunctionPointer(45);
            var callback = (RSSetScissorRectsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RSSetScissorRectsFunc));
            
            callback(Self, NumRects, ref pRects);
        }
        delegate void RSSetScissorRectsFunc(IntPtr self, uint NumRects, ref D3D11_RECT pRects);

        public void CopySubresourceRegion(
            ID3D11Resource pDstResource,
            uint DstSubresource,
            uint DstX,
            uint DstY,
            uint DstZ,
            ID3D11Resource pSrcResource,
            uint SrcSubresource,
            ref D3D11_BOX pSrcBox
        ){
            var fp = GetFunctionPointer(46);
            var callback = (CopySubresourceRegionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopySubresourceRegionFunc));
            
            callback(Self, pDstResource.Ptr, DstSubresource, DstX, DstY, DstZ, pSrcResource.Ptr, SrcSubresource, ref pSrcBox);
        }
        delegate void CopySubresourceRegionFunc(IntPtr self, IntPtr pDstResource, uint DstSubresource, uint DstX, uint DstY, uint DstZ, IntPtr pSrcResource, uint SrcSubresource, ref D3D11_BOX pSrcBox);

        public void CopyResource(
            ID3D11Resource pDstResource,
            ID3D11Resource pSrcResource
        ){
            var fp = GetFunctionPointer(47);
            var callback = (CopyResourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopyResourceFunc));
            
            callback(Self, pDstResource.Ptr, pSrcResource.Ptr);
        }
        delegate void CopyResourceFunc(IntPtr self, IntPtr pDstResource, IntPtr pSrcResource);

        public void UpdateSubresource(
            ID3D11Resource pDstResource,
            uint DstSubresource,
            ref D3D11_BOX pDstBox,
            IntPtr pSrcData,
            uint SrcRowPitch,
            uint SrcDepthPitch
        ){
            var fp = GetFunctionPointer(48);
            var callback = (UpdateSubresourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(UpdateSubresourceFunc));
            
            callback(Self, pDstResource.Ptr, DstSubresource, ref pDstBox, pSrcData, SrcRowPitch, SrcDepthPitch);
        }
        delegate void UpdateSubresourceFunc(IntPtr self, IntPtr pDstResource, uint DstSubresource, ref D3D11_BOX pDstBox, IntPtr pSrcData, uint SrcRowPitch, uint SrcDepthPitch);

        public void CopyStructureCount(
            ID3D11Buffer pDstBuffer,
            uint DstAlignedByteOffset,
            ID3D11UnorderedAccessView pSrcView
        ){
            var fp = GetFunctionPointer(49);
            var callback = (CopyStructureCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CopyStructureCountFunc));
            
            callback(Self, pDstBuffer.Ptr, DstAlignedByteOffset, pSrcView.Ptr);
        }
        delegate void CopyStructureCountFunc(IntPtr self, IntPtr pDstBuffer, uint DstAlignedByteOffset, IntPtr pSrcView);

        public void ClearRenderTargetView(
            ID3D11RenderTargetView pRenderTargetView,
            ref float ColorRGBA
        ){
            var fp = GetFunctionPointer(50);
            var callback = (ClearRenderTargetViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ClearRenderTargetViewFunc));
            
            callback(Self, pRenderTargetView.Ptr, ref ColorRGBA);
        }
        delegate void ClearRenderTargetViewFunc(IntPtr self, IntPtr pRenderTargetView, ref float ColorRGBA);

        public void ClearUnorderedAccessViewUint(
            ID3D11UnorderedAccessView pUnorderedAccessView,
            ref uint Values
        ){
            var fp = GetFunctionPointer(51);
            var callback = (ClearUnorderedAccessViewUintFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ClearUnorderedAccessViewUintFunc));
            
            callback(Self, pUnorderedAccessView.Ptr, ref Values);
        }
        delegate void ClearUnorderedAccessViewUintFunc(IntPtr self, IntPtr pUnorderedAccessView, ref uint Values);

        public void ClearUnorderedAccessViewFloat(
            ID3D11UnorderedAccessView pUnorderedAccessView,
            ref float Values
        ){
            var fp = GetFunctionPointer(52);
            var callback = (ClearUnorderedAccessViewFloatFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ClearUnorderedAccessViewFloatFunc));
            
            callback(Self, pUnorderedAccessView.Ptr, ref Values);
        }
        delegate void ClearUnorderedAccessViewFloatFunc(IntPtr self, IntPtr pUnorderedAccessView, ref float Values);

        public void ClearDepthStencilView(
            ID3D11DepthStencilView pDepthStencilView,
            uint ClearFlags,
            float Depth,
            UINT8 Stencil
        ){
            var fp = GetFunctionPointer(53);
            var callback = (ClearDepthStencilViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ClearDepthStencilViewFunc));
            
            callback(Self, pDepthStencilView.Ptr, ClearFlags, Depth, Stencil);
        }
        delegate void ClearDepthStencilViewFunc(IntPtr self, IntPtr pDepthStencilView, uint ClearFlags, float Depth, UINT8 Stencil);

        public void GenerateMips(
            ID3D11ShaderResourceView pShaderResourceView
        ){
            var fp = GetFunctionPointer(54);
            var callback = (GenerateMipsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GenerateMipsFunc));
            
            callback(Self, pShaderResourceView.Ptr);
        }
        delegate void GenerateMipsFunc(IntPtr self, IntPtr pShaderResourceView);

        public void SetResourceMinLOD(
            ID3D11Resource pResource,
            float MinLOD
        ){
            var fp = GetFunctionPointer(55);
            var callback = (SetResourceMinLODFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetResourceMinLODFunc));
            
            callback(Self, pResource.Ptr, MinLOD);
        }
        delegate void SetResourceMinLODFunc(IntPtr self, IntPtr pResource, float MinLOD);

        public float GetResourceMinLOD(
            ID3D11Resource pResource
        ){
            var fp = GetFunctionPointer(56);
            var callback = (GetResourceMinLODFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetResourceMinLODFunc));
            
            return callback(Self, pResource.Ptr);
        }
        delegate float GetResourceMinLODFunc(IntPtr self, IntPtr pResource);

        public void ResolveSubresource(
            ID3D11Resource pDstResource,
            uint DstSubresource,
            ID3D11Resource pSrcResource,
            uint SrcSubresource,
            DXGI_FORMAT Format
        ){
            var fp = GetFunctionPointer(57);
            var callback = (ResolveSubresourceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ResolveSubresourceFunc));
            
            callback(Self, pDstResource.Ptr, DstSubresource, pSrcResource.Ptr, SrcSubresource, Format);
        }
        delegate void ResolveSubresourceFunc(IntPtr self, IntPtr pDstResource, uint DstSubresource, IntPtr pSrcResource, uint SrcSubresource, DXGI_FORMAT Format);

        public void ExecuteCommandList(
            ID3D11CommandList pCommandList,
            int RestoreContextState
        ){
            var fp = GetFunctionPointer(58);
            var callback = (ExecuteCommandListFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ExecuteCommandListFunc));
            
            callback(Self, pCommandList.Ptr, RestoreContextState);
        }
        delegate void ExecuteCommandListFunc(IntPtr self, IntPtr pCommandList, int RestoreContextState);

        public void HSSetShaderResources(
            uint StartSlot,
            uint NumViews,
            ref ID3D11ShaderResourceView ppShaderResourceViews
        ){
            var fp = GetFunctionPointer(59);
            var callback = (HSSetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(HSSetShaderResourcesFunc));
            
            callback(Self, StartSlot, NumViews, ref ppShaderResourceViews);
        }
        delegate void HSSetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref ID3D11ShaderResourceView ppShaderResourceViews);

        public void HSSetShader(
            ID3D11HullShader pHullShader,
            ref ID3D11ClassInstance ppClassInstances,
            uint NumClassInstances
        ){
            var fp = GetFunctionPointer(60);
            var callback = (HSSetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(HSSetShaderFunc));
            
            callback(Self, pHullShader.Ptr, ref ppClassInstances, NumClassInstances);
        }
        delegate void HSSetShaderFunc(IntPtr self, IntPtr pHullShader, ref ID3D11ClassInstance ppClassInstances, uint NumClassInstances);

        public void HSSetSamplers(
            uint StartSlot,
            uint NumSamplers,
            ref ID3D11SamplerState ppSamplers
        ){
            var fp = GetFunctionPointer(61);
            var callback = (HSSetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(HSSetSamplersFunc));
            
            callback(Self, StartSlot, NumSamplers, ref ppSamplers);
        }
        delegate void HSSetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref ID3D11SamplerState ppSamplers);

        public void HSSetConstantBuffers(
            uint StartSlot,
            uint NumBuffers,
            ref ID3D11Buffer ppConstantBuffers
        ){
            var fp = GetFunctionPointer(62);
            var callback = (HSSetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(HSSetConstantBuffersFunc));
            
            callback(Self, StartSlot, NumBuffers, ref ppConstantBuffers);
        }
        delegate void HSSetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref ID3D11Buffer ppConstantBuffers);

        public void DSSetShaderResources(
            uint StartSlot,
            uint NumViews,
            ref ID3D11ShaderResourceView ppShaderResourceViews
        ){
            var fp = GetFunctionPointer(63);
            var callback = (DSSetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DSSetShaderResourcesFunc));
            
            callback(Self, StartSlot, NumViews, ref ppShaderResourceViews);
        }
        delegate void DSSetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref ID3D11ShaderResourceView ppShaderResourceViews);

        public void DSSetShader(
            ID3D11DomainShader pDomainShader,
            ref ID3D11ClassInstance ppClassInstances,
            uint NumClassInstances
        ){
            var fp = GetFunctionPointer(64);
            var callback = (DSSetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DSSetShaderFunc));
            
            callback(Self, pDomainShader.Ptr, ref ppClassInstances, NumClassInstances);
        }
        delegate void DSSetShaderFunc(IntPtr self, IntPtr pDomainShader, ref ID3D11ClassInstance ppClassInstances, uint NumClassInstances);

        public void DSSetSamplers(
            uint StartSlot,
            uint NumSamplers,
            ref ID3D11SamplerState ppSamplers
        ){
            var fp = GetFunctionPointer(65);
            var callback = (DSSetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DSSetSamplersFunc));
            
            callback(Self, StartSlot, NumSamplers, ref ppSamplers);
        }
        delegate void DSSetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref ID3D11SamplerState ppSamplers);

        public void DSSetConstantBuffers(
            uint StartSlot,
            uint NumBuffers,
            ref ID3D11Buffer ppConstantBuffers
        ){
            var fp = GetFunctionPointer(66);
            var callback = (DSSetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DSSetConstantBuffersFunc));
            
            callback(Self, StartSlot, NumBuffers, ref ppConstantBuffers);
        }
        delegate void DSSetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref ID3D11Buffer ppConstantBuffers);

        public void CSSetShaderResources(
            uint StartSlot,
            uint NumViews,
            ref ID3D11ShaderResourceView ppShaderResourceViews
        ){
            var fp = GetFunctionPointer(67);
            var callback = (CSSetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CSSetShaderResourcesFunc));
            
            callback(Self, StartSlot, NumViews, ref ppShaderResourceViews);
        }
        delegate void CSSetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref ID3D11ShaderResourceView ppShaderResourceViews);

        public void CSSetUnorderedAccessViews(
            uint StartSlot,
            uint NumUAVs,
            ref ID3D11UnorderedAccessView ppUnorderedAccessViews,
            ref uint pUAVInitialCounts
        ){
            var fp = GetFunctionPointer(68);
            var callback = (CSSetUnorderedAccessViewsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CSSetUnorderedAccessViewsFunc));
            
            callback(Self, StartSlot, NumUAVs, ref ppUnorderedAccessViews, ref pUAVInitialCounts);
        }
        delegate void CSSetUnorderedAccessViewsFunc(IntPtr self, uint StartSlot, uint NumUAVs, ref ID3D11UnorderedAccessView ppUnorderedAccessViews, ref uint pUAVInitialCounts);

        public void CSSetShader(
            ID3D11ComputeShader pComputeShader,
            ref ID3D11ClassInstance ppClassInstances,
            uint NumClassInstances
        ){
            var fp = GetFunctionPointer(69);
            var callback = (CSSetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CSSetShaderFunc));
            
            callback(Self, pComputeShader.Ptr, ref ppClassInstances, NumClassInstances);
        }
        delegate void CSSetShaderFunc(IntPtr self, IntPtr pComputeShader, ref ID3D11ClassInstance ppClassInstances, uint NumClassInstances);

        public void CSSetSamplers(
            uint StartSlot,
            uint NumSamplers,
            ref ID3D11SamplerState ppSamplers
        ){
            var fp = GetFunctionPointer(70);
            var callback = (CSSetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CSSetSamplersFunc));
            
            callback(Self, StartSlot, NumSamplers, ref ppSamplers);
        }
        delegate void CSSetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref ID3D11SamplerState ppSamplers);

        public void CSSetConstantBuffers(
            uint StartSlot,
            uint NumBuffers,
            ref ID3D11Buffer ppConstantBuffers
        ){
            var fp = GetFunctionPointer(71);
            var callback = (CSSetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CSSetConstantBuffersFunc));
            
            callback(Self, StartSlot, NumBuffers, ref ppConstantBuffers);
        }
        delegate void CSSetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref ID3D11Buffer ppConstantBuffers);

        public void VSGetConstantBuffers(
            uint StartSlot,
            uint NumBuffers,
            ref ID3D11Buffer ppConstantBuffers
        ){
            var fp = GetFunctionPointer(72);
            var callback = (VSGetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSGetConstantBuffersFunc));
            ppConstantBuffers = new ID3D11Buffer();
            callback(Self, StartSlot, NumBuffers, ref ppConstantBuffers.PtrForNew);
        }
        delegate void VSGetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers);

        public void PSGetShaderResources(
            uint StartSlot,
            uint NumViews,
            ref ID3D11ShaderResourceView ppShaderResourceViews
        ){
            var fp = GetFunctionPointer(73);
            var callback = (PSGetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSGetShaderResourcesFunc));
            ppShaderResourceViews = new ID3D11ShaderResourceView();
            callback(Self, StartSlot, NumViews, ref ppShaderResourceViews.PtrForNew);
        }
        delegate void PSGetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews);

        public void PSGetShader(
            ref ID3D11PixelShader ppPixelShader,
            ref ID3D11ClassInstance ppClassInstances,
            ref uint pNumClassInstances
        ){
            var fp = GetFunctionPointer(74);
            var callback = (PSGetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSGetShaderFunc));
            ppPixelShader = new ID3D11PixelShader();ppClassInstances = new ID3D11ClassInstance();
            callback(Self, ref ppPixelShader.PtrForNew, ref ppClassInstances.PtrForNew, ref pNumClassInstances);
        }
        delegate void PSGetShaderFunc(IntPtr self, ref IntPtr ppPixelShader, ref IntPtr ppClassInstances, ref uint pNumClassInstances);

        public void PSGetSamplers(
            uint StartSlot,
            uint NumSamplers,
            ref ID3D11SamplerState ppSamplers
        ){
            var fp = GetFunctionPointer(75);
            var callback = (PSGetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSGetSamplersFunc));
            ppSamplers = new ID3D11SamplerState();
            callback(Self, StartSlot, NumSamplers, ref ppSamplers.PtrForNew);
        }
        delegate void PSGetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers);

        public void VSGetShader(
            ref ID3D11VertexShader ppVertexShader,
            ref ID3D11ClassInstance ppClassInstances,
            ref uint pNumClassInstances
        ){
            var fp = GetFunctionPointer(76);
            var callback = (VSGetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSGetShaderFunc));
            ppVertexShader = new ID3D11VertexShader();ppClassInstances = new ID3D11ClassInstance();
            callback(Self, ref ppVertexShader.PtrForNew, ref ppClassInstances.PtrForNew, ref pNumClassInstances);
        }
        delegate void VSGetShaderFunc(IntPtr self, ref IntPtr ppVertexShader, ref IntPtr ppClassInstances, ref uint pNumClassInstances);

        public void PSGetConstantBuffers(
            uint StartSlot,
            uint NumBuffers,
            ref ID3D11Buffer ppConstantBuffers
        ){
            var fp = GetFunctionPointer(77);
            var callback = (PSGetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(PSGetConstantBuffersFunc));
            ppConstantBuffers = new ID3D11Buffer();
            callback(Self, StartSlot, NumBuffers, ref ppConstantBuffers.PtrForNew);
        }
        delegate void PSGetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers);

        public void IAGetInputLayout(
            ref ID3D11InputLayout ppInputLayout
        ){
            var fp = GetFunctionPointer(78);
            var callback = (IAGetInputLayoutFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IAGetInputLayoutFunc));
            ppInputLayout = new ID3D11InputLayout();
            callback(Self, ref ppInputLayout.PtrForNew);
        }
        delegate void IAGetInputLayoutFunc(IntPtr self, ref IntPtr ppInputLayout);

        public void IAGetVertexBuffers(
            uint StartSlot,
            uint NumBuffers,
            ref ID3D11Buffer ppVertexBuffers,
            ref uint pStrides,
            ref uint pOffsets
        ){
            var fp = GetFunctionPointer(79);
            var callback = (IAGetVertexBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IAGetVertexBuffersFunc));
            ppVertexBuffers = new ID3D11Buffer();
            callback(Self, StartSlot, NumBuffers, ref ppVertexBuffers.PtrForNew, ref pStrides, ref pOffsets);
        }
        delegate void IAGetVertexBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppVertexBuffers, ref uint pStrides, ref uint pOffsets);

        public void IAGetIndexBuffer(
            ref ID3D11Buffer pIndexBuffer,
            ref DXGI_FORMAT Format,
            ref uint Offset
        ){
            var fp = GetFunctionPointer(80);
            var callback = (IAGetIndexBufferFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IAGetIndexBufferFunc));
            pIndexBuffer = new ID3D11Buffer();
            callback(Self, ref pIndexBuffer.PtrForNew, ref Format, ref Offset);
        }
        delegate void IAGetIndexBufferFunc(IntPtr self, ref IntPtr pIndexBuffer, ref DXGI_FORMAT Format, ref uint Offset);

        public void GSGetConstantBuffers(
            uint StartSlot,
            uint NumBuffers,
            ref ID3D11Buffer ppConstantBuffers
        ){
            var fp = GetFunctionPointer(81);
            var callback = (GSGetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSGetConstantBuffersFunc));
            ppConstantBuffers = new ID3D11Buffer();
            callback(Self, StartSlot, NumBuffers, ref ppConstantBuffers.PtrForNew);
        }
        delegate void GSGetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers);

        public void GSGetShader(
            ref ID3D11GeometryShader ppGeometryShader,
            ref ID3D11ClassInstance ppClassInstances,
            ref uint pNumClassInstances
        ){
            var fp = GetFunctionPointer(82);
            var callback = (GSGetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSGetShaderFunc));
            ppGeometryShader = new ID3D11GeometryShader();ppClassInstances = new ID3D11ClassInstance();
            callback(Self, ref ppGeometryShader.PtrForNew, ref ppClassInstances.PtrForNew, ref pNumClassInstances);
        }
        delegate void GSGetShaderFunc(IntPtr self, ref IntPtr ppGeometryShader, ref IntPtr ppClassInstances, ref uint pNumClassInstances);

        public void IAGetPrimitiveTopology(
            ref D3D11_PRIMITIVE_TOPOLOGY pTopology
        ){
            var fp = GetFunctionPointer(83);
            var callback = (IAGetPrimitiveTopologyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(IAGetPrimitiveTopologyFunc));
            
            callback(Self, ref pTopology);
        }
        delegate void IAGetPrimitiveTopologyFunc(IntPtr self, ref D3D11_PRIMITIVE_TOPOLOGY pTopology);

        public void VSGetShaderResources(
            uint StartSlot,
            uint NumViews,
            ref ID3D11ShaderResourceView ppShaderResourceViews
        ){
            var fp = GetFunctionPointer(84);
            var callback = (VSGetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSGetShaderResourcesFunc));
            ppShaderResourceViews = new ID3D11ShaderResourceView();
            callback(Self, StartSlot, NumViews, ref ppShaderResourceViews.PtrForNew);
        }
        delegate void VSGetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews);

        public void VSGetSamplers(
            uint StartSlot,
            uint NumSamplers,
            ref ID3D11SamplerState ppSamplers
        ){
            var fp = GetFunctionPointer(85);
            var callback = (VSGetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VSGetSamplersFunc));
            ppSamplers = new ID3D11SamplerState();
            callback(Self, StartSlot, NumSamplers, ref ppSamplers.PtrForNew);
        }
        delegate void VSGetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers);

        public void GetPredication(
            ref ID3D11Predicate ppPredicate,
            ref int pPredicateValue
        ){
            var fp = GetFunctionPointer(86);
            var callback = (GetPredicationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetPredicationFunc));
            ppPredicate = new ID3D11Predicate();
            callback(Self, ref ppPredicate.PtrForNew, ref pPredicateValue);
        }
        delegate void GetPredicationFunc(IntPtr self, ref IntPtr ppPredicate, ref int pPredicateValue);

        public void GSGetShaderResources(
            uint StartSlot,
            uint NumViews,
            ref ID3D11ShaderResourceView ppShaderResourceViews
        ){
            var fp = GetFunctionPointer(87);
            var callback = (GSGetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSGetShaderResourcesFunc));
            ppShaderResourceViews = new ID3D11ShaderResourceView();
            callback(Self, StartSlot, NumViews, ref ppShaderResourceViews.PtrForNew);
        }
        delegate void GSGetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews);

        public void GSGetSamplers(
            uint StartSlot,
            uint NumSamplers,
            ref ID3D11SamplerState ppSamplers
        ){
            var fp = GetFunctionPointer(88);
            var callback = (GSGetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GSGetSamplersFunc));
            ppSamplers = new ID3D11SamplerState();
            callback(Self, StartSlot, NumSamplers, ref ppSamplers.PtrForNew);
        }
        delegate void GSGetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers);

        public void OMGetRenderTargets(
            uint NumViews,
            ref ID3D11RenderTargetView ppRenderTargetViews,
            ref ID3D11DepthStencilView ppDepthStencilView
        ){
            var fp = GetFunctionPointer(89);
            var callback = (OMGetRenderTargetsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMGetRenderTargetsFunc));
            ppRenderTargetViews = new ID3D11RenderTargetView();ppDepthStencilView = new ID3D11DepthStencilView();
            callback(Self, NumViews, ref ppRenderTargetViews.PtrForNew, ref ppDepthStencilView.PtrForNew);
        }
        delegate void OMGetRenderTargetsFunc(IntPtr self, uint NumViews, ref IntPtr ppRenderTargetViews, ref IntPtr ppDepthStencilView);

        public void OMGetRenderTargetsAndUnorderedAccessViews(
            uint NumRTVs,
            ref ID3D11RenderTargetView ppRenderTargetViews,
            ref ID3D11DepthStencilView ppDepthStencilView,
            uint UAVStartSlot,
            uint NumUAVs,
            ref ID3D11UnorderedAccessView ppUnorderedAccessViews
        ){
            var fp = GetFunctionPointer(90);
            var callback = (OMGetRenderTargetsAndUnorderedAccessViewsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMGetRenderTargetsAndUnorderedAccessViewsFunc));
            ppRenderTargetViews = new ID3D11RenderTargetView();ppDepthStencilView = new ID3D11DepthStencilView();ppUnorderedAccessViews = new ID3D11UnorderedAccessView();
            callback(Self, NumRTVs, ref ppRenderTargetViews.PtrForNew, ref ppDepthStencilView.PtrForNew, UAVStartSlot, NumUAVs, ref ppUnorderedAccessViews.PtrForNew);
        }
        delegate void OMGetRenderTargetsAndUnorderedAccessViewsFunc(IntPtr self, uint NumRTVs, ref IntPtr ppRenderTargetViews, ref IntPtr ppDepthStencilView, uint UAVStartSlot, uint NumUAVs, ref IntPtr ppUnorderedAccessViews);

        public void OMGetBlendState(
            ref ID3D11BlendState ppBlendState,
            ref float BlendFactor,
            ref uint pSampleMask
        ){
            var fp = GetFunctionPointer(91);
            var callback = (OMGetBlendStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMGetBlendStateFunc));
            ppBlendState = new ID3D11BlendState();
            callback(Self, ref ppBlendState.PtrForNew, ref BlendFactor, ref pSampleMask);
        }
        delegate void OMGetBlendStateFunc(IntPtr self, ref IntPtr ppBlendState, ref float BlendFactor, ref uint pSampleMask);

        public void OMGetDepthStencilState(
            ref ID3D11DepthStencilState ppDepthStencilState,
            ref uint pStencilRef
        ){
            var fp = GetFunctionPointer(92);
            var callback = (OMGetDepthStencilStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(OMGetDepthStencilStateFunc));
            ppDepthStencilState = new ID3D11DepthStencilState();
            callback(Self, ref ppDepthStencilState.PtrForNew, ref pStencilRef);
        }
        delegate void OMGetDepthStencilStateFunc(IntPtr self, ref IntPtr ppDepthStencilState, ref uint pStencilRef);

        public void SOGetTargets(
            uint NumBuffers,
            ref ID3D11Buffer ppSOTargets
        ){
            var fp = GetFunctionPointer(93);
            var callback = (SOGetTargetsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SOGetTargetsFunc));
            ppSOTargets = new ID3D11Buffer();
            callback(Self, NumBuffers, ref ppSOTargets.PtrForNew);
        }
        delegate void SOGetTargetsFunc(IntPtr self, uint NumBuffers, ref IntPtr ppSOTargets);

        public void RSGetState(
            ref ID3D11RasterizerState ppRasterizerState
        ){
            var fp = GetFunctionPointer(94);
            var callback = (RSGetStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RSGetStateFunc));
            ppRasterizerState = new ID3D11RasterizerState();
            callback(Self, ref ppRasterizerState.PtrForNew);
        }
        delegate void RSGetStateFunc(IntPtr self, ref IntPtr ppRasterizerState);

        public void RSGetViewports(
            ref uint pNumViewports,
            ref D3D11_VIEWPORT pViewports
        ){
            var fp = GetFunctionPointer(95);
            var callback = (RSGetViewportsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RSGetViewportsFunc));
            
            callback(Self, ref pNumViewports, ref pViewports);
        }
        delegate void RSGetViewportsFunc(IntPtr self, ref uint pNumViewports, ref D3D11_VIEWPORT pViewports);

        public void RSGetScissorRects(
            ref uint pNumRects,
            ref D3D11_RECT pRects
        ){
            var fp = GetFunctionPointer(96);
            var callback = (RSGetScissorRectsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(RSGetScissorRectsFunc));
            
            callback(Self, ref pNumRects, ref pRects);
        }
        delegate void RSGetScissorRectsFunc(IntPtr self, ref uint pNumRects, ref D3D11_RECT pRects);

        public void HSGetShaderResources(
            uint StartSlot,
            uint NumViews,
            ref ID3D11ShaderResourceView ppShaderResourceViews
        ){
            var fp = GetFunctionPointer(97);
            var callback = (HSGetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(HSGetShaderResourcesFunc));
            ppShaderResourceViews = new ID3D11ShaderResourceView();
            callback(Self, StartSlot, NumViews, ref ppShaderResourceViews.PtrForNew);
        }
        delegate void HSGetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews);

        public void HSGetShader(
            ref ID3D11HullShader ppHullShader,
            ref ID3D11ClassInstance ppClassInstances,
            ref uint pNumClassInstances
        ){
            var fp = GetFunctionPointer(98);
            var callback = (HSGetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(HSGetShaderFunc));
            ppHullShader = new ID3D11HullShader();ppClassInstances = new ID3D11ClassInstance();
            callback(Self, ref ppHullShader.PtrForNew, ref ppClassInstances.PtrForNew, ref pNumClassInstances);
        }
        delegate void HSGetShaderFunc(IntPtr self, ref IntPtr ppHullShader, ref IntPtr ppClassInstances, ref uint pNumClassInstances);

        public void HSGetSamplers(
            uint StartSlot,
            uint NumSamplers,
            ref ID3D11SamplerState ppSamplers
        ){
            var fp = GetFunctionPointer(99);
            var callback = (HSGetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(HSGetSamplersFunc));
            ppSamplers = new ID3D11SamplerState();
            callback(Self, StartSlot, NumSamplers, ref ppSamplers.PtrForNew);
        }
        delegate void HSGetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers);

        public void HSGetConstantBuffers(
            uint StartSlot,
            uint NumBuffers,
            ref ID3D11Buffer ppConstantBuffers
        ){
            var fp = GetFunctionPointer(100);
            var callback = (HSGetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(HSGetConstantBuffersFunc));
            ppConstantBuffers = new ID3D11Buffer();
            callback(Self, StartSlot, NumBuffers, ref ppConstantBuffers.PtrForNew);
        }
        delegate void HSGetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers);

        public void DSGetShaderResources(
            uint StartSlot,
            uint NumViews,
            ref ID3D11ShaderResourceView ppShaderResourceViews
        ){
            var fp = GetFunctionPointer(101);
            var callback = (DSGetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DSGetShaderResourcesFunc));
            ppShaderResourceViews = new ID3D11ShaderResourceView();
            callback(Self, StartSlot, NumViews, ref ppShaderResourceViews.PtrForNew);
        }
        delegate void DSGetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews);

        public void DSGetShader(
            ref ID3D11DomainShader ppDomainShader,
            ref ID3D11ClassInstance ppClassInstances,
            ref uint pNumClassInstances
        ){
            var fp = GetFunctionPointer(102);
            var callback = (DSGetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DSGetShaderFunc));
            ppDomainShader = new ID3D11DomainShader();ppClassInstances = new ID3D11ClassInstance();
            callback(Self, ref ppDomainShader.PtrForNew, ref ppClassInstances.PtrForNew, ref pNumClassInstances);
        }
        delegate void DSGetShaderFunc(IntPtr self, ref IntPtr ppDomainShader, ref IntPtr ppClassInstances, ref uint pNumClassInstances);

        public void DSGetSamplers(
            uint StartSlot,
            uint NumSamplers,
            ref ID3D11SamplerState ppSamplers
        ){
            var fp = GetFunctionPointer(103);
            var callback = (DSGetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DSGetSamplersFunc));
            ppSamplers = new ID3D11SamplerState();
            callback(Self, StartSlot, NumSamplers, ref ppSamplers.PtrForNew);
        }
        delegate void DSGetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers);

        public void DSGetConstantBuffers(
            uint StartSlot,
            uint NumBuffers,
            ref ID3D11Buffer ppConstantBuffers
        ){
            var fp = GetFunctionPointer(104);
            var callback = (DSGetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DSGetConstantBuffersFunc));
            ppConstantBuffers = new ID3D11Buffer();
            callback(Self, StartSlot, NumBuffers, ref ppConstantBuffers.PtrForNew);
        }
        delegate void DSGetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers);

        public void CSGetShaderResources(
            uint StartSlot,
            uint NumViews,
            ref ID3D11ShaderResourceView ppShaderResourceViews
        ){
            var fp = GetFunctionPointer(105);
            var callback = (CSGetShaderResourcesFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CSGetShaderResourcesFunc));
            ppShaderResourceViews = new ID3D11ShaderResourceView();
            callback(Self, StartSlot, NumViews, ref ppShaderResourceViews.PtrForNew);
        }
        delegate void CSGetShaderResourcesFunc(IntPtr self, uint StartSlot, uint NumViews, ref IntPtr ppShaderResourceViews);

        public void CSGetUnorderedAccessViews(
            uint StartSlot,
            uint NumUAVs,
            ref ID3D11UnorderedAccessView ppUnorderedAccessViews
        ){
            var fp = GetFunctionPointer(106);
            var callback = (CSGetUnorderedAccessViewsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CSGetUnorderedAccessViewsFunc));
            ppUnorderedAccessViews = new ID3D11UnorderedAccessView();
            callback(Self, StartSlot, NumUAVs, ref ppUnorderedAccessViews.PtrForNew);
        }
        delegate void CSGetUnorderedAccessViewsFunc(IntPtr self, uint StartSlot, uint NumUAVs, ref IntPtr ppUnorderedAccessViews);

        public void CSGetShader(
            ref ID3D11ComputeShader ppComputeShader,
            ref ID3D11ClassInstance ppClassInstances,
            ref uint pNumClassInstances
        ){
            var fp = GetFunctionPointer(107);
            var callback = (CSGetShaderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CSGetShaderFunc));
            ppComputeShader = new ID3D11ComputeShader();ppClassInstances = new ID3D11ClassInstance();
            callback(Self, ref ppComputeShader.PtrForNew, ref ppClassInstances.PtrForNew, ref pNumClassInstances);
        }
        delegate void CSGetShaderFunc(IntPtr self, ref IntPtr ppComputeShader, ref IntPtr ppClassInstances, ref uint pNumClassInstances);

        public void CSGetSamplers(
            uint StartSlot,
            uint NumSamplers,
            ref ID3D11SamplerState ppSamplers
        ){
            var fp = GetFunctionPointer(108);
            var callback = (CSGetSamplersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CSGetSamplersFunc));
            ppSamplers = new ID3D11SamplerState();
            callback(Self, StartSlot, NumSamplers, ref ppSamplers.PtrForNew);
        }
        delegate void CSGetSamplersFunc(IntPtr self, uint StartSlot, uint NumSamplers, ref IntPtr ppSamplers);

        public void CSGetConstantBuffers(
            uint StartSlot,
            uint NumBuffers,
            ref ID3D11Buffer ppConstantBuffers
        ){
            var fp = GetFunctionPointer(109);
            var callback = (CSGetConstantBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CSGetConstantBuffersFunc));
            ppConstantBuffers = new ID3D11Buffer();
            callback(Self, StartSlot, NumBuffers, ref ppConstantBuffers.PtrForNew);
        }
        delegate void CSGetConstantBuffersFunc(IntPtr self, uint StartSlot, uint NumBuffers, ref IntPtr ppConstantBuffers);

        public void ClearState(
        ){
            var fp = GetFunctionPointer(110);
            var callback = (ClearStateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ClearStateFunc));
            
            callback(Self);
        }
        delegate void ClearStateFunc(IntPtr self);

        public void Flush(
        ){
            var fp = GetFunctionPointer(111);
            var callback = (FlushFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FlushFunc));
            
            callback(Self);
        }
        delegate void FlushFunc(IntPtr self);

        public D3D11_DEVICE_CONTEXT_TYPE GetType(
        ){
            var fp = GetFunctionPointer(112);
            var callback = (GetTypeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetTypeFunc));
            
            return callback(Self);
        }
        delegate D3D11_DEVICE_CONTEXT_TYPE GetTypeFunc(IntPtr self);

        public uint GetContextFlags(
        ){
            var fp = GetFunctionPointer(113);
            var callback = (GetContextFlagsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetContextFlagsFunc));
            
            return callback(Self);
        }
        delegate uint GetContextFlagsFunc(IntPtr self);

        public HRESULT FinishCommandList(
            int RestoreDeferredContextState,
            ref ID3D11CommandList ppCommandList
        ){
            var fp = GetFunctionPointer(114);
            var callback = (FinishCommandListFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FinishCommandListFunc));
            ppCommandList = new ID3D11CommandList();
            return callback(Self, RestoreDeferredContextState, ref ppCommandList.PtrForNew);
        }
        delegate HRESULT FinishCommandListFunc(IntPtr self, int RestoreDeferredContextState, ref IntPtr ppCommandList);

    }
    public enum D3D11_MAP
    {
        _READ = 0x1,
        _WRITE = 0x2,
        _READ_WRITE = 0x3,
        _WRITE_DISCARD = 0x4,
        _WRITE_NO_OVERWRITE = 0x5,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_MAPPED_SUBRESOURCE
    {
        public IntPtr pData;
        public uint RowPitch;
        public uint DepthPitch;
    }
    public struct D3D11_PRIMITIVE_TOPOLOGY { public D3D_PRIMITIVE_TOPOLOGY Value; }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_VIEWPORT
    {
        public float TopLeftX;
        public float TopLeftY;
        public float Width;
        public float Height;
        public float MinDepth;
        public float MaxDepth;
    }
    public struct D3D11_RECT { public RECT Value; }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_BOX
    {
        public uint left;
        public uint top;
        public uint front;
        public uint right;
        public uint bottom;
        public uint back;
    }
    public class ID3D11CommandList: ID3D11DeviceChild
    {
        static /*readonly*/ Guid s_uuid = new Guid("a24bc4d1-769e-43f7-8013-98ff566c18e2");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public uint GetContextFlags(
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetContextFlagsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetContextFlagsFunc));
            
            return callback(Self);
        }
        delegate uint GetContextFlagsFunc(IntPtr self);

    }
    public enum D3D11_DEVICE_CONTEXT_TYPE
    {
        _IMMEDIATE = 0x0,
        _DEFERRED = 0x1,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_COUNTER_INFO
    {
        public D3D11_COUNTER LastDeviceDependentCounter;
        public uint NumSimultaneousCounters;
        public UINT8 NumDetectableParallelUnits;
    }
    public enum D3D11_COUNTER_TYPE
    {
        _FLOAT32 = 0x0,
        _UINT16 = 0x1,
        _UINT32 = 0x2,
        _UINT64 = 0x3,
    }
    public enum D3D11_FEATURE
    {
        _THREADING = 0x0,
        _DOUBLES = 0x1,
        _FORMAT_SUPPORT = 0x2,
        _FORMAT_SUPPORT2 = 0x3,
        _D3D10_X_HARDWARE_OPTIONS = 0x4,
        _D3D11_OPTIONS = 0x5,
        _ARCHITECTURE_INFO = 0x6,
        _D3D9_OPTIONS = 0x7,
        _SHADER_MIN_PRECISION_SUPPORT = 0x8,
        _D3D9_SHADOW_SUPPORT = 0x9,
        _D3D11_OPTIONS1 = 0xa,
        _D3D9_SIMPLE_INSTANCING_SUPPORT = 0xb,
        _MARKER_SUPPORT = 0xc,
        _D3D9_OPTIONS1 = 0xd,
        _D3D11_OPTIONS2 = 0xe,
        _D3D11_OPTIONS3 = 0xf,
        _GPU_VIRTUAL_ADDRESS_SUPPORT = 0x10,
        _D3D11_OPTIONS4 = 0x11,
        _SHADER_CACHE = 0x12,
        _D3D11_OPTIONS5 = 0x13,
    }
    public class ID3D11VideoDecoder: ID3D11DeviceChild
    {
        static /*readonly*/ Guid s_uuid = new Guid("3c9c5b51-995d-48d1-9b8d-fa5caeded65c");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public HRESULT GetCreationParameters(
            ref D3D11_VIDEO_DECODER_DESC pVideoDesc,
            ref D3D11_VIDEO_DECODER_CONFIG pConfig
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetCreationParametersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetCreationParametersFunc));
            
            return callback(Self, ref pVideoDesc, ref pConfig);
        }
        delegate HRESULT GetCreationParametersFunc(IntPtr self, ref D3D11_VIDEO_DECODER_DESC pVideoDesc, ref D3D11_VIDEO_DECODER_CONFIG pConfig);

        public HRESULT GetDriverHandle(
            ref HANDLE pDriverHandle
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetDriverHandleFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDriverHandleFunc));
            
            return callback(Self, ref pDriverHandle);
        }
        delegate HRESULT GetDriverHandleFunc(IntPtr self, ref HANDLE pDriverHandle);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_VIDEO_DECODER_DESC
    {
        public Guid Guid;
        public uint SampleWidth;
        public uint SampleHeight;
        public DXGI_FORMAT OutputFormat;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_VIDEO_DECODER_CONFIG
    {
        public Guid guidConfigBitstreamEncryption;
        public Guid guidConfigMBcontrolEncryption;
        public Guid guidConfigResidDiffEncryption;
        public uint ConfigBitstreamRaw;
        public uint ConfigMBcontrolRasterOrder;
        public uint ConfigResidDiffHost;
        public uint ConfigSpatialResid8;
        public uint ConfigResid8Subtraction;
        public uint ConfigSpatialHost8or9Clipping;
        public uint ConfigSpatialResidInterleaved;
        public uint ConfigIntraResidUnsigned;
        public uint ConfigResidDiffAccelerator;
        public uint ConfigHostInverseScan;
        public uint ConfigSpecificIDCT;
        public uint Config4GroupedCoefs;
        public USHORT ConfigMinRenderTargetBuffCount;
        public USHORT ConfigDecoderSpecific;
    }
    public class ID3D11VideoProcessorEnumerator: ID3D11DeviceChild
    {
        static /*readonly*/ Guid s_uuid = new Guid("31627037-53ab-4200-9061-05faa9ab45f9");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public HRESULT GetVideoProcessorContentDesc(
            ref D3D11_VIDEO_PROCESSOR_CONTENT_DESC pContentDesc
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetVideoProcessorContentDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetVideoProcessorContentDescFunc));
            
            return callback(Self, ref pContentDesc);
        }
        delegate HRESULT GetVideoProcessorContentDescFunc(IntPtr self, ref D3D11_VIDEO_PROCESSOR_CONTENT_DESC pContentDesc);

        public HRESULT CheckVideoProcessorFormat(
            DXGI_FORMAT Format,
            ref uint pFlags
        ){
            var fp = GetFunctionPointer(8);
            var callback = (CheckVideoProcessorFormatFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CheckVideoProcessorFormatFunc));
            
            return callback(Self, Format, ref pFlags);
        }
        delegate HRESULT CheckVideoProcessorFormatFunc(IntPtr self, DXGI_FORMAT Format, ref uint pFlags);

        public HRESULT GetVideoProcessorCaps(
            ref D3D11_VIDEO_PROCESSOR_CAPS pCaps
        ){
            var fp = GetFunctionPointer(9);
            var callback = (GetVideoProcessorCapsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetVideoProcessorCapsFunc));
            
            return callback(Self, ref pCaps);
        }
        delegate HRESULT GetVideoProcessorCapsFunc(IntPtr self, ref D3D11_VIDEO_PROCESSOR_CAPS pCaps);

        public HRESULT GetVideoProcessorRateConversionCaps(
            uint TypeIndex,
            ref D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS pCaps
        ){
            var fp = GetFunctionPointer(10);
            var callback = (GetVideoProcessorRateConversionCapsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetVideoProcessorRateConversionCapsFunc));
            
            return callback(Self, TypeIndex, ref pCaps);
        }
        delegate HRESULT GetVideoProcessorRateConversionCapsFunc(IntPtr self, uint TypeIndex, ref D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS pCaps);

        public HRESULT GetVideoProcessorCustomRate(
            uint TypeIndex,
            uint CustomRateIndex,
            ref D3D11_VIDEO_PROCESSOR_CUSTOM_RATE pRate
        ){
            var fp = GetFunctionPointer(11);
            var callback = (GetVideoProcessorCustomRateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetVideoProcessorCustomRateFunc));
            
            return callback(Self, TypeIndex, CustomRateIndex, ref pRate);
        }
        delegate HRESULT GetVideoProcessorCustomRateFunc(IntPtr self, uint TypeIndex, uint CustomRateIndex, ref D3D11_VIDEO_PROCESSOR_CUSTOM_RATE pRate);

        public HRESULT GetVideoProcessorFilterRange(
            D3D11_VIDEO_PROCESSOR_FILTER Filter,
            ref D3D11_VIDEO_PROCESSOR_FILTER_RANGE pRange
        ){
            var fp = GetFunctionPointer(12);
            var callback = (GetVideoProcessorFilterRangeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetVideoProcessorFilterRangeFunc));
            
            return callback(Self, Filter, ref pRange);
        }
        delegate HRESULT GetVideoProcessorFilterRangeFunc(IntPtr self, D3D11_VIDEO_PROCESSOR_FILTER Filter, ref D3D11_VIDEO_PROCESSOR_FILTER_RANGE pRange);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_VIDEO_PROCESSOR_CONTENT_DESC
    {
        public D3D11_VIDEO_FRAME_FORMAT InputFrameFormat;
        public DXGI_RATIONAL InputFrameRate;
        public uint InputWidth;
        public uint InputHeight;
        public DXGI_RATIONAL OutputFrameRate;
        public uint OutputWidth;
        public uint OutputHeight;
        public D3D11_VIDEO_USAGE Usage;
    }
    public enum D3D11_VIDEO_FRAME_FORMAT
    {
        _PROGRESSIVE = 0x0,
        _INTERLACED_TOP_FIELD_FIRST = 0x1,
        _INTERLACED_BOTTOM_FIELD_FIRST = 0x2,
    }
    public enum D3D11_VIDEO_USAGE
    {
        _PLAYBACK_NORMAL = 0x0,
        _OPTIMAL_SPEED = 0x1,
        _OPTIMAL_QUALITY = 0x2,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_VIDEO_PROCESSOR_CAPS
    {
        public uint DeviceCaps;
        public uint FeatureCaps;
        public uint FilterCaps;
        public uint InputFormatCaps;
        public uint AutoStreamCaps;
        public uint StereoCaps;
        public uint RateConversionCapsCount;
        public uint MaxInputStreams;
        public uint MaxStreamStates;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS
    {
        public uint PastFrames;
        public uint FutureFrames;
        public uint ProcessorCaps;
        public uint ITelecineCaps;
        public uint CustomRateCount;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_VIDEO_PROCESSOR_CUSTOM_RATE
    {
        public DXGI_RATIONAL CustomRate;
        public uint OutputFrames;
        public int InputInterlaced;
        public uint InputFramesOrFields;
    }
    public enum D3D11_VIDEO_PROCESSOR_FILTER
    {
        _BRIGHTNESS = 0x0,
        _CONTRAST = 0x1,
        _HUE = 0x2,
        _SATURATION = 0x3,
        _NOISE_REDUCTION = 0x4,
        _EDGE_ENHANCEMENT = 0x5,
        _ANAMORPHIC_SCALING = 0x6,
        _STEREO_ADJUSTMENT = 0x7,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_VIDEO_PROCESSOR_FILTER_RANGE
    {
        public int Minimum;
        public int Maximum;
        public int Default;
        public float Multiplier;
    }
    public class ID3D11VideoProcessor: ID3D11DeviceChild
    {
        static /*readonly*/ Guid s_uuid = new Guid("1d7b0652-185f-41c6-85ce-0c5be3d4ae6c");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public void GetContentDesc(
            ref D3D11_VIDEO_PROCESSOR_CONTENT_DESC pDesc
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetContentDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetContentDescFunc));
            
            callback(Self, ref pDesc);
        }
        delegate void GetContentDescFunc(IntPtr self, ref D3D11_VIDEO_PROCESSOR_CONTENT_DESC pDesc);

        public void GetRateConversionCaps(
            ref D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS pCaps
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetRateConversionCapsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetRateConversionCapsFunc));
            
            callback(Self, ref pCaps);
        }
        delegate void GetRateConversionCapsFunc(IntPtr self, ref D3D11_VIDEO_PROCESSOR_RATE_CONVERSION_CAPS pCaps);

    }
    public class ID3D11AuthenticatedChannel: ID3D11DeviceChild
    {
        static /*readonly*/ Guid s_uuid = new Guid("3015a308-dcbd-47aa-a747-192486d14d4a");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public HRESULT GetCertificateSize(
            ref uint pCertificateSize
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetCertificateSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetCertificateSizeFunc));
            
            return callback(Self, ref pCertificateSize);
        }
        delegate HRESULT GetCertificateSizeFunc(IntPtr self, ref uint pCertificateSize);

        public HRESULT GetCertificate(
            uint CertificateSize,
            ref byte pCertificate
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetCertificateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetCertificateFunc));
            
            return callback(Self, CertificateSize, ref pCertificate);
        }
        delegate HRESULT GetCertificateFunc(IntPtr self, uint CertificateSize, ref byte pCertificate);

        public void GetChannelHandle(
            ref HANDLE pChannelHandle
        ){
            var fp = GetFunctionPointer(9);
            var callback = (GetChannelHandleFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetChannelHandleFunc));
            
            callback(Self, ref pChannelHandle);
        }
        delegate void GetChannelHandleFunc(IntPtr self, ref HANDLE pChannelHandle);

    }
    public class ID3D11CryptoSession: ID3D11DeviceChild
    {
        static /*readonly*/ Guid s_uuid = new Guid("9b32f9ad-bdcc-40a6-a39d-d5c865845720");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public void GetCryptoType(
            ref Guid pCryptoType
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetCryptoTypeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetCryptoTypeFunc));
            
            callback(Self, ref pCryptoType);
        }
        delegate void GetCryptoTypeFunc(IntPtr self, ref Guid pCryptoType);

        public void GetDecoderProfile(
            ref Guid pDecoderProfile
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetDecoderProfileFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDecoderProfileFunc));
            
            callback(Self, ref pDecoderProfile);
        }
        delegate void GetDecoderProfileFunc(IntPtr self, ref Guid pDecoderProfile);

        public HRESULT GetCertificateSize(
            ref uint pCertificateSize
        ){
            var fp = GetFunctionPointer(9);
            var callback = (GetCertificateSizeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetCertificateSizeFunc));
            
            return callback(Self, ref pCertificateSize);
        }
        delegate HRESULT GetCertificateSizeFunc(IntPtr self, ref uint pCertificateSize);

        public HRESULT GetCertificate(
            uint CertificateSize,
            ref byte pCertificate
        ){
            var fp = GetFunctionPointer(10);
            var callback = (GetCertificateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetCertificateFunc));
            
            return callback(Self, CertificateSize, ref pCertificate);
        }
        delegate HRESULT GetCertificateFunc(IntPtr self, uint CertificateSize, ref byte pCertificate);

        public void GetCryptoSessionHandle(
            ref HANDLE pCryptoSessionHandle
        ){
            var fp = GetFunctionPointer(11);
            var callback = (GetCryptoSessionHandleFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetCryptoSessionHandleFunc));
            
            callback(Self, ref pCryptoSessionHandle);
        }
        delegate void GetCryptoSessionHandleFunc(IntPtr self, ref HANDLE pCryptoSessionHandle);

    }
    public class ID3D11VideoDecoderOutputView: ID3D11View
    {
        static /*readonly*/ Guid s_uuid = new Guid("c2931aea-2a85-4f20-860f-fba1fd256e18");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public void GetDesc(
            ref D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC pDesc
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            callback(Self, ref pDesc);
        }
        delegate void GetDescFunc(IntPtr self, ref D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC pDesc);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC
    {
        public Guid DecodeProfile;
        public D3D11_VDOV_DIMENSION ViewDimension;
        public D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC__anonymous_261 __anonymous__3;
    }
    public enum D3D11_VDOV_DIMENSION
    {
        _UNKNOWN = 0x0,
        _TEXTURE2D = 0x1,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_TEX2D_VDOV
    {
        public uint ArraySlice;
    }
    public class ID3D11VideoProcessorInputView: ID3D11View
    {
        static /*readonly*/ Guid s_uuid = new Guid("11ec5a5f-51dc-4945-ab34-6e8c21300ea5");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public void GetDesc(
            ref D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC pDesc
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            callback(Self, ref pDesc);
        }
        delegate void GetDescFunc(IntPtr self, ref D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC pDesc);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC
    {
        public uint FourCC;
        public D3D11_VPIV_DIMENSION ViewDimension;
        public D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC__anonymous_270 __anonymous__3;
    }
    public enum D3D11_VPIV_DIMENSION
    {
        _UNKNOWN = 0x0,
        _TEXTURE2D = 0x1,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_TEX2D_VPIV
    {
        public uint MipSlice;
        public uint ArraySlice;
    }
    public class ID3D11VideoProcessorOutputView: ID3D11View
    {
        static /*readonly*/ Guid s_uuid = new Guid("a048285e-25a9-4527-bd93-d68b68c44254");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public void GetDesc(
            ref D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC pDesc
        ){
            var fp = GetFunctionPointer(8);
            var callback = (GetDescFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDescFunc));
            
            callback(Self, ref pDesc);
        }
        delegate void GetDescFunc(IntPtr self, ref D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC pDesc);

    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC
    {
        public D3D11_VPOV_DIMENSION ViewDimension;
        public D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC__anonymous_279 __anonymous__2;
    }
    public enum D3D11_VPOV_DIMENSION
    {
        _UNKNOWN = 0x0,
        _TEXTURE2D = 0x1,
        _TEXTURE2DARRAY = 0x2,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_TEX2D_VPOV
    {
        public uint MipSlice;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_TEX2D_ARRAY_VPOV
    {
        public uint MipSlice;
        public uint FirstArraySlice;
        public uint ArraySize;
    }
    public class ID3D11VideoContext: ID3D11DeviceChild
    {
        static /*readonly*/ Guid s_uuid = new Guid("61f21c45-3c0e-4a74-9cea-67100d9ad5e4");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public HRESULT GetDecoderBuffer(
            ID3D11VideoDecoder pDecoder,
            D3D11_VIDEO_DECODER_BUFFER_TYPE Type,
            ref uint pBufferSize,
            ref IntPtr ppBuffer
        ){
            var fp = GetFunctionPointer(7);
            var callback = (GetDecoderBufferFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetDecoderBufferFunc));
            
            return callback(Self, pDecoder.Ptr, Type, ref pBufferSize, ref ppBuffer);
        }
        delegate HRESULT GetDecoderBufferFunc(IntPtr self, IntPtr pDecoder, D3D11_VIDEO_DECODER_BUFFER_TYPE Type, ref uint pBufferSize, ref IntPtr ppBuffer);

        public HRESULT ReleaseDecoderBuffer(
            ID3D11VideoDecoder pDecoder,
            D3D11_VIDEO_DECODER_BUFFER_TYPE Type
        ){
            var fp = GetFunctionPointer(8);
            var callback = (ReleaseDecoderBufferFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ReleaseDecoderBufferFunc));
            
            return callback(Self, pDecoder.Ptr, Type);
        }
        delegate HRESULT ReleaseDecoderBufferFunc(IntPtr self, IntPtr pDecoder, D3D11_VIDEO_DECODER_BUFFER_TYPE Type);

        public HRESULT DecoderBeginFrame(
            ID3D11VideoDecoder pDecoder,
            ID3D11VideoDecoderOutputView pView,
            uint ContentKeySize,
            IntPtr pContentKey
        ){
            var fp = GetFunctionPointer(9);
            var callback = (DecoderBeginFrameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DecoderBeginFrameFunc));
            
            return callback(Self, pDecoder.Ptr, pView.Ptr, ContentKeySize, pContentKey);
        }
        delegate HRESULT DecoderBeginFrameFunc(IntPtr self, IntPtr pDecoder, IntPtr pView, uint ContentKeySize, IntPtr pContentKey);

        public HRESULT DecoderEndFrame(
            ID3D11VideoDecoder pDecoder
        ){
            var fp = GetFunctionPointer(10);
            var callback = (DecoderEndFrameFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DecoderEndFrameFunc));
            
            return callback(Self, pDecoder.Ptr);
        }
        delegate HRESULT DecoderEndFrameFunc(IntPtr self, IntPtr pDecoder);

        public HRESULT SubmitDecoderBuffers(
            ID3D11VideoDecoder pDecoder,
            uint NumBuffers,
            ref D3D11_VIDEO_DECODER_BUFFER_DESC pBufferDesc
        ){
            var fp = GetFunctionPointer(11);
            var callback = (SubmitDecoderBuffersFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SubmitDecoderBuffersFunc));
            
            return callback(Self, pDecoder.Ptr, NumBuffers, ref pBufferDesc);
        }
        delegate HRESULT SubmitDecoderBuffersFunc(IntPtr self, IntPtr pDecoder, uint NumBuffers, ref D3D11_VIDEO_DECODER_BUFFER_DESC pBufferDesc);

        public APP_DEPRECATED_HRESULT DecoderExtension(
            ID3D11VideoDecoder pDecoder,
            ref D3D11_VIDEO_DECODER_EXTENSION pExtensionData
        ){
            var fp = GetFunctionPointer(12);
            var callback = (DecoderExtensionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DecoderExtensionFunc));
            
            return callback(Self, pDecoder.Ptr, ref pExtensionData);
        }
        delegate APP_DEPRECATED_HRESULT DecoderExtensionFunc(IntPtr self, IntPtr pDecoder, ref D3D11_VIDEO_DECODER_EXTENSION pExtensionData);

        public void VideoProcessorSetOutputTargetRect(
            ID3D11VideoProcessor pVideoProcessor,
            int Enable,
            ref RECT pRect
        ){
            var fp = GetFunctionPointer(13);
            var callback = (VideoProcessorSetOutputTargetRectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorSetOutputTargetRectFunc));
            
            callback(Self, pVideoProcessor.Ptr, Enable, ref pRect);
        }
        delegate void VideoProcessorSetOutputTargetRectFunc(IntPtr self, IntPtr pVideoProcessor, int Enable, ref RECT pRect);

        public void VideoProcessorSetOutputBackgroundColor(
            ID3D11VideoProcessor pVideoProcessor,
            int YCbCr,
            ref D3D11_VIDEO_COLOR pColor
        ){
            var fp = GetFunctionPointer(14);
            var callback = (VideoProcessorSetOutputBackgroundColorFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorSetOutputBackgroundColorFunc));
            
            callback(Self, pVideoProcessor.Ptr, YCbCr, ref pColor);
        }
        delegate void VideoProcessorSetOutputBackgroundColorFunc(IntPtr self, IntPtr pVideoProcessor, int YCbCr, ref D3D11_VIDEO_COLOR pColor);

        public void VideoProcessorSetOutputColorSpace(
            ID3D11VideoProcessor pVideoProcessor,
            ref D3D11_VIDEO_PROCESSOR_COLOR_SPACE pColorSpace
        ){
            var fp = GetFunctionPointer(15);
            var callback = (VideoProcessorSetOutputColorSpaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorSetOutputColorSpaceFunc));
            
            callback(Self, pVideoProcessor.Ptr, ref pColorSpace);
        }
        delegate void VideoProcessorSetOutputColorSpaceFunc(IntPtr self, IntPtr pVideoProcessor, ref D3D11_VIDEO_PROCESSOR_COLOR_SPACE pColorSpace);

        public void VideoProcessorSetOutputAlphaFillMode(
            ID3D11VideoProcessor pVideoProcessor,
            D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE AlphaFillMode,
            uint StreamIndex
        ){
            var fp = GetFunctionPointer(16);
            var callback = (VideoProcessorSetOutputAlphaFillModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorSetOutputAlphaFillModeFunc));
            
            callback(Self, pVideoProcessor.Ptr, AlphaFillMode, StreamIndex);
        }
        delegate void VideoProcessorSetOutputAlphaFillModeFunc(IntPtr self, IntPtr pVideoProcessor, D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE AlphaFillMode, uint StreamIndex);

        public void VideoProcessorSetOutputConstriction(
            ID3D11VideoProcessor pVideoProcessor,
            int Enable,
            SIZE Size
        ){
            var fp = GetFunctionPointer(17);
            var callback = (VideoProcessorSetOutputConstrictionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorSetOutputConstrictionFunc));
            
            callback(Self, pVideoProcessor.Ptr, Enable, Size);
        }
        delegate void VideoProcessorSetOutputConstrictionFunc(IntPtr self, IntPtr pVideoProcessor, int Enable, SIZE Size);

        public void VideoProcessorSetOutputStereoMode(
            ID3D11VideoProcessor pVideoProcessor,
            int Enable
        ){
            var fp = GetFunctionPointer(18);
            var callback = (VideoProcessorSetOutputStereoModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorSetOutputStereoModeFunc));
            
            callback(Self, pVideoProcessor.Ptr, Enable);
        }
        delegate void VideoProcessorSetOutputStereoModeFunc(IntPtr self, IntPtr pVideoProcessor, int Enable);

        public APP_DEPRECATED_HRESULT VideoProcessorSetOutputExtension(
            ID3D11VideoProcessor pVideoProcessor,
            ref Guid pExtensionGuid,
            uint DataSize,
            IntPtr pData
        ){
            var fp = GetFunctionPointer(19);
            var callback = (VideoProcessorSetOutputExtensionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorSetOutputExtensionFunc));
            
            return callback(Self, pVideoProcessor.Ptr, ref pExtensionGuid, DataSize, pData);
        }
        delegate APP_DEPRECATED_HRESULT VideoProcessorSetOutputExtensionFunc(IntPtr self, IntPtr pVideoProcessor, ref Guid pExtensionGuid, uint DataSize, IntPtr pData);

        public void VideoProcessorGetOutputTargetRect(
            ID3D11VideoProcessor pVideoProcessor,
            ref int Enabled,
            ref RECT pRect
        ){
            var fp = GetFunctionPointer(20);
            var callback = (VideoProcessorGetOutputTargetRectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorGetOutputTargetRectFunc));
            
            callback(Self, pVideoProcessor.Ptr, ref Enabled, ref pRect);
        }
        delegate void VideoProcessorGetOutputTargetRectFunc(IntPtr self, IntPtr pVideoProcessor, ref int Enabled, ref RECT pRect);

        public void VideoProcessorGetOutputBackgroundColor(
            ID3D11VideoProcessor pVideoProcessor,
            ref int pYCbCr,
            ref D3D11_VIDEO_COLOR pColor
        ){
            var fp = GetFunctionPointer(21);
            var callback = (VideoProcessorGetOutputBackgroundColorFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorGetOutputBackgroundColorFunc));
            
            callback(Self, pVideoProcessor.Ptr, ref pYCbCr, ref pColor);
        }
        delegate void VideoProcessorGetOutputBackgroundColorFunc(IntPtr self, IntPtr pVideoProcessor, ref int pYCbCr, ref D3D11_VIDEO_COLOR pColor);

        public void VideoProcessorGetOutputColorSpace(
            ID3D11VideoProcessor pVideoProcessor,
            ref D3D11_VIDEO_PROCESSOR_COLOR_SPACE pColorSpace
        ){
            var fp = GetFunctionPointer(22);
            var callback = (VideoProcessorGetOutputColorSpaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorGetOutputColorSpaceFunc));
            
            callback(Self, pVideoProcessor.Ptr, ref pColorSpace);
        }
        delegate void VideoProcessorGetOutputColorSpaceFunc(IntPtr self, IntPtr pVideoProcessor, ref D3D11_VIDEO_PROCESSOR_COLOR_SPACE pColorSpace);

        public void VideoProcessorGetOutputAlphaFillMode(
            ID3D11VideoProcessor pVideoProcessor,
            ref D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE pAlphaFillMode,
            ref uint pStreamIndex
        ){
            var fp = GetFunctionPointer(23);
            var callback = (VideoProcessorGetOutputAlphaFillModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorGetOutputAlphaFillModeFunc));
            
            callback(Self, pVideoProcessor.Ptr, ref pAlphaFillMode, ref pStreamIndex);
        }
        delegate void VideoProcessorGetOutputAlphaFillModeFunc(IntPtr self, IntPtr pVideoProcessor, ref D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE pAlphaFillMode, ref uint pStreamIndex);

        public void VideoProcessorGetOutputConstriction(
            ID3D11VideoProcessor pVideoProcessor,
            ref int pEnabled,
            ref SIZE pSize
        ){
            var fp = GetFunctionPointer(24);
            var callback = (VideoProcessorGetOutputConstrictionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorGetOutputConstrictionFunc));
            
            callback(Self, pVideoProcessor.Ptr, ref pEnabled, ref pSize);
        }
        delegate void VideoProcessorGetOutputConstrictionFunc(IntPtr self, IntPtr pVideoProcessor, ref int pEnabled, ref SIZE pSize);

        public void VideoProcessorGetOutputStereoMode(
            ID3D11VideoProcessor pVideoProcessor,
            ref int pEnabled
        ){
            var fp = GetFunctionPointer(25);
            var callback = (VideoProcessorGetOutputStereoModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorGetOutputStereoModeFunc));
            
            callback(Self, pVideoProcessor.Ptr, ref pEnabled);
        }
        delegate void VideoProcessorGetOutputStereoModeFunc(IntPtr self, IntPtr pVideoProcessor, ref int pEnabled);

        public APP_DEPRECATED_HRESULT VideoProcessorGetOutputExtension(
            ID3D11VideoProcessor pVideoProcessor,
            ref Guid pExtensionGuid,
            uint DataSize,
            IntPtr pData
        ){
            var fp = GetFunctionPointer(26);
            var callback = (VideoProcessorGetOutputExtensionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorGetOutputExtensionFunc));
            
            return callback(Self, pVideoProcessor.Ptr, ref pExtensionGuid, DataSize, pData);
        }
        delegate APP_DEPRECATED_HRESULT VideoProcessorGetOutputExtensionFunc(IntPtr self, IntPtr pVideoProcessor, ref Guid pExtensionGuid, uint DataSize, IntPtr pData);

        public void VideoProcessorSetStreamFrameFormat(
            ID3D11VideoProcessor pVideoProcessor,
            uint StreamIndex,
            D3D11_VIDEO_FRAME_FORMAT FrameFormat
        ){
            var fp = GetFunctionPointer(27);
            var callback = (VideoProcessorSetStreamFrameFormatFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorSetStreamFrameFormatFunc));
            
            callback(Self, pVideoProcessor.Ptr, StreamIndex, FrameFormat);
        }
        delegate void VideoProcessorSetStreamFrameFormatFunc(IntPtr self, IntPtr pVideoProcessor, uint StreamIndex, D3D11_VIDEO_FRAME_FORMAT FrameFormat);

        public void VideoProcessorSetStreamColorSpace(
            ID3D11VideoProcessor pVideoProcessor,
            uint StreamIndex,
            ref D3D11_VIDEO_PROCESSOR_COLOR_SPACE pColorSpace
        ){
            var fp = GetFunctionPointer(28);
            var callback = (VideoProcessorSetStreamColorSpaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorSetStreamColorSpaceFunc));
            
            callback(Self, pVideoProcessor.Ptr, StreamIndex, ref pColorSpace);
        }
        delegate void VideoProcessorSetStreamColorSpaceFunc(IntPtr self, IntPtr pVideoProcessor, uint StreamIndex, ref D3D11_VIDEO_PROCESSOR_COLOR_SPACE pColorSpace);

        public void VideoProcessorSetStreamOutputRate(
            ID3D11VideoProcessor pVideoProcessor,
            uint StreamIndex,
            D3D11_VIDEO_PROCESSOR_OUTPUT_RATE OutputRate,
            int RepeatFrame,
            ref DXGI_RATIONAL pCustomRate
        ){
            var fp = GetFunctionPointer(29);
            var callback = (VideoProcessorSetStreamOutputRateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorSetStreamOutputRateFunc));
            
            callback(Self, pVideoProcessor.Ptr, StreamIndex, OutputRate, RepeatFrame, ref pCustomRate);
        }
        delegate void VideoProcessorSetStreamOutputRateFunc(IntPtr self, IntPtr pVideoProcessor, uint StreamIndex, D3D11_VIDEO_PROCESSOR_OUTPUT_RATE OutputRate, int RepeatFrame, ref DXGI_RATIONAL pCustomRate);

        public void VideoProcessorSetStreamSourceRect(
            ID3D11VideoProcessor pVideoProcessor,
            uint StreamIndex,
            int Enable,
            ref RECT pRect
        ){
            var fp = GetFunctionPointer(30);
            var callback = (VideoProcessorSetStreamSourceRectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorSetStreamSourceRectFunc));
            
            callback(Self, pVideoProcessor.Ptr, StreamIndex, Enable, ref pRect);
        }
        delegate void VideoProcessorSetStreamSourceRectFunc(IntPtr self, IntPtr pVideoProcessor, uint StreamIndex, int Enable, ref RECT pRect);

        public void VideoProcessorSetStreamDestRect(
            ID3D11VideoProcessor pVideoProcessor,
            uint StreamIndex,
            int Enable,
            ref RECT pRect
        ){
            var fp = GetFunctionPointer(31);
            var callback = (VideoProcessorSetStreamDestRectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorSetStreamDestRectFunc));
            
            callback(Self, pVideoProcessor.Ptr, StreamIndex, Enable, ref pRect);
        }
        delegate void VideoProcessorSetStreamDestRectFunc(IntPtr self, IntPtr pVideoProcessor, uint StreamIndex, int Enable, ref RECT pRect);

        public void VideoProcessorSetStreamAlpha(
            ID3D11VideoProcessor pVideoProcessor,
            uint StreamIndex,
            int Enable,
            float Alpha
        ){
            var fp = GetFunctionPointer(32);
            var callback = (VideoProcessorSetStreamAlphaFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorSetStreamAlphaFunc));
            
            callback(Self, pVideoProcessor.Ptr, StreamIndex, Enable, Alpha);
        }
        delegate void VideoProcessorSetStreamAlphaFunc(IntPtr self, IntPtr pVideoProcessor, uint StreamIndex, int Enable, float Alpha);

        public void VideoProcessorSetStreamPalette(
            ID3D11VideoProcessor pVideoProcessor,
            uint StreamIndex,
            uint Count,
            ref uint pEntries
        ){
            var fp = GetFunctionPointer(33);
            var callback = (VideoProcessorSetStreamPaletteFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorSetStreamPaletteFunc));
            
            callback(Self, pVideoProcessor.Ptr, StreamIndex, Count, ref pEntries);
        }
        delegate void VideoProcessorSetStreamPaletteFunc(IntPtr self, IntPtr pVideoProcessor, uint StreamIndex, uint Count, ref uint pEntries);

        public void VideoProcessorSetStreamPixelAspectRatio(
            ID3D11VideoProcessor pVideoProcessor,
            uint StreamIndex,
            int Enable,
            ref DXGI_RATIONAL pSourceAspectRatio,
            ref DXGI_RATIONAL pDestinationAspectRatio
        ){
            var fp = GetFunctionPointer(34);
            var callback = (VideoProcessorSetStreamPixelAspectRatioFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorSetStreamPixelAspectRatioFunc));
            
            callback(Self, pVideoProcessor.Ptr, StreamIndex, Enable, ref pSourceAspectRatio, ref pDestinationAspectRatio);
        }
        delegate void VideoProcessorSetStreamPixelAspectRatioFunc(IntPtr self, IntPtr pVideoProcessor, uint StreamIndex, int Enable, ref DXGI_RATIONAL pSourceAspectRatio, ref DXGI_RATIONAL pDestinationAspectRatio);

        public void VideoProcessorSetStreamLumaKey(
            ID3D11VideoProcessor pVideoProcessor,
            uint StreamIndex,
            int Enable,
            float Lower,
            float Upper
        ){
            var fp = GetFunctionPointer(35);
            var callback = (VideoProcessorSetStreamLumaKeyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorSetStreamLumaKeyFunc));
            
            callback(Self, pVideoProcessor.Ptr, StreamIndex, Enable, Lower, Upper);
        }
        delegate void VideoProcessorSetStreamLumaKeyFunc(IntPtr self, IntPtr pVideoProcessor, uint StreamIndex, int Enable, float Lower, float Upper);

        public void VideoProcessorSetStreamStereoFormat(
            ID3D11VideoProcessor pVideoProcessor,
            uint StreamIndex,
            int Enable,
            D3D11_VIDEO_PROCESSOR_STEREO_FORMAT Format,
            int LeftViewFrame0,
            int BaseViewFrame0,
            D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE FlipMode,
            int MonoOffset
        ){
            var fp = GetFunctionPointer(36);
            var callback = (VideoProcessorSetStreamStereoFormatFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorSetStreamStereoFormatFunc));
            
            callback(Self, pVideoProcessor.Ptr, StreamIndex, Enable, Format, LeftViewFrame0, BaseViewFrame0, FlipMode, MonoOffset);
        }
        delegate void VideoProcessorSetStreamStereoFormatFunc(IntPtr self, IntPtr pVideoProcessor, uint StreamIndex, int Enable, D3D11_VIDEO_PROCESSOR_STEREO_FORMAT Format, int LeftViewFrame0, int BaseViewFrame0, D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE FlipMode, int MonoOffset);

        public void VideoProcessorSetStreamAutoProcessingMode(
            ID3D11VideoProcessor pVideoProcessor,
            uint StreamIndex,
            int Enable
        ){
            var fp = GetFunctionPointer(37);
            var callback = (VideoProcessorSetStreamAutoProcessingModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorSetStreamAutoProcessingModeFunc));
            
            callback(Self, pVideoProcessor.Ptr, StreamIndex, Enable);
        }
        delegate void VideoProcessorSetStreamAutoProcessingModeFunc(IntPtr self, IntPtr pVideoProcessor, uint StreamIndex, int Enable);

        public void VideoProcessorSetStreamFilter(
            ID3D11VideoProcessor pVideoProcessor,
            uint StreamIndex,
            D3D11_VIDEO_PROCESSOR_FILTER Filter,
            int Enable,
            int Level
        ){
            var fp = GetFunctionPointer(38);
            var callback = (VideoProcessorSetStreamFilterFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorSetStreamFilterFunc));
            
            callback(Self, pVideoProcessor.Ptr, StreamIndex, Filter, Enable, Level);
        }
        delegate void VideoProcessorSetStreamFilterFunc(IntPtr self, IntPtr pVideoProcessor, uint StreamIndex, D3D11_VIDEO_PROCESSOR_FILTER Filter, int Enable, int Level);

        public APP_DEPRECATED_HRESULT VideoProcessorSetStreamExtension(
            ID3D11VideoProcessor pVideoProcessor,
            uint StreamIndex,
            ref Guid pExtensionGuid,
            uint DataSize,
            IntPtr pData
        ){
            var fp = GetFunctionPointer(39);
            var callback = (VideoProcessorSetStreamExtensionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorSetStreamExtensionFunc));
            
            return callback(Self, pVideoProcessor.Ptr, StreamIndex, ref pExtensionGuid, DataSize, pData);
        }
        delegate APP_DEPRECATED_HRESULT VideoProcessorSetStreamExtensionFunc(IntPtr self, IntPtr pVideoProcessor, uint StreamIndex, ref Guid pExtensionGuid, uint DataSize, IntPtr pData);

        public void VideoProcessorGetStreamFrameFormat(
            ID3D11VideoProcessor pVideoProcessor,
            uint StreamIndex,
            ref D3D11_VIDEO_FRAME_FORMAT pFrameFormat
        ){
            var fp = GetFunctionPointer(40);
            var callback = (VideoProcessorGetStreamFrameFormatFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorGetStreamFrameFormatFunc));
            
            callback(Self, pVideoProcessor.Ptr, StreamIndex, ref pFrameFormat);
        }
        delegate void VideoProcessorGetStreamFrameFormatFunc(IntPtr self, IntPtr pVideoProcessor, uint StreamIndex, ref D3D11_VIDEO_FRAME_FORMAT pFrameFormat);

        public void VideoProcessorGetStreamColorSpace(
            ID3D11VideoProcessor pVideoProcessor,
            uint StreamIndex,
            ref D3D11_VIDEO_PROCESSOR_COLOR_SPACE pColorSpace
        ){
            var fp = GetFunctionPointer(41);
            var callback = (VideoProcessorGetStreamColorSpaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorGetStreamColorSpaceFunc));
            
            callback(Self, pVideoProcessor.Ptr, StreamIndex, ref pColorSpace);
        }
        delegate void VideoProcessorGetStreamColorSpaceFunc(IntPtr self, IntPtr pVideoProcessor, uint StreamIndex, ref D3D11_VIDEO_PROCESSOR_COLOR_SPACE pColorSpace);

        public void VideoProcessorGetStreamOutputRate(
            ID3D11VideoProcessor pVideoProcessor,
            uint StreamIndex,
            ref D3D11_VIDEO_PROCESSOR_OUTPUT_RATE pOutputRate,
            ref int pRepeatFrame,
            ref DXGI_RATIONAL pCustomRate
        ){
            var fp = GetFunctionPointer(42);
            var callback = (VideoProcessorGetStreamOutputRateFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorGetStreamOutputRateFunc));
            
            callback(Self, pVideoProcessor.Ptr, StreamIndex, ref pOutputRate, ref pRepeatFrame, ref pCustomRate);
        }
        delegate void VideoProcessorGetStreamOutputRateFunc(IntPtr self, IntPtr pVideoProcessor, uint StreamIndex, ref D3D11_VIDEO_PROCESSOR_OUTPUT_RATE pOutputRate, ref int pRepeatFrame, ref DXGI_RATIONAL pCustomRate);

        public void VideoProcessorGetStreamSourceRect(
            ID3D11VideoProcessor pVideoProcessor,
            uint StreamIndex,
            ref int pEnabled,
            ref RECT pRect
        ){
            var fp = GetFunctionPointer(43);
            var callback = (VideoProcessorGetStreamSourceRectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorGetStreamSourceRectFunc));
            
            callback(Self, pVideoProcessor.Ptr, StreamIndex, ref pEnabled, ref pRect);
        }
        delegate void VideoProcessorGetStreamSourceRectFunc(IntPtr self, IntPtr pVideoProcessor, uint StreamIndex, ref int pEnabled, ref RECT pRect);

        public void VideoProcessorGetStreamDestRect(
            ID3D11VideoProcessor pVideoProcessor,
            uint StreamIndex,
            ref int pEnabled,
            ref RECT pRect
        ){
            var fp = GetFunctionPointer(44);
            var callback = (VideoProcessorGetStreamDestRectFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorGetStreamDestRectFunc));
            
            callback(Self, pVideoProcessor.Ptr, StreamIndex, ref pEnabled, ref pRect);
        }
        delegate void VideoProcessorGetStreamDestRectFunc(IntPtr self, IntPtr pVideoProcessor, uint StreamIndex, ref int pEnabled, ref RECT pRect);

        public void VideoProcessorGetStreamAlpha(
            ID3D11VideoProcessor pVideoProcessor,
            uint StreamIndex,
            ref int pEnabled,
            ref float pAlpha
        ){
            var fp = GetFunctionPointer(45);
            var callback = (VideoProcessorGetStreamAlphaFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorGetStreamAlphaFunc));
            
            callback(Self, pVideoProcessor.Ptr, StreamIndex, ref pEnabled, ref pAlpha);
        }
        delegate void VideoProcessorGetStreamAlphaFunc(IntPtr self, IntPtr pVideoProcessor, uint StreamIndex, ref int pEnabled, ref float pAlpha);

        public void VideoProcessorGetStreamPalette(
            ID3D11VideoProcessor pVideoProcessor,
            uint StreamIndex,
            uint Count,
            ref uint pEntries
        ){
            var fp = GetFunctionPointer(46);
            var callback = (VideoProcessorGetStreamPaletteFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorGetStreamPaletteFunc));
            
            callback(Self, pVideoProcessor.Ptr, StreamIndex, Count, ref pEntries);
        }
        delegate void VideoProcessorGetStreamPaletteFunc(IntPtr self, IntPtr pVideoProcessor, uint StreamIndex, uint Count, ref uint pEntries);

        public void VideoProcessorGetStreamPixelAspectRatio(
            ID3D11VideoProcessor pVideoProcessor,
            uint StreamIndex,
            ref int pEnabled,
            ref DXGI_RATIONAL pSourceAspectRatio,
            ref DXGI_RATIONAL pDestinationAspectRatio
        ){
            var fp = GetFunctionPointer(47);
            var callback = (VideoProcessorGetStreamPixelAspectRatioFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorGetStreamPixelAspectRatioFunc));
            
            callback(Self, pVideoProcessor.Ptr, StreamIndex, ref pEnabled, ref pSourceAspectRatio, ref pDestinationAspectRatio);
        }
        delegate void VideoProcessorGetStreamPixelAspectRatioFunc(IntPtr self, IntPtr pVideoProcessor, uint StreamIndex, ref int pEnabled, ref DXGI_RATIONAL pSourceAspectRatio, ref DXGI_RATIONAL pDestinationAspectRatio);

        public void VideoProcessorGetStreamLumaKey(
            ID3D11VideoProcessor pVideoProcessor,
            uint StreamIndex,
            ref int pEnabled,
            ref float pLower,
            ref float pUpper
        ){
            var fp = GetFunctionPointer(48);
            var callback = (VideoProcessorGetStreamLumaKeyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorGetStreamLumaKeyFunc));
            
            callback(Self, pVideoProcessor.Ptr, StreamIndex, ref pEnabled, ref pLower, ref pUpper);
        }
        delegate void VideoProcessorGetStreamLumaKeyFunc(IntPtr self, IntPtr pVideoProcessor, uint StreamIndex, ref int pEnabled, ref float pLower, ref float pUpper);

        public void VideoProcessorGetStreamStereoFormat(
            ID3D11VideoProcessor pVideoProcessor,
            uint StreamIndex,
            ref int pEnable,
            ref D3D11_VIDEO_PROCESSOR_STEREO_FORMAT pFormat,
            ref int pLeftViewFrame0,
            ref int pBaseViewFrame0,
            ref D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE pFlipMode,
            ref int MonoOffset
        ){
            var fp = GetFunctionPointer(49);
            var callback = (VideoProcessorGetStreamStereoFormatFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorGetStreamStereoFormatFunc));
            
            callback(Self, pVideoProcessor.Ptr, StreamIndex, ref pEnable, ref pFormat, ref pLeftViewFrame0, ref pBaseViewFrame0, ref pFlipMode, ref MonoOffset);
        }
        delegate void VideoProcessorGetStreamStereoFormatFunc(IntPtr self, IntPtr pVideoProcessor, uint StreamIndex, ref int pEnable, ref D3D11_VIDEO_PROCESSOR_STEREO_FORMAT pFormat, ref int pLeftViewFrame0, ref int pBaseViewFrame0, ref D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE pFlipMode, ref int MonoOffset);

        public void VideoProcessorGetStreamAutoProcessingMode(
            ID3D11VideoProcessor pVideoProcessor,
            uint StreamIndex,
            ref int pEnabled
        ){
            var fp = GetFunctionPointer(50);
            var callback = (VideoProcessorGetStreamAutoProcessingModeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorGetStreamAutoProcessingModeFunc));
            
            callback(Self, pVideoProcessor.Ptr, StreamIndex, ref pEnabled);
        }
        delegate void VideoProcessorGetStreamAutoProcessingModeFunc(IntPtr self, IntPtr pVideoProcessor, uint StreamIndex, ref int pEnabled);

        public void VideoProcessorGetStreamFilter(
            ID3D11VideoProcessor pVideoProcessor,
            uint StreamIndex,
            D3D11_VIDEO_PROCESSOR_FILTER Filter,
            ref int pEnabled,
            ref int pLevel
        ){
            var fp = GetFunctionPointer(51);
            var callback = (VideoProcessorGetStreamFilterFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorGetStreamFilterFunc));
            
            callback(Self, pVideoProcessor.Ptr, StreamIndex, Filter, ref pEnabled, ref pLevel);
        }
        delegate void VideoProcessorGetStreamFilterFunc(IntPtr self, IntPtr pVideoProcessor, uint StreamIndex, D3D11_VIDEO_PROCESSOR_FILTER Filter, ref int pEnabled, ref int pLevel);

        public APP_DEPRECATED_HRESULT VideoProcessorGetStreamExtension(
            ID3D11VideoProcessor pVideoProcessor,
            uint StreamIndex,
            ref Guid pExtensionGuid,
            uint DataSize,
            IntPtr pData
        ){
            var fp = GetFunctionPointer(52);
            var callback = (VideoProcessorGetStreamExtensionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorGetStreamExtensionFunc));
            
            return callback(Self, pVideoProcessor.Ptr, StreamIndex, ref pExtensionGuid, DataSize, pData);
        }
        delegate APP_DEPRECATED_HRESULT VideoProcessorGetStreamExtensionFunc(IntPtr self, IntPtr pVideoProcessor, uint StreamIndex, ref Guid pExtensionGuid, uint DataSize, IntPtr pData);

        public HRESULT VideoProcessorBlt(
            ID3D11VideoProcessor pVideoProcessor,
            ID3D11VideoProcessorOutputView pView,
            uint OutputFrame,
            uint StreamCount,
            ref D3D11_VIDEO_PROCESSOR_STREAM pStreams
        ){
            var fp = GetFunctionPointer(53);
            var callback = (VideoProcessorBltFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorBltFunc));
            
            return callback(Self, pVideoProcessor.Ptr, pView.Ptr, OutputFrame, StreamCount, ref pStreams);
        }
        delegate HRESULT VideoProcessorBltFunc(IntPtr self, IntPtr pVideoProcessor, IntPtr pView, uint OutputFrame, uint StreamCount, ref D3D11_VIDEO_PROCESSOR_STREAM pStreams);

        public HRESULT NegotiateCryptoSessionKeyExchange(
            ID3D11CryptoSession pCryptoSession,
            uint DataSize,
            IntPtr pData
        ){
            var fp = GetFunctionPointer(54);
            var callback = (NegotiateCryptoSessionKeyExchangeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(NegotiateCryptoSessionKeyExchangeFunc));
            
            return callback(Self, pCryptoSession.Ptr, DataSize, pData);
        }
        delegate HRESULT NegotiateCryptoSessionKeyExchangeFunc(IntPtr self, IntPtr pCryptoSession, uint DataSize, IntPtr pData);

        public void EncryptionBlt(
            ID3D11CryptoSession pCryptoSession,
            ID3D11Texture2D pSrcSurface,
            ID3D11Texture2D pDstSurface,
            uint IVSize,
            IntPtr pIV
        ){
            var fp = GetFunctionPointer(55);
            var callback = (EncryptionBltFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(EncryptionBltFunc));
            
            callback(Self, pCryptoSession.Ptr, pSrcSurface.Ptr, pDstSurface.Ptr, IVSize, pIV);
        }
        delegate void EncryptionBltFunc(IntPtr self, IntPtr pCryptoSession, IntPtr pSrcSurface, IntPtr pDstSurface, uint IVSize, IntPtr pIV);

        public void DecryptionBlt(
            ID3D11CryptoSession pCryptoSession,
            ID3D11Texture2D pSrcSurface,
            ID3D11Texture2D pDstSurface,
            ref D3D11_ENCRYPTED_BLOCK_INFO pEncryptedBlockInfo,
            uint ContentKeySize,
            IntPtr pContentKey,
            uint IVSize,
            IntPtr pIV
        ){
            var fp = GetFunctionPointer(56);
            var callback = (DecryptionBltFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(DecryptionBltFunc));
            
            callback(Self, pCryptoSession.Ptr, pSrcSurface.Ptr, pDstSurface.Ptr, ref pEncryptedBlockInfo, ContentKeySize, pContentKey, IVSize, pIV);
        }
        delegate void DecryptionBltFunc(IntPtr self, IntPtr pCryptoSession, IntPtr pSrcSurface, IntPtr pDstSurface, ref D3D11_ENCRYPTED_BLOCK_INFO pEncryptedBlockInfo, uint ContentKeySize, IntPtr pContentKey, uint IVSize, IntPtr pIV);

        public void StartSessionKeyRefresh(
            ID3D11CryptoSession pCryptoSession,
            uint RandomNumberSize,
            IntPtr pRandomNumber
        ){
            var fp = GetFunctionPointer(57);
            var callback = (StartSessionKeyRefreshFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(StartSessionKeyRefreshFunc));
            
            callback(Self, pCryptoSession.Ptr, RandomNumberSize, pRandomNumber);
        }
        delegate void StartSessionKeyRefreshFunc(IntPtr self, IntPtr pCryptoSession, uint RandomNumberSize, IntPtr pRandomNumber);

        public void FinishSessionKeyRefresh(
            ID3D11CryptoSession pCryptoSession
        ){
            var fp = GetFunctionPointer(58);
            var callback = (FinishSessionKeyRefreshFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(FinishSessionKeyRefreshFunc));
            
            callback(Self, pCryptoSession.Ptr);
        }
        delegate void FinishSessionKeyRefreshFunc(IntPtr self, IntPtr pCryptoSession);

        public HRESULT GetEncryptionBltKey(
            ID3D11CryptoSession pCryptoSession,
            uint KeySize,
            IntPtr pReadbackKey
        ){
            var fp = GetFunctionPointer(59);
            var callback = (GetEncryptionBltKeyFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetEncryptionBltKeyFunc));
            
            return callback(Self, pCryptoSession.Ptr, KeySize, pReadbackKey);
        }
        delegate HRESULT GetEncryptionBltKeyFunc(IntPtr self, IntPtr pCryptoSession, uint KeySize, IntPtr pReadbackKey);

        public HRESULT NegotiateAuthenticatedChannelKeyExchange(
            ID3D11AuthenticatedChannel pChannel,
            uint DataSize,
            IntPtr pData
        ){
            var fp = GetFunctionPointer(60);
            var callback = (NegotiateAuthenticatedChannelKeyExchangeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(NegotiateAuthenticatedChannelKeyExchangeFunc));
            
            return callback(Self, pChannel.Ptr, DataSize, pData);
        }
        delegate HRESULT NegotiateAuthenticatedChannelKeyExchangeFunc(IntPtr self, IntPtr pChannel, uint DataSize, IntPtr pData);

        public HRESULT QueryAuthenticatedChannel(
            ID3D11AuthenticatedChannel pChannel,
            uint InputSize,
            IntPtr pInput,
            uint OutputSize,
            IntPtr pOutput
        ){
            var fp = GetFunctionPointer(61);
            var callback = (QueryAuthenticatedChannelFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(QueryAuthenticatedChannelFunc));
            
            return callback(Self, pChannel.Ptr, InputSize, pInput, OutputSize, pOutput);
        }
        delegate HRESULT QueryAuthenticatedChannelFunc(IntPtr self, IntPtr pChannel, uint InputSize, IntPtr pInput, uint OutputSize, IntPtr pOutput);

        public HRESULT ConfigureAuthenticatedChannel(
            ID3D11AuthenticatedChannel pChannel,
            uint InputSize,
            IntPtr pInput,
            ref D3D11_AUTHENTICATED_CONFIGURE_OUTPUT pOutput
        ){
            var fp = GetFunctionPointer(62);
            var callback = (ConfigureAuthenticatedChannelFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(ConfigureAuthenticatedChannelFunc));
            
            return callback(Self, pChannel.Ptr, InputSize, pInput, ref pOutput);
        }
        delegate HRESULT ConfigureAuthenticatedChannelFunc(IntPtr self, IntPtr pChannel, uint InputSize, IntPtr pInput, ref D3D11_AUTHENTICATED_CONFIGURE_OUTPUT pOutput);

        public void VideoProcessorSetStreamRotation(
            ID3D11VideoProcessor pVideoProcessor,
            uint StreamIndex,
            int Enable,
            D3D11_VIDEO_PROCESSOR_ROTATION Rotation
        ){
            var fp = GetFunctionPointer(63);
            var callback = (VideoProcessorSetStreamRotationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorSetStreamRotationFunc));
            
            callback(Self, pVideoProcessor.Ptr, StreamIndex, Enable, Rotation);
        }
        delegate void VideoProcessorSetStreamRotationFunc(IntPtr self, IntPtr pVideoProcessor, uint StreamIndex, int Enable, D3D11_VIDEO_PROCESSOR_ROTATION Rotation);

        public void VideoProcessorGetStreamRotation(
            ID3D11VideoProcessor pVideoProcessor,
            uint StreamIndex,
            ref int pEnable,
            ref D3D11_VIDEO_PROCESSOR_ROTATION pRotation
        ){
            var fp = GetFunctionPointer(64);
            var callback = (VideoProcessorGetStreamRotationFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(VideoProcessorGetStreamRotationFunc));
            
            callback(Self, pVideoProcessor.Ptr, StreamIndex, ref pEnable, ref pRotation);
        }
        delegate void VideoProcessorGetStreamRotationFunc(IntPtr self, IntPtr pVideoProcessor, uint StreamIndex, ref int pEnable, ref D3D11_VIDEO_PROCESSOR_ROTATION pRotation);

    }
    public enum D3D11_VIDEO_DECODER_BUFFER_TYPE
    {
        _PICTURE_PARAMETERS = 0x0,
        _MACROBLOCK_CONTROL = 0x1,
        _RESIDUAL_DIFFERENCE = 0x2,
        _DEBLOCKING_CONTROL = 0x3,
        _INVERSE_QUANTIZATION_MATRIX = 0x4,
        _SLICE_CONTROL = 0x5,
        _BITSTREAM = 0x6,
        _MOTION_VECTOR = 0x7,
        _FILM_GRAIN = 0x8,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_VIDEO_DECODER_BUFFER_DESC
    {
        public D3D11_VIDEO_DECODER_BUFFER_TYPE BufferType;
        public uint BufferIndex;
        public uint DataOffset;
        public uint DataSize;
        public uint FirstMBaddress;
        public uint NumMBsInBuffer;
        public uint Width;
        public uint Height;
        public uint Stride;
        public uint ReservedBits;
        public IntPtr pIV;
        public uint IVSize;
        public int PartialEncryption;
        public D3D11_ENCRYPTED_BLOCK_INFO EncryptedBlockInfo;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_ENCRYPTED_BLOCK_INFO
    {
        public uint NumEncryptedBytesAtBeginning;
        public uint NumBytesInSkipPattern;
        public uint NumBytesInEncryptPattern;
    }
    public struct APP_DEPRECATED_HRESULT { public HRESULT Value; }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_VIDEO_DECODER_EXTENSION
    {
        public uint Function;
        public IntPtr pPrivateInputData;
        public uint PrivateInputDataSize;
        public IntPtr pPrivateOutputData;
        public uint PrivateOutputDataSize;
        public uint ResourceCount;
        public IntPtr ppResourceList;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_VIDEO_COLOR
    {
        public D3D11_VIDEO_COLOR__anonymous_297 __anonymous__1;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_VIDEO_COLOR_YCbCrA
    {
        public float Y;
        public float Cb;
        public float Cr;
        public float A;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_VIDEO_COLOR_RGBA
    {
        public float R;
        public float G;
        public float B;
        public float A;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_VIDEO_PROCESSOR_COLOR_SPACE
    {
        public uint Usage;
        public uint RGB_Range;
        public uint YCbCr_Matrix;
        public uint YCbCr_xvYCC;
        public uint Nominal_Range;
        public uint Reserved;
    }
    public enum D3D11_VIDEO_PROCESSOR_ALPHA_FILL_MODE
    {
        _OPAQUE = 0x0,
        _BACKGROUND = 0x1,
        _DESTINATION = 0x2,
        _SOURCE_STREAM = 0x3,
    }
    public enum D3D11_VIDEO_PROCESSOR_OUTPUT_RATE
    {
        _NORMAL = 0x0,
        _HALF = 0x1,
        _CUSTOM = 0x2,
    }
    public enum D3D11_VIDEO_PROCESSOR_STEREO_FORMAT
    {
        _MONO = 0x0,
        _HORIZONTAL = 0x1,
        _VERTICAL = 0x2,
        _SEPARATE = 0x3,
        _MONO_OFFSET = 0x4,
        _ROW_INTERLEAVED = 0x5,
        _COLUMN_INTERLEAVED = 0x6,
        _CHECKERBOARD = 0x7,
    }
    public enum D3D11_VIDEO_PROCESSOR_STEREO_FLIP_MODE
    {
        _NONE = 0x0,
        _FRAME0 = 0x1,
        _FRAME1 = 0x2,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_VIDEO_PROCESSOR_STREAM
    {
        public int Enable;
        public uint OutputIndex;
        public uint InputFrameOrField;
        public uint PastFrames;
        public uint FutureFrames;
        public IntPtr ppPastSurfaces;
        public ID3D11VideoProcessorInputView pInputSurface;
        public IntPtr ppFutureSurfaces;
        public IntPtr ppPastSurfacesRight;
        public ID3D11VideoProcessorInputView pInputSurfaceRight;
        public IntPtr ppFutureSurfacesRight;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_AUTHENTICATED_CONFIGURE_OUTPUT
    {
        public D3D11_OMAC omac;
        public Guid ConfigureType;
        public HANDLE hChannel;
        public uint SequenceNumber;
        public HRESULT ReturnCode;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_OMAC
    {
        [MarshalAs(UnmanagedType.ByValArray, SizeConst=16)]public byte[] Omac;
    }
    public enum D3D11_VIDEO_PROCESSOR_ROTATION
    {
        _IDENTITY = 0x0,
        _90 = 0x1,
        _180 = 0x2,
        _270 = 0x3,
    }
    public class ID3D11VideoDevice: IUnknown
    {
        static /*readonly*/ Guid s_uuid = new Guid("10ec4d5b-975a-4689-b9e4-d0aac30fe333");
        public override ref /*readonly*/ Guid IID => ref s_uuid;
                    
        public HRESULT CreateVideoDecoder(
            ref D3D11_VIDEO_DECODER_DESC pVideoDesc,
            ref D3D11_VIDEO_DECODER_CONFIG pConfig,
            ref ID3D11VideoDecoder ppDecoder
        ){
            var fp = GetFunctionPointer(3);
            var callback = (CreateVideoDecoderFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateVideoDecoderFunc));
            ppDecoder = new ID3D11VideoDecoder();
            return callback(Self, ref pVideoDesc, ref pConfig, ref ppDecoder.PtrForNew);
        }
        delegate HRESULT CreateVideoDecoderFunc(IntPtr self, ref D3D11_VIDEO_DECODER_DESC pVideoDesc, ref D3D11_VIDEO_DECODER_CONFIG pConfig, ref IntPtr ppDecoder);

        public HRESULT CreateVideoProcessor(
            ID3D11VideoProcessorEnumerator pEnum,
            uint RateConversionIndex,
            ref ID3D11VideoProcessor ppVideoProcessor
        ){
            var fp = GetFunctionPointer(4);
            var callback = (CreateVideoProcessorFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateVideoProcessorFunc));
            ppVideoProcessor = new ID3D11VideoProcessor();
            return callback(Self, pEnum.Ptr, RateConversionIndex, ref ppVideoProcessor.PtrForNew);
        }
        delegate HRESULT CreateVideoProcessorFunc(IntPtr self, IntPtr pEnum, uint RateConversionIndex, ref IntPtr ppVideoProcessor);

        public HRESULT CreateAuthenticatedChannel(
            D3D11_AUTHENTICATED_CHANNEL_TYPE ChannelType,
            ref ID3D11AuthenticatedChannel ppAuthenticatedChannel
        ){
            var fp = GetFunctionPointer(5);
            var callback = (CreateAuthenticatedChannelFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateAuthenticatedChannelFunc));
            ppAuthenticatedChannel = new ID3D11AuthenticatedChannel();
            return callback(Self, ChannelType, ref ppAuthenticatedChannel.PtrForNew);
        }
        delegate HRESULT CreateAuthenticatedChannelFunc(IntPtr self, D3D11_AUTHENTICATED_CHANNEL_TYPE ChannelType, ref IntPtr ppAuthenticatedChannel);

        public HRESULT CreateCryptoSession(
            ref Guid pCryptoType,
            ref Guid pDecoderProfile,
            ref Guid pKeyExchangeType,
            ref ID3D11CryptoSession ppCryptoSession
        ){
            var fp = GetFunctionPointer(6);
            var callback = (CreateCryptoSessionFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateCryptoSessionFunc));
            ppCryptoSession = new ID3D11CryptoSession();
            return callback(Self, ref pCryptoType, ref pDecoderProfile, ref pKeyExchangeType, ref ppCryptoSession.PtrForNew);
        }
        delegate HRESULT CreateCryptoSessionFunc(IntPtr self, ref Guid pCryptoType, ref Guid pDecoderProfile, ref Guid pKeyExchangeType, ref IntPtr ppCryptoSession);

        public HRESULT CreateVideoDecoderOutputView(
            ID3D11Resource pResource,
            ref D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC pDesc,
            ref ID3D11VideoDecoderOutputView ppVDOVView
        ){
            var fp = GetFunctionPointer(7);
            var callback = (CreateVideoDecoderOutputViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateVideoDecoderOutputViewFunc));
            ppVDOVView = new ID3D11VideoDecoderOutputView();
            return callback(Self, pResource.Ptr, ref pDesc, ref ppVDOVView.PtrForNew);
        }
        delegate HRESULT CreateVideoDecoderOutputViewFunc(IntPtr self, IntPtr pResource, ref D3D11_VIDEO_DECODER_OUTPUT_VIEW_DESC pDesc, ref IntPtr ppVDOVView);

        public HRESULT CreateVideoProcessorInputView(
            ID3D11Resource pResource,
            ID3D11VideoProcessorEnumerator pEnum,
            ref D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC pDesc,
            ref ID3D11VideoProcessorInputView ppVPIView
        ){
            var fp = GetFunctionPointer(8);
            var callback = (CreateVideoProcessorInputViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateVideoProcessorInputViewFunc));
            ppVPIView = new ID3D11VideoProcessorInputView();
            return callback(Self, pResource.Ptr, pEnum.Ptr, ref pDesc, ref ppVPIView.PtrForNew);
        }
        delegate HRESULT CreateVideoProcessorInputViewFunc(IntPtr self, IntPtr pResource, IntPtr pEnum, ref D3D11_VIDEO_PROCESSOR_INPUT_VIEW_DESC pDesc, ref IntPtr ppVPIView);

        public HRESULT CreateVideoProcessorOutputView(
            ID3D11Resource pResource,
            ID3D11VideoProcessorEnumerator pEnum,
            ref D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC pDesc,
            ref ID3D11VideoProcessorOutputView ppVPOView
        ){
            var fp = GetFunctionPointer(9);
            var callback = (CreateVideoProcessorOutputViewFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateVideoProcessorOutputViewFunc));
            ppVPOView = new ID3D11VideoProcessorOutputView();
            return callback(Self, pResource.Ptr, pEnum.Ptr, ref pDesc, ref ppVPOView.PtrForNew);
        }
        delegate HRESULT CreateVideoProcessorOutputViewFunc(IntPtr self, IntPtr pResource, IntPtr pEnum, ref D3D11_VIDEO_PROCESSOR_OUTPUT_VIEW_DESC pDesc, ref IntPtr ppVPOView);

        public HRESULT CreateVideoProcessorEnumerator(
            ref D3D11_VIDEO_PROCESSOR_CONTENT_DESC pDesc,
            ref ID3D11VideoProcessorEnumerator ppEnum
        ){
            var fp = GetFunctionPointer(10);
            var callback = (CreateVideoProcessorEnumeratorFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CreateVideoProcessorEnumeratorFunc));
            ppEnum = new ID3D11VideoProcessorEnumerator();
            return callback(Self, ref pDesc, ref ppEnum.PtrForNew);
        }
        delegate HRESULT CreateVideoProcessorEnumeratorFunc(IntPtr self, ref D3D11_VIDEO_PROCESSOR_CONTENT_DESC pDesc, ref IntPtr ppEnum);

        public uint GetVideoDecoderProfileCount(
        ){
            var fp = GetFunctionPointer(11);
            var callback = (GetVideoDecoderProfileCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetVideoDecoderProfileCountFunc));
            
            return callback(Self);
        }
        delegate uint GetVideoDecoderProfileCountFunc(IntPtr self);

        public HRESULT GetVideoDecoderProfile(
            uint Index,
            ref Guid pDecoderProfile
        ){
            var fp = GetFunctionPointer(12);
            var callback = (GetVideoDecoderProfileFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetVideoDecoderProfileFunc));
            
            return callback(Self, Index, ref pDecoderProfile);
        }
        delegate HRESULT GetVideoDecoderProfileFunc(IntPtr self, uint Index, ref Guid pDecoderProfile);

        public HRESULT CheckVideoDecoderFormat(
            ref Guid pDecoderProfile,
            DXGI_FORMAT Format,
            ref int pSupported
        ){
            var fp = GetFunctionPointer(13);
            var callback = (CheckVideoDecoderFormatFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CheckVideoDecoderFormatFunc));
            
            return callback(Self, ref pDecoderProfile, Format, ref pSupported);
        }
        delegate HRESULT CheckVideoDecoderFormatFunc(IntPtr self, ref Guid pDecoderProfile, DXGI_FORMAT Format, ref int pSupported);

        public HRESULT GetVideoDecoderConfigCount(
            ref D3D11_VIDEO_DECODER_DESC pDesc,
            ref uint pCount
        ){
            var fp = GetFunctionPointer(14);
            var callback = (GetVideoDecoderConfigCountFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetVideoDecoderConfigCountFunc));
            
            return callback(Self, ref pDesc, ref pCount);
        }
        delegate HRESULT GetVideoDecoderConfigCountFunc(IntPtr self, ref D3D11_VIDEO_DECODER_DESC pDesc, ref uint pCount);

        public HRESULT GetVideoDecoderConfig(
            ref D3D11_VIDEO_DECODER_DESC pDesc,
            uint Index,
            ref D3D11_VIDEO_DECODER_CONFIG pConfig
        ){
            var fp = GetFunctionPointer(15);
            var callback = (GetVideoDecoderConfigFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetVideoDecoderConfigFunc));
            
            return callback(Self, ref pDesc, Index, ref pConfig);
        }
        delegate HRESULT GetVideoDecoderConfigFunc(IntPtr self, ref D3D11_VIDEO_DECODER_DESC pDesc, uint Index, ref D3D11_VIDEO_DECODER_CONFIG pConfig);

        public HRESULT GetContentProtectionCaps(
            ref Guid pCryptoType,
            ref Guid pDecoderProfile,
            ref D3D11_VIDEO_CONTENT_PROTECTION_CAPS pCaps
        ){
            var fp = GetFunctionPointer(16);
            var callback = (GetContentProtectionCapsFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(GetContentProtectionCapsFunc));
            
            return callback(Self, ref pCryptoType, ref pDecoderProfile, ref pCaps);
        }
        delegate HRESULT GetContentProtectionCapsFunc(IntPtr self, ref Guid pCryptoType, ref Guid pDecoderProfile, ref D3D11_VIDEO_CONTENT_PROTECTION_CAPS pCaps);

        public HRESULT CheckCryptoKeyExchange(
            ref Guid pCryptoType,
            ref Guid pDecoderProfile,
            uint Index,
            ref Guid pKeyExchangeType
        ){
            var fp = GetFunctionPointer(17);
            var callback = (CheckCryptoKeyExchangeFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(CheckCryptoKeyExchangeFunc));
            
            return callback(Self, ref pCryptoType, ref pDecoderProfile, Index, ref pKeyExchangeType);
        }
        delegate HRESULT CheckCryptoKeyExchangeFunc(IntPtr self, ref Guid pCryptoType, ref Guid pDecoderProfile, uint Index, ref Guid pKeyExchangeType);

        public HRESULT SetPrivateData(
            ref Guid guid,
            uint DataSize,
            IntPtr pData
        ){
            var fp = GetFunctionPointer(18);
            var callback = (SetPrivateDataFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetPrivateDataFunc));
            
            return callback(Self, ref guid, DataSize, pData);
        }
        delegate HRESULT SetPrivateDataFunc(IntPtr self, ref Guid guid, uint DataSize, IntPtr pData);

        public HRESULT SetPrivateDataInterface(
            ref Guid guid,
            IUnknown pData
        ){
            var fp = GetFunctionPointer(19);
            var callback = (SetPrivateDataInterfaceFunc)Marshal.GetDelegateForFunctionPointer(fp, typeof(SetPrivateDataInterfaceFunc));
            
            return callback(Self, ref guid, pData.Ptr);
        }
        delegate HRESULT SetPrivateDataInterfaceFunc(IntPtr self, ref Guid guid, IntPtr pData);

    }
    public enum D3D11_AUTHENTICATED_CHANNEL_TYPE
    {
        _D3D11 = 0x1,
        _DRIVER_SOFTWARE = 0x2,
        _DRIVER_HARDWARE = 0x3,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_VIDEO_CONTENT_PROTECTION_CAPS
    {
        public uint Caps;
        public uint KeyExchangeTypeCount;
        public uint BlockAlignmentSize;
        public ULONGLONG ProtectedMemorySize;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CD3D11_DEFAULT
    {
    }
    public struct D3D11_PRIMITIVE { public D3D_PRIMITIVE Value; }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_DRAW_INSTANCED_INDIRECT_ARGS
    {
        public uint VertexCountPerInstance;
        public uint InstanceCount;
        public uint StartVertexLocation;
        public uint StartInstanceLocation;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_DRAW_INDEXED_INSTANCED_INDIRECT_ARGS
    {
        public uint IndexCountPerInstance;
        public uint InstanceCount;
        public uint StartIndexLocation;
        public int BaseVertexLocation;
        public uint StartInstanceLocation;
    }
    public enum D3D11_BIND_FLAG
    {
        _VERTEX_BUFFER = 0x1,
        _INDEX_BUFFER = 0x2,
        _CONSTANT_BUFFER = 0x4,
        _SHADER_RESOURCE = 0x8,
        _STREAM_OUTPUT = 0x10,
        _RENDER_TARGET = 0x20,
        _DEPTH_STENCIL = 0x40,
        _UNORDERED_ACCESS = 0x80,
        _DECODER = 0x200,
        _VIDEO_ENCODER = 0x400,
    }
    public enum D3D11_CPU_ACCESS_FLAG
    {
        _WRITE = 0x10000,
        _READ = 0x20000,
    }
    public enum D3D11_RESOURCE_MISC_FLAG
    {
        _GENERATE_MIPS = 0x1,
        _SHARED = 0x2,
        _TEXTURECUBE = 0x4,
        _DRAWINDIRECT_ARGS = 0x10,
        _BUFFER_ALLOW_RAW_VIEWS = 0x20,
        _BUFFER_STRUCTURED = 0x40,
        _RESOURCE_CLAMP = 0x80,
        _SHARED_KEYEDMUTEX = 0x100,
        _GDI_COMPATIBLE = 0x200,
        _SHARED_NTHANDLE = 0x800,
        _RESTRICTED_CONTENT = 0x1000,
        _RESTRICT_SHARED_RESOURCE = 0x2000,
        _RESTRICT_SHARED_RESOURCE_DRIVER = 0x4000,
        _GUARDED = 0x8000,
        _TILE_POOL = 0x20000,
        _TILED = 0x40000,
        _HW_PROTECTED = 0x80000,
    }
    public enum D3D11_MAP_FLAG
    {
        _DO_NOT_WAIT = 0x100000,
    }
    public enum D3D11_RAISE_FLAG
    {
        _DRIVER_INTERNAL_ERROR = 0x1,
    }
    public enum D3D11_CLEAR_FLAG
    {
        _DEPTH = 0x1,
        _STENCIL = 0x2,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CD3D11_RECT
    {
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CD3D11_BOX
    {
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CD3D11_DEPTH_STENCIL_DESC
    {
    }
    public enum D3D11_COLOR_WRITE_ENABLE
    {
        _RED = 0x1,
        _GREEN = 0x2,
        _BLUE = 0x4,
        _ALPHA = 0x8,
        _ALL = 0xf,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CD3D11_BLEND_DESC
    {
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CD3D11_RASTERIZER_DESC
    {
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CD3D11_BUFFER_DESC
    {
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CD3D11_TEXTURE1D_DESC
    {
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CD3D11_TEXTURE2D_DESC
    {
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CD3D11_TEXTURE3D_DESC
    {
    }
    public enum D3D11_TEXTURECUBE_FACE
    {
        _POSITIVE_X = 0x0,
        _NEGATIVE_X = 0x1,
        _POSITIVE_Y = 0x2,
        _NEGATIVE_Y = 0x3,
        _POSITIVE_Z = 0x4,
        _NEGATIVE_Z = 0x5,
    }
    public enum D3D11_BUFFEREX_SRV_FLAG
    {
        _RAW = 0x1,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CD3D11_SHADER_RESOURCE_VIEW_DESC
    {
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CD3D11_RENDER_TARGET_VIEW_DESC
    {
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CD3D11_VIEWPORT
    {
    }
    public enum D3D11_DSV_FLAG
    {
        _DEPTH = 0x1,
        _STENCIL = 0x2,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CD3D11_DEPTH_STENCIL_VIEW_DESC
    {
    }
    public enum D3D11_BUFFER_UAV_FLAG
    {
        _RAW = 0x1,
        _APPEND = 0x2,
        _COUNTER = 0x4,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CD3D11_UNORDERED_ACCESS_VIEW_DESC
    {
    }
    public enum D3D11_FILTER_TYPE
    {
        _POINT = 0x0,
        _LINEAR = 0x1,
    }
    public enum D3D11_FILTER_REDUCTION_TYPE
    {
        _STANDARD = 0x0,
        _COMPARISON = 0x1,
        _MINIMUM = 0x2,
        _MAXIMUM = 0x3,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CD3D11_SAMPLER_DESC
    {
    }
    public enum D3D11_FORMAT_SUPPORT
    {
        _BUFFER = 0x1,
        _IA_VERTEX_BUFFER = 0x2,
        _IA_INDEX_BUFFER = 0x4,
        _SO_BUFFER = 0x8,
        _TEXTURE1D = 0x10,
        _TEXTURE2D = 0x20,
        _TEXTURE3D = 0x40,
        _TEXTURECUBE = 0x80,
        _SHADER_LOAD = 0x100,
        _SHADER_SAMPLE = 0x200,
        _SHADER_SAMPLE_COMPARISON = 0x400,
        _SHADER_SAMPLE_MONO_TEXT = 0x800,
        _MIP = 0x1000,
        _MIP_AUTOGEN = 0x2000,
        _RENDER_TARGET = 0x4000,
        _BLENDABLE = 0x8000,
        _DEPTH_STENCIL = 0x10000,
        _CPU_LOCKABLE = 0x20000,
        _MULTISAMPLE_RESOLVE = 0x40000,
        _DISPLAY = 0x80000,
        _CAST_WITHIN_BIT_LAYOUT = 0x100000,
        _MULTISAMPLE_RENDERTARGET = 0x200000,
        _MULTISAMPLE_LOAD = 0x400000,
        _SHADER_GATHER = 0x800000,
        _BACK_BUFFER_CAST = 0x1000000,
        _TYPED_UNORDERED_ACCESS_VIEW = 0x2000000,
        _SHADER_GATHER_COMPARISON = 0x4000000,
        _DECODER_OUTPUT = 0x8000000,
        _VIDEO_PROCESSOR_OUTPUT = 0x10000000,
        _VIDEO_PROCESSOR_INPUT = 0x20000000,
        _VIDEO_ENCODER = 0x40000000,
    }
    public enum D3D11_FORMAT_SUPPORT2
    {
        _UAV_ATOMIC_ADD = 0x1,
        _UAV_ATOMIC_BITWISE_OPS = 0x2,
        _UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE = 0x4,
        _UAV_ATOMIC_EXCHANGE = 0x8,
        _UAV_ATOMIC_SIGNED_MIN_OR_MAX = 0x10,
        _UAV_ATOMIC_UNSIGNED_MIN_OR_MAX = 0x20,
        _UAV_TYPED_LOAD = 0x40,
        _UAV_TYPED_STORE = 0x80,
        _OUTPUT_MERGER_LOGIC_OP = 0x100,
        _TILED = 0x200,
        _SHAREABLE = 0x400,
        _MULTIPLANE_OVERLAY = 0x4000,
    }
    public enum D3D11_ASYNC_GETDATA_FLAG
    {
        D3D11_ASYNC_GETDATA_DONOTFLUSH = 0x1,
    }
    public enum D3D11_QUERY_MISC_FLAG
    {
        D3D11_QUERY_MISC_PREDICATEHINT = 0x1,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CD3D11_QUERY_DESC
    {
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_QUERY_DATA_TIMESTAMP_DISJOINT
    {
        public UINT64 Frequency;
        public int Disjoint;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_QUERY_DATA_PIPELINE_STATISTICS
    {
        public UINT64 IAVertices;
        public UINT64 IAPrimitives;
        public UINT64 VSInvocations;
        public UINT64 GSInvocations;
        public UINT64 GSPrimitives;
        public UINT64 CInvocations;
        public UINT64 CPrimitives;
        public UINT64 PSInvocations;
        public UINT64 HSInvocations;
        public UINT64 DSInvocations;
        public UINT64 CSInvocations;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_QUERY_DATA_SO_STATISTICS
    {
        public UINT64 NumPrimitivesWritten;
        public UINT64 PrimitivesStorageNeeded;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CD3D11_COUNTER_DESC
    {
    }
    public enum D3D11_STANDARD_MULTISAMPLE_QUALITY_LEVELS
    {
        _STANDARD_MULTISAMPLE_PATTERN = unchecked((int)0xffffffff),
        _CENTER_MULTISAMPLE_PATTERN = unchecked((int)0xfffffffe),
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_FEATURE_DATA_THREADING
    {
        public int DriverConcurrentCreates;
        public int DriverCommandLists;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_FEATURE_DATA_DOUBLES
    {
        public int DoublePrecisionFloatShaderOps;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_FEATURE_DATA_FORMAT_SUPPORT
    {
        public DXGI_FORMAT InFormat;
        public uint OutFormatSupport;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_FEATURE_DATA_FORMAT_SUPPORT2
    {
        public DXGI_FORMAT InFormat;
        public uint OutFormatSupport2;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_FEATURE_DATA_D3D10_X_HARDWARE_OPTIONS
    {
        public int ComputeShaders_Plus_RawAndStructuredBuffers_Via_Shader_4_x;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_FEATURE_DATA_D3D11_OPTIONS
    {
        public int OutputMergerLogicOp;
        public int UAVOnlyRenderingForcedSampleCount;
        public int DiscardAPIsSeenByDriver;
        public int FlagsForUpdateAndCopySeenByDriver;
        public int ClearView;
        public int CopyWithOverlap;
        public int ConstantBufferPartialUpdate;
        public int ConstantBufferOffsetting;
        public int MapNoOverwriteOnDynamicConstantBuffer;
        public int MapNoOverwriteOnDynamicBufferSRV;
        public int MultisampleRTVWithForcedSampleCountOne;
        public int SAD4ShaderInstructions;
        public int ExtendedDoublesShaderInstructions;
        public int ExtendedResourceSharing;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_FEATURE_DATA_ARCHITECTURE_INFO
    {
        public int TileBasedDeferredRenderer;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_FEATURE_DATA_D3D9_OPTIONS
    {
        public int FullNonPow2TextureSupport;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_FEATURE_DATA_D3D9_SHADOW_SUPPORT
    {
        public int SupportsDepthAsTextureWithLessEqualComparisonFilter;
    }
    public enum D3D11_SHADER_MIN_PRECISION_SUPPORT
    {
        _10_BIT = 0x1,
        _16_BIT = 0x2,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_FEATURE_DATA_SHADER_MIN_PRECISION_SUPPORT
    {
        public uint PixelShaderMinPrecision;
        public uint AllOtherShaderStagesMinPrecision;
    }
    public enum D3D11_TILED_RESOURCES_TIER
    {
        _NOT_SUPPORTED = 0x0,
        _TIER_1 = 0x1,
        _TIER_2 = 0x2,
        _TIER_3 = 0x3,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_FEATURE_DATA_D3D11_OPTIONS1
    {
        public D3D11_TILED_RESOURCES_TIER TiledResourcesTier;
        public int MinMaxFiltering;
        public int ClearViewAlsoSupportsDepthOnlyFormats;
        public int MapOnDefaultBuffers;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_FEATURE_DATA_D3D9_SIMPLE_INSTANCING_SUPPORT
    {
        public int SimpleInstancingSupported;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_FEATURE_DATA_MARKER_SUPPORT
    {
        public int Profile;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_FEATURE_DATA_D3D9_OPTIONS1
    {
        public int FullNonPow2TextureSupported;
        public int DepthAsTextureWithLessEqualComparisonFilterSupported;
        public int SimpleInstancingSupported;
        public int TextureCubeFaceRenderTargetWithNonCubeDepthStencilSupported;
    }
    public enum D3D11_CONSERVATIVE_RASTERIZATION_TIER
    {
        _NOT_SUPPORTED = 0x0,
        _TIER_1 = 0x1,
        _TIER_2 = 0x2,
        _TIER_3 = 0x3,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_FEATURE_DATA_D3D11_OPTIONS2
    {
        public int PSSpecifiedStencilRefSupported;
        public int TypedUAVLoadAdditionalFormats;
        public int ROVsSupported;
        public D3D11_CONSERVATIVE_RASTERIZATION_TIER ConservativeRasterizationTier;
        public D3D11_TILED_RESOURCES_TIER TiledResourcesTier;
        public int MapOnDefaultTextures;
        public int StandardSwizzle;
        public int UnifiedMemoryArchitecture;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_FEATURE_DATA_D3D11_OPTIONS3
    {
        public int VPAndRTArrayIndexFromAnyShaderFeedingRasterizer;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT
    {
        public uint MaxGPUVirtualAddressBitsPerResource;
        public uint MaxGPUVirtualAddressBitsPerProcess;
    }
    public enum D3D11_SHADER_CACHE_SUPPORT_FLAGS
    {
        _NONE = 0x0,
        _AUTOMATIC_INPROC_CACHE = 0x1,
        _AUTOMATIC_DISK_CACHE = 0x2,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_FEATURE_DATA_SHADER_CACHE
    {
        public uint SupportFlags;
    }
    public enum D3D11_SHARED_RESOURCE_TIER
    {
        _0 = 0x0,
        _1 = 0x1,
        _2 = 0x2,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_FEATURE_DATA_D3D11_OPTIONS5
    {
        public D3D11_SHARED_RESOURCE_TIER SharedResourceTier;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct CD3D11_VIDEO_DEFAULT
    {
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct _D3D11_AES_CTR_IV
    {
        public UINT64 IV;
        public UINT64 Count;
    }
    public struct D3D11_AES_CTR_IV { public _D3D11_AES_CTR_IV Value; }
    public enum D3D11_VIDEO_PROCESSOR_FORMAT_SUPPORT
    {
        _INPUT = 0x1,
        _OUTPUT = 0x2,
    }
    public enum D3D11_VIDEO_PROCESSOR_DEVICE_CAPS
    {
        _LINEAR_SPACE = 0x1,
        _xvYCC = 0x2,
        _RGB_RANGE_CONVERSION = 0x4,
        _YCbCr_MATRIX_CONVERSION = 0x8,
        _NOMINAL_RANGE = 0x10,
    }
    public enum D3D11_VIDEO_PROCESSOR_FEATURE_CAPS
    {
        _ALPHA_FILL = 0x1,
        _CONSTRICTION = 0x2,
        _LUMA_KEY = 0x4,
        _ALPHA_PALETTE = 0x8,
        _LEGACY = 0x10,
        _STEREO = 0x20,
        _ROTATION = 0x40,
        _ALPHA_STREAM = 0x80,
        _PIXEL_ASPECT_RATIO = 0x100,
        _MIRROR = 0x200,
        _SHADER_USAGE = 0x400,
        _METADATA_HDR10 = 0x800,
    }
    public enum D3D11_VIDEO_PROCESSOR_FILTER_CAPS
    {
        _BRIGHTNESS = 0x1,
        _CONTRAST = 0x2,
        _HUE = 0x4,
        _SATURATION = 0x8,
        _NOISE_REDUCTION = 0x10,
        _EDGE_ENHANCEMENT = 0x20,
        _ANAMORPHIC_SCALING = 0x40,
        _STEREO_ADJUSTMENT = 0x80,
    }
    public enum D3D11_VIDEO_PROCESSOR_FORMAT_CAPS
    {
        _RGB_INTERLACED = 0x1,
        _RGB_PROCAMP = 0x2,
        _RGB_LUMA_KEY = 0x4,
        _PALETTE_INTERLACED = 0x8,
    }
    public enum D3D11_VIDEO_PROCESSOR_AUTO_STREAM_CAPS
    {
        _DENOISE = 0x1,
        _DERINGING = 0x2,
        _EDGE_ENHANCEMENT = 0x4,
        _COLOR_CORRECTION = 0x8,
        _FLESH_TONE_MAPPING = 0x10,
        _IMAGE_STABILIZATION = 0x20,
        _SUPER_RESOLUTION = 0x40,
        _ANAMORPHIC_SCALING = 0x80,
    }
    public enum D3D11_VIDEO_PROCESSOR_STEREO_CAPS
    {
        _MONO_OFFSET = 0x1,
        _ROW_INTERLEAVED = 0x2,
        _COLUMN_INTERLEAVED = 0x4,
        _CHECKERBOARD = 0x8,
        _FLIP_MODE = 0x10,
    }
    public enum D3D11_VIDEO_PROCESSOR_PROCESSOR_CAPS
    {
        _DEINTERLACE_BLEND = 0x1,
        _DEINTERLACE_BOB = 0x2,
        _DEINTERLACE_ADAPTIVE = 0x4,
        _DEINTERLACE_MOTION_COMPENSATION = 0x8,
        _INVERSE_TELECINE = 0x10,
        _FRAME_RATE_CONVERSION = 0x20,
    }
    public enum D3D11_VIDEO_PROCESSOR_ITELECINE_CAPS
    {
        _32 = 0x1,
        _22 = 0x2,
        _2224 = 0x4,
        _2332 = 0x8,
        _32322 = 0x10,
        _55 = 0x20,
        _64 = 0x40,
        _87 = 0x80,
        _222222222223 = 0x100,
        _OTHER = unchecked((int)0x80000000),
    }
    public enum D3D11_CONTENT_PROTECTION_CAPS
    {
        _SOFTWARE = 0x1,
        _HARDWARE = 0x2,
        _PROTECTION_ALWAYS_ON = 0x4,
        _PARTIAL_DECRYPTION = 0x8,
        _CONTENT_KEY = 0x10,
        _FRESHEN_SESSION_KEY = 0x20,
        _ENCRYPTED_READ_BACK = 0x40,
        _ENCRYPTED_READ_BACK_KEY = 0x80,
        _SEQUENTIAL_CTR_IV = 0x100,
        _ENCRYPT_SLICEDATA_ONLY = 0x200,
        _DECRYPTION_BLT = 0x400,
        _HARDWARE_PROTECT_UNCOMPRESSED = 0x800,
        _HARDWARE_PROTECTED_MEMORY_PAGEABLE = 0x1000,
        _HARDWARE_TEARDOWN = 0x2000,
        _HARDWARE_DRM_COMMUNICATION = 0x4000,
        _HARDWARE_DRM_COMMUNICATION_MULTI_THREADED = 0x8000,
    }
    public enum D3D11_VIDEO_PROCESSOR_NOMINAL_RANGE
    {
        _UNDEFINED = 0x0,
        _16_235 = 0x1,
        _0_255 = 0x2,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_AUTHENTICATED_QUERY_INPUT
    {
        public Guid QueryType;
        public HANDLE hChannel;
        public uint SequenceNumber;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_AUTHENTICATED_QUERY_OUTPUT
    {
        public D3D11_OMAC omac;
        public Guid QueryType;
        public HANDLE hChannel;
        public uint SequenceNumber;
        public HRESULT ReturnCode;
    }
    [StructLayout(LayoutKind.Explicit)]
    public struct D3D11_AUTHENTICATED_PROTECTION_FLAGS
    {
        [FieldOffset(0)]
        public __MIDL___MIDL_itf_d3d11_0000_0034_0001 Flags;
        [FieldOffset(0)]
        public uint Value;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct __MIDL___MIDL_itf_d3d11_0000_0034_0001
    {
        public uint ProtectionEnabled;
        public uint OverlayOrFullscreenRequired;
        public uint Reserved;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_AUTHENTICATED_QUERY_PROTECTION_OUTPUT
    {
        public D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
        public D3D11_AUTHENTICATED_PROTECTION_FLAGS ProtectionFlags;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_AUTHENTICATED_QUERY_CHANNEL_TYPE_OUTPUT
    {
        public D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
        public D3D11_AUTHENTICATED_CHANNEL_TYPE ChannelType;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_AUTHENTICATED_QUERY_DEVICE_HANDLE_OUTPUT
    {
        public D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
        public HANDLE DeviceHandle;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_INPUT
    {
        public D3D11_AUTHENTICATED_QUERY_INPUT Input;
        public HANDLE DecoderHandle;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_AUTHENTICATED_QUERY_CRYPTO_SESSION_OUTPUT
    {
        public D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
        public HANDLE DecoderHandle;
        public HANDLE CryptoSessionHandle;
        public HANDLE DeviceHandle;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_COUNT_OUTPUT
    {
        public D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
        public uint RestrictedSharedResourceProcessCount;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_INPUT
    {
        public D3D11_AUTHENTICATED_QUERY_INPUT Input;
        public uint ProcessIndex;
    }
    public enum D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE
    {
        _UNKNOWN = 0x0,
        _DWM = 0x1,
        _HANDLE = 0x2,
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_AUTHENTICATED_QUERY_RESTRICTED_SHARED_RESOURCE_PROCESS_OUTPUT
    {
        public D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
        public uint ProcessIndex;
        public D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE ProcessIdentifier;
        public HANDLE ProcessHandle;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_AUTHENTICATED_QUERY_UNRESTRICTED_PROTECTED_SHARED_RESOURCE_COUNT_OUTPUT
    {
        public D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
        public uint UnrestrictedProtectedSharedResourceCount;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_INPUT
    {
        public D3D11_AUTHENTICATED_QUERY_INPUT Input;
        public HANDLE DeviceHandle;
        public HANDLE CryptoSessionHandle;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_COUNT_OUTPUT
    {
        public D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
        public HANDLE DeviceHandle;
        public HANDLE CryptoSessionHandle;
        public uint OutputIDCount;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_INPUT
    {
        public D3D11_AUTHENTICATED_QUERY_INPUT Input;
        public HANDLE DeviceHandle;
        public HANDLE CryptoSessionHandle;
        public uint OutputIDIndex;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_AUTHENTICATED_QUERY_OUTPUT_ID_OUTPUT
    {
        public D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
        public HANDLE DeviceHandle;
        public HANDLE CryptoSessionHandle;
        public uint OutputIDIndex;
        public UINT64 OutputID;
    }
    public enum D3D11_BUS_TYPE
    {
        _TYPE_OTHER = 0x0,
        _TYPE_PCI = 0x1,
        _TYPE_PCIX = 0x2,
        _TYPE_PCIEXPRESS = 0x3,
        _TYPE_AGP = 0x4,
        _IMPL_MODIFIER_INSIDE_OF_CHIPSET = 0x10000,
        _IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_CHIP = 0x20000,
        _IMPL_MODIFIER_TRACKS_ON_MOTHER_BOARD_TO_SOCKET = 0x30000,
        _IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR = 0x40000,
        _IMPL_MODIFIER_DAUGHTER_BOARD_CONNECTOR_INSIDE_OF_NUAE = 0x50000,
        _IMPL_MODIFIER_NON_STANDARD = unchecked((int)0x80000000),
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT
    {
        public D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
        public D3D11_BUS_TYPE BusType;
        public int AccessibleInContiguousBlocks;
        public int AccessibleInNonContiguousBlocks;
    }
    public struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_OUTPUT { public D3D11_AUTHENTICATED_QUERY_ACESSIBILITY_OUTPUT Value; }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_COUNT_OUTPUT
    {
        public D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
        public uint EncryptionGuidCount;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_INPUT
    {
        public D3D11_AUTHENTICATED_QUERY_INPUT Input;
        public uint EncryptionGuidIndex;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_AUTHENTICATED_QUERY_ACCESSIBILITY_ENCRYPTION_GUID_OUTPUT
    {
        public D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
        public uint EncryptionGuidIndex;
        public Guid EncryptionGuid;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_AUTHENTICATED_QUERY_CURRENT_ACCESSIBILITY_ENCRYPTION_OUTPUT
    {
        public D3D11_AUTHENTICATED_QUERY_OUTPUT Output;
        public Guid EncryptionGuid;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_AUTHENTICATED_CONFIGURE_INPUT
    {
        public D3D11_OMAC omac;
        public Guid ConfigureType;
        public HANDLE hChannel;
        public uint SequenceNumber;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_AUTHENTICATED_CONFIGURE_INITIALIZE_INPUT
    {
        public D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
        public uint StartSequenceQuery;
        public uint StartSequenceConfigure;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_AUTHENTICATED_CONFIGURE_PROTECTION_INPUT
    {
        public D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
        public D3D11_AUTHENTICATED_PROTECTION_FLAGS Protections;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_AUTHENTICATED_CONFIGURE_CRYPTO_SESSION_INPUT
    {
        public D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
        public HANDLE DecoderHandle;
        public HANDLE CryptoSessionHandle;
        public HANDLE DeviceHandle;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_AUTHENTICATED_CONFIGURE_SHARED_RESOURCE_INPUT
    {
        public D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
        public D3D11_AUTHENTICATED_PROCESS_IDENTIFIER_TYPE ProcessType;
        public HANDLE ProcessHandle;
        public int AllowAccess;
    }
    [StructLayout(LayoutKind.Sequential)]
    public struct D3D11_AUTHENTICATED_CONFIGURE_ACCESSIBLE_ENCRYPTION_INPUT
    {
        public D3D11_AUTHENTICATED_CONFIGURE_INPUT Parameters;
        public Guid EncryptionGuid;
    }
    public enum D3D11_CREATE_DEVICE_FLAG
    {
        _SINGLETHREADED = 0x1,
        _DEBUG = 0x2,
        _SWITCH_TO_REF = 0x4,
        _PREVENT_INTERNAL_THREADING_OPTIMIZATIONS = 0x8,
        _BGRA_SUPPORT = 0x20,
        _DEBUGGABLE = 0x40,
        _PREVENT_ALTERING_LAYER_SETTINGS_FROM_REGISTRY = 0x80,
        _DISABLE_GPU_TIMEOUT = 0x100,
        _VIDEO_SUPPORT = 0x800,
    }
    public struct PFN_D3D11_CREATE_DEVICE { public IntPtr Value; }
    public struct PFN_D3D11_CREATE_DEVICE_AND_SWAP_CHAIN { public IntPtr Value; }
    public static class d3d11 {
        [DllImport("d3d11.dll")]
        public static extern HRESULT D3D11CreateDevice(
            IDXGIAdapter pAdapter,
            D3D_DRIVER_TYPE DriverType,
            HMODULE Software,
            uint Flags,
            ref D3D_FEATURE_LEVEL pFeatureLevels,
            uint FeatureLevels,
            uint SDKVersion,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<ID3D11Device>))]ref ID3D11Device ppDevice,
            ref D3D_FEATURE_LEVEL pFeatureLevel,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<ID3D11DeviceContext>))]ref ID3D11DeviceContext ppImmediateContext
        );
        [DllImport("d3d11.dll")]
        public static extern HRESULT D3D11CreateDeviceAndSwapChain(
            IDXGIAdapter pAdapter,
            D3D_DRIVER_TYPE DriverType,
            HMODULE Software,
            uint Flags,
            ref D3D_FEATURE_LEVEL pFeatureLevels,
            uint FeatureLevels,
            uint SDKVersion,
            ref DXGI_SWAP_CHAIN_DESC pSwapChainDesc,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<IDXGISwapChain>))]ref IDXGISwapChain ppSwapChain,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<ID3D11Device>))]ref ID3D11Device ppDevice,
            ref D3D_FEATURE_LEVEL pFeatureLevel,
            [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CustomMarshaler<ID3D11DeviceContext>))]ref ID3D11DeviceContext ppImmediateContext
        );
    }
}
